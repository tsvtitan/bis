DECLARE EXTERNAL FUNCTION NUMBER_TO_WORDS
    DOUBLE PRECISION,
    INTEGER,
    CSTRING(32767)
RETURNS PARAMETER 3
ENTRY_POINT 'NUMBER_TO_WORDS' MODULE_NAME 'udfibase.dll';

--

CREATE TABLE SAMPLE_VOICES
(
  SAMPLE_VOICE_ID VARCHAR(32) NOT NULL,
  SAMPLE_TEXT VARCHAR(1000) NOT NULL,
  VOICE_DATA BLOB,
  TYPE_SAMPLE INTEGER NOT NULL,
  DESCRIPTION VARCHAR(250),
  PRIORITY INTEGER,
  PRIMARY KEY (SAMPLE_VOICE_ID)
)

--

CREATE INDEX IDX_SAMPLE_VOICES_TYPE_SAMPLE
ON SAMPLE_VOICES (TYPE_SAMPLE)

--

CREATE OR ALTER VIEW S_SAMPLE_VOICES
AS
  SELECT * FROM SAMPLE_VOICES
   ORDER BY TYPE_SAMPLE, PRIORITY

--

CREATE PROCEDURE I_SAMPLE_VOICE
(
  SAMPLE_VOICE_ID VARCHAR(32),
  SAMPLE_TEXT VARCHAR(1000),
  VOICE_DATA BLOB,
  TYPE_SAMPLE INTEGER,
  DESCRIPTION VARCHAR(250),
  PRIORITY INTEGER
)
AS
BEGIN
  INSERT INTO SAMPLE_VOICES (SAMPLE_VOICE_ID,SAMPLE_TEXT,VOICE_DATA,TYPE_SAMPLE,DESCRIPTION,PRIORITY)
       VALUES (:SAMPLE_VOICE_ID,:SAMPLE_TEXT,:VOICE_DATA,:TYPE_SAMPLE,:DESCRIPTION,:PRIORITY);
END;

--

CREATE PROCEDURE U_SAMPLE_VOICE
(
  SAMPLE_VOICE_ID VARCHAR(32),
  SAMPLE_TEXT VARCHAR(1000),
  VOICE_DATA BLOB,
  TYPE_SAMPLE INTEGER,
  DESCRIPTION VARCHAR(250),
  PRIORITY INTEGER,
  OLD_SAMPLE_VOICE_ID VARCHAR(32)
)
AS
BEGIN
  UPDATE SAMPLE_VOICES
     SET SAMPLE_VOICE_ID=:SAMPLE_VOICE_ID,
         SAMPLE_TEXT=:SAMPLE_TEXT,
         VOICE_DATA=:VOICE_DATA,
         TYPE_SAMPLE=:TYPE_SAMPLE,
         DESCRIPTION=:DESCRIPTION,
         PRIORITY=:PRIORITY
   WHERE SAMPLE_VOICE_ID=:OLD_SAMPLE_VOICE_ID;
END;

--

CREATE PROCEDURE D_SAMPLE_VOICE
(
  OLD_SAMPLE_VOICE_ID VARCHAR(32)
)
AS
BEGIN
  DELETE FROM SAMPLE_VOICES
        WHERE SAMPLE_VOICE_ID=:OLD_SAMPLE_VOICE_ID;
END;

--

CREATE GLOBAL TEMPORARY TABLE TMP_SAMPLE_VOICES
(
  POS INTEGER NOT NULL,
  SAMPLE_TEXT VARCHAR(1000),
  VOICE_DATA BLOB,
  TYPE_SAMPLE INTEGER,
  USED INTEGER,
  PRIMARY KEY (POS)
) ON COMMIT DELETE ROWS

--

CREATE INDEX IDX_SAMPLE_VOICES_USED
ON TMP_SAMPLE_VOICES (USED)

--


CREATE OR ALTER PROCEDURE GET_SAMPLE_VOICES
(
  IN_TEXT VARCHAR(1000)
)
RETURNS
(
  SAMPLE_TEXT VARCHAR(1000),
  VOICE_DATA BLOB,
  TYPE_SAMPLE INTEGER
)
AS
DECLARE L INTEGER;
DECLARE LORIGIN INTEGER;
DECLARE POS INTEGER;
DECLARE NOT_USED_COUNT INTEGER;
DECLARE S1 VARCHAR(1000);
DECLARE S2 VARCHAR(1000);
DECLARE USED_EXISTS INTEGER;
BEGIN

  DELETE FROM TMP_SAMPLE_VOICES;

  L=1;
  LORIGIN=STRING_LENGTH(IN_TEXT);
  WHILE (L<=LORIGIN) DO BEGIN
    INSERT INTO TMP_SAMPLE_VOICES (POS,SAMPLE_TEXT,VOICE_DATA,TYPE_SAMPLE,USED)
                           VALUES (:L,SUB_STRING(:IN_TEXT,:L,1),NULL,0,0);
    L=L+1;
  END

  L=1;
  FOR SELECT SAMPLE_TEXT, VOICE_DATA, TYPE_SAMPLE
        FROM SAMPLE_VOICES
       WHERE POSITION(UPPER(SAMPLE_TEXT),UPPER(:IN_TEXT))>0
       ORDER BY TYPE_SAMPLE DESC, PRIORITY
        INTO :SAMPLE_TEXT, :VOICE_DATA, :TYPE_SAMPLE DO BEGIN

    SELECT COUNT(*)
      FROM TMP_SAMPLE_VOICES
     WHERE USED=0
      INTO :NOT_USED_COUNT;

    IF (NOT_USED_COUNT>0) THEN BEGIN

      S1=UPPER(SAMPLE_TEXT);
      S2=UPPER(IN_TEXT);
      L=STRING_LENGTH(S1);
      POS=1;

      WHILE (POS>0) DO BEGIN
        POS=POSITION(S1,S2,POS);
        IF (POS>0) THEN BEGIN

          SELECT USED
            FROM TMP_SAMPLE_VOICES
           WHERE POS=:POS
            INTO :USED_EXISTS;

          IF (USED_EXISTS=0) THEN BEGIN

            UPDATE TMP_SAMPLE_VOICES
               SET SAMPLE_TEXT=:SAMPLE_TEXT,
                   VOICE_DATA=:VOICE_DATA,
                   TYPE_SAMPLE=:TYPE_SAMPLE,
                   USED=1
             WHERE POS=:POS;

            UPDATE TMP_SAMPLE_VOICES
               SET USED=2
             WHERE POS>:POS
               AND POS<=(:POS+:L-1);

          END

          POS=POS+L;

        END
      END

    END ELSE
      BREAK;

  END

  FOR SELECT SAMPLE_TEXT, VOICE_DATA, TYPE_SAMPLE
        FROM TMP_SAMPLE_VOICES
       WHERE USED=1
        INTO :SAMPLE_TEXT, :VOICE_DATA, :TYPE_SAMPLE DO BEGIN
    SUSPEND;
  END
END;

--

ALTER TABLE OUT_MESSAGES
ADD MESSAGE_ID VARCHAR(100)

--

ALTER TABLE OUT_MESSAGES
ADD SOURCE VARCHAR(100)

--

CREATE OR ALTER PROCEDURE UNLOCK_OUT_MESSAGE
(
  OUT_MESSAGE_ID VARCHAR(32),
  SENT INTEGER,
  DATE_OUT TIMESTAMP,
  MESSAGE_ID VARCHAR(100)
)
AS
BEGIN
  IF (SENT IS NULL) THEN
    SENT=0;
  IF (SENT<>0) THEN BEGIN

    IF (DATE_OUT IS NULL) THEN
      DATE_OUT=CURRENT_TIMESTAMP;

    UPDATE OUT_MESSAGES
       SET DATE_OUT=:DATE_OUT,
           LOCKED=NULL,
           MESSAGE_ID=:MESSAGE_ID
     WHERE OUT_MESSAGE_ID=:OUT_MESSAGE_ID;

  END ELSE BEGIN

    UPDATE OUT_MESSAGES
       SET LOCKED=NULL,
           CHANNEL=NULL,
           OPERATOR_ID=NULL,
           MESSAGE_ID=NULL
     WHERE OUT_MESSAGE_ID=:OUT_MESSAGE_ID;

  END

END

--

CREATE OR ALTER VIEW S_OUT_MESSAGES
AS
SELECT OM.*,
       A1.USER_NAME AS CREATOR_NAME,
       A2.USER_NAME AS RECIPIENT_USER_NAME,
       A2.SURNAME AS RECIPIENT_SURNAME,
       A2.NAME AS RECIPIENT_NAME,
       A2.PATRONYMIC AS RECIPIENT_PATRONYMIC,
       A2.PHONE AS RECIPIENT_PHONE,
       A2.EMAIL AS RECIPIENT_EMAIL,
       F.SMALL_NAME AS FIRM_SMALL_NAME,
       O.NAME AS OPERATOR_NAME
  FROM OUT_MESSAGES OM
  JOIN ACCOUNTS A1 ON A1.ACCOUNT_ID=OM.CREATOR_ID
  LEFT JOIN ACCOUNTS A2 ON A2.ACCOUNT_ID=OM.RECIPIENT_ID
  LEFT JOIN FIRMS F ON F.FIRM_ID=OM.FIRM_ID
  LEFT JOIN OPERATORS O ON O.OPERATOR_ID=OM.OPERATOR_ID

--

CREATE OR ALTER PROCEDURE I_OUT_MESSAGE
(
    OUT_MESSAGE_ID VARCHAR(32),
    CREATOR_ID VARCHAR(32),
    RECIPIENT_ID VARCHAR(32),
    DATE_CREATE TIMESTAMP,
    TEXT_OUT VARCHAR(4000),
    DATE_OUT TIMESTAMP,
    TYPE_MESSAGE INTEGER,
    CONTACT VARCHAR(100),
    DESCRIPTION VARCHAR(250),
    PRIORITY INTEGER,
    LOCKED VARCHAR(32),
    DATE_BEGIN TIMESTAMP,
    DATE_END TIMESTAMP,
    ORDER_ID VARCHAR(32),
    CHANNEL VARCHAR(100),
    DELIVERY INTEGER,
    DATE_DELIVERY TIMESTAMP,
    FLASH INTEGER,
    DEST_PORT INTEGER,
    FIRM_ID VARCHAR(32),
    OPERATOR_ID VARCHAR(32),
    MESSAGE_ID VARCHAR(100),
    SOURCE VARCHAR(100)
)
AS
BEGIN
  INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                            TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,
                            PRIORITY,DATE_BEGIN,DATE_END,ORDER_ID,CHANNEL,
                            DELIVERY,DATE_DELIVERY,FLASH,DEST_PORT,FIRM_ID,OPERATOR_ID,
                            MESSAGE_ID,SOURCE)
       VALUES (:OUT_MESSAGE_ID,:CREATOR_ID,:RECIPIENT_ID,:DATE_CREATE,
               :TEXT_OUT,:DATE_OUT,:TYPE_MESSAGE,:CONTACT,:DESCRIPTION,
               :PRIORITY,:DATE_BEGIN,:DATE_END,:ORDER_ID,:CHANNEL,
               :DELIVERY,:DATE_DELIVERY,:FLASH,:DEST_PORT,:FIRM_ID,:OPERATOR_ID,
               :MESSAGE_ID,:SOURCE);
END

--

CREATE OR ALTER PROCEDURE U_OUT_MESSAGE
(
    OUT_MESSAGE_ID VARCHAR(32),
    CREATOR_ID VARCHAR(32),
    RECIPIENT_ID VARCHAR(32),
    DATE_CREATE TIMESTAMP,
    TEXT_OUT VARCHAR(4000),
    DATE_OUT TIMESTAMP,
    TYPE_MESSAGE INTEGER,
    CONTACT VARCHAR(100),
    DESCRIPTION VARCHAR(250),
    PRIORITY INTEGER,
    LOCKED VARCHAR(32),
    DATE_BEGIN TIMESTAMP,
    DATE_END TIMESTAMP,
    ORDER_ID VARCHAR(32),
    CHANNEL VARCHAR(100),
    DELIVERY INTEGER,
    DATE_DELIVERY TIMESTAMP,
    FLASH INTEGER,
    DEST_PORT INTEGER,
    FIRM_ID VARCHAR(32),
    OPERATOR_ID VARCHAR(32),
    MESSAGE_ID VARCHAR(100),
    SOURCE VARCHAR(100),
    OLD_OUT_MESSAGE_ID VARCHAR(32)
)
AS
BEGIN
  UPDATE OUT_MESSAGES
     SET OUT_MESSAGE_ID=:OUT_MESSAGE_ID,
         CREATOR_ID=:CREATOR_ID,
         RECIPIENT_ID=:RECIPIENT_ID,
         DATE_CREATE=:DATE_CREATE,
         TEXT_OUT=:TEXT_OUT,
         DATE_OUT=:DATE_OUT,
         TYPE_MESSAGE=:TYPE_MESSAGE,
         CONTACT=:CONTACT,
         DESCRIPTION=:DESCRIPTION,
         PRIORITY=:PRIORITY,
         LOCKED=:LOCKED,
         DATE_BEGIN=:DATE_BEGIN,
         DATE_END=:DATE_END,
         ORDER_ID=:ORDER_ID,
         CHANNEL=:CHANNEL,
         DELIVERY=:DELIVERY,
         DATE_DELIVERY=:DATE_DELIVERY,
         FLASH=:FLASH,
         DEST_PORT=:DEST_PORT,
         FIRM_ID=:FIRM_ID,
         OPERATOR_ID=:OPERATOR_ID,
         MESSAGE_ID=:MESSAGE_ID,
         SOURCE=:SOURCE
   WHERE OUT_MESSAGE_ID=:OLD_OUT_MESSAGE_ID;
END

--

CREATE OR ALTER VIEW S_DRIVER_OUT_MESSAGES
AS
SELECT OM.*,
       A1.USER_NAME AS CREATOR_NAME,
       A2.USER_NAME AS RECIPIENT_USER_NAME,
       A2.SURNAME AS RECIPIENT_SURNAME,
       A2.NAME AS RECIPIENT_NAME,
       A2.PATRONYMIC AS RECIPIENT_PATRONYMIC,
       A2.PHONE AS RECIPIENT_PHONE,
       A2.EMAIL AS RECIPIENT_EMAIL,
       CR.STATE_NUM AS CAR_STATE_NUM,
       CR.BRAND AS CAR_BRAND,
       CR.COLOR AS CAR_COLOR,
       CR.CALLSIGN AS CAR_CALLSIGN,
       F.SMALL_NAME AS FIRM_SMALL_NAME,
       O.NAME AS OPERATOR_NAME
  FROM OUT_MESSAGES OM
  JOIN DRIVERS D ON D.DRIVER_ID=OM.RECIPIENT_ID
  JOIN CARS CR ON CR.CAR_ID=D.CAR_ID
  JOIN ACCOUNTS A1 ON A1.ACCOUNT_ID=OM.CREATOR_ID
  LEFT JOIN ACCOUNTS A2 ON A2.ACCOUNT_ID=OM.RECIPIENT_ID
  LEFT JOIN FIRMS F ON F.FIRM_ID=OM.FIRM_ID
  LEFT JOIN OPERATORS O ON O.OPERATOR_ID=OM.OPERATOR_ID

--

CREATE INDEX IDX_OUT_MESSAGES_MESSAGE_ID ON OUT_MESSAGES (MESSAGE_ID);

--

CREATE OR ALTER PROCEDURE OUT_MESSAGE_DELIVERY
(
  MESSAGE_ID VARCHAR(100),
  CONTACT VARCHAR(100),
  DATE_DELIVERY TIMESTAMP
)
AS
BEGIN

  UPDATE OUT_MESSAGES
     SET DATE_DELIVERY=:DATE_DELIVERY
   WHERE ((MESSAGE_ID=:MESSAGE_ID AND :MESSAGE_ID IS NOT NULL) OR
          (MESSAGE_ID IS NULL AND :MESSAGE_ID IS NULL))
     AND CONTACT=:CONTACT
     AND DATE_OUT IS NOT NULL
     AND DATE_DELIVERY IS NULL;

END

--

CREATE OR ALTER PROCEDURE I_CAR_TYPE
(
    CAR_TYPE_ID VARCHAR(32),
    NAME VARCHAR(100),
    DESCRIPTION VARCHAR(250),
    FONT_COLOR INTEGER,
    BRUSH_COLOR INTEGER,
    RATIO NUMERIC(4,2),
    COST_IDLE NUMERIC(15,2),
    PRIORITY INTEGER,
    VISIBLE INTEGER
)
AS
BEGIN
  INSERT INTO CAR_TYPES (CAR_TYPE_ID,NAME,DESCRIPTION,FONT_COLOR,BRUSH_COLOR,
                         RATIO,COST_IDLE,PRIORITY,VISIBLE)
       VALUES (:CAR_TYPE_ID,:NAME,:DESCRIPTION,:FONT_COLOR,:BRUSH_COLOR,
               :RATIO,:COST_IDLE,:PRIORITY,:VISIBLE);
END

--




