CREATE TABLE ARTICLES
(
  ARTICLE_ID VARCHAR(32) NOT NULL,
  ACCOUNT_ID VARCHAR(32) NOT NULL,
  SUBJECT_ID VARCHAR(32) NOT NULL,
  DATE_CREATE DATETIME NOT NULL,
  SECTION INTEGER NOT NULL,
  DATE_ARTICLE DATETIME NOT NULL,
  TITLE VARCHAR(250) NOT NULL,
  EXCERPT VARCHAR(1000) NOT NULL,
  ARTICLE_TEXT LONGBLOB,
  PICTURE LONGBLOB,
  LINK VARCHAR(250),
  PRIMARY KEY (ARTICLE_ID),
  FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNTS (ACCOUNT_ID),
  FOREIGN KEY (SUBJECT_ID) REFERENCES SUBJECTS (SUBJECT_ID)
)

--

CREATE VIEW S_ARTICLES
AS
   SELECT A.*, 
          A1.USER_NAME,
          A1.SURNAME AS ACCOUNT_SURNAME,
          A1.NAME AS ACCOUNT_NAME,
          A1.PATRONYMIC AS ACCOUNT_PATRONYMIC,
          S.NAME AS SUBJECT_NAME
     FROM ARTICLES A
     JOIN ACCOUNTS A1 ON A1.ACCOUNT_ID=A.ACCOUNT_ID
     JOIN SUBJECTS S ON S.SUBJECT_ID=A.SUBJECT_ID

--

CREATE PROCEDURE I_ARTICLE
(
  IN ARTICLE_ID VARCHAR(32),
  IN ACCOUNT_ID VARCHAR(32),
  IN SUBJECT_ID VARCHAR(32),
  IN DATE_CREATE DATETIME,
  IN SECTION INTEGER,
  IN DATE_ARTICLE DATETIME,
  IN TITLE VARCHAR(250),
  IN EXCERPT VARCHAR(1000),
  IN ARTICLE_TEXT LONGBLOB,
  IN PICTURE LONGBLOB,
  IN LINK VARCHAR(250)
)
BEGIN
  INSERT INTO ARTICLES (ARTICLE_ID,ACCOUNT_ID,SUBJECT_ID,DATE_CREATE,SECTION,
                        DATE_ARTICLE,TITLE,EXCERPT,ARTICLE_TEXT,PICTURE,LINK)
       VALUES (ARTICLE_ID,ACCOUNT_ID,SUBJECT_ID,DATE_CREATE,SECTION,
               DATE_ARTICLE,TITLE,EXCERPT,ARTICLE_TEXT,PICTURE,LINK);
END;

--

CREATE PROCEDURE U_ARTICLE
(
  IN ARTICLE_ID VARCHAR(32),
  IN ACCOUNT_ID VARCHAR(32),
  IN SUBJECT_ID VARCHAR(32),
  IN DATE_CREATE DATETIME,
  IN SECTION INTEGER,
  IN DATE_ARTICLE DATETIME,
  IN TITLE VARCHAR(250),
  IN EXCERPT VARCHAR(1000),
  IN ARTICLE_TEXT LONGBLOB,
  IN PICTURE LONGBLOB,
  IN LINK VARCHAR(250),
  IN OLD_ARTICLE_ID VARCHAR(32)
)
BEGIN
 UPDATE ARTICLES A
    SET A.ARTICLE_ID=ARTICLE_ID,
        A.ACCOUNT_ID=ACCOUNT_ID,
        A.SUBJECT_ID=SUBJECT_ID,
        A.DATE_CREATE=DATE_CREATE,
        A.SECTION=SECTION,
        A.DATE_ARTICLE=DATE_ARTICLE,
        A.TITLE=TITLE,
        A.EXCERPT=EXCERPT,
        A.ARTICLE_TEXT=ARTICLE_TEXT,
        A.PICTURE=PICTURE,
        A.LINK=LINK
  WHERE A.ARTICLE_ID=OLD_ARTICLE_ID;
END;

--

CREATE PROCEDURE D_ARTICLE
(
  IN OLD_ARTICLE_ID VARCHAR(32)
)
BEGIN
  DELETE FROM ARTICLES
        WHERE ARTICLE_ID=OLD_ARTICLE_ID;
END;

--

CREATE TABLE COMMENTS
(
  COMMENT_ID VARCHAR(32) NOT NULL,
  ACCOUNT_ID VARCHAR(32) NOT NULL,
  ARTICLE_ID VARCHAR(32) NOT NULL,
  PARENT_ID VARCHAR(32),
  DATE_COMMENT DATETIME NOT NULL,
  TITLE VARCHAR(250) NOT NULL,
  COMMENT_TEXT LONGBLOB NOT NULL,
  VISIBLE INTEGER NOT NULL,
  LEVEL INTEGER NOT NULL,
  PRIMARY KEY (COMMENT_ID),
  FOREIGN KEY (PARENT_ID) REFERENCES COMMENTS (COMMENT_ID),
  FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNTS (ACCOUNT_ID),
  FOREIGN KEY (ARTICLE_ID) REFERENCES ARTICLES (ARTICLE_ID)
)

--

CREATE VIEW S_COMMENTS
AS
   SELECT C.*, 
          C1.TITLE AS PARENT_TITLE,
          A.USER_NAME,
          A.SURNAME AS ACCOUNT_SURNAME,
          A.NAME AS ACCOUNT_NAME,
          A.PATRONYMIC AS ACCOUNT_PATRONYMIC,
          A1.TITLE AS ARTICLE_TITLE,
          A1.DATE_ARTICLE 
     FROM COMMENTS C
     JOIN ACCOUNTS A ON A.ACCOUNT_ID=C.ACCOUNT_ID
     JOIN ARTICLES A1 ON A1.ARTICLE_ID=C.ARTICLE_ID
     LEFT JOIN COMMENTS C1 ON C1.COMMENT_ID=C.PARENT_ID

--

CREATE PROCEDURE I_COMMENT
(
  IN COMMENT_ID VARCHAR(32),
  IN ACCOUNT_ID VARCHAR(32),
  IN ARTICLE_ID VARCHAR(32),
  IN PARENT_ID VARCHAR(32),
  IN DATE_COMMENT DATETIME,
  IN TITLE VARCHAR(250),
  IN COMMENT_TEXT LONGBLOB,
  IN VISIBLE INTEGER
)
BEGIN
  DECLARE LEVEL INTEGER;
  IF (PARENT_ID IS NULL) THEN
    SET LEVEL=1;
  ELSE
    SELECT C.LEVEL+1 INTO LEVEL 
      FROM COMMENTS C
     WHERE C.COMMENT_ID=PARENT_ID;
  END IF;
  INSERT INTO COMMENTS (COMMENT_ID,ACCOUNT_ID,ARTICLE_ID,PARENT_ID,DATE_COMMENT,
                        TITLE,COMMENT_TEXT,VISIBLE,LEVEL)
       VALUES (COMMENT_ID,ACCOUNT_ID,ARTICLE_ID,PARENT_ID,DATE_COMMENT,
               TITLE,COMMENT_TEXT,VISIBLE,LEVEL);
END;

--

CREATE PROCEDURE R_COMMENT_LEVELS
(
  IN PARENT_ID VARCHAR(32),
	IN LEVEL INTEGER
)
BEGIN
  DECLARE COMMENT_ID VARCHAR(32);
  DECLARE DONE INTEGER DEFAULT 0;
  DECLARE C1 CURSOR FOR SELECT C.COMMENT_ID
                          FROM COMMENTS C WHERE C.PARENT_ID=PARENT_ID;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET DONE=1;
  OPEN C1;
  FETCH C1 INTO COMMENT_ID;
  WHILE NOT DONE DO
  
    UPDATE COMMENT_IDS C
       SET C.LEVEL=LEVEL+1
     WHERE C.COMMENT_ID=COMMENT_ID;
     
    CALL R_COMMENT_LEVELS(COMMENT_ID,LEVEL+1);
    
    FETCH C1 INTO COMMENT_ID;
  END WHILE;
  CLOSE C1;	
END;

--

CREATE PROCEDURE U_COMMENT
(
  IN COMMENT_ID VARCHAR(32),
  IN ACCOUNT_ID VARCHAR(32),
  IN ARTICLE_ID VARCHAR(32),
  IN PARENT_ID VARCHAR(32),
  IN DATE_COMMENT DATETIME,
  IN TITLE VARCHAR(250),
  IN COMMENT_TEXT LONGBLOB,
  IN VISIBLE INTEGER,
  IN OLD_COMMENT_ID VARCHAR(32)
)
BEGIN
 DECLARE LEVEL INTEGER;
 IF (PARENT_ID IS NULL) THEN
   SET LEVEL=1;
 ELSE
   SELECT C.LEVEL+1 INTO LEVEL 
     FROM COMMENTS C
    WHERE C.COMMENT_ID=PARENT_ID;
 END IF;

 UPDATE COMMENTS C
    SET C.COMMENT_ID=COMMENT_ID,
        C.ACCOUNT_ID=ACCOUNT_ID,
        C.ARTICLE_ID=ARTICLE_ID,
        C.PARENT_ID=PARENT_ID,
        C.DATE_COMMENT=DATE_COMMENT,
        C.TITLE=TITLE,
        C.COMMENT_TEXT=COMMENT_TEXT,
        C.VISIBLE=VISIBLE,
        C.LEVEL=LEVEL
  WHERE C.COMMENT_ID=OLD_COMMENT_ID;
	
  CALL R_COMMENT_LEVELS(COMMENT_ID,LEVEL);
END;

--

CREATE PROCEDURE D_COMMENT
(
  IN OLD_COMMENT_ID VARCHAR(32)
)
BEGIN
  DELETE FROM COMMENTS
        WHERE COMMENT_ID=OLD_COMMENT_ID;
END;

--



