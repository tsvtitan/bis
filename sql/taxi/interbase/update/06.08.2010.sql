ALTER TABLE OUT_MESSAGES
ADD DEST_PORT INTEGER

--

DROP VIEW S_OUT_MESSAGES

--

CREATE VIEW S_OUT_MESSAGES
(
    OUT_MESSAGE_ID,
    CREATOR_ID,
    RECIPIENT_ID,
    DATE_CREATE,
    TEXT_OUT,
    DATE_OUT,
    TYPE_MESSAGE,
    CONTACT,
    DESCRIPTION,
    PRIORITY,
    LOCKED,
    DATE_BEGIN,
    DATE_END,
    ORDER_ID,
    CHANNEL,
    DELIVERY,
    DATE_DELIVERY,
    FLASH,
    DEST_PORT,
    CREATOR_NAME,
    RECIPIENT_USER_NAME,
    RECIPIENT_SURNAME,
    RECIPIENT_NAME,
    RECIPIENT_PATRONYMIC,
    RECIPIENT_PHONE,
    RECIPIENT_EMAIL)
AS
SELECT OM.*,
       A1.USER_NAME AS CREATOR_NAME,
       A2.USER_NAME AS RECIPIENT_USER_NAME,
       A2.SURNAME AS RECIPIENT_SURNAME,
       A2.NAME AS RECIPIENT_NAME,
       A2.PATRONYMIC AS RECIPIENT_PATRONYMIC,
       A2.PHONE AS RECIPIENT_PHONE,
       A2.EMAIL AS RECIPIENT_EMAIL
  FROM OUT_MESSAGES OM
  JOIN ACCOUNTS A1 ON A1.ACCOUNT_ID=OM.CREATOR_ID
  LEFT JOIN ACCOUNTS A2 ON A2.ACCOUNT_ID=OM.RECIPIENT_ID

--

DROP VIEW S_DRIVER_OUT_MESSAGES

--

CREATE VIEW S_DRIVER_OUT_MESSAGES
(
    OUT_MESSAGE_ID,
    CREATOR_ID,
    RECIPIENT_ID,
    DATE_CREATE,
    TEXT_OUT,
    DATE_OUT,
    TYPE_MESSAGE,
    CONTACT,
    DESCRIPTION,
    PRIORITY,
    LOCKED,
    DATE_BEGIN,
    DATE_END,
    ORDER_ID,
    CHANNEL,
    DELIVERY,
    DATE_DELIVERY,
    FLASH,
    DEST_PORT,
    CREATOR_NAME,
    RECIPIENT_USER_NAME,
    RECIPIENT_SURNAME,
    RECIPIENT_NAME,
    RECIPIENT_PATRONYMIC,
    RECIPIENT_PHONE,
    RECIPIENT_EMAIL,
    CAR_STATE_NUM,
    CAR_BRAND,
    CAR_COLOR,
    CAR_CALLSIGN
)
AS
SELECT OM.*,
       A1.USER_NAME AS CREATOR_NAME,
       A2.USER_NAME AS RECIPIENT_USER_NAME,
       A2.SURNAME AS RECIPIENT_SURNAME,
       A2.NAME AS RECIPIENT_NAME,
       A2.PATRONYMIC AS RECIPIENT_PATRONYMIC,
       A2.PHONE AS RECIPIENT_PHONE,
       A2.EMAIL AS RECIPIENT_EMAIL,
       CR.STATE_NUM AS CAR_STATE_NUM,
       CR.BRAND AS CAR_BRAND,
       CR.COLOR AS CAR_COLOR,
       CR.CALLSIGN AS CAR_CALLSIGN
  FROM OUT_MESSAGES OM
  JOIN DRIVERS D ON D.DRIVER_ID=OM.RECIPIENT_ID
  JOIN CARS CR ON CR.CAR_ID=D.CAR_ID
  JOIN ACCOUNTS A1 ON A1.ACCOUNT_ID=OM.CREATOR_ID
  LEFT JOIN ACCOUNTS A2 ON A2.ACCOUNT_ID=OM.RECIPIENT_ID

--

CREATE OR ALTER PROCEDURE I_OUT_MESSAGE
(
  OUT_MESSAGE_ID VARCHAR(32),
  CREATOR_ID VARCHAR(32),
  RECIPIENT_ID VARCHAR(32),
  DATE_CREATE TIMESTAMP,
  TEXT_OUT VARCHAR(4000),
  DATE_OUT TIMESTAMP,
  TYPE_MESSAGE INTEGER,
  CONTACT VARCHAR(100),
  DESCRIPTION VARCHAR(250),
  PRIORITY INTEGER,
  LOCKED VARCHAR(32),
  DATE_BEGIN TIMESTAMP,
  DATE_END TIMESTAMP,
  ORDER_ID VARCHAR(32),
  CHANNEL VARCHAR(100),
  DELIVERY INTEGER,
  DATE_DELIVERY TIMESTAMP,
  FLASH INTEGER,
  DEST_PORT INTEGER
)
AS
BEGIN
  INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                      TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,
                                      PRIORITY,DATE_BEGIN,DATE_END,ORDER_ID,CHANNEL,
                                      DELIVERY,DATE_DELIVERY,FLASH,DEST_PORT)
       VALUES (:OUT_MESSAGE_ID,:CREATOR_ID,:RECIPIENT_ID,:DATE_CREATE,
               :TEXT_OUT,:DATE_OUT,:TYPE_MESSAGE,:CONTACT,:DESCRIPTION,
               :PRIORITY,:DATE_BEGIN,:DATE_END,:ORDER_ID,:CHANNEL,
               :DELIVERY,:DATE_DELIVERY,:FLASH,:DEST_PORT);
END

--

CREATE OR ALTER PROCEDURE U_OUT_MESSAGE
(
  OUT_MESSAGE_ID VARCHAR(32),
  CREATOR_ID VARCHAR(32),
  RECIPIENT_ID VARCHAR(32),
  DATE_CREATE TIMESTAMP,
  TEXT_OUT VARCHAR(4000),
  DATE_OUT TIMESTAMP,
  TYPE_MESSAGE INTEGER,
  CONTACT VARCHAR(100),
  DESCRIPTION VARCHAR(250),
  PRIORITY INTEGER,
  LOCKED VARCHAR(32),
  DATE_BEGIN TIMESTAMP,
  DATE_END TIMESTAMP,
  ORDER_ID VARCHAR(32),
  CHANNEL VARCHAR(100),
  DELIVERY INTEGER,
  DATE_DELIVERY TIMESTAMP,
  FLASH INTEGER,
  DEST_PORT INTEGER,
  OLD_OUT_MESSAGE_ID VARCHAR(32)
)
AS
BEGIN
  UPDATE OUT_MESSAGES
     SET OUT_MESSAGE_ID=:OUT_MESSAGE_ID,
         CREATOR_ID=:CREATOR_ID,
         RECIPIENT_ID=:RECIPIENT_ID,
         DATE_CREATE=:DATE_CREATE,
         TEXT_OUT=:TEXT_OUT,
         DATE_OUT=:DATE_OUT,
         TYPE_MESSAGE=:TYPE_MESSAGE,
         CONTACT=:CONTACT,
         DESCRIPTION=:DESCRIPTION,
         PRIORITY=:PRIORITY,
         LOCKED=:LOCKED,
         DATE_BEGIN=:DATE_BEGIN,
         DATE_END=:DATE_END,
         ORDER_ID=:ORDER_ID,
         CHANNEL=:CHANNEL,
         DELIVERY=:DELIVERY,
         DATE_DELIVERY=:DATE_DELIVERY,
         FLASH=:FLASH,
         DEST_PORT=:DEST_PORT
   WHERE OUT_MESSAGE_ID=:OLD_OUT_MESSAGE_ID;
END

--

CREATE OR ALTER PROCEDURE GET_TYPE_MESSAGE (
  ACCOUNT_ID VARCHAR(32),
  DEFAULT_TYPE INTEGER) 
RETURNS (
  TYPE_MESSAGE INTEGER,
  DEST_PORT INTEGER)
AS
DECLARE CNT INTEGER;
DECLARE OUTGOING INTEGER;
BEGIN
  TYPE_MESSAGE=DEFAULT_TYPE;
  OUTGOING=NULL;
  DEST_PORT=NULL;

  SELECT COUNT(*)
    FROM DRIVERS
   WHERE DRIVER_ID=:ACCOUNT_ID
    INTO :CNT;

  IF (CNT>0) THEN BEGIN

    SELECT M.OUTGOING
      FROM DRIVERS D
      LEFT JOIN METHODS M ON M.METHOD_ID=D.METHOD_ID
     WHERE D.DRIVER_ID=:ACCOUNT_ID
      INTO :OUTGOING;

  END ELSE BEGIN

    SELECT COUNT(*)
      FROM CLIENTS
     WHERE CLIENT_ID=:ACCOUNT_ID
      INTO :CNT;

    IF (CNT>0) THEN BEGIN

    END

  END

  IF (OUTGOING IS NOT NULL) THEN BEGIN

    IF (DEFAULT_TYPE IS NOT NULL) THEN BEGIN

      IF (OUTGOING=0) THEN
        TYPE_MESSAGE=NULL;

      IF (OUTGOING=1) THEN
        TYPE_MESSAGE=DEFAULT_TYPE;

    END ELSE BEGIN

      IF (OUTGOING<>0) THEN
        TYPE_MESSAGE=0;

    END

    IF (TYPE_MESSAGE=0) THEN
      DEST_PORT=55555;

  END ELSE BEGIN

    IF (DEFAULT_TYPE IS NULL) THEN
      TYPE_MESSAGE=0;

  END

END

--

CREATE OR ALTER PROCEDURE PR_SELECT_DRIVER (
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE DRIVER_ID VARCHAR(32);
DECLARE CAR_ID VARCHAR(32);
DECLARE CNT INTEGER;
DECLARE S VARCHAR(1000);
DECLARE ADDRESS VARCHAR(1000);
DECLARE PREFIX VARCHAR(10);
DECLARE STREET VARCHAR(100);
DECLARE HOUSE VARCHAR(10);
DECLARE FLAT VARCHAR(10);
DECLARE PORCH VARCHAR(10);
DECLARE LOCALITY VARCHAR(100);
DECLARE PHONE VARCHAR(100);
DECLARE DATE_ACCEPT TIMESTAMP;
DECLARE DATE_ARRIVAL TIMESTAMP;
DECLARE DATE_BEGIN TIMESTAMP;
DECLARE BEFORE_PERIOD INTEGER;
DECLARE ACTION_ID VARCHAR(32);
DECLARE D TIMESTAMP;
DECLARE DESCRIPTION VARCHAR(250);
DECLARE TYPE_MESSAGE INTEGER;
DECLARE DEST_PORT INTEGER;
BEGIN

  SELECT O.DRIVER_ID,
         S.PREFIX, S.NAME, O.HOUSE, O.FLAT, O.PORCH, L.NAME,
         O.DATE_ACCEPT, O.DATE_ARRIVAL, O.BEFORE_PERIOD,
         O.ACTION_ID, O.DATE_BEGIN, O.DESCRIPTION
    FROM ORDERS O
    JOIN STREETS S ON S.STREET_ID=O.STREET_ID
    JOIN LOCALITIES L ON L.LOCALITY_ID=S.LOCALITY_ID
   WHERE O.ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID,
         :PREFIX, :STREET, :HOUSE, :FLAT, :PORCH, :LOCALITY,
         :DATE_ACCEPT, :DATE_ARRIVAL, :BEFORE_PERIOD,
         :ACTION_ID, :DATE_BEGIN, :DESCRIPTION;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    CNT=0;

    SELECT COUNT(*)
      FROM OUT_MESSAGES
     WHERE RECIPIENT_ID=:DRIVER_ID
       AND ORDER_ID=:ORDER_ID
       AND DESCRIPTION=:ACTION_ID
       AND TYPE_MESSAGE=0
       AND DATE_OUT IS NULL
       AND DATE_CREATE>=:DATE_BEGIN
      INTO CNT;

    IF (CNT=0) THEN BEGIN

      SELECT D.CAR_ID, A.PHONE
        FROM DRIVERS D
        JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
       WHERE D.DRIVER_ID=:DRIVER_ID
        INTO :CAR_ID, :PHONE;

      D=CURRENT_TIMESTAMP;

      UPDATE ORDERS
         SET DRIVER_ID=:DRIVER_ID,
             CAR_ID=:CAR_ID,
             DATE_END=:D,
             WHO_PROCESS_ID=:ACCOUNT_ID
       WHERE ORDER_ID=:ORDER_ID;

      ADDRESS='';

      IF (PREFIX IS NOT NULL) THEN
        ADDRESS=PREFIX||' ';

      ADDRESS=ADDRESS||STREET||' '||HOUSE;

      IF (FLAT IS NOT NULL) THEN
        ADDRESS=ADDRESS||'-'||FLAT;

      IF (PORCH IS NOT NULL) THEN
        ADDRESS=ADDRESS||' п.'||PORCH;

      IF ((LOCALITY IS NOT NULL) AND (LOCALITY<>'Красноярск')) THEN
        ADDRESS=ADDRESS||', '||LOCALITY;

      IF (DATE_ACCEPT<DATE_ARRIVAL) THEN BEGIN

        IF ((DATE_ACCEPT+(BEFORE_PERIOD*(1e0/24/60)))<DATE_ARRIVAL) THEN BEGIN

          SELECT CONST_VALUE FROM GET_CONST_VALUE('2A773F389AD895B94010252F1DC6D3CC') INTO :S;

        END ELSE BEGIN

          SELECT CONST_VALUE FROM GET_CONST_VALUE('051BE1C8C28F9DB34EAA8DD46E0DA3B4') INTO :S;

        END

      END ELSE BEGIN

        SELECT CONST_VALUE FROM GET_CONST_VALUE('CD5055A23D04B51641F3211814253430') INTO :S;

      END

      EXECUTE PROCEDURE GET_TYPE_MESSAGE(DRIVER_ID,NULL)
       RETURNING_VALUES TYPE_MESSAGE, DEST_PORT;

      IF ((S IS NOT NULL) AND (TYPE_MESSAGE IS NOT NULL)) THEN BEGIN

        S=REPLACE_STRING(S,'%TIME',FORMAT_DATETIME('hh:nn',DATE_ARRIVAL));
        S=REPLACE_STRING(S,'%ADDRESS',ADDRESS);

        INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                  TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,
                                  PRIORITY,LOCKED,DATE_BEGIN,ORDER_ID,DEST_PORT)
                          VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,:D,
                                  :S,NULL,:TYPE_MESSAGE,:PHONE,:ACTION_ID,
                                  0,NULL,:D,:ORDER_ID,:DEST_PORT);

        IF ((DESCRIPTION IS NOT NULL) AND (TRIM(DESCRIPTION)<>'')) THEN BEGIN

          S=DESCRIPTION;

          D=D+1*(1e0/24/60/60);

          INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                    TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,
                                    PRIORITY,LOCKED,DATE_BEGIN,ORDER_ID,DEST_PORT)
                            VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,:D,
                                    :S,NULL,:TYPE_MESSAGE,:PHONE,NULL,
                                    0,NULL,:D,:ORDER_ID,:DEST_PORT);
        END

      END

    END

  END

END

--

CREATE OR ALTER PROCEDURE TASK_SHIFT_CLOSE
(
  TASK_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32)
)
AS
DECLARE DRIVER_ID VARCHAR(32);
DECLARE PHONE VARCHAR(100);
DECLARE NAME VARCHAR(100);
DECLARE PATRONYMIC VARCHAR(100);
DECLARE S VARCHAR(1000);
DECLARE S1 VARCHAR(1000);
DECLARE D TIMESTAMP;
DECLARE D1 TIMESTAMP;
DECLARE SHIFT_BEGIN TIMESTAMP;
DECLARE PARK_IN TIMESTAMP;
DECLARE PARK_OUT TIMESTAMP;
DECLARE CNT INTEGER;
DECLARE DATE_END TIMESTAMP;
DECLARE TYPE_MESSAGE INTEGER;
DECLARE DEST_PORT INTEGER;
BEGIN

  SELECT CONST_VALUE FROM GET_CONST_VALUE('4D39D8318FB6B77F42241D2B1336B192') INTO :S;

  IF (S IS NOT NULL) THEN BEGIN

    D=CURRENT_TIMESTAMP;

    FOR SELECT D.DRIVER_ID, A.PHONE, A.NAME, A.PATRONYMIC
          FROM DRIVERS D
          JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
         WHERE A.LOCKED<>1
          INTO :DRIVER_ID, :PHONE, :NAME, :PATRONYMIC DO BEGIN

      SELECT MAX(DATE_BEGIN)
        FROM SHIFTS
       WHERE DATE_END IS NULL
         AND ACCOUNT_ID=:DRIVER_ID
        INTO :SHIFT_BEGIN;

      IF (SHIFT_BEGIN IS NOT NULL) THEN BEGIN

        D1=CURRENT_TIMESTAMP-90*60*(1e0/24/60/60);

        SELECT MAX(DATE_IN), MAX(DATE_OUT)
          FROM PARK_STATES
         WHERE DRIVER_ID=:DRIVER_ID
          INTO :PARK_IN, :PARK_OUT;

        IF (PARK_IN IS NULL) THEN BEGIN
          PARK_IN=SHIFT_BEGIN;
          PARK_OUT=PARK_IN;
        END

        SELECT COUNT(*)
          FROM PARK_STATES
         WHERE DRIVER_ID=:DRIVER_ID
           AND DATE_OUT IS NULL
          INTO :CNT;
                                 
        IF ((CNT=0) AND (D1>PARK_IN) AND (D1>PARK_OUT) AND (D1>SHIFT_BEGIN)) THEN BEGIN

          SELECT COUNT(*)
            FROM ORDERS
           WHERE DRIVER_ID=:DRIVER_ID
             AND FINISHED<>1
             AND PARENT_ID IS NULL
            INTO :CNT;

          IF (CNT=0) THEN BEGIN

            SELECT MAX(DATE_END)
              FROM ORDERS
             WHERE DRIVER_ID=:DRIVER_ID
               AND FINISHED=1
               AND PARENT_ID IS NULL
               AND DATE_END IS NOT NULL
              INTO :DATE_END;

            IF (DATE_END IS NULL) THEN
              DATE_END=SHIFT_BEGIN;

            IF (D1>DATE_END) THEN BEGIN

              UPDATE SHIFTS
                 SET DATE_END=CURRENT_TIMESTAMP
               WHERE DATE_END IS NULL
                 AND ACCOUNT_ID=:DRIVER_ID;

              EXECUTE PROCEDURE GET_TYPE_MESSAGE(DRIVER_ID,NULL)
               RETURNING_VALUES TYPE_MESSAGE, DEST_PORT;

              IF (TYPE_MESSAGE IS NOT NULL) THEN BEGIN
                S1=S;

                INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                          TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,
                                          LOCKED,DATE_BEGIN,DEST_PORT)
                                  VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                          :S1,NULL,:TYPE_MESSAGE,:PHONE,NULL,2,
                                          NULL,:D,:DEST_PORT);

                D=D+5*(1e0/24/60/60);
              END

            END

          END

        END

      END

    END

  END

END

--

CREATE OR ALTER PROCEDURE I_DRIVER_SHIFT
(
  SHIFT_ID VARCHAR(32),
  DRIVER_ID VARCHAR(32),
  PARK_ID VARCHAR(32),
  DATE_BEGIN TIMESTAMP,
  ACCOUNT_ID VARCHAR(32)
)
AS
DECLARE SUM_CHARGE NUMERIC(15,2);
DECLARE SUM_RECEIPT NUMERIC(15,2);
DECLARE BALANCE NUMERIC(15,2);
DECLARE MIN_BALANCE NUMERIC(15,2);
DECLARE PARK_NAME VARCHAR(100);
DECLARE PARK_DESCRIPTION VARCHAR(250);
DECLARE PRIORITY INTEGER;
DECLARE S VARCHAR(1000);
DECLARE CONTACT VARCHAR(100);
DECLARE TYPE_MESSAGE INTEGER;
DECLARE DEST_PORT INTEGER;
BEGIN

  EXECUTE PROCEDURE GET_TYPE_MESSAGE(DRIVER_ID,NULL)
   RETURNING_VALUES TYPE_MESSAGE, DEST_PORT;

  EXECUTE PROCEDURE GET_ACCOUNT_BALANCE(:DRIVER_ID)
   RETURNING_VALUES :SUM_CHARGE, :SUM_RECEIPT, :BALANCE;

  SELECT MIN_BALANCE
    FROM DRIVERS
   WHERE DRIVER_ID=:DRIVER_ID
    INTO :MIN_BALANCE;
    
  IF ((MIN_BALANCE IS NULL) OR ((MIN_BALANCE IS NOT NULL) AND (BALANCE>MIN_BALANCE))) THEN BEGIN

    INSERT INTO SHIFTS (SHIFT_ID,ACCOUNT_ID,DATE_BEGIN)
         VALUES (:SHIFT_ID,:DRIVER_ID,:DATE_BEGIN);

    SELECT PHONE
      FROM ACCOUNTS
     WHERE ACCOUNT_ID=:DRIVER_ID
      INTO :CONTACT;

    IF (PARK_ID IS NOT NULL) THEN BEGIN

      UPDATE PARK_STATES
         SET DATE_OUT=:DATE_BEGIN
       WHERE DRIVER_ID=:DRIVER_ID
         AND DATE_OUT IS NULL;

      INSERT INTO PARK_STATES(PARK_STATE_ID,DRIVER_ID,PARK_ID,DATE_IN)
           VALUES (GET_UNIQUE_ID(),:DRIVER_ID,:PARK_ID,:DATE_BEGIN);

      SELECT COUNT(*)
        FROM PARK_STATES
       WHERE PARK_ID=:PARK_ID
         AND DATE_OUT IS NULL
        INTO PRIORITY;

      SELECT CONST_VALUE FROM GET_CONST_VALUE('D98222D30163A3FE4B647ABF4A2C179F') INTO :S;

      IF ((S IS NOT NULL) AND (TYPE_MESSAGE IS NOT NULL)) THEN BEGIN

        SELECT NAME, DESCRIPTION
          FROM PARKS
         WHERE PARK_ID=:PARK_ID
          INTO :PARK_NAME, :PARK_DESCRIPTION;

        S=REPLACE_STRING(S,'%PRIORITY',CAST(PRIORITY AS VARCHAR(10)));
        S=REPLACE_STRING(S,'%PARK_NAME',PARK_NAME);
        S=REPLACE_STRING(S,'%PARK_DESCRIPTION',PARK_DESCRIPTION);
        S=REPLACE_STRING(S,'%BALANCE',CAST(BALANCE AS VARCHAR(30)));

        INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                  TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,
                                  LOCKED,DATE_BEGIN,DEST_PORT)
                          VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                  :S,NULL,:TYPE_MESSAGE,:CONTACT,NULL,0,
                                  NULL,CURRENT_TIMESTAMP,:DEST_PORT);
      END

    END ELSE BEGIN

      SELECT CONST_VALUE FROM GET_CONST_VALUE('C83CCF38CF6CAB374FAB6FA49754B07F') INTO :S;

      IF ((S IS NOT NULL) AND (TYPE_MESSAGE IS NOT NULL)) THEN BEGIN

        S=REPLACE_STRING(S,'%BALANCE',CAST(BALANCE AS VARCHAR(30)));

        INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                  TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,
                                  LOCKED,DATE_BEGIN,DEST_PORT)
                          VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                  :S,NULL,:TYPE_MESSAGE,:CONTACT,NULL,0,
                                  NULL,CURRENT_TIMESTAMP,:DEST_PORT);

      END

    END
  END

END

--

CREATE OR ALTER PROCEDURE D_DRIVER_SHIFT
(
  SHIFT_ID VARCHAR(32),
  DRIVER_ID VARCHAR(32),
  PARK_ID VARCHAR(32),
  DATE_END TIMESTAMP,
  ACCOUNT_ID VARCHAR(32),
  LOCKED INTEGER)
AS
DECLARE S VARCHAR(1000);
DECLARE CONTACT VARCHAR(100);
DECLARE HOURS NUMERIC(10,1);
DECLARE D TIMESTAMP;
DECLARE DATE_BEGIN TIMESTAMP;
DECLARE TYPE_MESSAGE INTEGER;
DECLARE DEST_PORT INTEGER;
BEGIN

  SELECT PHONE
    FROM ACCOUNTS
   WHERE ACCOUNT_ID=:DRIVER_ID
    INTO :CONTACT;

  UPDATE ACCOUNTS
     SET LOCKED=:LOCKED
   WHERE ACCOUNT_ID=:DRIVER_ID;

  UPDATE SHIFTS
     SET DATE_END=:DATE_END
   WHERE ACCOUNT_ID=:DRIVER_ID
     AND SHIFT_ID=:SHIFT_ID;

  IF (PARK_ID IS NOT NULL) THEN BEGIN

    UPDATE PARK_STATES
       SET DATE_OUT=:DATE_END
     WHERE DRIVER_ID=:DRIVER_ID
       AND PARK_ID=:PARK_ID
       AND DATE_OUT IS NULL;

  END ELSE BEGIN

    UPDATE PARK_STATES
       SET DATE_OUT=:DATE_END
     WHERE DRIVER_ID=:DRIVER_ID
       AND DATE_OUT IS NULL;

  END

  SELECT DATE_BEGIN
    FROM SHIFTS
   WHERE SHIFT_ID=:SHIFT_ID
    INTO :DATE_BEGIN;

  D=CURRENT_TIMESTAMP;

  HOURS=CAST((D-DATE_BEGIN)*(1e0*24) AS NUMERIC(10,1));

  SELECT CONST_VALUE FROM GET_CONST_VALUE('7032584355F3A3C44394DAA17D8A9BA9') INTO :S;

  EXECUTE PROCEDURE GET_TYPE_MESSAGE(DRIVER_ID,NULL)
   RETURNING_VALUES TYPE_MESSAGE, DEST_PORT;

  IF ((S IS NOT NULL) AND (TYPE_MESSAGE IS NOT NULL)) THEN BEGIN

    S=REPLACE_STRING(S,'%TIME_DATE',FORMAT_DATETIME('hh:nn:ss dd.mm.yyyy',D));
    S=REPLACE_STRING(S,'%HOURS',CAST(HOURS AS VARCHAR(30)));

    INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                              TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,
                              LOCKED,DATE_BEGIN,DEST_PORT)
                      VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                              :S,NULL,:TYPE_MESSAGE,:CONTACT,NULL,1,
                              NULL,CURRENT_TIMESTAMP,:DEST_PORT);
  END

END

--

CREATE OR ALTER PROCEDURE I_DRIVER_PARK
(
  DRIVER_ID VARCHAR(32),
  PARK_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32),
  DATE_IN TIMESTAMP
)
AS
DECLARE SUM_CHARGE NUMERIC(15,2);
DECLARE SUM_RECEIPT NUMERIC(15,2);
DECLARE BALANCE NUMERIC(15,2);
DECLARE MIN_BALANCE NUMERIC(15,2);
DECLARE CONTACT VARCHAR(100);
DECLARE PARK_NAME VARCHAR(100);
DECLARE PARK_DESCRIPTION VARCHAR(250);
DECLARE PRIORITY INTEGER;
DECLARE S VARCHAR(1000);
DECLARE TYPE_MESSAGE INTEGER;
DECLARE DEST_PORT INTEGER;
BEGIN

  EXECUTE PROCEDURE GET_ACCOUNT_BALANCE(:DRIVER_ID)
   RETURNING_VALUES :SUM_CHARGE, :SUM_RECEIPT, :BALANCE;

  SELECT MIN_BALANCE
    FROM DRIVERS
   WHERE DRIVER_ID=:DRIVER_ID
    INTO :MIN_BALANCE;

  IF ((MIN_BALANCE IS NULL) OR ((MIN_BALANCE IS NOT NULL) AND (BALANCE>MIN_BALANCE))) THEN BEGIN

    SELECT PHONE
      FROM ACCOUNTS
     WHERE ACCOUNT_ID=:DRIVER_ID
      INTO :CONTACT;

    INSERT INTO PARK_STATES(PARK_STATE_ID,DRIVER_ID,PARK_ID,DATE_IN)
         VALUES (GET_UNIQUE_ID(),:DRIVER_ID,:PARK_ID,:DATE_IN);

    SELECT COUNT(*)
      FROM PARK_STATES
     WHERE PARK_ID=:PARK_ID
       AND DATE_OUT IS NULL
      INTO PRIORITY;

    SELECT CONST_VALUE FROM GET_CONST_VALUE('D98222D30163A3FE4B647ABF4A2C179F') INTO :S;

    EXECUTE PROCEDURE GET_TYPE_MESSAGE(DRIVER_ID,NULL)
     RETURNING_VALUES TYPE_MESSAGE, DEST_PORT;

    IF ((S IS NOT NULL) AND (TYPE_MESSAGE IS NOT NULL)) THEN BEGIN

      SELECT NAME, DESCRIPTION
        FROM PARKS
       WHERE PARK_ID=:PARK_ID
        INTO :PARK_NAME, :PARK_DESCRIPTION;

      S=REPLACE_STRING(S,'%PRIORITY',CAST(PRIORITY AS VARCHAR(10)));
      S=REPLACE_STRING(S,'%PARK_NAME',PARK_NAME);
      S=REPLACE_STRING(S,'%PARK_DESCRIPTION',PARK_DESCRIPTION);
      S=REPLACE_STRING(S,'%BALANCE',CAST(BALANCE AS VARCHAR(30)));

      INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,
                                LOCKED,DATE_BEGIN,DEST_PORT)
                        VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                :S,NULL,:TYPE_MESSAGE,:CONTACT,NULL,1,
                                NULL,CURRENT_TIMESTAMP,:DEST_PORT);
    END

  END
END

--

CREATE OR ALTER PROCEDURE D_DRIVER_PARK
(
  DRIVER_ID VARCHAR(32),
  PARK_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32),
  DATE_OUT TIMESTAMP)
AS
DECLARE S VARCHAR(1000);
DECLARE PARK_NAME VARCHAR(100);
DECLARE CONTACT VARCHAR(100);
DECLARE TYPE_MESSAGE INTEGER;
DECLARE DEST_PORT INTEGER;
BEGIN
  UPDATE PARK_STATES
     SET DATE_OUT=:DATE_OUT
   WHERE DRIVER_ID=:DRIVER_ID
     AND PARK_ID=:PARK_ID
     AND DATE_OUT IS NULL;

  SELECT PHONE
    FROM ACCOUNTS
   WHERE ACCOUNT_ID=:DRIVER_ID
    INTO :CONTACT;

  SELECT CONST_VALUE FROM GET_CONST_VALUE('C0B2DFF0FD07BC1C43047D31AECDC8A2') INTO :S;

  EXECUTE PROCEDURE GET_TYPE_MESSAGE(DRIVER_ID,NULL)
   RETURNING_VALUES TYPE_MESSAGE, DEST_PORT;

  IF ((S IS NOT NULL) AND (TYPE_MESSAGE IS NOT NULL)) THEN BEGIN

    SELECT NAME
      FROM PARKS
     WHERE PARK_ID=:PARK_ID
      INTO :PARK_NAME;

    S=REPLACE_STRING(S,'%PARK_NAME',PARK_NAME);
    S=REPLACE_STRING(S,'%TIME_DATE',FORMAT_DATETIME('hh:nn:ss dd.mm.yyyy',DATE_OUT));

    INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                              TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,
                              LOCKED,DATE_BEGIN,DEST_PORT)
                      VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                              :S,NULL,:TYPE_MESSAGE,:CONTACT,NULL,1,
                              NULL,CURRENT_TIMESTAMP,:DEST_PORT);
  END

END

--

CREATE OR ALTER PROCEDURE I_RECEIPT (
  RECEIPT_ID VARCHAR(32),
  RECEIPT_TYPE_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32),
  WHO_CREATE_ID VARCHAR(32),
  SUM_RECEIPT NUMERIC(15,2),
  DATE_RECEIPT TIMESTAMP,
  DATE_CREATE TIMESTAMP,
  DESCRIPTION VARCHAR(250))
AS
DECLARE S VARCHAR(70);
DECLARE ASUM_CHARGE NUMERIC(15,2);
DECLARE ASUM_RECEIPT NUMERIC(15,2);
DECLARE BALANCE NUMERIC(15,2);
DECLARE PHONE VARCHAR(100);
DECLARE TYPE_MESSAGE INTEGER;
DECLARE DEST_PORT INTEGER;
BEGIN
  INSERT INTO RECEIPTS (RECEIPT_ID,RECEIPT_TYPE_ID,ACCOUNT_ID,WHO_CREATE_ID,
                        SUM_RECEIPT,DATE_RECEIPT,DATE_CREATE,DESCRIPTION)
       VALUES (:RECEIPT_ID,:RECEIPT_TYPE_ID,:ACCOUNT_ID,:WHO_CREATE_ID,
               :SUM_RECEIPT,:DATE_RECEIPT,:DATE_CREATE,:DESCRIPTION);


  EXECUTE PROCEDURE GET_ACCOUNT_BALANCE(ACCOUNT_ID)
   RETURNING_VALUES ASUM_CHARGE, ASUM_RECEIPT, BALANCE;

  SELECT PHONE
    FROM ACCOUNTS
   WHERE ACCOUNT_ID=:ACCOUNT_ID
    INTO :PHONE;

  SELECT CONST_VALUE FROM GET_CONST_VALUE('2031AA8F2E4B959248967F2838DC5F19') INTO :S;

  EXECUTE PROCEDURE GET_TYPE_MESSAGE(ACCOUNT_ID,NULL)
   RETURNING_VALUES TYPE_MESSAGE, DEST_PORT;

  IF (S IS NOT NULL) THEN BEGIN

    S=REPLACE_STRING(S,'%BALANCE',CAST(BALANCE AS VARCHAR(30)));

    INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                              TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,
                              LOCKED,DATE_BEGIN,DEST_PORT)
                      VALUES (GET_UNIQUE_ID(),:WHO_CREATE_ID,:ACCOUNT_ID,CURRENT_TIMESTAMP,
                              :S,NULL,:TYPE_MESSAGE,:PHONE,NULL,2,
                              NULL,CURRENT_TIMESTAMP,:DEST_PORT);
  END

END

--

CREATE OR ALTER PROCEDURE CREATE_PAYMENT
(
  RECEIPT_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32),
  WHO_CREATE_ID VARCHAR(32),
  SUM_RECEIPT NUMERIC(15,2),
  DATE_RECEIPT TIMESTAMP,
  DESCRIPTION VARCHAR(250)) 
RETURNS (
  PAYMENT_EXISTS INTEGER)
AS
DECLARE S VARCHAR(70);
DECLARE RECEIPT_TYPE_ID VARCHAR(32);
DECLARE DATE_CREATE TIMESTAMP;
DECLARE ASUM_CHARGE NUMERIC(15,2);
DECLARE ASUM_RECEIPT NUMERIC(15,2);
DECLARE BALANCE NUMERIC(15,2);
DECLARE PHONE VARCHAR(100);
DECLARE CNT INTEGER;
DECLARE TYPE_MESSAGE INTEGER;
DECLARE DEST_PORT INTEGER;
BEGIN
  PAYMENT_EXISTS=0;

  RECEIPT_TYPE_ID='0DB2BA54ABCA9B1A42F22981240F744A'; /* Наличными через платежку */

  SELECT COUNT(*)
    FROM RECEIPTS
   WHERE ACCOUNT_ID=:ACCOUNT_ID
     AND WHO_CREATE_ID=:WHO_CREATE_ID
     AND RECEIPT_TYPE_ID=:RECEIPT_TYPE_ID
     AND DESCRIPTION=:DESCRIPTION
    INTO :CNT;

  IF (CNT=0) THEN BEGIN

    DATE_CREATE=CURRENT_TIMESTAMP;

    INSERT INTO RECEIPTS (RECEIPT_ID,RECEIPT_TYPE_ID,ACCOUNT_ID,WHO_CREATE_ID,
                          SUM_RECEIPT,DATE_RECEIPT,DATE_CREATE,DESCRIPTION)
         VALUES (:RECEIPT_ID,:RECEIPT_TYPE_ID,:ACCOUNT_ID,:WHO_CREATE_ID,
                 :SUM_RECEIPT,:DATE_RECEIPT,:DATE_CREATE,:DESCRIPTION);


    EXECUTE PROCEDURE GET_ACCOUNT_BALANCE(:ACCOUNT_ID)
     RETURNING_VALUES :ASUM_CHARGE, :ASUM_RECEIPT, :BALANCE;

    BALANCE=ASUM_RECEIPT-ASUM_CHARGE;

    SELECT PHONE
      FROM ACCOUNTS
     WHERE ACCOUNT_ID=:ACCOUNT_ID
      INTO :PHONE;

    SELECT CONST_VALUE FROM GET_CONST_VALUE('2031AA8F2E4B959248967F2838DC5F19') INTO :S;

    EXECUTE PROCEDURE GET_TYPE_MESSAGE(ACCOUNT_ID,NULL)
     RETURNING_VALUES TYPE_MESSAGE, DEST_PORT;

    IF ((S IS NOT NULL) AND (TYPE_MESSAGE IS NOT NULL)) THEN BEGIN

      S=REPLACE_STRING(S,'%BALANCE',CAST(BALANCE AS VARCHAR(30)));

      INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,
                                LOCKED,DATE_BEGIN,DEST_PORT)
                        VALUES (GET_UNIQUE_ID(),:WHO_CREATE_ID,:ACCOUNT_ID,CURRENT_TIMESTAMP,
                                :S,NULL,:TYPE_MESSAGE,:PHONE,NULL,2,
                                NULL,CURRENT_TIMESTAMP,:DEST_PORT);
    END

  END ELSE BEGIN

    PAYMENT_EXISTS=1;

  END

END

--

CREATE OR ALTER PROCEDURE U_ORDER
(
  ORDER_ID VARCHAR(32),
  ACTION_ID VARCHAR(32),
  RATE_ID VARCHAR(32),
  CAR_TYPE_ID VARCHAR(32),
  WHO_ACCEPT_ID VARCHAR(32),
  STREET_ID VARCHAR(32),
  ZONE_ID VARCHAR(32),
  PARENT_ID VARCHAR(32),
  CAR_ID VARCHAR(32),
  WHO_PROCESS_ID VARCHAR(32),
  RESULT_ID VARCHAR(32),
  PARK_ID VARCHAR(32),
  SOURCE_ID VARCHAR(32),
  DISCOUNT_ID VARCHAR(32),
  DRIVER_ID VARCHAR(32),
  ORDER_NUM VARCHAR(10),
  PHONE VARCHAR(100),
  HOUSE VARCHAR(10),
  FLAT VARCHAR(10),
  PORCH VARCHAR(10),
  DATE_ACCEPT TIMESTAMP,
  DATE_ARRIVAL TIMESTAMP,
  DATE_BEGIN TIMESTAMP,
  DATE_END TIMESTAMP,
  CUSTOMER VARCHAR(250),
  DESCRIPTION VARCHAR(250),
  COST_RATE NUMERIC(18,2),
  COST_FACT NUMERIC(18,2),
  TYPE_ACCEPT INTEGER,
  TYPE_PROCESS INTEGER,
  DATE_HISTORY TIMESTAMP,
  WHO_HISTORY_ID VARCHAR(32),
  BEFORE_PERIOD INTEGER,
  FINISHED INTEGER,
  LOCKED VARCHAR(32),
  CLIENT_ID VARCHAR(32),
  COST_GROSS NUMERIC(18,2),
  OLD_ORDER_ID VARCHAR(32)
)
AS
  DECLARE RECIPIENT_ID VARCHAR(32);
  DECLARE OLD_COST_RATE NUMERIC(15,2);
  DECLARE S VARCHAR(70);
  DECLARE TYPE_MESSAGE INTEGER;
  DECLARE DEST_PORT INTEGER;
BEGIN
  UPDATE ORDERS
     SET ORDER_ID=:ORDER_ID,
         ACTION_ID=:ACTION_ID,
         RATE_ID=:RATE_ID,
         CAR_TYPE_ID=:CAR_TYPE_ID,
         WHO_ACCEPT_ID=:WHO_ACCEPT_ID,
         STREET_ID=:STREET_ID,
         ZONE_ID=:ZONE_ID,
         PARENT_ID=:PARENT_ID,
         CAR_ID=:CAR_ID,
         WHO_PROCESS_ID=:WHO_PROCESS_ID,
         RESULT_ID=:RESULT_ID,
         PARK_ID=:PARK_ID,
         SOURCE_ID=:SOURCE_ID,
         DISCOUNT_ID=:DISCOUNT_ID,
         DRIVER_ID=:DRIVER_ID,
         ORDER_NUM=:ORDER_NUM,
         PHONE=:PHONE,
         HOUSE=:HOUSE,
         FLAT=:FLAT,
         PORCH=:PORCH,
         DATE_ACCEPT=:DATE_ACCEPT,
         DATE_ARRIVAL=:DATE_ARRIVAL,
         DATE_BEGIN=:DATE_BEGIN,
         DATE_END=:DATE_END,
         CUSTOMER=:CUSTOMER,
         DESCRIPTION=:DESCRIPTION,
         COST_RATE=:COST_RATE,
         COST_FACT=:COST_FACT,
         TYPE_ACCEPT=:TYPE_ACCEPT,
         TYPE_PROCESS=:TYPE_PROCESS,
         DATE_HISTORY=:DATE_HISTORY,
         WHO_HISTORY_ID=:WHO_HISTORY_ID,
         BEFORE_PERIOD=:BEFORE_PERIOD,
         FINISHED=:FINISHED,
         LOCKED=:LOCKED,
         CLIENT_ID=:CLIENT_ID,
         COST_GROSS=:COST_GROSS
   WHERE ORDER_ID=:OLD_ORDER_ID;

  OLD_COST_RATE=NULL;

  FOR SELECT COST_RATE
        FROM ORDERS
       WHERE PARENT_ID=:OLD_ORDER_ID
         AND DATE_HISTORY IS NOT NULL
       ORDER BY DATE_HISTORY DESC
        INTO :OLD_COST_RATE DO BEGIN

    IF (OLD_COST_RATE IS NOT NULL) THEN
      BREAK;

  END

  IF ((COST_RATE IS NOT NULL) AND (OLD_COST_RATE<>COST_RATE) AND (WHO_PROCESS_ID IS NOT NULL)) THEN BEGIN

    IF (SUBSTR(PHONE,1,3)='+79')  THEN BEGIN

      RECIPIENT_ID=NULL;

      FOR SELECT ACCOUNT_ID
            FROM ACCOUNTS
           WHERE PHONE=:PHONE
            INTO :RECIPIENT_ID DO BEGIN

        IF (RECIPIENT_ID IS NOT NULL) THEN
          BREAK;
      END

      SELECT CONST_VALUE FROM GET_CONST_VALUE('6F6E5F38806C896B43AC16E69914EFFA') INTO :S;

      EXECUTE PROCEDURE GET_TYPE_MESSAGE(RECIPIENT_ID,NULL)
       RETURNING_VALUES TYPE_MESSAGE, DEST_PORT;

      IF ((S IS NOT NULL) AND (TYPE_MESSAGE IS NOT NULL)) THEN BEGIN

        S=REPLACE_STRING(S,'%COST_RATE',CAST(COST_RATE AS VARCHAR(30)));

        INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                  TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,
                                  PRIORITY,LOCKED,DATE_BEGIN,ORDER_ID,DEST_PORT)
                          VALUES (GET_UNIQUE_ID(),:WHO_PROCESS_ID,:RECIPIENT_ID,CURRENT_TIMESTAMP,
                                  :S,NULL,:TYPE_MESSAGE,:PHONE,NULL,
                                  1,NULL,CURRENT_TIMESTAMP,:ORDER_ID,:DEST_PORT);
      END

    END

  END

END

--

CREATE OR ALTER PROCEDURE TRY_PARK_IN (
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32),
  DRIVER_ID VARCHAR(32),
  CODE VARCHAR(100),
  TYPE_MESSAGE INTEGER)
AS
DECLARE S VARCHAR(1000);
DECLARE PHONE VARCHAR(100);
DECLARE CNT INTEGER;
DECLARE SUM_CHARGE NUMERIC(15,2);
DECLARE SUM_RECEIPT NUMERIC(15,2);
DECLARE BALANCE NUMERIC(15,2);
DECLARE MIN_BALANCE NUMERIC(15,2);
DECLARE D TIMESTAMP;
DECLARE PARK_ID VARCHAR(32);
DECLARE PARK_NAME VARCHAR(100);
DECLARE PARK_DESCRIPTION VARCHAR(250);
DECLARE PRIORITY INTEGER;
DECLARE DEST_PORT INTEGER;
BEGIN

  IF ((DRIVER_ID IS NOT NULL) AND (CODE IS NOT NULL)) THEN BEGIN

    EXECUTE PROCEDURE GET_TYPE_MESSAGE(DRIVER_ID,TYPE_MESSAGE)
     RETURNING_VALUES TYPE_MESSAGE, DEST_PORT;

    SELECT A.PHONE
      FROM DRIVERS D
      JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
     WHERE D.DRIVER_ID=:DRIVER_ID
       AND A.LOCKED<>1
      INTO :PHONE;

    IF (PHONE IS NOT NULL) THEN BEGIN

      EXECUTE PROCEDURE GET_ACCOUNT_BALANCE(:DRIVER_ID)
       RETURNING_VALUES :SUM_CHARGE, :SUM_RECEIPT, :BALANCE;

      SELECT MIN_BALANCE
        FROM DRIVERS
       WHERE DRIVER_ID=:DRIVER_ID
        INTO :MIN_BALANCE;

      IF ((MIN_BALANCE IS NULL) OR ((MIN_BALANCE IS NOT NULL) AND (BALANCE>MIN_BALANCE))) THEN BEGIN

        SELECT COUNT(*)
          FROM ORDERS
         WHERE DRIVER_ID=:DRIVER_ID
           AND PARENT_ID IS NULL
           AND DATE_HISTORY IS NULL
           AND FINISHED<>1
          INTO :CNT;

        IF (CNT>0) THEN BEGIN

          SELECT CONST_VALUE FROM GET_CONST_VALUE('764B2BA8498AB18345852AA2FE39F4D9') INTO :S;

          IF ((S IS NOT NULL) AND (TYPE_MESSAGE IS NOT NULL)) THEN BEGIN

            INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                      TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,
                                      PRIORITY,LOCKED,DATE_BEGIN,ORDER_ID,DEST_PORT)
                              VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                      :S,NULL,:TYPE_MESSAGE,:PHONE,NULL,
                                      2,NULL,CURRENT_TIMESTAMP,:ORDER_ID,:DEST_PORT);
          END

        END ELSE BEGIN

          UPDATE PARK_STATES
             SET DATE_OUT=CURRENT_TIMESTAMP
           WHERE DRIVER_ID=:DRIVER_ID
             AND DATE_OUT IS NULL;

          SELECT COUNT(*)
            FROM SHIFTS
           WHERE ACCOUNT_ID=:DRIVER_ID
             AND DATE_END IS NULL
            INTO :CNT;

          D=CURRENT_TIMESTAMP;

          IF (CNT=0) THEN BEGIN

            INSERT INTO SHIFTS (SHIFT_ID,ACCOUNT_ID,DATE_BEGIN,DATE_END)
                        VALUES (GET_UNIQUE_ID(),:DRIVER_ID,:D,NULL);

          END

          PARK_ID=NULL;
          PARK_NAME=NULL;

          FOR SELECT P.PARK_ID, P.NAME, P.DESCRIPTION
                FROM PARKS P
               WHERE (((P.MAX_COUNT IS NOT NULL) AND
                       (P.MAX_COUNT> (SELECT COUNT(*)
                                        FROM PARK_STATES
                                       WHERE DATE_OUT IS NULL
                                         AND PARK_ID=P.PARK_ID)))
                      OR (P.MAX_COUNT IS NULL))
                 AND P.NAME=:CODE
                INTO :PARK_ID, :PARK_NAME, :PARK_DESCRIPTION  DO BEGIN
            BREAK;
          END

          IF (PARK_ID IS NOT NULL) THEN BEGIN

            INSERT INTO PARK_STATES (PARK_STATE_ID,PARK_ID,DRIVER_ID,DATE_IN,DATE_OUT)
                             VALUES (GET_UNIQUE_ID(),:PARK_ID,:DRIVER_ID,:D,NULL);

            SELECT COUNT(*)
              FROM PARK_STATES
             WHERE PARK_ID=:PARK_ID
               AND DATE_OUT IS NULL
              INTO PRIORITY;

            SELECT CONST_VALUE FROM GET_CONST_VALUE('80627FCA459EA3574F6BA8730F32946F') INTO :S;

            IF ((S IS NOT NULL) AND (TYPE_MESSAGE IS NOT NULL)) THEN BEGIN

              S=REPLACE_STRING(S,'%PRIORITY',CAST(PRIORITY AS VARCHAR(10)));
              S=REPLACE_STRING(S,'%PARK_NAME',PARK_NAME);
              S=REPLACE_STRING(S,'%PARK_DESCRIPTION',PARK_DESCRIPTION);
              S=REPLACE_STRING(S,'%BALANCE',CAST(BALANCE AS VARCHAR(30)));

              INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                        TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,
                                        PRIORITY,LOCKED,DATE_BEGIN,ORDER_ID,DEST_PORT)
                                VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                        :S,NULL,:TYPE_MESSAGE,:PHONE,NULL,
                                        1,NULL,CURRENT_TIMESTAMP,:ORDER_ID,:DEST_PORT);
            END

          END ELSE BEGIN

            SELECT CONST_VALUE FROM GET_CONST_VALUE('18B1E217D3789DDF4BCE1EEE9C7AB7A5') INTO :S;

            IF ((S IS NOT NULL) AND (TYPE_MESSAGE IS NOT NULL)) THEN BEGIN

              INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                        TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,
                                        PRIORITY,LOCKED,DATE_BEGIN,ORDER_ID,DEST_PORT)
                                VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                        :S,NULL,:TYPE_MESSAGE,:PHONE,NULL,
                                        1,NULL,CURRENT_TIMESTAMP,:ORDER_ID,:DEST_PORT);
            END

          END

        END

      END ELSE BEGIN

        SELECT CONST_VALUE FROM GET_CONST_VALUE('0690BD9649C89DD8472558C3270F35D6') INTO :S;

        IF ((S IS NOT NULL) AND (TYPE_MESSAGE IS NOT NULL)) THEN BEGIN

          INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                    TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,
                                    PRIORITY,LOCKED,DATE_BEGIN,ORDER_ID,DEST_PORT)
                            VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                    :S,NULL,:TYPE_MESSAGE,:PHONE,NULL,
                                    1,NULL,CURRENT_TIMESTAMP,:ORDER_ID,:DEST_PORT);
        END

      END

    END

  END
END

--

CREATE OR ALTER PROCEDURE TASK_SHIFT_REMINDER (
  TASK_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE DRIVER_ID VARCHAR(32);
DECLARE PHONE VARCHAR(100);
DECLARE NAME VARCHAR(100);
DECLARE PATRONYMIC VARCHAR(100);
DECLARE S VARCHAR(1000);
DECLARE S1 VARCHAR(1000);
DECLARE D TIMESTAMP;
DECLARE DTIME TIMESTAMP;
DECLARE DAY_HOUR INTEGER;
DECLARE WEEK_DAY INTEGER;
DECLARE CNT INTEGER;
DECLARE SUM_CHARGE NUMERIC(15,2);
DECLARE SUM_RECEIPT NUMERIC(15,2);
DECLARE BALANCE NUMERIC(15,2);
DECLARE MIN_BALANCE NUMERIC(15,2);
DECLARE TYPE_MESSAGE INTEGER;
DECLARE DEST_PORT INTEGER;
BEGIN

  SELECT CONST_VALUE FROM GET_CONST_VALUE('FDBF450952CB8E8A40A38BD5122034B3') INTO :S;

  IF (S IS NOT NULL) THEN BEGIN

    D=CURRENT_TIMESTAMP;

    FOR SELECT D.DRIVER_ID, A.PHONE, A.NAME, A.PATRONYMIC, D.MIN_BALANCE
          FROM DRIVERS D
          JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
         WHERE A.LOCKED<>1
           AND D.DATE_SCHEDULE IS NOT NULL
           AND D.DATE_SCHEDULE<=CURRENT_DATE
          INTO :DRIVER_ID, :PHONE, :NAME, :PATRONYMIC, :MIN_BALANCE DO BEGIN

      WEEK_DAY=EXTRACT(WEEKDAY FROM CURRENT_TIMESTAMP)-1;
      IF (WEEK_DAY<0) THEN
        WEEK_DAY=6;

      DAY_HOUR=EXTRACT(HOUR FROM CURRENT_TIMESTAMP)+1;
      IF (DAY_HOUR>23) THEN BEGIN
        DAY_HOUR=0;
        WEEK_DAY=WEEK_DAY+1;
        IF (WEEK_DAY>6) THEN
          WEEK_DAY=0;
      END

      SELECT COUNT(*)
        FROM DRIVER_WEEK_SCHEDULES
       WHERE WEEK_DAY=:WEEK_DAY
         AND DAY_HOUR=:DAY_HOUR
         AND DRIVER_ID=:DRIVER_ID
        INTO :CNT;

      IF (CNT>0) THEN BEGIN

        SELECT COUNT(*)
          FROM SHIFTS
         WHERE DATE_END IS NULL
           AND ACCOUNT_ID=:DRIVER_ID
           AND DATE_BEGIN<=CURRENT_TIMESTAMP
          INTO :CNT;

        IF (CNT=0) THEN BEGIN

          EXECUTE PROCEDURE GET_ACCOUNT_BALANCE(DRIVER_ID)
           RETURNING_VALUES SUM_CHARGE, SUM_RECEIPT, BALANCE;

          EXECUTE PROCEDURE GET_TYPE_MESSAGE(DRIVER_ID,NULL)
           RETURNING_VALUES TYPE_MESSAGE, DEST_PORT;

          IF (((MIN_BALANCE IS NULL) OR ((MIN_BALANCE IS NOT NULL) AND (BALANCE>MIN_BALANCE))) AND
             (TYPE_MESSAGE IS NOT NULL)) THEN BEGIN

            DTIME=CAST((CAST(DAY_HOUR AS VARCHAR(2))||':00') AS TIME);

            S1=S;
            S1=REPLACE_STRING(S1,'%NAME',NAME);
            S1=REPLACE_STRING(S1,'%PATRONYMIC',PATRONYMIC);
            S1=REPLACE_STRING(S1,'%TIME',FORMAT_DATETIME('hh:nn',DTIME));

            INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                      TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,
                                      LOCKED,DATE_BEGIN,DEST_PORT)
                              VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                      :S1,NULL,:TYPE_MESSAGE,:PHONE,NULL,1,
                                      NULL,:D,:DEST_PORT);

            D=D+5*(1e0/24/60/60);

          END

        END

      END

    END

  END

END

--

CREATE OR ALTER PROCEDURE TASK_SHIFT_LOCK
(
  TASK_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE DRIVER_ID VARCHAR(32);
DECLARE PHONE VARCHAR(100);
DECLARE NAME VARCHAR(100);
DECLARE PATRONYMIC VARCHAR(100);
DECLARE S VARCHAR(1000);
DECLARE S1 VARCHAR(1000);
DECLARE D TIMESTAMP;
DECLARE DAY_HOUR INTEGER;
DECLARE WEEK_DAY INTEGER;
DECLARE CNT INTEGER;
DECLARE TYPE_MESSAGE INTEGER;
DECLARE DEST_PORT INTEGER;
BEGIN

  SELECT CONST_VALUE FROM GET_CONST_VALUE('21EF7AF84E37B7D64BAA8AE4CA871855') INTO :S;

  IF (S IS NOT NULL) THEN BEGIN

    D=CURRENT_TIMESTAMP;

    FOR SELECT D.DRIVER_ID, A.PHONE, A.NAME, A.PATRONYMIC
          FROM DRIVERS D
          JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
         WHERE A.LOCKED<>1
           AND D.DATE_SCHEDULE IS NOT NULL
           AND D.DATE_SCHEDULE<=CURRENT_DATE
          INTO :DRIVER_ID, :PHONE, :NAME, :PATRONYMIC DO BEGIN

      WEEK_DAY=EXTRACT(WEEKDAY FROM CURRENT_TIMESTAMP)-1;
      IF (WEEK_DAY<0) THEN
        WEEK_DAY=6;

      DAY_HOUR=EXTRACT(HOUR FROM CURRENT_TIMESTAMP);

      SELECT COUNT(*)
        FROM DRIVER_WEEK_SCHEDULES
       WHERE WEEK_DAY=:WEEK_DAY
         AND DAY_HOUR=:DAY_HOUR
         AND DRIVER_ID=:DRIVER_ID
        INTO :CNT;

      IF (CNT>0) THEN BEGIN

        SELECT COUNT(*)
          FROM SHIFTS
         WHERE DATE_END IS NULL
           AND ACCOUNT_ID=:DRIVER_ID
           AND DATE_BEGIN<=CURRENT_TIMESTAMP
          INTO :CNT;

        EXECUTE PROCEDURE GET_TYPE_MESSAGE(DRIVER_ID,NULL)
         RETURNING_VALUES TYPE_MESSAGE, DEST_PORT;

        IF ((CNT=0) AND (TYPE_MESSAGE IS NOT NULL)) THEN BEGIN

          UPDATE ACCOUNTS
             SET LOCKED=1
           WHERE ACCOUNT_ID=:DRIVER_ID;

          S1=S;

          INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                    TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,
                                    PRIORITY,LOCKED,DATE_BEGIN,DEST_PORT)
                            VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                    :S1,NULL,:TYPE_MESSAGE,:PHONE,NULL,
                                    1,NULL,:D,:DEST_PORT);

          D=D+5*(1e0/24/60/60);

        END

      END

    END

  END

END

--

CREATE OR ALTER PROCEDURE TASK_SHIFT_CHARGE
(
  TASK_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE DRIVER_ID VARCHAR(32);
DECLARE PHONE VARCHAR(100);
DECLARE NAME VARCHAR(100);
DECLARE PATRONYMIC VARCHAR(100);
DECLARE S VARCHAR(1000);
DECLARE S1 VARCHAR(1000);
DECLARE D TIMESTAMP;
DECLARE DAY_HOUR INTEGER;
DECLARE WEEK_DAY INTEGER;
DECLARE CNT INTEGER;
DECLARE SUM_CHARGE NUMERIC(15,2);
DECLARE CHARGE_TYPE_ID VARCHAR(32);
DECLARE SUM_RECEIPT NUMERIC(15,2);
DECLARE BALANCE NUMERIC(15,2);
DECLARE MIN_BALANCE NUMERIC(15,2);
DECLARE TYPE_MESSAGE INTEGER;
DECLARE DEST_PORT INTEGER;
BEGIN

  SELECT CONST_VALUE FROM GET_CONST_VALUE('118C2CC432E5B9B44A9BF94757EC2EDE') INTO :S;

  IF (S IS NOT NULL) THEN BEGIN

    D=CURRENT_TIMESTAMP;

    FOR SELECT D.DRIVER_ID, A.PHONE, A.NAME, A.PATRONYMIC, D.MIN_BALANCE
          FROM DRIVERS D
          JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
         WHERE A.LOCKED<>1
           AND D.DATE_SCHEDULE IS NOT NULL
           AND D.DATE_SCHEDULE<=CURRENT_DATE
          INTO :DRIVER_ID, :PHONE, :NAME, :PATRONYMIC, :MIN_BALANCE DO BEGIN

      WEEK_DAY=EXTRACT(WEEKDAY FROM CURRENT_TIMESTAMP)-1;
      IF (WEEK_DAY<0) THEN
        WEEK_DAY=6;

      DAY_HOUR=EXTRACT(HOUR FROM CURRENT_TIMESTAMP);

      SELECT COUNT(*)
        FROM DRIVER_WEEK_SCHEDULES
       WHERE WEEK_DAY=:WEEK_DAY
         AND DAY_HOUR=:DAY_HOUR
         AND DRIVER_ID=:DRIVER_ID
        INTO :CNT;

      IF (CNT>0) THEN BEGIN

        SELECT COUNT(*)
          FROM SHIFTS
         WHERE DATE_END IS NULL
           AND ACCOUNT_ID=:DRIVER_ID
           AND DATE_BEGIN<=CURRENT_TIMESTAMP
          INTO :CNT;

        IF (CNT=0) THEN BEGIN

          EXECUTE PROCEDURE GET_ACCOUNT_BALANCE(:DRIVER_ID)
           RETURNING_VALUES :SUM_CHARGE, :SUM_RECEIPT, :BALANCE;

          IF ((MIN_BALANCE IS NULL) OR ((MIN_BALANCE IS NOT NULL) AND (BALANCE>MIN_BALANCE))) THEN BEGIN

            SUM_CHARGE=NULL;
            CHARGE_TYPE_ID='CF012E53C5C9A03E4A7F03194B84DA49'; /* Не выполнение графика */

            SELECT SUM_CHARGE
              FROM CHARGE_TYPES
             WHERE CHARGE_TYPE_ID=:CHARGE_TYPE_ID
              INTO :SUM_CHARGE;

            EXECUTE PROCEDURE GET_TYPE_MESSAGE(DRIVER_ID,NULL)
             RETURNING_VALUES TYPE_MESSAGE, DEST_PORT;

            IF ((SUM_CHARGE IS NOT NULL) AND (TYPE_MESSAGE IS NOT NULL)) THEN BEGIN

              INSERT INTO CHARGES (CHARGE_ID,WHO_CREATE_ID,CHARGE_TYPE_ID,ACCOUNT_ID,
                                   SUM_CHARGE,DATE_CHARGE,DATE_CREATE,DESCRIPTION)
                           VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:CHARGE_TYPE_ID,:DRIVER_ID,
                                   :SUM_CHARGE,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,NULL);

              S1=S;
              S1=REPLACE_STRING(S1,'%SUM_CHARGE',CAST(SUM_CHARGE AS VARCHAR(30)));

              INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                        TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,
                                        PRIORITY,LOCKED,DATE_BEGIN,DEST_PORT)
                                VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                        :S1,NULL,:TYPE_MESSAGE,:PHONE,NULL,
                                        1,NULL,:D,:DEST_PORT);

              D=D+5*(1e0/24/60/60);

            END

          END

        END

      END

    END

  END

END

--

CREATE OR ALTER PROCEDURE TASK_HAPPY_BIRTHDAY (
  TASK_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE RECIPIENT_ID VARCHAR(32);
DECLARE PHONE VARCHAR(100);
DECLARE NAME VARCHAR(100);
DECLARE PATRONYMIC VARCHAR(100);
DECLARE S VARCHAR(1000);
DECLARE S1 VARCHAR(1000);
DECLARE D TIMESTAMP;
DECLARE CURRENT_DAY INTEGER;
DECLARE CURRENT_MONTH INTEGER;
DECLARE RECEIPT_TYPE_ID VARCHAR(32);
DECLARE SUM_RECEIPT NUMERIC(15,0);
DECLARE TYPE_MESSAGE INTEGER;
DECLARE DEST_PORT INTEGER;
BEGIN

  D=CURRENT_TIMESTAMP;

  CURRENT_DAY=EXTRACT(DAY FROM D);
  CURRENT_MONTH=EXTRACT(MONTH FROM D);

  SELECT CONST_VALUE FROM GET_CONST_VALUE('8CDCC7F96A988CA2432AA812964351F3') INTO :S;

  IF (S IS NOT NULL) THEN BEGIN

    FOR SELECT A.ACCOUNT_ID, A.PHONE, A.NAME, A.PATRONYMIC
          FROM DISPATCHERS D
          JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DISPATCHER_ID
         WHERE A.LOCKED<>1
           AND EXTRACT(DAY FROM D.DATE_BIRTH)=:CURRENT_DAY
           AND EXTRACT(MONTH FROM D.DATE_BIRTH)=:CURRENT_MONTH
          INTO :RECIPIENT_ID, :PHONE, :NAME, :PATRONYMIC DO BEGIN


      EXECUTE PROCEDURE GET_TYPE_MESSAGE(RECIPIENT_ID,NULL)
       RETURNING_VALUES TYPE_MESSAGE, DEST_PORT;

      IF (TYPE_MESSAGE IS NOT NULL) THEN BEGIN

        S1=S;
        S1=REPLACE_STRING(S1,'%NAME',NAME);
        S1=REPLACE_STRING(S1,'%PATRONYMIC',PATRONYMIC);

        INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                  TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,
                                  LOCKED,DATE_BEGIN,DEST_PORT)
                          VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:RECIPIENT_ID,CURRENT_TIMESTAMP,
                                  :S1,NULL,:TYPE_MESSAGE,:PHONE,NULL,2,
                                  NULL,:D,:DEST_PORT);

        D=D+5*(1e0/24/60/60);
        
      END
    END

  END

  SELECT CONST_VALUE FROM GET_CONST_VALUE('AF2D42CDBD398AFC4E0A988E3C57EF84') INTO :S;

  RECEIPT_TYPE_ID='771A20E1595D97694D7905B0A3D70FF9'; /* День рождения водителя */

  SELECT SUM_RECEIPT
    FROM RECEIPT_TYPES
   WHERE RECEIPT_TYPE_ID=:RECEIPT_TYPE_ID
    INTO :SUM_RECEIPT;

  IF ((S IS NOT NULL) AND (SUM_RECEIPT IS NOT NULL)) THEN BEGIN

    FOR SELECT A.ACCOUNT_ID, A.PHONE, A.NAME, A.PATRONYMIC
          FROM DRIVERS D
          JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
         WHERE A.LOCKED<>1
           AND EXTRACT(DAY FROM D.DATE_BIRTH)=:CURRENT_DAY
           AND EXTRACT(MONTH FROM D.DATE_BIRTH)=:CURRENT_MONTH
          INTO :RECIPIENT_ID, :PHONE, :NAME, :PATRONYMIC DO BEGIN

     INSERT INTO RECEIPTS (RECEIPT_ID,RECEIPT_TYPE_ID,ACCOUNT_ID,WHO_CREATE_ID,
                           SUM_RECEIPT,DATE_RECEIPT,DATE_CREATE,DESCRIPTION)
                   VALUES (GET_UNIQUE_ID(),:RECEIPT_TYPE_ID,:RECIPIENT_ID,:ACCOUNT_ID,
                           :SUM_RECEIPT,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,NULL);

      EXECUTE PROCEDURE GET_TYPE_MESSAGE(RECIPIENT_ID,NULL)
       RETURNING_VALUES TYPE_MESSAGE, DEST_PORT;

      IF (TYPE_MESSAGE IS NOT NULL) THEN BEGIN

        S1=S;
        S1=REPLACE_STRING(S1,'%NAME',NAME);
        S1=REPLACE_STRING(S1,'%PATRONYMIC',PATRONYMIC);
        S1=REPLACE_STRING(S1,'%SUM_RECEIPT',SUM_RECEIPT);

        INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                  TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,
                                  LOCKED,DATE_BEGIN,DEST_PORT)
                          VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:RECIPIENT_ID,CURRENT_TIMESTAMP,
                                  :S1,NULL,:TYPE_MESSAGE,:PHONE,NULL,2,
                                  NULL,:D,:DEST_PORT);

        D=D+5*(1e0/24/60/60);
      END

    END

  END

  SELECT CONST_VALUE FROM GET_CONST_VALUE('3796835EECA2A1024C539A9BC0DAAD01') INTO :S;

  RECEIPT_TYPE_ID='9088327EC6DB8B544CF127CDCA60BFBA'; /* День рождения клиента */

  SELECT SUM_RECEIPT
    FROM RECEIPT_TYPES
   WHERE RECEIPT_TYPE_ID=:RECEIPT_TYPE_ID
    INTO :SUM_RECEIPT;
    
  IF ((S IS NOT NULL) AND (SUM_RECEIPT IS NOT NULL)) THEN BEGIN

    FOR SELECT A.ACCOUNT_ID, A.PHONE, A.NAME, A.PATRONYMIC
          FROM CLIENTS C
          JOIN ACCOUNTS A ON A.ACCOUNT_ID=C.CLIENT_ID
         WHERE A.LOCKED<>1
           AND EXTRACT(DAY FROM C.DATE_BIRTH)=:CURRENT_DAY
           AND EXTRACT(MONTH FROM C.DATE_BIRTH)=:CURRENT_MONTH
           AND C.CALC_ID IS NOT NULL
          INTO :RECIPIENT_ID, :PHONE, :NAME, :PATRONYMIC DO BEGIN

      INSERT INTO RECEIPTS (RECEIPT_ID,RECEIPT_TYPE_ID,ACCOUNT_ID,WHO_CREATE_ID,
                            SUM_RECEIPT,DATE_RECEIPT,DATE_CREATE,DESCRIPTION)
                    VALUES (GET_UNIQUE_ID(),:RECEIPT_TYPE_ID,:RECIPIENT_ID,:ACCOUNT_ID,
                            :SUM_RECEIPT,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,NULL);

      EXECUTE PROCEDURE GET_TYPE_MESSAGE(RECIPIENT_ID,NULL)
       RETURNING_VALUES TYPE_MESSAGE, DEST_PORT;

      IF (TYPE_MESSAGE IS NOT NULL) THEN BEGIN

        S1=S;
        S1=REPLACE_STRING(S1,'%NAME',NAME);
        S1=REPLACE_STRING(S1,'%PATRONYMIC',PATRONYMIC);
        S1=REPLACE_STRING(S1,'%SUM_RECEIPT',SUM_RECEIPT);

        INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                  TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,
                                  LOCKED,DATE_BEGIN,DEST_PORT)
                          VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:RECIPIENT_ID,CURRENT_TIMESTAMP,
                                  :S1,NULL,:TYPE_MESSAGE,:PHONE,NULL,2,
                                  NULL,:D,:DEST_PORT);

        D=D+5*(1e0/24/60/60);

      END

    END

  END

END

--

CREATE OR ALTER PROCEDURE TASK_DRIVE_LOCK
(
  TASK_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE DRIVER_ID VARCHAR(32);
DECLARE S VARCHAR(1000);
DECLARE S1 VARCHAR(1000);
DECLARE D TIMESTAMP;
DECLARE DATE_END TIMESTAMP;
DECLARE PHONE VARCHAR(100);
DECLARE CNT INTEGER;
DECLARE TYPE_MESSAGE INTEGER;
DECLARE DEST_PORT INTEGER;
BEGIN

  SELECT CONST_VALUE FROM GET_CONST_VALUE('2D1BA9876918B7CE42515B204A6020AB') INTO :S;

  IF (S IS NOT NULL) THEN BEGIN

    D=CURRENT_TIMESTAMP;

    FOR SELECT D.DRIVER_ID, A.PHONE
          FROM DRIVERS D
          JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
         WHERE A.LOCKED<>1
          INTO :DRIVER_ID, :PHONE DO BEGIN

      SELECT MAX(DATE_END)
        FROM SHIFTS
       WHERE ACCOUNT_ID=:DRIVER_ID
        INTO :DATE_END;

      SELECT COUNT(*)
        FROM SHIFTS
       WHERE ACCOUNT_ID=:DRIVER_ID
         AND DATE_END IS NULL
        INTO :CNT;

      IF ((CNT=0) AND (DATE_END IS NOT NULL) AND
          (DATE_END<(CURRENT_TIMESTAMP-7*24*60*60*(1e0/24/60/60)))) THEN BEGIN

        UPDATE ACCOUNTS
           SET LOCKED=1
         WHERE ACCOUNT_ID=:DRIVER_ID;

        EXECUTE PROCEDURE GET_TYPE_MESSAGE(DRIVER_ID,NULL)
         RETURNING_VALUES TYPE_MESSAGE, DEST_PORT;

        IF (TYPE_MESSAGE IS NOT NULL) THEN BEGIN

          S1=S;

          INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                    TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,
                                    LOCKED,DATE_BEGIN,DEST_PORT)
                            VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                    :S1,NULL,:TYPE_MESSAGE,:PHONE,NULL,2,
                                    NULL,:D,:DEST_PORT);
          D=D+5*(1e0/24/60/60);
          
        END

      END

    END

  END

END

--

CREATE OR ALTER PROCEDURE TASK_CHANGE_PRIORITY (
  TASK_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE DRIVER_ID VARCHAR(32);
DECLARE PHONE VARCHAR(100);
DECLARE NAME VARCHAR(100);
DECLARE PATRONYMIC VARCHAR(100);
DECLARE S VARCHAR(1000);
DECLARE S1 VARCHAR(1000);
DECLARE D TIMESTAMP;
DECLARE CNT INTEGER;
DECLARE NEW_PRIORITY INTEGER;
DECLARE PRIORITY INTEGER;
DECLARE TYPE_MESSAGE INTEGER;
DECLARE DEST_PORT INTEGER;
BEGIN

  SELECT CONST_VALUE FROM GET_CONST_VALUE('6C5F5E35B4F0B54A470F466044C8EB3F') INTO :S;

  IF (S IS NOT NULL) THEN BEGIN

    D=CURRENT_TIMESTAMP;

    FOR SELECT D.DRIVER_ID, D.PRIORITY,
               A.PHONE, A.NAME, A.PATRONYMIC
          FROM DRIVERS D
          JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
         WHERE A.LOCKED<>1
           AND D.DATE_PRIORITY IS NOT NULL
           AND D.DATE_PRIORITY<=CURRENT_DATE
          INTO :DRIVER_ID, :PRIORITY,
               :PHONE, :NAME, :PATRONYMIC DO BEGIN

      SELECT COUNT(*)
        FROM ORDERS
       WHERE DRIVER_ID=:DRIVER_ID
         AND FINISHED=1
         AND PARENT_ID IS NULL
         AND RESULT_ID IN ('6DD8DFDC671DB9A742E418FD268E7DC4','E03D43E2E5B4AEEE4416B997D888FC71','B01126058AE48A354BBF0472888819A3')
         AND DATE_ACCEPT>=(CURRENT_TIMESTAMP-7*24*60*60*(1e0/24/60/60))
        INTO :CNT;

      IF ((CNT>=0) AND (CNT<=30)) THEN
        NEW_PRIORITY=2;

      IF (CNT>30) THEN
        NEW_PRIORITY=1;

      IF (PRIORITY<>NEW_PRIORITY) THEN BEGIN

        PRIORITY=NEW_PRIORITY;

        UPDATE DRIVERS
           SET PRIORITY=:PRIORITY
         WHERE DRIVER_ID=:DRIVER_ID;


        EXECUTE PROCEDURE GET_TYPE_MESSAGE(DRIVER_ID,NULL)
         RETURNING_VALUES TYPE_MESSAGE, DEST_PORT;

        IF (TYPE_MESSAGE IS NOT NULL) THEN BEGIN

          S1=S;
          S1=REPLACE_STRING(S1,'%PRIORITY',PRIORITY);
          S1=REPLACE_STRING(S1,'%ORDER_COUNT',CNT);

          INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                    TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,
                                    LOCKED,DATE_BEGIN,DEST_PORT)
                            VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                    :S1,NULL,:TYPE_MESSAGE,:PHONE,NULL,2,
                                    NULL,:D,:DEST_PORT);
          D=D+5*(1e0/24/60/60);
          
        END

      END

    END

  END

END

--

CREATE OR ALTER PROCEDURE TASK_BALANCE_REMINDER
(
  TASK_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE DRIVER_ID VARCHAR(32);
DECLARE PHONE VARCHAR(100);
DECLARE NAME VARCHAR(100);
DECLARE PATRONYMIC VARCHAR(100);
DECLARE S VARCHAR(1000);
DECLARE S1 VARCHAR(1000);
DECLARE D TIMESTAMP;
DECLARE CNT INTEGER;
DECLARE SUM_CHARGE NUMERIC(15,2);
DECLARE SUM_RECEIPT NUMERIC(15,2);
DECLARE BALANCE NUMERIC(15,2);
DECLARE MIN_BALANCE NUMERIC(15,2);
DECLARE TYPE_MESSAGE INTEGER;
DECLARE DEST_PORT INTEGER;
BEGIN

  SELECT CONST_VALUE FROM GET_CONST_VALUE('F0532713CEE09A984B2D52D050A58EF0') INTO :S;

  IF (S IS NOT NULL) THEN BEGIN

    D=CURRENT_TIMESTAMP;

    FOR SELECT D.DRIVER_ID, A.PHONE, A.NAME, A.PATRONYMIC
          FROM DRIVERS D
          JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
         WHERE A.LOCKED<>1
          INTO :DRIVER_ID, :PHONE, :NAME, :PATRONYMIC DO BEGIN

      EXECUTE PROCEDURE GET_ACCOUNT_BALANCE(:DRIVER_ID)
       RETURNING_VALUES :SUM_CHARGE, :SUM_RECEIPT, :BALANCE;

      IF (BALANCE<0) THEN BEGIN

        EXECUTE PROCEDURE GET_TYPE_MESSAGE(DRIVER_ID,NULL)
         RETURNING_VALUES TYPE_MESSAGE, DEST_PORT;

        IF (TYPE_MESSAGE IS NOT NULL) THEN BEGIN
        
          S1=S;
          S1=REPLACE_STRING(S1,'%BALANCE',CAST(BALANCE AS VARCHAR(30)));
          S1=REPLACE_STRING(S1,'-','');

          INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                    TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,
                                    LOCKED,DATE_BEGIN,DEST_PORT)
                            VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                    :S1,NULL,:TYPE_MESSAGE,:PHONE,NULL,2,
                                    NULL,:D,:DEST_PORT);

          D=D+5*(1e0/24/60/60);
        END

      END

    END

  END

END

--

CREATE OR ALTER PROCEDURE QUERY_PARK_STATES
(
  ORDER_ID VARCHAR(32),
  CREATOR_ID VARCHAR(32),
  RECIPIENT_ID VARCHAR(32),
  CONTACT VARCHAR(100),
  TYPE_MESSAGE INTEGER)
AS
  DECLARE S VARCHAR(1000);
  DECLARE F VARCHAR(1000);
  DECLARE S1 VARCHAR(1000);
  DECLARE PARK_NAME VARCHAR(100);
  DECLARE CNT INTEGER;
  DECLARE DEST_PORT INTEGER;
BEGIN
  IF ((CREATOR_ID IS NOT NULL) AND (CONTACT IS NOT NULL)) THEN BEGIN

    S='';

    SELECT CONST_VALUE FROM GET_CONST_VALUE('A3D890F68FF0BDCC4B42C3135174ABEF') INTO :F;

    EXECUTE PROCEDURE GET_TYPE_MESSAGE(CREATOR_ID,TYPE_MESSAGE)
     RETURNING_VALUES TYPE_MESSAGE, DEST_PORT;

    IF ((F IS NOT NULL) AND (TYPE_MESSAGE IS NOT NULL)) THEN BEGIN

      FOR SELECT P.NAME,
                 (SELECT COUNT(*)
                    FROM PARK_STATES PS
                   WHERE PS.DATE_OUT IS NULL
                     AND PS.PARK_ID=P.PARK_ID)
            FROM PARKS P
           ORDER BY P.PRIORITY
            INTO :PARK_NAME, :CNT DO BEGIN

        S1=F;
        S1=REPLACE_STRING(S1,'%PARK_NAME',PARK_NAME);
        S1=REPLACE_STRING(S1,'%COUNT',CAST(CNT AS VARCHAR(10)));
        S=S||S1;

      END

      INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,
                                PRIORITY,LOCKED,DATE_BEGIN,ORDER_ID,DEST_PORT)
                        VALUES (GET_UNIQUE_ID(),:CREATOR_ID,:RECIPIENT_ID,CURRENT_TIMESTAMP,
                               :S,NULL,:TYPE_MESSAGE,:CONTACT,NULL,
                               1,NULL,CURRENT_TIMESTAMP,:ORDER_ID,:DEST_PORT);
    END

  END

END

--

CREATE OR ALTER PROCEDURE PR_REFUSE_DRIVER_DRIVE_OUT (
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE DRIVER_ID VARCHAR(32);
DECLARE PARK_ID VARCHAR(32);
DECLARE PHONE VARCHAR(100);
DECLARE S VARCHAR(1000);
DECLARE TYPE_MESSAGE INTEGER;
DECLARE IN_MESSAGE_ID VARCHAR(32);
DECLARE DEST_PORT INTEGER;
BEGIN

  SELECT DRIVER_ID
    FROM ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID;

  PARK_ID=NULL;

  FOR SELECT PARK_ID
        FROM ORDERS
       WHERE PARENT_ID=:ORDER_ID
       ORDER BY DATE_HISTORY
        INTO :PARK_ID DO BEGIN
    BREAK;
  END

  UPDATE ORDERS
     SET DATE_BEGIN=CURRENT_TIMESTAMP,
         PARK_ID=:PARK_ID,
         DRIVER_ID=NULL,
         CAR_ID=NULL
   WHERE ORDER_ID=:ORDER_ID;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    FOR SELECT IN_MESSAGE_ID, TYPE_MESSAGE
          FROM IN_MESSAGES
         WHERE ORDER_ID=:ORDER_ID
           AND CODE_MESSAGE_ID='2D41BEAE73EE84B04F4E6210C399BB63' /* Водитель отказалася от заказа */
           AND SENDER_ID=:DRIVER_ID
           AND DESCRIPTION IS NULL
          INTO :IN_MESSAGE_ID, :TYPE_MESSAGE DO BEGIN

      UPDATE IN_MESSAGES
         SET DESCRIPTION=:ORDER_ID
       WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID;

      BREAK;
    END

    SELECT PHONE
      FROM ACCOUNTS
     WHERE ACCOUNT_ID=:DRIVER_ID
      INTO :PHONE;

    SELECT CONST_VALUE FROM GET_CONST_VALUE('7D5B6BED096187764ECE40FC7D5CB943') INTO :S;

    EXECUTE PROCEDURE GET_TYPE_MESSAGE(DRIVER_ID,TYPE_MESSAGE)
     RETURNING_VALUES TYPE_MESSAGE, DEST_PORT;

    IF ((S IS NOT NULL) AND (TYPE_MESSAGE IS NOT NULL)) THEN BEGIN

      INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,
                                PRIORITY,LOCKED,DATE_BEGIN,ORDER_ID,DEST_PORT)
                        VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                :S,NULL,:TYPE_MESSAGE,:PHONE,NULL,
                                2,NULL,CURRENT_TIMESTAMP,:ORDER_ID,:DEST_PORT);
    END

  END

END

--

CREATE OR ALTER PROCEDURE PR_REFUSE_DRIVER_CONFIRM (
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE DRIVER_ID VARCHAR(32);
DECLARE PARK_ID VARCHAR(32);
DECLARE PHONE VARCHAR(100);
DECLARE S VARCHAR(1000);
DECLARE TYPE_MESSAGE INTEGER;
DECLARE IN_MESSAGE_ID VARCHAR(32);
DECLARE DEST_PORT INTEGER;
BEGIN

  SELECT DRIVER_ID
    FROM ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID;

  PARK_ID=NULL;

  FOR SELECT PARK_ID
        FROM ORDERS
       WHERE PARENT_ID=:ORDER_ID
       ORDER BY DATE_HISTORY
        INTO :PARK_ID DO BEGIN
    BREAK;
  END

  UPDATE ORDERS
     SET DATE_BEGIN=CURRENT_TIMESTAMP,
         PARK_ID=:PARK_ID,
         DRIVER_ID=NULL,
         CAR_ID=NULL
   WHERE ORDER_ID=:ORDER_ID;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    FOR SELECT IN_MESSAGE_ID, TYPE_MESSAGE
          FROM IN_MESSAGES
         WHERE ORDER_ID=:ORDER_ID
           AND CODE_MESSAGE_ID='2D41BEAE73EE84B04F4E6210C399BB63' /* Водитель отказалася от заказа */
           AND SENDER_ID=:DRIVER_ID
           AND DESCRIPTION IS NULL
          INTO :IN_MESSAGE_ID, :TYPE_MESSAGE DO BEGIN

      UPDATE IN_MESSAGES
         SET DESCRIPTION=:ORDER_ID
       WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID;

      BREAK;
    END

    UPDATE PARK_STATES
       SET DATE_OUT=CURRENT_TIMESTAMP
     WHERE DATE_OUT IS NULL
       AND DRIVER_ID=:DRIVER_ID;

    SELECT PHONE
      FROM ACCOUNTS
     WHERE ACCOUNT_ID=:DRIVER_ID
      INTO :PHONE;

    SELECT CONST_VALUE FROM GET_CONST_VALUE('14AB0F225BEFBBB14E0A5296BEB471A3') INTO :S;

    EXECUTE PROCEDURE GET_TYPE_MESSAGE(DRIVER_ID,TYPE_MESSAGE)
     RETURNING_VALUES TYPE_MESSAGE, DEST_PORT;

    IF ((S IS NOT NULL) AND (TYPE_MESSAGE IS NOT NULL)) THEN BEGIN

      INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,
                                PRIORITY,LOCKED,DATE_BEGIN,ORDER_ID,DEST_PORT)
                        VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                :S,NULL,:TYPE_MESSAGE,:PHONE,NULL,
                                2,NULL,CURRENT_TIMESTAMP,:ORDER_ID,:DEST_PORT);
    END

  END

END

--

CREATE OR ALTER PROCEDURE PR_REFUSE_DRIVER_COME_OUT
(
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE DRIVER_ID VARCHAR(32);
DECLARE PHONE VARCHAR(100);
DECLARE S VARCHAR(1000);
DECLARE TYPE_MESSAGE INTEGER;
DECLARE IN_MESSAGE_ID VARCHAR(32);
DECLARE DEST_PORT INTEGER;
BEGIN

  SELECT DRIVER_ID
    FROM ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID;

  UPDATE ORDERS
     SET TYPE_PROCESS=1,
         DATE_END=CURRENT_TIMESTAMP,
         WHO_PROCESS_ID=:ACCOUNT_ID
   WHERE ORDER_ID=:ORDER_ID;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN


    FOR SELECT IN_MESSAGE_ID, TYPE_MESSAGE
          FROM IN_MESSAGES
         WHERE ORDER_ID=:ORDER_ID
           AND CODE_MESSAGE_ID='2D41BEAE73EE84B04F4E6210C399BB63' /* Водитель отказалася от заказа */
           AND SENDER_ID=:DRIVER_ID
           AND DESCRIPTION IS NULL
          INTO :IN_MESSAGE_ID, :TYPE_MESSAGE DO BEGIN

      UPDATE IN_MESSAGES
         SET DESCRIPTION=:ORDER_ID
       WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID;

      BREAK;
    END

    SELECT PHONE
      FROM ACCOUNTS
     WHERE ACCOUNT_ID=:DRIVER_ID
      INTO :PHONE;

    SELECT CONST_VALUE FROM GET_CONST_VALUE('2C0BBC7EF7418D934C32D8969D7F2D8C') INTO :S;

    EXECUTE PROCEDURE GET_TYPE_MESSAGE(DRIVER_ID,TYPE_MESSAGE)
     RETURNING_VALUES TYPE_MESSAGE, DEST_PORT;

    IF ((S IS NOT NULL) AND (TYPE_MESSAGE IS NOT NULL)) THEN BEGIN

      INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,
                                PRIORITY,LOCKED,DATE_BEGIN,ORDER_ID,DEST_PORT)
                        VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                :S,NULL,:TYPE_MESSAGE,:PHONE,NULL,
                                2,NULL,CURRENT_TIMESTAMP,:ORDER_ID,:DEST_PORT);
    END

  END

END

--

CREATE OR ALTER PROCEDURE PR_REFUSE_CLIENT_DRIVE_OUT (
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE DRIVER_ID VARCHAR(32);
DECLARE PARK_ID VARCHAR(32);
DECLARE PARK_NAME VARCHAR(100);
DECLARE PHONE VARCHAR(100);
DECLARE PARK_STATE_ID VARCHAR(32);
DECLARE DATE_IN TIMESTAMP;
DECLARE S VARCHAR(1000);
DECLARE TYPE_MESSAGE INTEGER;
DECLARE DEST_PORT INTEGER;
BEGIN

  SELECT DRIVER_ID, PARK_ID
    FROM ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID, :PARK_ID;

  UPDATE ORDERS
     SET DATE_END=CURRENT_TIMESTAMP,
         WHO_PROCESS_ID=:ACCOUNT_ID,
         FINISHED=1
   WHERE ORDER_ID=:ORDER_ID;


  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    IF (PARK_ID IS NOT NULL) THEN BEGIN

      FOR SELECT PS.PARK_STATE_ID, P.NAME, PS.DATE_IN
            FROM PARK_STATES PS
            JOIN PARKS P ON P.PARK_ID=PS.PARK_ID
           WHERE PS.PARK_ID=:PARK_ID
             AND PS.DATE_OUT IS NULL
           ORDER BY PS.DATE_IN
            INTO :PARK_STATE_ID, :PARK_NAME, :DATE_IN DO BEGIN

        DATE_IN=DATE_IN-1*(1e0/24/60/60);

        INSERT INTO PARK_STATES (PARK_STATE_ID,DRIVER_ID,PARK_ID,DATE_IN,DATE_OUT)
                         VALUES (GET_UNIQUE_ID(),:DRIVER_ID,:PARK_ID,:DATE_IN,NULL);

        BREAK;
      END

      IF (PARK_NAME IS NULL) THEN BEGIN

        INSERT INTO PARK_STATES (PARK_STATE_ID,DRIVER_ID,PARK_ID,DATE_IN,DATE_OUT)
                         VALUES (GET_UNIQUE_ID(),:DRIVER_ID,:PARK_ID,CURRENT_TIMESTAMP,NULL);

        SELECT NAME
          FROM PARKS
         WHERE PARK_ID=:PARK_ID
          INTO :PARK_NAME;

      END

      SELECT PHONE
        FROM ACCOUNTS
       WHERE ACCOUNT_ID=:DRIVER_ID
        INTO :PHONE;

      SELECT CONST_VALUE FROM GET_CONST_VALUE('7604B1762FDB97EC406174FB54FA13EA') INTO :S;

      EXECUTE PROCEDURE GET_TYPE_MESSAGE(DRIVER_ID,NULL)
       RETURNING_VALUES TYPE_MESSAGE, DEST_PORT;

      IF ((S IS NOT NULL) AND (TYPE_MESSAGE IS NOT NULL)) THEN BEGIN

        S=REPLACE_STRING(S,'%PARK_NAME',PARK_NAME);

        INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                  TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,
                                  PRIORITY,LOCKED,DATE_BEGIN,ORDER_ID,DEST_PORT)
                          VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                  :S,NULL,:TYPE_MESSAGE,:PHONE,NULL,
                                  0,NULL,CURRENT_TIMESTAMP,:ORDER_ID,:DEST_PORT);
      END

    END

  END

END

--

CREATE OR ALTER PROCEDURE PR_REFUSE_CLIENT_CONFIRM (
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE DRIVER_ID VARCHAR(32);
DECLARE PHONE VARCHAR(100);
DECLARE S VARCHAR(1000);
DECLARE TYPE_MESSAGE INTEGER;
DECLARE DEST_PORT INTEGER;
BEGIN

  SELECT DRIVER_ID
    FROM ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID;

  UPDATE ORDERS
     SET DATE_END=CURRENT_TIMESTAMP,
         WHO_PROCESS_ID=:ACCOUNT_ID,
         FINISHED=1
   WHERE ORDER_ID=:ORDER_ID;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    SELECT PHONE
      FROM ACCOUNTS
     WHERE ACCOUNT_ID=:DRIVER_ID
      INTO :PHONE;

    SELECT CONST_VALUE FROM GET_CONST_VALUE('C40297F408B0AF3A45776489F11FC512') INTO :S;

    EXECUTE PROCEDURE GET_TYPE_MESSAGE(DRIVER_ID,NULL)
     RETURNING_VALUES TYPE_MESSAGE, DEST_PORT;

    IF ((S IS NOT NULL) AND (TYPE_MESSAGE IS NOT NULL)) THEN BEGIN

      INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,
                                PRIORITY,LOCKED,DATE_BEGIN,ORDER_ID,DEST_PORT)
                        VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                :S,NULL,:TYPE_MESSAGE,:PHONE,NULL,
                                0,NULL,CURRENT_TIMESTAMP,:ORDER_ID,:DEST_PORT);
    END

  END

END

--

CREATE OR ALTER PROCEDURE PR_REFUSE_CLIENT_COME_OUT (
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE DRIVER_ID VARCHAR(32);
DECLARE PARK_ID VARCHAR(32);
DECLARE PARK_NAME VARCHAR(100);
DECLARE PHONE VARCHAR(100);
DECLARE PARK_STATE_ID VARCHAR(32);
DECLARE DATE_IN TIMESTAMP;
DECLARE S VARCHAR(1000);
DECLARE TYPE_MESSAGE INTEGER;
DECLARE IN_MESSAGE_ID VARCHAR(32);
DECLARE DEST_PORT INTEGER;
BEGIN

  SELECT DRIVER_ID, PARK_ID
    FROM ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID, :PARK_ID;

  UPDATE ORDERS
     SET DATE_END=CURRENT_TIMESTAMP,
         WHO_PROCESS_ID=:ACCOUNT_ID,
         FINISHED=1
   WHERE ORDER_ID=:ORDER_ID;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    FOR SELECT IN_MESSAGE_ID, TYPE_MESSAGE
          FROM IN_MESSAGES
         WHERE ORDER_ID=:ORDER_ID
           AND CODE_MESSAGE_ID='9273E67428E797614B153E4C799D6F48' /* Клиент отказался от заказа */
           AND SENDER_ID=:DRIVER_ID
           AND DESCRIPTION IS NULL
          INTO :IN_MESSAGE_ID, :TYPE_MESSAGE DO BEGIN

      UPDATE IN_MESSAGES
         SET DESCRIPTION=:ORDER_ID
       WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID;

      BREAK;
    END

    IF (PARK_ID IS NOT NULL) THEN BEGIN

      FOR SELECT PS.PARK_STATE_ID, P.NAME, PS.DATE_IN
            FROM PARK_STATES PS
            JOIN PARKS P ON P.PARK_ID=PS.PARK_ID
           WHERE PS.PARK_ID=:PARK_ID
             AND PS.DATE_OUT IS NULL
           ORDER BY PS.DATE_IN
            INTO :PARK_STATE_ID, :PARK_NAME, :DATE_IN DO BEGIN

        DATE_IN=DATE_IN-1*(1e0/24/60/60);

        INSERT INTO PARK_STATES (PARK_STATE_ID,DRIVER_ID,PARK_ID,DATE_IN,DATE_OUT)
                         VALUES (GET_UNIQUE_ID(),:DRIVER_ID,:PARK_ID,:DATE_IN,NULL);

        BREAK;
      END

      IF (PARK_NAME IS NULL) THEN BEGIN

        INSERT INTO PARK_STATES (PARK_STATE_ID,DRIVER_ID,PARK_ID,DATE_IN,DATE_OUT)
                         VALUES (GET_UNIQUE_ID(),:DRIVER_ID,:PARK_ID,CURRENT_TIMESTAMP,NULL);

        SELECT NAME
          FROM PARKS
         WHERE PARK_ID=:PARK_ID
          INTO :PARK_NAME;

      END

      SELECT PHONE
        FROM ACCOUNTS
       WHERE ACCOUNT_ID=:DRIVER_ID
        INTO :PHONE;

      SELECT CONST_VALUE FROM GET_CONST_VALUE('13D70B96F52BBE8D4E115CCC194F3B10') INTO :S;

      EXECUTE PROCEDURE GET_TYPE_MESSAGE(DRIVER_ID,TYPE_MESSAGE)
       RETURNING_VALUES TYPE_MESSAGE, DEST_PORT;

      IF ((S IS NOT NULL) AND (TYPE_MESSAGE IS NOT NULL)) THEN BEGIN

        S=REPLACE_STRING(S,'%PARK_NAME',PARK_NAME);

        INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                  TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,
                                  PRIORITY,LOCKED,DATE_BEGIN,ORDER_ID,DEST_PORT)
                          VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                  :S,NULL,:TYPE_MESSAGE,:PHONE,NULL,
                                  2,NULL,CURRENT_TIMESTAMP,:ORDER_ID,:DEST_PORT);
      END

    END

  END

END

--

CREATE OR ALTER PROCEDURE PR_PARTY_CALC (
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE PHONE VARCHAR(100);
DECLARE DRIVER_ID VARCHAR(32);
DECLARE S VARCHAR(1000);
DECLARE TYPE_MESSAGE INTEGER;
DECLARE IN_MESSAGE_ID VARCHAR(32);
DECLARE DEST_PORT INTEGER;
BEGIN

  SELECT DRIVER_ID
    FROM ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID;

  UPDATE ORDERS
     SET TYPE_PROCESS=1,
         DATE_END=CURRENT_TIMESTAMP,
         WHO_PROCESS_ID=:ACCOUNT_ID
   WHERE ORDER_ID=:ORDER_ID;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    FOR SELECT IN_MESSAGE_ID, TYPE_MESSAGE
          FROM IN_MESSAGES
         WHERE ORDER_ID=:ORDER_ID
           AND CODE_MESSAGE_ID='E0D06394F6BC81BA481D1F94D12B3FB4' /* Клиент отказался платить */
           AND SENDER_ID=:DRIVER_ID
           AND DESCRIPTION IS NULL
          INTO :IN_MESSAGE_ID, :TYPE_MESSAGE DO BEGIN

      UPDATE IN_MESSAGES
         SET DESCRIPTION=:ORDER_ID
       WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID;

      BREAK;
    END

    SELECT PHONE
      FROM ACCOUNTS
     WHERE ACCOUNT_ID=:DRIVER_ID
      INTO :PHONE;

    SELECT CONST_VALUE FROM GET_CONST_VALUE('8B477D56F777966345EBC1130AF01C55') INTO :S;

    EXECUTE PROCEDURE GET_TYPE_MESSAGE(DRIVER_ID,TYPE_MESSAGE)
     RETURNING_VALUES TYPE_MESSAGE, DEST_PORT;

    IF ((S IS NOT NULL) AND (TYPE_MESSAGE IS NOT NULL)) THEN BEGIN

      INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,
                                PRIORITY,LOCKED,DATE_BEGIN,ORDER_ID,DEST_PORT)
                        VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                :S,NULL,:TYPE_MESSAGE,:PHONE,NULL,
                                2,NULL,CURRENT_TIMESTAMP,:ORDER_ID,:DEST_PORT);
    END

  END

END

--

CREATE OR ALTER PROCEDURE PR_FULL_CALC (
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE COST_RATE NUMERIC(15,2);
DECLARE COST_FACT NUMERIC(15,2);
DECLARE NON_CASH NUMERIC(15,2);
DECLARE PARENT_SUM NUMERIC(15,2);
DECLARE PHONE VARCHAR(100);
DECLARE DRIVER_ID VARCHAR(32);
DECLARE SUM_CHARGE NUMERIC(15,2);
DECLARE SUM_RECEIPT NUMERIC(15,2);
DECLARE BALANCE NUMERIC(15,2);
DECLARE MIN_BALANCE NUMERIC(15,2);
DECLARE CHARGE_TYPE_ID VARCHAR(32);
DECLARE RECEIPT_TYPE_ID VARCHAR(32);
DECLARE CLIENT_ID VARCHAR(32);
DECLARE PARENT_ID VARCHAR(32);
DECLARE CALC_ID VARCHAR(32);
DECLARE S VARCHAR(1000);
DECLARE CODE VARCHAR(100);
DECLARE CNT INTEGER;
DECLARE DESCRIPTION VARCHAR(250);
DECLARE USER_NAME VARCHAR(100);
DECLARE CLIENT_TYPE_MESSAGE INTEGER;
DECLARE DRIVER_TYPE_MESSAGE INTEGER;
DECLARE CLIENT_DEST_PORT INTEGER;
DECLARE DRIVER_DEST_PORT INTEGER;
DECLARE IN_MESSAGE_ID VARCHAR(32);
BEGIN

  SELECT PHONE, DRIVER_ID, COST_RATE, COST_FACT, CLIENT_ID
    FROM ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :PHONE, :DRIVER_ID, :COST_RATE, :COST_FACT, :CLIENT_ID;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    FOR SELECT IN_MESSAGE_ID, TYPE_MESSAGE
          FROM IN_MESSAGES
         WHERE ORDER_ID=:ORDER_ID
           AND CODE_MESSAGE_ID='0388BCC17DE1A1754B566F18AEEED771' /* Клиент рассчитался полностью */
           AND SENDER_ID=:DRIVER_ID
           AND DESCRIPTION IS NULL
          INTO :IN_MESSAGE_ID, :DRIVER_TYPE_MESSAGE DO BEGIN

      UPDATE IN_MESSAGES
         SET DESCRIPTION=:ORDER_ID
       WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID;

      BREAK;
    END

  END

  IF ((COST_FACT IS NULL) OR (COST_FACT<=0.0))  THEN
    COST_FACT=:COST_RATE;

  IF (COST_FACT<=0.0) THEN BEGIN

    SELECT CONST_VALUE FROM GET_CONST_VALUE('4BB5C780923E872D436DA3DA31C9E0B0') INTO :S;

    EXECUTE PROCEDURE GET_TYPE_MESSAGE(DRIVER_ID,DRIVER_TYPE_MESSAGE)
     RETURNING_VALUES DRIVER_TYPE_MESSAGE, DRIVER_DEST_PORT;

    IF ((S IS NOT NULL) AND (DRIVER_TYPE_MESSAGE IS NOT NULL)) THEN BEGIN

      SELECT PHONE
        FROM ACCOUNTS
       WHERE ACCOUNT_ID=:DRIVER_ID
        INTO :PHONE;

      INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,
                                PRIORITY,LOCKED,DATE_BEGIN,ORDER_ID,DEST_PORT)
                        VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                :S,NULL,:DRIVER_TYPE_MESSAGE,:PHONE,NULL,
                                2,NULL,CURRENT_TIMESTAMP,:ORDER_ID,:DRIVER_DEST_PORT);
    END

    EXECUTE PROCEDURE PR_MANUAL(ORDER_ID,ACCOUNT_ID);

  END ELSE BEGIN

    UPDATE ORDERS
       SET FINISHED=1,
           DATE_END=CURRENT_TIMESTAMP,
           WHO_PROCESS_ID=:ACCOUNT_ID,
           COST_FACT=:COST_FACT
     WHERE ORDER_ID=:ORDER_ID;

    EXECUTE PROCEDURE CREATE_ROUTE_HISTORY(ORDER_ID);

    IF (DRIVER_ID IS NOT NULL) THEN BEGIN

      CALC_ID=NULL;

      IF (CLIENT_ID IS NOT NULL) THEN BEGIN

        SELECT C.CALC_ID, A.USER_NAME
          FROM CLIENTS C
          JOIN ACCOUNTS A ON A.ACCOUNT_ID=C.CLIENT_ID
         WHERE CLIENT_ID=:CLIENT_ID
          INTO :CALC_ID, :USER_NAME;

        SELECT COUNT(*)
          FROM CLIENT_CHILDS
         WHERE CHILD_ID=:CLIENT_ID
          INTO :CNT;

        IF (CNT>0) THEN BEGIN

          PARENT_SUM=2.0;

          IF ((COST_FACT>150.0) AND (COST_FACT<=250.0)) THEN
            PARENT_SUM=5.0;

          IF ((COST_FACT>250.0) AND (COST_FACT<=350.0)) THEN
            PARENT_SUM=10.0;

          IF (COST_FACT>350.0) THEN
            PARENT_SUM=20.0;

          SUM_RECEIPT=PARENT_SUM/CNT;

          FOR SELECT CLIENT_ID
                FROM CLIENT_CHILDS

               WHERE CHILD_ID=:CLIENT_ID
                INTO :PARENT_ID DO BEGIN

           RECEIPT_TYPE_ID='9958D6ED64ADAAB94AEF470DA7B5F4F7'; /* Поездка дочернего клиента */

           DESCRIPTION=USER_NAME;

           INSERT INTO RECEIPTS (RECEIPT_ID,RECEIPT_TYPE_ID,ACCOUNT_ID,WHO_CREATE_ID,
                                 SUM_RECEIPT,DATE_RECEIPT,DATE_CREATE,DESCRIPTION)
                         VALUES (GET_UNIQUE_ID(),:RECEIPT_TYPE_ID,:PARENT_ID,:ACCOUNT_ID,
                                :SUM_RECEIPT,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,:DESCRIPTION);

          END
        END

      END

      BALANCE=NULL;

      IF (CALC_ID IS NOT NULL) THEN BEGIN

        EXECUTE PROCEDURE GET_ACCOUNT_BALANCE(:CLIENT_ID)
         RETURNING_VALUES :SUM_CHARGE, :SUM_RECEIPT, :BALANCE;

      END

      NON_CASH=NULL;

      IF ((BALANCE IS NOT NULL) AND (BALANCE<>0.0)) THEN BEGIN

        IF (BALANCE>=COST_FACT) THEN BEGIN
          NON_CASH=COST_FACT;
          BALANCE=BALANCE-NON_CASH;
        END ELSE BEGIN
          NON_CASH=BALANCE;
          BALANCE=0.0;
        END

      END

      IF (NON_CASH IS NOT NULL) THEN BEGIN

        CHARGE_TYPE_ID='757B9CAF2D3CA5144A7E2A23472990E5'; /* Поездка */

        SUM_CHARGE=NON_CASH;

        INSERT INTO CHARGES (CHARGE_ID,WHO_CREATE_ID,CHARGE_TYPE_ID,ACCOUNT_ID,
                             SUM_CHARGE,DATE_CHARGE,DATE_CREATE,DESCRIPTION)
                     VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:CHARGE_TYPE_ID,:CLIENT_ID,
                             :SUM_CHARGE,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,NULL);


      END

      IF (SUBSTR(PHONE,1,3)='+79')  THEN BEGIN

        IF (NON_CASH IS NOT NULL) THEN BEGIN

          SELECT CONST_VALUE FROM GET_CONST_VALUE('56140344A440BE774C9007D49CD574E9') INTO :S;

        END ELSE BEGIN

          SELECT CONST_VALUE FROM GET_CONST_VALUE('05B75340B170BF5141FC63F5CDF7FCD6') INTO :S;

        END

        EXECUTE PROCEDURE GET_TYPE_MESSAGE(CLIENT_ID,NULL)
         RETURNING_VALUES CLIENT_TYPE_MESSAGE, CLIENT_DEST_PORT;

        IF ((S IS NOT NULL) AND (CLIENT_TYPE_MESSAGE IS NOT NULL)) THEN BEGIN

          S=REPLACE_STRING(S,'%BALANCE',CAST(CAST(BALANCE AS NUMERIC(15,0)) AS VARCHAR(30)));

          INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                    TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,
                                    PRIORITY,LOCKED,DATE_BEGIN,ORDER_ID,DEST_PORT)
                            VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:CLIENT_ID,CURRENT_TIMESTAMP,
                                    :S,NULL,:CLIENT_TYPE_MESSAGE,:PHONE,NULL,
                                    2,NULL,CURRENT_TIMESTAMP,:ORDER_ID,:CLIENT_DEST_PORT);
        END

        SELECT CONST_VALUE FROM GET_CONST_VALUE('E9FFA9589ABD8C174474572B72017BCC') INTO :S;

        IF ((S IS NOT NULL) AND (CLIENT_TYPE_MESSAGE IS NOT NULL)) THEN BEGIN

          INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                    TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,
                                    PRIORITY,LOCKED,DATE_BEGIN,ORDER_ID,DEST_PORT)
                            VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:CLIENT_ID,CURRENT_TIMESTAMP,
                                    :S,NULL,:CLIENT_TYPE_MESSAGE,:PHONE,NULL,
                                    2,NULL,CURRENT_TIMESTAMP,:ORDER_ID,:CLIENT_DEST_PORT);
        END

      END

      CHARGE_TYPE_ID='E1BC9789DA9DB2B041C0784EBE92BFC9'; /* Выполнение заказа */

      SELECT RET_SUM
        FROM GET_DRIVER_SUM(:DRIVER_ID,:COST_FACT)
        INTO :SUM_CHARGE;

      INSERT INTO CHARGES (CHARGE_ID,WHO_CREATE_ID,CHARGE_TYPE_ID,ACCOUNT_ID,
                           SUM_CHARGE,DATE_CHARGE,DATE_CREATE,DESCRIPTION)
                   VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:CHARGE_TYPE_ID,:DRIVER_ID,
                           :SUM_CHARGE,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,NULL);

      IF (NON_CASH IS NOT NULL) THEN BEGIN

        RECEIPT_TYPE_ID='3F91C48D888F81974941D256C0815B03'; /* Компенсация за поездку */

        SUM_RECEIPT=NON_CASH;

        INSERT INTO RECEIPTS (RECEIPT_ID,RECEIPT_TYPE_ID,ACCOUNT_ID,WHO_CREATE_ID,
                              SUM_RECEIPT,DATE_RECEIPT,DATE_CREATE,DESCRIPTION)
                      VALUES (GET_UNIQUE_ID(),:RECEIPT_TYPE_ID,:DRIVER_ID,:ACCOUNT_ID,
                              :SUM_RECEIPT,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,NULL);

      END

      EXECUTE PROCEDURE GET_ACCOUNT_BALANCE(:DRIVER_ID)
       RETURNING_VALUES :SUM_CHARGE, :SUM_RECEIPT, :BALANCE;

      SELECT MIN_BALANCE
        FROM DRIVERS
       WHERE DRIVER_ID=:DRIVER_ID
        INTO :MIN_BALANCE;

      IF ((MIN_BALANCE IS NULL) OR ((MIN_BALANCE IS NOT NULL) AND (BALANCE>MIN_BALANCE))) THEN BEGIN

        SELECT CONST_VALUE FROM GET_CONST_VALUE('16835607B30CA79F4CE883B53AFE972D') INTO :S;

      END ELSE BEGIN

        UPDATE SHIFTS
           SET DATE_END=CURRENT_TIMESTAMP
         WHERE ACCOUNT_ID=:DRIVER_ID
           AND DATE_END IS NULL;

        SELECT CONST_VALUE FROM GET_CONST_VALUE('634880F305E9AA434245E3E596697001') INTO :S;

      END

      SELECT PHONE
        FROM ACCOUNTS
       WHERE ACCOUNT_ID=:DRIVER_ID
        INTO :PHONE;

      IF ((S IS NOT NULL) AND (DRIVER_TYPE_MESSAGE IS NOT NULL)) THEN BEGIN

        S=REPLACE_STRING(S,'%BALANCE',CAST(BALANCE AS VARCHAR(30)));

        IF (NON_CASH IS NULL) THEN
          NON_CASH=0.0;

        S=REPLACE_STRING(S,'%NON_CASH',CAST(CAST(NON_CASH AS NUMERIC(15,0)) AS VARCHAR(30)));

        INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                  TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,
                                  PRIORITY,LOCKED,DATE_BEGIN,ORDER_ID,DEST_PORT)
                          VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                  :S,NULL,:DRIVER_TYPE_MESSAGE,:PHONE,NULL,
                                  2,NULL,CURRENT_TIMESTAMP,:ORDER_ID,:DRIVER_DEST_PORT);
      END

      FOR SELECT TRIM(SUB_STRING(IM.TEXT_IN,2,100))
            FROM IN_MESSAGES IM
            JOIN CODE_MESSAGES CM ON CM.CODE_MESSAGE_ID=IM.CODE_MESSAGE_ID
           WHERE IM.SENDER_ID=:DRIVER_ID
             AND IM.ORDER_ID=:ORDER_ID
             AND IM.CODE_MESSAGE_ID='0388BCC17DE1A1754B566F18AEEED771' /* Клиент рассчитался полностью */
             AND CM.ENABLED=1
           ORDER BY IM.DATE_IN DESC
            INTO :CODE DO BEGIN

        SELECT COUNT(*)
          FROM CODE_MESSAGES
         WHERE CODE=:CODE
          INTO :CNT;

        IF (CNT=1) THEN BEGIN

          EXECUTE PROCEDURE TRY_PARK_IN(ORDER_ID,ACCOUNT_ID,DRIVER_ID,CODE,DRIVER_TYPE_MESSAGE);

        END ELSE BEGIN

          EXECUTE PROCEDURE QUERY_PARK_STATES (ORDER_ID,ACCOUNT_ID,DRIVER_ID,PHONE,DRIVER_TYPE_MESSAGE);

        END

        BREAK;
      END

    END

  END
END

--

CREATE OR ALTER PROCEDURE PR_CLIENT_IN_CAR (
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE PHONE VARCHAR(100);
DECLARE DRIVER_ID VARCHAR(32);
DECLARE S VARCHAR(1000);
DECLARE TYPE_MESSAGE INTEGER;
DECLARE IN_MESSAGE_ID VARCHAR(32);
DECLARE DEST_PORT INTEGER;
BEGIN

  SELECT DRIVER_ID
    FROM ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID;

  UPDATE ORDERS
     SET DATE_BEGIN=CURRENT_TIMESTAMP
   WHERE ORDER_ID=:ORDER_ID;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    FOR SELECT IN_MESSAGE_ID, TYPE_MESSAGE
          FROM IN_MESSAGES
         WHERE ORDER_ID=:ORDER_ID
           AND CODE_MESSAGE_ID='3FD0D3ABD5E0B697483FF8520EDDBD6D' /* Клиент сел в машину */
           AND SENDER_ID=:DRIVER_ID
           AND DESCRIPTION IS NULL
          INTO :IN_MESSAGE_ID, :TYPE_MESSAGE DO BEGIN

      UPDATE IN_MESSAGES
         SET DESCRIPTION=:ORDER_ID
       WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID;

      BREAK;
    END

    SELECT PHONE
      FROM ACCOUNTS
     WHERE ACCOUNT_ID=:DRIVER_ID
      INTO :PHONE;

    SELECT CONST_VALUE FROM GET_CONST_VALUE('620D357394B89B18454EB58DD5CE9F19') INTO :S;

    EXECUTE PROCEDURE GET_TYPE_MESSAGE(DRIVER_ID,TYPE_MESSAGE)
     RETURNING_VALUES TYPE_MESSAGE, DEST_PORT;

    IF ((S IS NOT NULL) AND (TYPE_MESSAGE IS NOT NULL)) THEN BEGIN

      INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,
                                PRIORITY,LOCKED,DATE_BEGIN,ORDER_ID,DEST_PORT)
                        VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                :S,NULL,:TYPE_MESSAGE,:PHONE,NULL,
                                2,NULL,CURRENT_TIMESTAMP,:ORDER_ID,:DEST_PORT);
    END

  END

END

--

CREATE OR ALTER PROCEDURE PR_CHANGE_ROUTE (
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE PHONE VARCHAR(100);
DECLARE DRIVER_ID VARCHAR(32);
DECLARE S VARCHAR(1000);
DECLARE TYPE_MESSAGE INTEGER;
DECLARE IN_MESSAGE_ID VARCHAR(32);
DECLARE DEST_PORT INTEGER;
BEGIN

  SELECT DRIVER_ID
    FROM ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID;

  UPDATE ORDERS
     SET TYPE_PROCESS=1,
         DATE_END=CURRENT_TIMESTAMP,
         WHO_PROCESS_ID=:ACCOUNT_ID
   WHERE ORDER_ID=:ORDER_ID;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    FOR SELECT IN_MESSAGE_ID, TYPE_MESSAGE
          FROM IN_MESSAGES
         WHERE ORDER_ID=:ORDER_ID
           AND CODE_MESSAGE_ID='F42D57842950B923481A9B2D02B925CB' /* Клиент хочет сменить маршрут */
           AND SENDER_ID=:DRIVER_ID
           AND DESCRIPTION IS NULL
          INTO :IN_MESSAGE_ID, :TYPE_MESSAGE DO BEGIN

      UPDATE IN_MESSAGES
         SET DESCRIPTION=:ORDER_ID
       WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID;

      BREAK;
    END

    SELECT PHONE
      FROM ACCOUNTS
     WHERE ACCOUNT_ID=:DRIVER_ID
      INTO :PHONE;

    SELECT CONST_VALUE FROM GET_CONST_VALUE('2A7354AFB1FDB1D041F8FB2D06FFBC70') INTO :S;

    EXECUTE PROCEDURE GET_TYPE_MESSAGE(DRIVER_ID,TYPE_MESSAGE)
     RETURNING_VALUES TYPE_MESSAGE, DEST_PORT;

    IF ((S IS NOT NULL) AND (TYPE_MESSAGE IS NOT NULL)) THEN BEGIN

      INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,
                                PRIORITY,LOCKED,DATE_BEGIN,ORDER_ID,DEST_PORT)
                        VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                :S,NULL,:TYPE_MESSAGE,:PHONE,NULL,
                                2,NULL,CURRENT_TIMESTAMP,:ORDER_ID,:DEST_PORT);
    END

  END

END

--

CREATE OR ALTER PROCEDURE PR_ARRIVAL_DRIVER (
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE PHONE VARCHAR(100);
DECLARE DRIVER_ID VARCHAR(32);
DECLARE PARK_ID VARCHAR(32);
DECLARE PARK_STREET_ID VARCHAR(32);
DECLARE PARK_HOUSE VARCHAR(10);
DECLARE FROM_STREET_ID VARCHAR(32);
DECLARE FROM_HOUSE VARCHAR(10);
DECLARE RECEIPT_TYPE_ID VARCHAR(32);
DECLARE COST_RATE NUMERIC(15,2);
DECLARE COST_CASH NUMERIC(15,2);
DECLARE COLOR VARCHAR(100);
DECLARE BRAND VARCHAR(100);
DECLARE STATE_NUM VARCHAR(50);
DECLARE PREFIX VARCHAR(10);
DECLARE STREET VARCHAR(100);
DECLARE HOUSE VARCHAR(10);
DECLARE FLAT VARCHAR(10);
DECLARE PORCH VARCHAR(10);
DECLARE LOCALITY VARCHAR(100);
DECLARE CLIENT_ID VARCHAR(32);
DECLARE CALC_ID VARCHAR(32);
DECLARE SUM_CHARGE NUMERIC(15,2);
DECLARE SUM_RECEIPT NUMERIC(15,2);
DECLARE BALANCE NUMERIC(15,2);
DECLARE S VARCHAR(1000);
DECLARE S1 VARCHAR(1000);
DECLARE ADDRESS VARCHAR(1000);
DECLARE NUM INTEGER;
DECLARE CNT INTEGER;
DECLARE FLAG INTEGER;
DECLARE D TIMESTAMP;
DECLARE LAT1 DOUBLE PRECISION;
DECLARE LON1 DOUBLE PRECISION;
DECLARE LAT2 DOUBLE PRECISION;
DECLARE LON2 DOUBLE PRECISION;
DECLARE ROUTE_DISTANCE DOUBLE PRECISION;
DECLARE DISTANCE NUMERIC(15,2);
DECLARE CLIENT_TYPE_MESSAGE INTEGER;
DECLARE DRIVER_TYPE_MESSAGE INTEGER;
DECLARE IN_MESSAGE_ID VARCHAR(32);
DECLARE CLIENT_DEST_PORT INTEGER;
DECLARE DRIVER_DEST_PORT INTEGER;
BEGIN

  SELECT O.PHONE, O.DRIVER_ID, O.PARK_ID,
         O.STREET_ID, O.HOUSE,
         O.COST_RATE, O.CLIENT_ID,
         C.COLOR, C.BRAND, C.STATE_NUM
    FROM ORDERS O
    LEFT JOIN DRIVERS D ON D.DRIVER_ID=O.DRIVER_ID
    LEFT JOIN CARS C ON C.CAR_ID=D.CAR_ID
   WHERE ORDER_ID=:ORDER_ID
    INTO :PHONE, :DRIVER_ID, :PARK_ID,
         :FROM_STREET_ID, :FROM_HOUSE,
         :COST_RATE, :CLIENT_ID,
         :COLOR, :BRAND, :STATE_NUM;

  UPDATE ORDERS
     SET DATE_BEGIN=CURRENT_TIMESTAMP
   WHERE ORDER_ID=:ORDER_ID;

  CALC_ID=NULL;

  IF (CLIENT_ID IS NOT NULL) THEN BEGIN

    SELECT CALC_ID
      FROM CLIENTS
     WHERE CLIENT_ID=:CLIENT_ID
      INTO :CALC_ID;

  END

  BALANCE=NULL;

  IF (CALC_ID IS NOT NULL) THEN BEGIN

    EXECUTE PROCEDURE GET_ACCOUNT_BALANCE(:CLIENT_ID)
     RETURNING_VALUES :SUM_CHARGE, :SUM_RECEIPT, :BALANCE;

  END

  FLAG=0;

  FOR SELECT STREET_ID, HOUSE
        FROM ROUTES
       WHERE ORDER_ID=:ORDER_ID
       ORDER BY PRIORITY
        INTO :STREET, :HOUSE DO BEGIN

    IF ((STREET IS NOT NULL) AND (HOUSE IS NOT NULL)) THEN BEGIN

    END ELSE BEGIN

      FLAG=1;

    END
  END

  COST_CASH=NULL;

  IF ((COST_RATE>0.0) AND (FLAG=0)) THEN BEGIN

    IF (BALANCE IS NOT NULL) THEN BEGIN

      IF (BALANCE>=COST_RATE) THEN
        COST_CASH=0.0;
      ELSE
        COST_CASH=COST_RATE-BALANCE;

    END

  END

  IF (SUBSTR(PHONE,1,3)='+79')  THEN BEGIN

    IF ((COST_RATE>0.0) AND (FLAG=0)) THEN BEGIN

      IF (COST_CASH IS NULL) THEN

        SELECT CONST_VALUE FROM GET_CONST_VALUE('8D9E6C9F4852AD8142205F027B2A5288') INTO :S;

      ELSE

        SELECT CONST_VALUE FROM GET_CONST_VALUE('9CA9F2761D2BBE974791906824C3C31A') INTO :S;

    END ELSE BEGIN

      SELECT CONST_VALUE FROM GET_CONST_VALUE('93EBB0171E37A0884313759C0DA1EB3D') INTO :S;

    END

    EXECUTE PROCEDURE GET_TYPE_MESSAGE(CLIENT_ID,NULL)
     RETURNING_VALUES CLIENT_TYPE_MESSAGE, CLIENT_DEST_PORT;

    IF ((S IS NOT NULL) AND (CLIENT_TYPE_MESSAGE IS NOT NULL)) THEN BEGIN

      S=REPLACE_STRING(S,'%COLOR',COLOR);
      S=REPLACE_STRING(S,'%BRAND',BRAND);
      S=REPLACE_STRING(S,'%STATE_NUM',STATE_NUM);
      S=REPLACE_STRING(S,'%COST_RATE',CAST(CAST(COST_RATE AS NUMERIC(15,0)) AS VARCHAR(30)));
      S=REPLACE_STRING(S,'%COST_CASH',CAST(CAST(COST_CASH AS NUMERIC(15,0)) AS VARCHAR(30)));

      INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,
                                PRIORITY,LOCKED,DATE_BEGIN,ORDER_ID,DEST_PORT)
                        VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:CLIENT_ID,CURRENT_TIMESTAMP,
                                :S,NULL,:CLIENT_TYPE_MESSAGE,:PHONE,NULL,
                                0,NULL,CURRENT_TIMESTAMP,:ORDER_ID,:CLIENT_DEST_PORT);

    END

    SELECT CONST_VALUE FROM GET_CONST_VALUE('F4384929079999BB47A895BFCA5BB382') INTO :S;

    IF ((S IS NOT NULL) AND (CLIENT_TYPE_MESSAGE IS NOT NULL)) THEN BEGIN

      INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,
                                PRIORITY,LOCKED,DATE_BEGIN,ORDER_ID,DEST_PORT)
                        VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:CLIENT_ID,CURRENT_TIMESTAMP,
                                :S,NULL,:CLIENT_TYPE_MESSAGE,:PHONE,NULL,
                                0,NULL,CURRENT_TIMESTAMP,:ORDER_ID,:CLIENT_DEST_PORT);

    END

  END

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    FOR SELECT IN_MESSAGE_ID, TYPE_MESSAGE
          FROM IN_MESSAGES
         WHERE ORDER_ID=:ORDER_ID
           AND CODE_MESSAGE_ID='618A0B399123BEEA474944099929C541' /* Водитель прибыл */
           AND SENDER_ID=:DRIVER_ID
           AND DESCRIPTION IS NULL
          INTO :IN_MESSAGE_ID, :DRIVER_TYPE_MESSAGE DO BEGIN

      UPDATE IN_MESSAGES
         SET DESCRIPTION=:ORDER_ID
       WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID;

      BREAK;
    END

    EXECUTE PROCEDURE GET_TYPE_MESSAGE(DRIVER_ID,DRIVER_TYPE_MESSAGE)
     RETURNING_VALUES DRIVER_TYPE_MESSAGE, DRIVER_DEST_PORT;

    SELECT PHONE
      FROM ACCOUNTS
     WHERE ACCOUNT_ID=:DRIVER_ID
      INTO :PHONE;

    FLAG=0;
    NUM=0;

    SELECT COUNT(*)
      FROM ROUTES
     WHERE ORDER_ID=:ORDER_ID
      INTO :CNT;

    D=CURRENT_TIMESTAMP;

    FOR SELECT S.PREFIX, S.NAME, R.HOUSE, R.FLAT, R.PORCH, L.NAME
          FROM ROUTES R
          LEFT JOIN STREETS S ON S.STREET_ID=R.STREET_ID
          LEFT JOIN LOCALITIES L ON L.LOCALITY_ID=S.LOCALITY_ID
         WHERE R.ORDER_ID=:ORDER_ID
         ORDER BY R.PRIORITY
          INTO :PREFIX, :STREET, :HOUSE, :FLAT, :PORCH, :LOCALITY DO BEGIN

      ADDRESS='';
      S=NULL;

      IF ((STREET IS NOT NULL) AND (HOUSE IS NOT NULL)) THEN BEGIN

        IF (PREFIX IS NOT NULL) THEN
          ADDRESS=PREFIX||' ';

        IF (STREET IS NOT NULL) THEN
          ADDRESS=ADDRESS||STREET;

        IF (HOUSE IS NOT NULL) THEN
          ADDRESS=ADDRESS||' '||HOUSE;

        IF (FLAT IS NOT NULL) THEN
          ADDRESS=ADDRESS||'-'||FLAT;

        IF (PORCH IS NOT NULL) THEN
          ADDRESS=ADDRESS||' п.'||PORCH;

        IF ((LOCALITY IS NOT NULL) AND (LOCALITY<>'Красноярск')) THEN
          ADDRESS=ADDRESS||', '||LOCALITY;

        SELECT CONST_VALUE FROM GET_CONST_VALUE('92009DB6C3EAA9E74B80D333538FE40D') INTO :S;

      END ELSE BEGIN

        FLAG=1;

        SELECT CONST_VALUE FROM GET_CONST_VALUE('7ED5E8A8BBD9870A411517B54D9EB973') INTO :S;

      END

      IF (S IS NOT NULL) THEN BEGIN

        NUM=NUM+1;

        S=REPLACE_STRING(S,'%NUM',NUM);
        S=REPLACE_STRING(S,'%COUNT',CNT);
        S=REPLACE_STRING(S,'%ADDRESS',ADDRESS);

        IF (NUM=CNT) THEN BEGIN

          IF ((FLAG=0) AND (COST_RATE>0.0)) THEN BEGIN

            IF (COST_CASH IS NULL) THEN

              SELECT CONST_VALUE FROM GET_CONST_VALUE('9C8BC7D14DAEAE5C4DC8C1C91B20BCC2') INTO :S1;

            ELSE

              SELECT CONST_VALUE FROM GET_CONST_VALUE('A468782967A1A4D347F85F33D39E348A') INTO :S1;

          END ELSE

            SELECT CONST_VALUE FROM GET_CONST_VALUE('D3F68032AD999D004140A480A8AAF749') INTO :S1;

        END ELSE

          S1=S;


        IF ((S1 IS NOT NULL) AND (DRIVER_TYPE_MESSAGE IS NOT NULL)) THEN BEGIN

          S1=REPLACE_STRING(S1,'%ADDRESS',S);
          S1=REPLACE_STRING(S1,'%COST_RATE',CAST(CAST(COST_RATE AS NUMERIC(15,0)) AS VARCHAR(30)));
          S1=REPLACE_STRING(S1,'%COST_CASH',CAST(CAST(COST_CASH AS NUMERIC(15,0)) AS VARCHAR(30)));

          INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                    TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,
                                    PRIORITY,LOCKED,DATE_BEGIN,ORDER_ID,DEST_PORT)
                            VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                    :S1,NULL,:DRIVER_TYPE_MESSAGE,:PHONE,NULL,
                                    2,NULL,:D,:ORDER_ID,:DRIVER_DEST_PORT);

          D=D+1*(1e0/24/60/60);

        END

      END

    END

    IF (PARK_ID IS NOT NULL) THEN BEGIN

      SELECT STREET_ID, HOUSE
        FROM PARKS
       WHERE PARK_ID=:PARK_ID
        INTO :PARK_STREET_ID, :PARK_HOUSE;

      IF ((PARK_STREET_ID IS NOT NULL) AND (PARK_HOUSE IS NOT NULL)) THEN BEGIN

        SELECT LAT, LON
          FROM MAP_OBJECTS
         WHERE STREET_ID=:PARK_STREET_ID
           AND HOUSE=:PARK_HOUSE
          INTO :LAT1, :LON1;

        IF ((LAT1 IS NOT NULL) AND (LON1 IS NOT NULL) AND
            (FROM_STREET_ID IS NOT NULL) AND (FROM_HOUSE IS NOT NULL)) THEN BEGIN

          SELECT LAT, LON
            FROM MAP_OBJECTS
           WHERE STREET_ID=:FROM_STREET_ID
             AND HOUSE=:FROM_HOUSE
            INTO :LAT2, :LON2;

          IF ((LAT2 IS NOT NULL) AND (LON2 IS NOT NULL)) THEN BEGIN

            EXECUTE PROCEDURE GET_ROUTE_DISTANCE(:LAT1,:LON1,:LAT2,:LON2)
             RETURNING_VALUES :ROUTE_DISTANCE;

            IF ((ROUTE_DISTANCE IS NOT NULL) AND (ROUTE_DISTANCE>0.0)) THEN BEGIN

              DISTANCE=CAST((ROUTE_DISTANCE/1000) AS NUMERIC(15,2));

              IF (DISTANCE>5.0) THEN BEGIN

                DISTANCE=DISTANCE-5.0;

                RECEIPT_TYPE_ID='2448E302595392064D9DF67BDD05C7DB'; /* Компенсация за прогон */

                SUM_RECEIPT=DISTANCE*2.5;

                INSERT INTO RECEIPTS (RECEIPT_ID,RECEIPT_TYPE_ID,ACCOUNT_ID,WHO_CREATE_ID,
                                      SUM_RECEIPT,DATE_RECEIPT,DATE_CREATE,DESCRIPTION)
                              VALUES (GET_UNIQUE_ID(),:RECEIPT_TYPE_ID,:DRIVER_ID,:ACCOUNT_ID,
                                      :SUM_RECEIPT,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,NULL);

                SELECT CONST_VALUE FROM GET_CONST_VALUE('6905163E6105BE12488DAF7AAFA32810') INTO :S;

                IF ((S IS NOT NULL) AND (DRIVER_TYPE_MESSAGE IS NOT NULL)) THEN BEGIN

                  S=REPLACE_STRING(S,'%DISTANCE',CAST(DISTANCE AS VARCHAR(30)));
                  S=REPLACE_STRING(S,'%SUM_RECEIPT',CAST(SUM_RECEIPT AS VARCHAR(30)));

                  INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                            TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,
                                            PRIORITY,LOCKED,DATE_BEGIN,ORDER_ID,DEST_PORT)
                                    VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                            :S,NULL,:DRIVER_TYPE_MESSAGE,:PHONE,NULL,
                                            2,NULL,:D,:ORDER_ID,:DRIVER_DEST_PORT);


                END

              END

            END

          END

        END

      END

    END

  END

END

--

CREATE OR ALTER PROCEDURE PR_ANOTHER_DRIVER (
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE PHONE VARCHAR(100);
DECLARE DRIVER_ID VARCHAR(32);
DECLARE PARK_ID VARCHAR(32);
DECLARE S VARCHAR(1000);
DECLARE TYPE_MESSAGE INTEGER;
DECLARE DEST_PORT INTEGER;
BEGIN

  SELECT DRIVER_ID
    FROM ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID;

  PARK_ID=NULL;

  FOR SELECT PARK_ID
        FROM ORDERS
       WHERE PARENT_ID=:ORDER_ID
       ORDER BY DATE_HISTORY
        INTO :PARK_ID DO BEGIN
    BREAK;
  END

  UPDATE ORDERS
     SET TYPE_PROCESS=0,
         DATE_END=CURRENT_TIMESTAMP,
         WHO_PROCESS_ID=:ACCOUNT_ID,
         PARK_ID=:PARK_ID,
         DRIVER_ID=NULL,
         CAR_ID=NULL
   WHERE ORDER_ID=:ORDER_ID;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    SELECT PHONE
      FROM ACCOUNTS
     WHERE ACCOUNT_ID=:DRIVER_ID
      INTO :PHONE;

    SELECT CONST_VALUE FROM GET_CONST_VALUE('A82FFC060D399C82436CB3D669239B0B') INTO :S;

    EXECUTE PROCEDURE GET_TYPE_MESSAGE(DRIVER_ID,NULL)
     RETURNING_VALUES TYPE_MESSAGE, DEST_PORT;

    IF ((S IS NOT NULL) AND (TYPE_MESSAGE IS NOT NULL)) THEN BEGIN

      INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,
                                PRIORITY,LOCKED,DATE_BEGIN,ORDER_ID,DEST_PORT)
                        VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                :S,NULL,:TYPE_MESSAGE,:PHONE,NULL,
                                0,NULL,CURRENT_TIMESTAMP,:ORDER_ID,:DEST_PORT);
    END

  END

END

--

CREATE OR ALTER PROCEDURE CODE_TEST (
  ACCOUNT_ID VARCHAR(32),
  IN_MESSAGE_ID VARCHAR(32))
AS
DECLARE CONTACT VARCHAR(100);
DECLARE SENDER_ID VARCHAR(32);
DECLARE S VARCHAR(70);
DECLARE CNT INTEGER;
DECLARE MSEC BIGINT;
DECLARE DAYS INTEGER;
DECLARE HOURS INTEGER;
DECLARE MINUTES INTEGER;
DECLARE SECONDS INTEGER;
DECLARE D TIMESTAMP;
DECLARE UPTIME VARCHAR(100);
DECLARE TYPE_MESSAGE INTEGER;
DECLARE DEST_PORT INTEGER;
BEGIN
  SELECT CONTACT, SENDER_ID, TYPE_MESSAGE
    FROM IN_MESSAGES
   WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID
    INTO :CONTACT, :SENDER_ID, :TYPE_MESSAGE;

  IF ((CONTACT IS NOT NULL) AND (SENDER_ID IS NOT NULL)) THEN BEGIN

    SELECT COUNT(*)
      FROM ACCOUNT_ROLES
     WHERE ROLE_ID IN ('3AC5EA48DEA3A72A4380D9CC5923471F','FF7F332564F795C8411BF28652B22BEA') /* Администраторы, Диспетчеры */
       AND ACCOUNT_ID=:SENDER_ID
      INTO CNT;

    IF (CNT>0) THEN BEGIN

      SELECT CONST_VALUE FROM GET_CONST_VALUE('DD5F7C07EB2CBC6B4CE52043B3BF395D') INTO :S;

      EXECUTE PROCEDURE GET_TYPE_MESSAGE(SENDER_ID,TYPE_MESSAGE)
       RETURNING_VALUES TYPE_MESSAGE, DEST_PORT;

      IF ((S IS NOT NULL) AND (TYPE_MESSAGE IS NOT NULL)) THEN BEGIN

        MSEC=SYSTEM_UPTIME();
        DAYS=MSEC/(1000*60*60*24);
        MSEC=MSEC-(DAYS*1000*60*60*24);
        HOURS=MSEC/(1000*60*60);
        MSEC=MSEC-(HOURS*1000*60*60);
        MINUTES=MSEC/(1000*60);
        MSEC=MSEC-(MINUTES*1000*60);
        SECONDS=MSEC/1000;
        D=CAST((CAST(HOURS AS VARCHAR(2))||':'||CAST(MINUTES AS VARCHAR(2))||':'||CAST(SECONDS AS VARCHAR(2))) AS TIME);

        UPTIME=CAST(DAYS AS VARCHAR(10))||'-'||/*PERFIX*/FORMAT_DATETIME('hh:nn:ss',D);

        S=REPLACE_STRING(S,'%UPTIME',UPTIME);

        INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                  TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,
                                  LOCKED,DATE_BEGIN,DEST_PORT)
                          VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                  :S,NULL,0,:CONTACT,NULL,0,
                                  NULL,CURRENT_TIMESTAMP,:DEST_PORT);
      END
    END

  END

END

--

CREATE OR ALTER PROCEDURE CODE_SHIFT_CLOSE (
  ACCOUNT_ID VARCHAR(32),
  IN_MESSAGE_ID VARCHAR(32))
AS
DECLARE CONTACT VARCHAR(100);
DECLARE SENDER_ID VARCHAR(32);
DECLARE S VARCHAR(1000);
DECLARE CNT INTEGER;
DECLARE D TIMESTAMP;
DECLARE DATE_BEGIN TIMESTAMP;
DECLARE SHIFT_ID VARCHAR(32);
DECLARE HOURS NUMERIC(10,1);
DECLARE TYPE_MESSAGE INTEGER;
DECLARE DEST_PORT INTEGER;
BEGIN
  SELECT CONTACT, SENDER_ID, TYPE_MESSAGE
    FROM IN_MESSAGES
   WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID
    INTO CONTACT, SENDER_ID, TYPE_MESSAGE;

  IF ((CONTACT IS NOT NULL) AND (SENDER_ID IS NOT NULL)) THEN BEGIN

    EXECUTE PROCEDURE GET_TYPE_MESSAGE(SENDER_ID,TYPE_MESSAGE)
     RETURNING_VALUES TYPE_MESSAGE, DEST_PORT;

    SELECT COUNT(*)
      FROM DRIVERS
     WHERE DRIVER_ID=:SENDER_ID
      INTO :CNT;

    IF (CNT>0) THEN BEGIN

      SELECT COUNT(*)
        FROM ORDERS
       WHERE DRIVER_ID=:SENDER_ID
         AND PARENT_ID IS NULL
         AND DATE_HISTORY IS NULL
         AND FINISHED<>1
        INTO :CNT;

      IF (CNT>0) THEN BEGIN

        SELECT CONST_VALUE FROM GET_CONST_VALUE('0A2F3602D3FD9A0E476E367410F37492') INTO :S;

        IF ((S IS NOT NULL) AND (TYPE_MESSAGE IS NOT NULL)) THEN BEGIN

          INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                    TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,
                                    LOCKED,DATE_BEGIN,DEST_PORT)
                             VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                     :S,NULL,:TYPE_MESSAGE,:CONTACT,NULL,1,
                                     NULL,CURRENT_TIMESTAMP,:DEST_PORT);
        END

      END ELSE BEGIN

        FOR SELECT DATE_BEGIN, SHIFT_ID
              FROM SHIFTS
             WHERE ACCOUNT_ID=:SENDER_ID
               AND DATE_END IS NULL
              INTO :DATE_BEGIN, :SHIFT_ID DO BEGIN

          D=CURRENT_TIMESTAMP;

          UPDATE PARK_STATES
             SET DATE_OUT=:D
           WHERE DRIVER_ID=:SENDER_ID
             AND DATE_OUT IS NULL;

          UPDATE SHIFTS
             SET DATE_END=:D
           WHERE SHIFT_ID=:SHIFT_ID
             AND DATE_END IS NULL;

          HOURS=CAST((D-DATE_BEGIN)*(1e0*24) AS NUMERIC(10,1));

          SELECT CONST_VALUE FROM GET_CONST_VALUE('5D8701DF0DEDB7A6491181074CE5A88D') INTO :S;

          IF ((S IS NOT NULL) AND (TYPE_MESSAGE IS NOT NULL)) THEN BEGIN

            S=REPLACE_STRING(S,'%TIME_DATE',FORMAT_DATETIME('hh:nn:ss dd.mm.yyyy',D));
            S=REPLACE_STRING(S,'%HOURS',CAST(HOURS AS VARCHAR(30)));

            INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                      TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,
                                      LOCKED,DATE_BEGIN,DEST_PORT)
                              VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                      :S,NULL,:TYPE_MESSAGE,:CONTACT,NULL,1,
                                      NULL,CURRENT_TIMESTAMP,:DEST_PORT);
          END
        END

      END

    END

  END
END

--

CREATE OR ALTER PROCEDURE CODE_PARK_QUEUE (
  ACCOUNT_ID VARCHAR(32),
  IN_MESSAGE_ID VARCHAR(32))
AS
DECLARE CONTACT VARCHAR(100);
DECLARE SENDER_ID VARCHAR(32);
DECLARE S VARCHAR(1000);
DECLARE CNT INTEGER;
DECLARE D TIMESTAMP;
DECLARE DATE_IN TIMESTAMP;
DECLARE DRIVER_ID VARCHAR(32);
DECLARE PARK_NAME VARCHAR(100);
DECLARE PARK_ID VARCHAR(32);
DECLARE SUM_CHARGE NUMERIC(15,2);
DECLARE SUM_RECEIPT NUMERIC(15,2);
DECLARE BALANCE NUMERIC(15,2);
DECLARE MIN_BALANCE NUMERIC(15,2);
DECLARE MINUTES INTEGER;
DECLARE COUNTER INTEGER;
DECLARE PRIORITY INTEGER;
DECLARE TYPE_MESSAGE INTEGER;
DECLARE DEST_PORT INTEGER;
BEGIN
  SELECT CONTACT, SENDER_ID, TYPE_MESSAGE
    FROM IN_MESSAGES
   WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID
    INTO :CONTACT, :SENDER_ID, TYPE_MESSAGE;

  IF ((CONTACT IS NOT NULL) AND (SENDER_ID IS NOT NULL)) THEN BEGIN

    SELECT COUNT(*)
      FROM DRIVERS D
      JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
     WHERE D.DRIVER_ID=:SENDER_ID
       AND A.LOCKED<>1
      INTO :CNT;

    IF (CNT>0) THEN BEGIN

      EXECUTE PROCEDURE GET_ACCOUNT_BALANCE(:SENDER_ID)
       RETURNING_VALUES :SUM_CHARGE, :SUM_RECEIPT, :BALANCE;

      SELECT MIN_BALANCE
        FROM DRIVERS
       WHERE DRIVER_ID=:SENDER_ID
        INTO :MIN_BALANCE;

      IF ((MIN_BALANCE IS NULL) OR ((MIN_BALANCE IS NOT NULL) AND (BALANCE>MIN_BALANCE))) THEN BEGIN

        PARK_ID=NULL;
        PARK_NAME=NULL;

        FOR SELECT PS.PARK_ID, P.NAME
              FROM PARK_STATES PS
              JOIN PARKS P ON P.PARK_ID=PS.PARK_ID
             WHERE DRIVER_ID=:SENDER_ID
               AND DATE_OUT IS NULL
              INTO :PARK_ID, :PARK_NAME DO BEGIN
          BREAK;
        END

        IF (PARK_ID IS NOT NULL) THEN BEGIN

          D=NULL;
          COUNTER=0;

          FOR SELECT DATE_IN, DRIVER_ID
                FROM PARK_STATES
               WHERE DATE_OUT IS NULL
                 AND PARK_ID=:PARK_ID
               ORDER BY DATE_IN
                INTO :DATE_IN, :DRIVER_ID DO BEGIN

            COUNTER=COUNTER+1;

            IF (DRIVER_ID=SENDER_ID) THEN BEGIN
              D=CURRENT_TIMESTAMP;
              MINUTES=CAST((D-DATE_IN)*(1e0*24*60) AS INTEGER);
              PRIORITY=COUNTER;
            END

          END

          IF (D IS NOT NULL) THEN BEGIN

            SELECT CONST_VALUE FROM GET_CONST_VALUE('A92208254FCBA05643224EB1F4508300') INTO :S;

            EXECUTE PROCEDURE GET_TYPE_MESSAGE(SENDER_ID,TYPE_MESSAGE)
             RETURNING_VALUES TYPE_MESSAGE, DEST_PORT;

            IF ((S IS NOT NULL) AND (TYPE_MESSAGE IS NOT NULL)) THEN BEGIN

              S=REPLACE_STRING(S,'%PRIORITY',CAST(PRIORITY AS VARCHAR(10)));
              S=REPLACE_STRING(S,'%COUNTER',CAST(COUNTER AS VARCHAR(10)));
              S=REPLACE_STRING(S,'%PARK_NAME',PARK_NAME);
              S=REPLACE_STRING(S,'%MINUTES',CAST(MINUTES AS VARCHAR(10)));

              INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                        TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,
                                        LOCKED,DATE_BEGIN,DEST_PORT)
                                VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                        :S,NULL,:TYPE_MESSAGE,:CONTACT,NULL,1,
                                        NULL,CURRENT_TIMESTAMP,:DEST_PORT);
            END

          END

        END

      END

    END

  END
END

--

CREATE OR ALTER PROCEDURE CODE_PARK_OUT (
  ACCOUNT_ID VARCHAR(32),
  IN_MESSAGE_ID VARCHAR(32))
AS
DECLARE CONTACT VARCHAR(100);
DECLARE SENDER_ID VARCHAR(32);
DECLARE S VARCHAR(1000);
DECLARE PARK_NAME VARCHAR(100);
DECLARE PARK_STATE_ID VARCHAR(32);
DECLARE CNT INTEGER;
DECLARE D TIMESTAMP;
DECLARE TYPE_MESSAGE INTEGER;
DECLARE DEST_PORT INTEGER;
BEGIN
  SELECT CONTACT, SENDER_ID, TYPE_MESSAGE
    FROM IN_MESSAGES
   WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID
    INTO :CONTACT, :SENDER_ID, :TYPE_MESSAGE;

  IF ((CONTACT IS NOT NULL) AND (SENDER_ID IS NOT NULL)) THEN BEGIN

    EXECUTE PROCEDURE GET_TYPE_MESSAGE(SENDER_ID,TYPE_MESSAGE)
     RETURNING_VALUES TYPE_MESSAGE, DEST_PORT;

    SELECT COUNT(*)
      FROM DRIVERS D
      JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
     WHERE D.DRIVER_ID=:SENDER_ID
       AND A.LOCKED<>1
      INTO :CNT;

    IF (CNT>0) THEN BEGIN


      SELECT COUNT(*)
        FROM ORDERS
       WHERE DRIVER_ID=:SENDER_ID
         AND PARENT_ID IS NULL
         AND DATE_HISTORY IS NULL
         AND FINISHED<>1
        INTO :CNT;

      IF (CNT>0) THEN BEGIN

        SELECT CONST_VALUE FROM GET_CONST_VALUE('7E75E7A3DA4FAB8D443F2D7384B3DF46') INTO :S;

        IF ((S IS NOT NULL) AND (TYPE_MESSAGE IS NOT NULL)) THEN BEGIN

          INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                    TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,
                                    LOCKED,DATE_BEGIN,DEST_PORT)
                            VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                    :S,NULL,:TYPE_MESSAGE,:CONTACT,NULL,1,
                                    NULL,CURRENT_TIMESTAMP,:DEST_PORT);
        END

      END ELSE BEGIN

        FOR SELECT P.NAME, PS.PARK_STATE_ID
              FROM PARK_STATES PS
              JOIN PARKS P ON P.PARK_ID=PS.PARK_ID
             WHERE PS.DRIVER_ID=:SENDER_ID
               AND PS.DATE_OUT IS NULL
              INTO :PARK_NAME, :PARK_STATE_ID DO BEGIN

          D=CURRENT_TIMESTAMP;

          UPDATE PARK_STATES
             SET DATE_OUT=:D
           WHERE PARK_STATE_ID=:PARK_STATE_ID;

          SELECT CONST_VALUE FROM GET_CONST_VALUE('F5FAEFF5369FA2E2496554FFACF900A3') INTO :S;

          IF ((S IS NOT NULL) AND (TYPE_MESSAGE IS NOT NULL)) THEN BEGIN

            S=REPLACE_STRING(S,'%PARK_NAME',PARK_NAME);
            S=REPLACE_STRING(S,'%TIME_DATE',FORMAT_DATETIME('hh:nn:ss dd.mm.yyyy',D));

            INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                      TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,
                                      LOCKED,DATE_BEGIN,DEST_PORT)
                              VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                      :S,NULL,:TYPE_MESSAGE,:CONTACT,NULL,1,
                                      NULL,CURRENT_TIMESTAMP,:DEST_PORT);
          END

          BREAK;

        END

      END

    END

  END
END

--

CREATE OR ALTER PROCEDURE CODE_MAKE_ORDER (
  ACCOUNT_ID VARCHAR(32),
  IN_MESSAGE_ID VARCHAR(32))
AS
DECLARE CONTACT VARCHAR(100);
DECLARE SENDER_ID VARCHAR(32);
DECLARE S VARCHAR(70);
DECLARE CNT INTEGER;
DECLARE CONST_VALUE VARCHAR(4000);
DECLARE ORDER_NUM VARCHAR(10);
DECLARE ACTION_ID VARCHAR(32);
DECLARE RATE_ID VARCHAR(32);
DECLARE CAR_TYPE_ID VARCHAR(32);
DECLARE CLIENT_ID VARCHAR(32);
DECLARE STREET_ID VARCHAR(32);
DECLARE HOUSE VARCHAR(10);
DECLARE FLAT VARCHAR(10);
DECLARE PORCH VARCHAR(10);
DECLARE ADDRESS_DESC VARCHAR(250);
DECLARE LOCKED INTEGER;
DECLARE ORDER_ID VARCHAR(32);
DECLARE TYPE_MESSAGE INTEGER;
DECLARE DEST_PORT INTEGER;
BEGIN
  SELECT CONTACT, SENDER_ID, TYPE_MESSAGE
    FROM IN_MESSAGES
   WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID
    INTO :CONTACT, :SENDER_ID, TYPE_MESSAGE;

  SELECT COUNT(*)
    FROM BLACKS
   WHERE UPPER(PHONE)=UPPER(:CONTACT)
    INTO :CNT;

  IF ((CONTACT IS NOT NULL) AND (CNT=0)) THEN BEGIN

    SELECT LOCKED, CLIENT_ID, STREET_ID, HOUSE, FLAT, PORCH, ADDRESS_DESC
      FROM CLIENTS C
      JOIN ACCOUNTS A ON A.ACCOUNT_ID=C.CLIENT_ID
     WHERE C.CLIENT_ID=:SENDER_ID
      INTO :LOCKED, :CLIENT_ID, :STREET_ID, :HOUSE, :FLAT, :PORCH, :ADDRESS_DESC;

    IF ((CLIENT_ID IS NULL) OR ((CLIENT_ID IS NOT NULL) AND (LOCKED<>1))) THEN BEGIN

      SELECT CONST_VALUE FROM GET_CONST_VALUE('CB66FC06A78BB69D430EB7BD1AFA13FA') INTO :S;

      EXECUTE PROCEDURE GET_TYPE_MESSAGE(SENDER_ID,TYPE_MESSAGE)
       RETURNING_VALUES TYPE_MESSAGE, DEST_PORT;

      IF ((S IS NOT NULL) AND (TYPE_MESSAGE IS NOT NULL)) THEN BEGIN

        STREET_ID='FA27330C653381FA4EDE11ECF0959DD6';  /* Красноярск - .*/
        HOUSE=NULL;
        FLAT=NULL;
        PORCH=NULL;
        ADDRESS_DESC=NULL;

        EXECUTE PROCEDURE GET_ORDER_NUM
         RETURNING_VALUES :ORDER_NUM;

        ACTION_ID='E019DBDE7D55BEC34D12A709EE3FEB0B'; /* Создание */

        RATE_ID=NULL;
        FOR SELECT RATE_ID
             FROM RATES
            ORDER BY PRIORITY
             INTO :RATE_ID DO BEGIN
          BREAK;
        END

        CAR_TYPE_ID=NULL;
        FOR SELECT CAR_TYPE_ID
              FROM CAR_TYPES
             ORDER BY PRIORITY
              INTO :CAR_TYPE_ID DO BEGIN
          BREAK;
        END

        IF ((RATE_ID IS NOT NULL) AND (CAR_TYPE_ID IS NOT NULL)) THEN BEGIN

          ORDER_ID=GET_UNIQUE_ID();

          INSERT INTO ORDERS (ORDER_ID,ACTION_ID,RATE_ID,CAR_TYPE_ID,WHO_ACCEPT_ID,
                              CLIENT_ID,STREET_ID,HOUSE,FLAT,PORCH,DESCRIPTION,
                              ORDER_NUM,PHONE,DATE_ACCEPT,DATE_ARRIVAL,TYPE_ACCEPT,
                              TYPE_PROCESS,BEFORE_PERIOD,DATE_BEGIN,FINISHED)
                      VALUES (:ORDER_ID,:ACTION_ID,:RATE_ID,:CAR_TYPE_ID,:ACCOUNT_ID,
                              :CLIENT_ID,:STREET_ID,:HOUSE,:FLAT,:PORCH,:ADDRESS_DESC,
                              :ORDER_NUM,:CONTACT,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,1,
                              1,30,CURRENT_TIMESTAMP,0);

          UPDATE IN_MESSAGES
             SET ORDER_ID=:ORDER_ID
           WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID;

          S=REPLACE_STRING(S,'%ORDER_NUM',ORDER_NUM);

          INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                    TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,
                                    PRIORITY,LOCKED,DATE_BEGIN,ORDER_ID,DEST_PORT)
                            VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                    :S,NULL,:TYPE_MESSAGE,:CONTACT,NULL,
                                    1,NULL,CURRENT_TIMESTAMP,:ORDER_ID,:DEST_PORT);

        END

      END

    END

  END

END

--

CREATE OR ALTER PROCEDURE CODE_LOSE (
  ACCOUNT_ID VARCHAR(32),
  IN_MESSAGE_ID VARCHAR(32))
AS
DECLARE CONTACT VARCHAR(100);
DECLARE SENDER_ID VARCHAR(32);
DECLARE TEXT_IN VARCHAR(4000);
DECLARE CNT INTEGER;
DECLARE SUM_CHARGE NUMERIC(15,2);
DECLARE SUM_RECEIPT NUMERIC(15,2);
DECLARE BALANCE NUMERIC(15,2);
DECLARE MIN_BALANCE NUMERIC(15,2);
DECLARE USER_NAME VARCHAR(100);
DECLARE S VARCHAR(250);
DECLARE TYPE_MESSAGE INTEGER;
DECLARE SURNAME VARCHAR(100);
DECLARE NAME VARCHAR(100);
DECLARE PATRONYMIC VARCHAR(100);
DECLARE DEST_PORT INTEGER;
BEGIN
  SELECT IM.CONTACT, IM.SENDER_ID, IM.TEXT_IN, IM.TYPE_MESSAGE
    FROM IN_MESSAGES IM
    LEFT JOIN CODE_MESSAGES CM ON CM.CODE_MESSAGE_ID=IM.CODE_MESSAGE_ID
   WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID
    INTO :CONTACT, :SENDER_ID, :TEXT_IN, :TYPE_MESSAGE;

  IF ((CONTACT IS NOT NULL) AND (SENDER_ID IS NOT NULL) AND (TEXT_IN IS NOT NULL)) THEN BEGIN

    SELECT COUNT(*)
      FROM DRIVERS D
      JOIN  ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
     WHERE D.DRIVER_ID=:SENDER_ID
       AND A.LOCKED<>1
      INTO :CNT;

    IF (CNT>0) THEN BEGIN

      EXECUTE PROCEDURE GET_ACCOUNT_BALANCE(:SENDER_ID)
       RETURNING_VALUES :SUM_CHARGE, :SUM_RECEIPT, :BALANCE;

      SELECT D.MIN_BALANCE, A.USER_NAME, A.SURNAME, A.NAME, A.PATRONYMIC
        FROM DRIVERS D
        JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
        JOIN CARS C ON C.CAR_ID=D.CAR_ID
       WHERE D.DRIVER_ID=:SENDER_ID
        INTO :MIN_BALANCE, :USER_NAME, :SURNAME, :NAME, :PATRONYMIC;

      SELECT COUNT(*)
        FROM SHIFTS
       WHERE ACCOUNT_ID=:SENDER_ID
         AND DATE_END IS NULL
        INTO :CNT;

      IF ((CNT>0) AND ((MIN_BALANCE IS NULL) OR ((MIN_BALANCE IS NOT NULL) AND (BALANCE>MIN_BALANCE)))) THEN BEGIN

        S=USER_NAME||' - ';
        IF (SURNAME IS NOT NULL) THEN
          S=S||' '||SURNAME;
        IF (NAME IS NOT NULL) THEN
          S=S||' '||NAME;
        IF (PATRONYMIC IS NOT NULL) THEN
          S=S||' '||PATRONYMIC;


        INSERT INTO ALARMS (ALARM_ID,SENDER_ID,RECIPIENT_ID,TYPE_ALARM,
                            DATE_BEGIN,DATE_END,CAPTION,TEXT_ALARM)
                    VALUES (GET_UNIQUE_ID(),'CA25F4C3A6DA8C334D20D3C4F2A2EF62',NULL,0,
                            CURRENT_TIMESTAMP,CURRENT_TIMESTAMP+5*(1e0/24/60),'Водитель заблудился',:S);

        SELECT CONST_VALUE FROM GET_CONST_VALUE('AB84E2116D3485A847EEE59DB47CE27B') INTO :S;

        EXECUTE PROCEDURE GET_TYPE_MESSAGE(SENDER_ID,TYPE_MESSAGE)
         RETURNING_VALUES TYPE_MESSAGE, DEST_PORT;

        IF ((S IS NOT NULL) AND (TYPE_MESSAGE IS NOT NULL)) THEN BEGIN

          S=REPLACE_STRING(S,'%CODE',TEXT_IN);

          INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                    TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,
                                    LOCKED,DATE_BEGIN,DEST_PORT)
                            VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                    :S,NULL,:TYPE_MESSAGE,:CONTACT,NULL,1,
                                    NULL,CURRENT_TIMESTAMP,:DEST_PORT);
        END

      END

    END

  END
END

--

CREATE OR ALTER PROCEDURE CODE_INCIDENT (
  ACCOUNT_ID VARCHAR(32),
  IN_MESSAGE_ID VARCHAR(32))
AS
DECLARE CONTACT VARCHAR(100);
DECLARE SENDER_ID VARCHAR(32);
DECLARE TEXT_IN VARCHAR(4000);
DECLARE CNT INTEGER;
DECLARE SUM_CHARGE NUMERIC(15,2);
DECLARE SUM_RECEIPT NUMERIC(15,2);
DECLARE BALANCE NUMERIC(15,2);
DECLARE MIN_BALANCE NUMERIC(15,2);
DECLARE USER_NAME VARCHAR(100);
DECLARE S VARCHAR(250);
DECLARE TYPE_MESSAGE INTEGER;
DECLARE SURNAME VARCHAR(100);
DECLARE NAME VARCHAR(100);
DECLARE PATRONYMIC VARCHAR(100);
DECLARE DEST_PORT INTEGER;
BEGIN
  SELECT IM.CONTACT, IM.SENDER_ID, IM.TEXT_IN, IM.TYPE_MESSAGE
    FROM IN_MESSAGES IM
    LEFT JOIN CODE_MESSAGES CM ON CM.CODE_MESSAGE_ID=IM.CODE_MESSAGE_ID
   WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID
    INTO :CONTACT, :SENDER_ID, :TEXT_IN, :TYPE_MESSAGE;

  IF ((CONTACT IS NOT NULL) AND (SENDER_ID IS NOT NULL) AND (TEXT_IN IS NOT NULL)) THEN BEGIN

    SELECT COUNT(*)
      FROM DRIVERS D
      JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
     WHERE D.DRIVER_ID=:SENDER_ID
       AND A.LOCKED<>1
      INTO :CNT;

    IF (CNT>0) THEN BEGIN

      EXECUTE PROCEDURE GET_ACCOUNT_BALANCE(:SENDER_ID)
       RETURNING_VALUES :SUM_CHARGE, :SUM_RECEIPT, :BALANCE;

      SELECT D.MIN_BALANCE, A.USER_NAME, A.SURNAME, A.NAME, A.PATRONYMIC
        FROM DRIVERS D
        JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
        JOIN CARS C ON C.CAR_ID=D.CAR_ID
       WHERE D.DRIVER_ID=:SENDER_ID
        INTO :MIN_BALANCE, :USER_NAME, :SURNAME, :NAME, :PATRONYMIC;
        
      SELECT COUNT(*)
        FROM SHIFTS
       WHERE ACCOUNT_ID=:SENDER_ID
         AND DATE_END IS NULL
        INTO :CNT;

      IF ((CNT>0) AND ((MIN_BALANCE IS NULL) OR ((MIN_BALANCE IS NOT NULL) AND (BALANCE>MIN_BALANCE)))) THEN BEGIN

        S=USER_NAME||' - ';
        IF (SURNAME IS NOT NULL) THEN
          S=S||' '||SURNAME;
        IF (NAME IS NOT NULL) THEN
          S=S||' '||NAME;
        IF (PATRONYMIC IS NOT NULL) THEN
          S=S||' '||PATRONYMIC;

        INSERT INTO ALARMS (ALARM_ID,SENDER_ID,RECIPIENT_ID,TYPE_ALARM,
                            DATE_BEGIN,DATE_END,CAPTION,TEXT_ALARM)
                    VALUES (GET_UNIQUE_ID(),'CA25F4C3A6DA8C334D20D3C4F2A2EF62',NULL,1,
                            CURRENT_TIMESTAMP,CURRENT_TIMESTAMP+5*(1e0/24/60),'Черезвычайное проишествие',:S);

        SELECT CONST_VALUE FROM GET_CONST_VALUE('7B7B35D636E1B840426877D1EB07428F') INTO :S;

        EXECUTE PROCEDURE GET_TYPE_MESSAGE(SENDER_ID,TYPE_MESSAGE)
         RETURNING_VALUES TYPE_MESSAGE, DEST_PORT;

        IF ((S IS NOT NULL) AND (TYPE_MESSAGE IS NOT NULL)) THEN BEGIN

          S=REPLACE_STRING(S,'%CODE',TEXT_IN);

          INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                    TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,
                                    LOCKED,DATE_BEGIN,DEST_PORT)
                            VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                    :S,NULL,:TYPE_MESSAGE,:CONTACT,NULL,0,
                                    NULL,CURRENT_TIMESTAMP,:DEST_PORT);
        END

      END

    END

  END
END

--

CREATE OR ALTER PROCEDURE CODE_GET_LOGINS (
  ACCOUNT_ID VARCHAR(32),
  IN_MESSAGE_ID VARCHAR(32))
AS
DECLARE CONTACT VARCHAR(100);
DECLARE USER_NAME VARCHAR(100);
DECLARE SENDER_ID VARCHAR(32);
DECLARE S VARCHAR(1000);
DECLARE TYPE_MESSAGE INTEGER;
DECLARE DEST_PORT INTEGER;
BEGIN
  SELECT CONTACT, SENDER_ID, TYPE_MESSAGE
    FROM IN_MESSAGES
   WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID
    INTO :CONTACT, :SENDER_ID, TYPE_MESSAGE;

  IF (CONTACT IS NOT NULL) THEN BEGIN

    S=NULL;

    FOR SELECT USER_NAME
          FROM ACCOUNTS
         WHERE PHONE=:CONTACT
          INTO :USER_NAME DO BEGIN

      IF (S IS NULL) THEN
        S=:USER_NAME;
      ELSE
        S=S||';'||:USER_NAME;

    END

    EXECUTE PROCEDURE GET_TYPE_MESSAGE(SENDER_ID,TYPE_MESSAGE)
     RETURNING_VALUES TYPE_MESSAGE, DEST_PORT;

    IF ((S IS NOT NULL) AND (TYPE_MESSAGE IS NOT NULL)) THEN BEGIN

      S=S||' http://ataxi24.ru/files/taxi.jar';

      INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,
                                PRIORITY,LOCKED,DATE_BEGIN,ORDER_ID,DEST_PORT)
                        VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                :S,NULL,:TYPE_MESSAGE,:CONTACT,NULL,
                                2,NULL,CURRENT_TIMESTAMP,NULL,:DEST_PORT);

    END

  END

END

--

CREATE OR ALTER PROCEDURE CODE_FREE_ORDERS (
  ACCOUNT_ID VARCHAR(32),
  IN_MESSAGE_ID VARCHAR(32))
AS
DECLARE CONTACT VARCHAR(100);
DECLARE SENDER_ID VARCHAR(32);
DECLARE ZONE_ID VARCHAR(32);
DECLARE S VARCHAR(1000);
DECLARE S1 VARCHAR(1000);
DECLARE F VARCHAR(1000);
DECLARE PARK_ID VARCHAR(32);
DECLARE PARK_NAME VARCHAR(100);
DECLARE SUM_CHARGE NUMERIC(15,2);
DECLARE SUM_RECEIPT NUMERIC(15,2);
DECLARE BALANCE NUMERIC(15,2);
DECLARE MIN_BALANCE NUMERIC(15,2);
DECLARE DRIVER_COUNT INTEGER;
DECLARE ORDER_COUNT INTEGER;
DECLARE TYPE_MESSAGE INTEGER;
DECLARE DEST_PORT INTEGER;
BEGIN
  SELECT CONTACT, SENDER_ID, TYPE_MESSAGE
    FROM IN_MESSAGES
   WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID
    INTO :CONTACT, :SENDER_ID, :TYPE_MESSAGE;

  IF ((CONTACT IS NOT NULL) AND (SENDER_ID IS NOT NULL)) THEN BEGIN

    SELECT COUNT(*)
      FROM DRIVERS D
      JOIN  ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
     WHERE D.DRIVER_ID=:SENDER_ID
       AND A.LOCKED<>1
      INTO :DRIVER_COUNT;

    IF (DRIVER_COUNT>0) THEN BEGIN

      EXECUTE PROCEDURE GET_ACCOUNT_BALANCE(:SENDER_ID)
       RETURNING_VALUES :SUM_CHARGE, :SUM_RECEIPT, :BALANCE;

      SELECT MIN_BALANCE
        FROM DRIVERS
       WHERE DRIVER_ID=:SENDER_ID
        INTO :MIN_BALANCE;

      IF ((MIN_BALANCE IS NULL) OR ((MIN_BALANCE IS NOT NULL) AND (BALANCE>MIN_BALANCE))) THEN BEGIN
 
        S='';

        SELECT CONST_VALUE FROM GET_CONST_VALUE('C34718E32AF1B4264975480EE24B7A8D') INTO :F;

        IF (F IS NOT NULL) THEN BEGIN

          FOR SELECT ZONE_ID
                FROM ZONES
               ORDER BY PRIORITY
                INTO :ZONE_ID DO BEGIN

            PARK_NAME=NULL;

            FOR SELECT ZP.PARK_ID, P.NAME
                  FROM ZONE_PARKS ZP
                  JOIN PARKS P ON P.PARK_ID=ZP.PARK_ID
                 WHERE ZP.ZONE_ID=:ZONE_ID
                 ORDER BY ZP.DISTANCE, ZP.PERIOD
                  INTO :PARK_ID, :PARK_NAME DO BEGIN
              BREAK;
            END

            IF (PARK_ID IS NOT NULL) THEN BEGIN

              SELECT COUNT(*)
               FROM PARK_STATES
              WHERE DATE_OUT IS NULL
                AND PARK_ID=:PARK_ID
               INTO :DRIVER_COUNT;

              IF (PARK_NAME IS NOT NULL) THEN BEGIN

                SELECT COUNT(*)
                  FROM ORDERS
                 WHERE ZONE_ID=:ZONE_ID
                   AND PARENT_ID IS NULL
                   AND FINISHED=0
                   AND CURRENT_TIMESTAMP>=(DATE_ARRIVAL-(BEFORE_PERIOD*(1e0/24/60)))
                   AND DRIVER_ID IS NULL
                  INTO :ORDER_COUNT;

                IF (ORDER_COUNT>DRIVER_COUNT) THEN BEGIN

                  ORDER_COUNT=ORDER_COUNT-DRIVER_COUNT;

                  S1=F;
                  S1=REPLACE_STRING(S1,'%PARK_NAME',PARK_NAME);
                  S1=REPLACE_STRING(S1,'%COUNT',CAST(ORDER_COUNT AS VARCHAR(10)));

                  S=S||S1;
                END

              END

            END

          END

          IF (S='') THEN BEGIN

            S=NULL;

            SELECT CONST_VALUE FROM GET_CONST_VALUE('015792E550DCA1544E8E5F0773FEBA3D') INTO :S;

          END

          EXECUTE PROCEDURE GET_TYPE_MESSAGE(SENDER_ID,TYPE_MESSAGE)
           RETURNING_VALUES TYPE_MESSAGE, DEST_PORT;

          IF ((S IS NOT NULL) AND (S<>'') AND (TYPE_MESSAGE IS NOT NULL)) THEN BEGIN

            INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                      TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,
                                      LOCKED,DATE_BEGIN,DEST_PORT)
                              VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                      :S,NULL,:TYPE_MESSAGE,:CONTACT,NULL,1,
                                      NULL,CURRENT_TIMESTAMP,:DEST_PORT);
          END


        END

      END

    END

  END
END

--

CREATE OR ALTER PROCEDURE CODE_DRIVER_BALANCE (
  ACCOUNT_ID VARCHAR(32),
  IN_MESSAGE_ID VARCHAR(32))
AS
DECLARE CONTACT VARCHAR(100);
DECLARE SENDER_ID VARCHAR(32);
DECLARE S VARCHAR(70);
DECLARE SUM_CHARGE NUMERIC(15,2);
DECLARE SUM_RECEIPT NUMERIC(15,2);
DECLARE BALANCE NUMERIC(15,2);
DECLARE CNT INTEGER;
DECLARE CHARGE_TYPE_ID VARCHAR(32);
DECLARE CONST_VALUE VARCHAR(4000);
DECLARE TYPE_MESSAGE INTEGER;
DECLARE DEST_PORT INTEGER;
BEGIN
  SELECT CONTACT, SENDER_ID, TYPE_MESSAGE
    FROM IN_MESSAGES
   WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID
    INTO :CONTACT, :SENDER_ID, :TYPE_MESSAGE;


  IF ((CONTACT IS NOT NULL) AND (SENDER_ID IS NOT NULL)) THEN BEGIN

    EXECUTE PROCEDURE GET_ACCOUNT_BALANCE(:SENDER_ID)
     RETURNING_VALUES :SUM_CHARGE, :SUM_RECEIPT, :BALANCE;

    SELECT COUNT(*)
      FROM DRIVERS D
      JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
     WHERE D.DRIVER_ID=:SENDER_ID
       AND A.LOCKED<>1
      INTO :CNT;

    IF (CNT>0) THEN BEGIN

      SELECT CONST_VALUE FROM GET_CONST_VALUE('2031AA8F2E4B959248967F2838DC5F19') INTO :S;

      EXECUTE PROCEDURE GET_TYPE_MESSAGE(SENDER_ID,TYPE_MESSAGE)
       RETURNING_VALUES TYPE_MESSAGE, DEST_PORT;

      IF ((S IS NOT NULL) AND (TYPE_MESSAGE IS NOT NULL)) THEN BEGIN

        S=REPLACE_STRING(S,'%BALANCE',CAST(BALANCE AS VARCHAR(30)));

        INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                  TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,
                                  LOCKED,DATE_BEGIN,DEST_PORT)
                          VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                  :S,NULL,:TYPE_MESSAGE,:CONTACT,NULL,1,
                                  NULL,CURRENT_TIMESTAMP,:DEST_PORT);
      END

    END

  END
END

--

CREATE OR ALTER PROCEDURE CODE_CLIENT_BALANCE (
  ACCOUNT_ID VARCHAR(32),
  IN_MESSAGE_ID VARCHAR(32))
AS
DECLARE CONTACT VARCHAR(100);
DECLARE SENDER_ID VARCHAR(32);
DECLARE S VARCHAR(70);
DECLARE SUM_CHARGE NUMERIC(15,2);
DECLARE SUM_RECEIPT NUMERIC(15,2);
DECLARE BALANCE NUMERIC(15,2);
DECLARE CNT INTEGER;
DECLARE CHARGE_TYPE_ID VARCHAR(32);
DECLARE CONST_VALUE VARCHAR(4000);
DECLARE TYPE_MESSAGE INTEGER;
DECLARE DEST_PORT INTEGER;
BEGIN
  SELECT CONTACT, SENDER_ID, TYPE_MESSAGE
    FROM IN_MESSAGES
   WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID
    INTO :CONTACT, :SENDER_ID, :TYPE_MESSAGE;

  IF ((CONTACT IS NOT NULL) AND (SENDER_ID IS NOT NULL)) THEN BEGIN

    EXECUTE PROCEDURE GET_ACCOUNT_BALANCE(:SENDER_ID)
     RETURNING_VALUES :SUM_CHARGE, :SUM_RECEIPT, :BALANCE;

    SELECT COUNT(*)
      FROM CLIENTS C
      JOIN ACCOUNTS A ON A.ACCOUNT_ID=C.CLIENT_ID
     WHERE C.CLIENT_ID=:SENDER_ID
       AND A.LOCKED<>1
      INTO :CNT;

    IF (CNT>0) THEN BEGIN

      SELECT CONST_VALUE FROM GET_CONST_VALUE('2031AA8F2E4B959248967F2838DC5F19') INTO :S;

      EXECUTE PROCEDURE GET_TYPE_MESSAGE(SENDER_ID,TYPE_MESSAGE)
       RETURNING_VALUES TYPE_MESSAGE, DEST_PORT;

      IF ((S IS NOT NULL) AND (TYPE_MESSAGE IS NOT NULL)) THEN BEGIN

        S=REPLACE_STRING(S,'%BALANCE',CAST(BALANCE AS VARCHAR(30)));

        INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                  TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,
                                  LOCKED,DATE_BEGIN,DEST_PORT)
                          VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                  :S,NULL,:TYPE_MESSAGE,:CONTACT,NULL,1,
                                  NULL,CURRENT_TIMESTAMP,:DEST_PORT);
      END

    END

  END
END

--



