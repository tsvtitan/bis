/* Добавление колонки блокировка к таблице заказов */

ALTER TABLE /*PREFIX*/ORDERS
ADD LOCKED VARCHAR(32)

--

/* Удаление представления заказов */

DROP VIEW /*PREFIX*/S_ORDERS

--

/* Создание представления заказов */

CREATE VIEW /*PREFIX*/S_ORDERS(
    ORDER_ID,
    ACTION_ID,
    RATE_ID,
    CAR_TYPE_ID,
    WHO_ACCEPT_ID,
    STREET_ID,
    ZONE_ID,
    PARENT_ID,
    FIRM_ID,
    CAR_ID,
    WHO_PROCESS_ID,
    WHO_HISTORY_ID,
    RESULT_ID,
    PARK_ID,
    SOURCE_ID,
    DISCOUNT_ID,
    DRIVER_ID,
    ORDER_NUM,
    PHONE,
    HOUSE,
    FLAT,
    PORCH,
    DATE_ACCEPT,
    DATE_ARRIVAL,
    DATE_BEGIN,
    DATE_END,
    CUSTOMER,
    DESCRIPTION,
    COST_RATE,
    COST_FACT,
    TYPE_ACCEPT,
    TYPE_PROCESS,
    DATE_HISTORY,
    BEFORE_PERIOD,
    FINISHED,
    LOCKED,
    ACTION_NAME,
    ACTION_BRUSH_COLOR,
    ACTION_FONT_COLOR,
    ACTION_PERIOD,
    RATE_NAME,
    CAR_TYPE_NAME,
    WHO_ACCEPT,
    STREET_NAME,
    STREET_PREFIX,
    LOCALITY_ID,
    LOCALITY_NAME,
    LOCALITY_PREFIX,
    ZONE_NAME,
    PARENT_ORDER_NUM,
    FIRM_SMALL_NAME,
    CAR_BRAND,
    CAR_STATE_NUM,
    CAR_COLOR,
    CAR_CALLSIGN,
    WHO_PROCESS,
    WHO_HISTORY,
    RESULT_NAME,
    RESULT_BRUSH_COLOR,
    RESULT_FONT_COLOR,
    PARK_NAME,
    PARK_DESCRIPTION,
    SOURCE_NAME,
    DISCOUNT_NAME,
    DRIVER_NAME,
    STATUS,
    ROUTE_STREET_ID,
    ROUTE_STREET_NAME,
    ROUTE_STREET_PREFIX,
    ROUTE_LOCALITY_ID,
    ROUTE_LOCALITY_NAME,
    ROUTE_LOCALITY_PREFIX,
    ROUTE_HOUSE,
    ROUTE_FLAT,
    ROUTE_PORCH,
    ROUTE_ZONE_ID,
    ROUTE_ZONE_NAME)
AS
SELECT O.*,
       A.NAME AS ACTION_NAME,
       A.BRUSH_COLOR AS ACTION_BRUSH_COLOR,
       A.FONT_COLOR AS ACTION_FONT_COLOR,
       A.PERIOD AS ACTION_PERIOD,
       R.NAME AS RATE_NAME,
       CT.NAME AS CAR_TYPE_NAME,
       A1.USER_NAME AS WHO_ACCEPT,
       S1.NAME AS STREET_NAME,
       S1.PREFIX AS STREET_PREFIX,
       L1.LOCALITY_ID,
       L1.NAME AS LOCALITY_NAME,
       L1.PREFIX AS LOCALITY_PREFIX,
       Z1.NAME AS ZONE_NAME,
       OP.ORDER_NUM AS PARENT_ORDER_NUM,
       F.SMALL_NAME AS FIRM_SMALL_NAME,
       C.BRAND AS CAR_BRAND,
       C.STATE_NUM AS CAR_STATE_NUM,
       C.COLOR AS CAR_COLOR,
       C.CALLSIGN AS CAR_CALLSIGN,
       A2.USER_NAME AS WHO_PROCESS,
       A4.USER_NAME AS WHO_HISTORY,
       RT.NAME AS RESULT_NAME,
       RT.BRUSH_COLOR AS RESULT_BRUSH_COLOR,
       RT.FONT_COLOR AS RESULT_FONT_COLOR,
       P.NAME AS PARK_NAME,
       P.DESCRIPTION AS PARK_DESCRIPTION,
       S.NAME AS SOURCE_NAME,
       D.NAME AS DISCOUNT_NAME,
       A3.USER_NAME AS DRIVER_NAME,
       (CASE WHEN (O.FINISHED=0) AND (CURRENT_TIMESTAMP>=(O.DATE_ARRIVAL-(O.BEFORE_PERIOD*(1e0/24/60)))) THEN 0
             WHEN (O.FINISHED=0) AND (CURRENT_TIMESTAMP<(O.DATE_ARRIVAL-(O.BEFORE_PERIOD*(1e0/24/60)))) THEN 1
             WHEN O.FINISHED=1 THEN 2
        ELSE 0 END) AS STATUS,
       S2.STREET_ID AS ROUTE_STREET_ID,
       S2.NAME AS ROUTE_STREET_NAME,
       S2.PREFIX AS ROUTE_STREET_PREFIX,
       L2.LOCALITY_ID AS ROUTE_LOCALITY_ID,
       L2.NAME AS ROUTE_LOCALITY_NAME,
       L2.PREFIX AS ROUTE_LOCALITY_PREFIX,
       RO.HOUSE AS ROUTE_HOUSE,
       RO.FLAT AS ROUTE_FLAT,
       RO.PORCH AS ROUTE_PORCH,
       RO.ZONE_ID AS ROUTE_ZONE_ID,
       Z2.NAME AS ROUTE_ZONE_NAME

  FROM /*PREFIX*/ORDERS O
  JOIN /*PREFIX*/ACTIONS A ON A.ACTION_ID=O.ACTION_ID
  JOIN /*PREFIX*/RATES R ON R.RATE_ID=O.RATE_ID
  JOIN /*PREFIX*/CAR_TYPES CT ON CT.CAR_TYPE_ID=O.CAR_TYPE_ID
  JOIN /*PERFIX*/ACCOUNTS A1 ON A1.ACCOUNT_ID=O.WHO_ACCEPT_ID
  JOIN /*PREFIX*/STREETS S1 ON S1.STREET_ID=O.STREET_ID
  JOIN /*PREFIX*/LOCALITIES L1 ON L1.LOCALITY_ID=S1.LOCALITY_ID
  LEFT JOIN /*PREFIX*/ZONES Z1 ON Z1.ZONE_ID=O.ZONE_ID
  LEFT JOIN /*PERFIX*/ORDERS OP ON OP.ORDER_ID=O.PARENT_ID
  LEFT JOIN /*PERFIX*/FIRMS F ON F.FIRM_ID=O.FIRM_ID
  LEFT JOIN /*PERFIX*/CARS C ON C.CAR_ID=O.CAR_ID
  LEFT JOIN /*PERFIX*/ACCOUNTS A2 ON A2.ACCOUNT_ID=O.WHO_PROCESS_ID
  LEFT JOIN /*PERFIX*/ACCOUNTS A4 ON A4.ACCOUNT_ID=O.WHO_HISTORY_ID
  LEFT JOIN /*PERFIX*/RESULTS RT ON RT.RESULT_ID=O.RESULT_ID
  LEFT JOIN /*PERFIX*/PARKS P ON P.PARK_ID=O.PARK_ID
  LEFT JOIN /*PERFIX*/SOURCES S ON S.SOURCE_ID=O.SOURCE_ID
  LEFT JOIN /*PERFIX*/DISCOUNTS D ON D.DISCOUNT_ID=O.DISCOUNT_ID
  LEFT JOIN /*PERFIX*/DRIVERS DR ON DR.DRIVER_ID=O.DRIVER_ID
  LEFT JOIN /*PERFIX*/ACCOUNTS A3 ON A3.ACCOUNT_ID=DR.DRIVER_ID
  LEFT JOIN /*PREFIX*/ROUTES RO ON RO.ORDER_ID=O.ORDER_ID
                                AND RO.PRIORITY=(SELECT MAX(PRIORITY)
                                                   FROM /*PREFIX*/ROUTES
                                                  WHERE ORDER_ID=O.ORDER_ID)
  LEFT JOIN /*PREFIX*/STREETS S2 ON S2.STREET_ID=RO.STREET_ID
  LEFT JOIN /*PREFIX*/LOCALITIES L2 ON L2.LOCALITY_ID=S2.LOCALITY_ID
  LEFT JOIN /*PREFIX*/ZONES Z2 ON Z2.ZONE_ID=RO.ZONE_ID

--

/* Создание процедуры создания истории заказа */

CREATE OR ALTER PROCEDURE /*PREFIX*/CREATE_ORDER_HISTORY (
  OLD_ORDER_ID VARCHAR(32),
  NEW_ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32),
  ACTION_ID VARCHAR(32),
  RESULT_ID VARCHAR(32),
  TYPE_PROCESS INTEGER,
  DATE_BEGIN TIMESTAMP,
  WITH_DEPENDS INTEGER)
AS
BEGIN

  INSERT INTO /*PREFIX*/ORDERS (ORDER_ID,PARENT_ID,ACTION_ID,RATE_ID,CAR_TYPE_ID,
                                WHO_ACCEPT_ID,STREET_ID,ZONE_ID,FIRM_ID,CAR_ID,
                                WHO_PROCESS_ID,RESULT_ID,PARK_ID,SOURCE_ID,DISCOUNT_ID,
                                DRIVER_ID,ORDER_NUM,PHONE,HOUSE,FLAT,PORCH,
                                DATE_ACCEPT,DATE_ARRIVAL,DATE_BEGIN,DATE_END,CUSTOMER,
                                DESCRIPTION,COST_RATE,COST_FACT,TYPE_ACCEPT,
                                TYPE_PROCESS,DATE_HISTORY,WHO_HISTORY_ID,BEFORE_PERIOD,
                                FINISHED,LOCKED)
  SELECT :NEW_ORDER_ID,NULL,:ACTION_ID,RATE_ID,CAR_TYPE_ID,
         WHO_ACCEPT_ID,STREET_ID,ZONE_ID,FIRM_ID,CAR_ID,
         NULL,:RESULT_ID,PARK_ID,SOURCE_ID,DISCOUNT_ID,
         DRIVER_ID,ORDER_NUM,PHONE,HOUSE,FLAT,PORCH,
         DATE_ACCEPT,DATE_ARRIVAL,:DATE_BEGIN,NULL,CUSTOMER,
         DESCRIPTION,COST_RATE,COST_FACT,TYPE_ACCEPT,
         :TYPE_PROCESS,NULL,NULL,BEFORE_PERIOD,FINISHED,LOCKED
    FROM /*PREFIX*/ORDERS
   WHERE ORDER_ID=:OLD_ORDER_ID;

  IF (WITH_DEPENDS IS NOT NULL) THEN BEGIN

    INSERT INTO /*PREFIX*/ROUTES (ROUTE_ID,ORDER_ID,ZONE_ID,STREET_ID,HOUSE,
                                FLAT,PORCH,DISTANCE,COST,PERIOD,AMOUNT,PRIORITY)
    SELECT GET_UNIQUE_ID(),:NEW_ORDER_ID,ZONE_ID,STREET_ID,HOUSE,
           FLAT,PORCH,DISTANCE,COST,PERIOD,AMOUNT,PRIORITY
      FROM /*PREFIX*/ROUTES
     WHERE ORDER_ID=:OLD_ORDER_ID;


    INSERT INTO /*PREFIX*/ORDER_SERVICES (ORDER_ID,SERVICE_ID,COST,
                                          DESCRIPTION,AMOUNT,PRIORITY)
    SELECT :NEW_ORDER_ID,SERVICE_ID,COST,
           DESCRIPTION,AMOUNT,PRIORITY
      FROM /*PREFIX*/ORDER_SERVICES
     WHERE ORDER_ID=:OLD_ORDER_ID;

  END

  UPDATE /*PREFIX*/ORDERS
     SET PARENT_ID=:NEW_ORDER_ID,
         DATE_HISTORY=CURRENT_TIMESTAMP,
         WHO_HISTORY_ID=:ACCOUNT_ID
   WHERE ORDER_ID=:OLD_ORDER_ID;

  UPDATE /*PREFIX*/ORDERS
     SET PARENT_ID=:NEW_ORDER_ID
   WHERE PARENT_ID=:OLD_ORDER_ID;

END;

--

/* Создание процедуры создания заказа */

CREATE OR ALTER PROCEDURE /*PREFIX*/I_ORDER (
  ORDER_ID VARCHAR(32),
  ACTION_ID VARCHAR(32),
  RATE_ID VARCHAR(32),
  CAR_TYPE_ID VARCHAR(32),
  WHO_ACCEPT_ID VARCHAR(32),
  STREET_ID VARCHAR(32),
  ZONE_ID VARCHAR(32),
  PARENT_ID VARCHAR(32),
  FIRM_ID VARCHAR(32),
  CAR_ID VARCHAR(32),
  WHO_PROCESS_ID VARCHAR(32),
  RESULT_ID VARCHAR(32),
  PARK_ID VARCHAR(32),
  SOURCE_ID VARCHAR(32),
  DISCOUNT_ID VARCHAR(32),
  DRIVER_ID VARCHAR(32),
  ORDER_NUM VARCHAR(10),
  PHONE VARCHAR(100),
  HOUSE VARCHAR(10),
  FLAT VARCHAR(10),
  PORCH VARCHAR(10),
  DATE_ACCEPT TIMESTAMP,
  DATE_ARRIVAL TIMESTAMP,
  DATE_BEGIN TIMESTAMP,
  DATE_END TIMESTAMP,
  CUSTOMER VARCHAR(250),
  DESCRIPTION VARCHAR(250),
  COST_RATE NUMERIC(15,2),
  COST_FACT NUMERIC(15,2),
  TYPE_ACCEPT INTEGER,
  TYPE_PROCESS INTEGER,
  DATE_HISTORY TIMESTAMP,
  WHO_HISTORY_ID VARCHAR(32),
  BEFORE_PERIOD INTEGER,
  FINISHED INTEGER,
  LOCKED VARCHAR(32))
AS
BEGIN
  INSERT INTO /*PREFIX*/ORDERS (ORDER_ID,ACTION_ID,RATE_ID,CAR_TYPE_ID,WHO_ACCEPT_ID,
                                STREET_ID,ZONE_ID,PARENT_ID,
                                FIRM_ID,CAR_ID,WHO_PROCESS_ID,RESULT_ID,PARK_ID,
                                SOURCE_ID,DISCOUNT_ID,DRIVER_ID,ORDER_NUM,PHONE,
                                HOUSE,FLAT,PORCH,
                                DATE_ACCEPT,DATE_ARRIVAL,DATE_BEGIN,DATE_END,CUSTOMER,
                                DESCRIPTION,COST_RATE,COST_FACT,TYPE_ACCEPT,
                                TYPE_PROCESS,DATE_HISTORY,WHO_HISTORY_ID,BEFORE_PERIOD,
                                FINISHED,LOCKED)
       VALUES (:ORDER_ID,:ACTION_ID,:RATE_ID,:CAR_TYPE_ID,:WHO_ACCEPT_ID,
               :STREET_ID,:ZONE_ID,:PARENT_ID,
               :FIRM_ID,:CAR_ID,:WHO_PROCESS_ID,:RESULT_ID,:PARK_ID,
               :SOURCE_ID,:DISCOUNT_ID,:DRIVER_ID,:ORDER_NUM,:PHONE,
               :HOUSE,:FLAT,:PORCH,
               :DATE_ACCEPT,:DATE_ARRIVAL,:DATE_BEGIN,:DATE_END,:CUSTOMER,
               :DESCRIPTION,:COST_RATE,:COST_FACT,:TYPE_ACCEPT,
               :TYPE_PROCESS,:DATE_HISTORY,:WHO_HISTORY_ID,:BEFORE_PERIOD,
               :FINISHED,:LOCKED);
END;

--

/* Создание процедуры изменения заказа */

CREATE OR ALTER PROCEDURE /*PREFIX*/U_ORDER (
  ORDER_ID VARCHAR(32),
  ACTION_ID VARCHAR(32),
  RATE_ID VARCHAR(32),
  CAR_TYPE_ID VARCHAR(32),
  WHO_ACCEPT_ID VARCHAR(32),
  STREET_ID VARCHAR(32),
  ZONE_ID VARCHAR(32),
  PARENT_ID VARCHAR(32),
  FIRM_ID VARCHAR(32),
  CAR_ID VARCHAR(32),
  WHO_PROCESS_ID VARCHAR(32),
  RESULT_ID VARCHAR(32),
  PARK_ID VARCHAR(32),
  SOURCE_ID VARCHAR(32),
  DISCOUNT_ID VARCHAR(32),
  DRIVER_ID VARCHAR(32),
  ORDER_NUM VARCHAR(10),
  PHONE VARCHAR(100),
  HOUSE VARCHAR(10),
  FLAT VARCHAR(10),
  PORCH VARCHAR(10),
  DATE_ACCEPT TIMESTAMP,
  DATE_ARRIVAL TIMESTAMP,
  DATE_BEGIN TIMESTAMP,
  DATE_END TIMESTAMP,
  CUSTOMER VARCHAR(250),
  DESCRIPTION VARCHAR(250),
  COST_RATE NUMERIC(15,2),
  COST_FACT NUMERIC(15,2),
  TYPE_ACCEPT INTEGER,
  TYPE_PROCESS INTEGER,
  DATE_HISTORY TIMESTAMP,
  WHO_HISTORY_ID VARCHAR(32),
  BEFORE_PERIOD INTEGER,
  FINISHED INTEGER,
  LOCKED VARCHAR(32),
  OLD_ORDER_ID VARCHAR(32))
AS
  DECLARE RECIPIENT_ID VARCHAR(32);
  DECLARE OLD_COST_RATE NUMERIC(15,2);
  DECLARE S VARCHAR(70);
BEGIN
  UPDATE /*PREFIX*/ORDERS
     SET ORDER_ID=:ORDER_ID,
         ACTION_ID=:ACTION_ID,
         RATE_ID=:RATE_ID,
         CAR_TYPE_ID=:CAR_TYPE_ID,
         WHO_ACCEPT_ID=:WHO_ACCEPT_ID,
         STREET_ID=:STREET_ID,
         ZONE_ID=:ZONE_ID,
         PARENT_ID=:PARENT_ID,
         FIRM_ID=:FIRM_ID,
         CAR_ID=:CAR_ID,
         WHO_PROCESS_ID=:WHO_PROCESS_ID,
         RESULT_ID=:RESULT_ID,
         PARK_ID=:PARK_ID,
         SOURCE_ID=:SOURCE_ID,
         DISCOUNT_ID=:DISCOUNT_ID,
         DRIVER_ID=:DRIVER_ID,
         ORDER_NUM=:ORDER_NUM,
         PHONE=:PHONE,
         HOUSE=:HOUSE,
         FLAT=:FLAT,
         PORCH=:PORCH,
         DATE_ACCEPT=:DATE_ACCEPT,
         DATE_ARRIVAL=:DATE_ARRIVAL,
         DATE_BEGIN=:DATE_BEGIN,
         DATE_END=:DATE_END,
         CUSTOMER=:CUSTOMER,
         DESCRIPTION=:DESCRIPTION,
         COST_RATE=:COST_RATE,
         COST_FACT=:COST_FACT,
         TYPE_ACCEPT=:TYPE_ACCEPT,
         TYPE_PROCESS=:TYPE_PROCESS,
         DATE_HISTORY=:DATE_HISTORY,
         WHO_HISTORY_ID=:WHO_HISTORY_ID,
         BEFORE_PERIOD=:BEFORE_PERIOD,
         FINISHED=:FINISHED,
         LOCKED=:LOCKED
   WHERE ORDER_ID=:OLD_ORDER_ID;

  OLD_COST_RATE=NULL;

  FOR SELECT COST_RATE
        FROM ORDERS
       WHERE PARENT_ID=:OLD_ORDER_ID
         AND DATE_HISTORY IS NOT NULL
       ORDER BY DATE_HISTORY DESC
        INTO :OLD_COST_RATE DO BEGIN

    IF (OLD_COST_RATE IS NOT NULL) THEN
      BREAK;

  END

  IF ((COST_RATE IS NOT NULL) AND (OLD_COST_RATE<>COST_RATE) AND (WHO_PROCESS_ID IS NOT NULL)) THEN BEGIN

    IF (SUBSTR(PHONE,1,3)='+79')  THEN BEGIN

      RECIPIENT_ID=NULL;

      FOR SELECT ACCOUNT_ID
            FROM ACCOUNTS
           WHERE PHONE=:PHONE
            INTO :RECIPIENT_ID DO BEGIN

        IF (RECIPIENT_ID IS NOT NULL) THEN
          BREAK;
      END

      SELECT CONST_VALUE FROM GET_CONST_VALUE('6F6E5F38806C896B43AC16E69914EFFA') INTO :S;

      IF (S IS NOT NULL) THEN BEGIN

        S=REPLACE_STRING(S,'%COST_RATE',CAST(COST_RATE AS VARCHAR(30)));

        INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                            TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED)
                                    VALUES (GET_UNIQUE_ID(),:WHO_PROCESS_ID,:RECIPIENT_ID,CURRENT_TIMESTAMP,
                                            :S,NULL,0,:PHONE,NULL,1,NULL);
      END

    END

  END

END;

--

/* Создание процедуры удаления заказа */

CREATE OR ALTER PROCEDURE /*PREFIX*/D_ORDER (
  OLD_ORDER_ID VARCHAR(32))
AS
BEGIN
  DELETE FROM /*PREFIX*/ROUTES
   WHERE ORDER_ID IN (SELECT ORDER_ID FROM /*PREFIX*/ORDERS
                       WHERE PARENT_ID=:OLD_ORDER_ID);

  DELETE FROM /*PREFIX*/ORDER_SERVICES
   WHERE ORDER_ID IN (SELECT ORDER_ID FROM /*PREFIX*/ORDERS
                       WHERE PARENT_ID=:OLD_ORDER_ID);

  DELETE FROM /*PREFIX*/ORDERS 
        WHERE PARENT_ID=:OLD_ORDER_ID;

  DELETE FROM /*PREFIX*/ROUTES
   WHERE ORDER_ID=:OLD_ORDER_ID;

  DELETE FROM /*PREFIX*/ORDER_SERVICES
   WHERE ORDER_ID=:OLD_ORDER_ID;

  DELETE FROM /*PREFIX*/ORDERS 
        WHERE ORDER_ID=:OLD_ORDER_ID;
END;

--

/* Создание процедуры разблокировки заказа */

CREATE OR ALTER PROCEDURE /*PREFIX*/UNLOCK_ORDER (
  ORDER_ID VARCHAR(32))
AS
BEGIN

  UPDATE /*PREFIX*/ORDERS
     SET LOCKED=NULL
   WHERE ORDER_ID=:ORDER_ID;

END;

--

/* Создание процедуры блокировки заказа */

CREATE OR ALTER PROCEDURE /*PREFIX*/LOCK_ORDER (
  ORDER_ID VARCHAR(32),
  LOCKED VARCHAR(32),
  TYPE_PROCESS INTEGER)
AS
BEGIN

  UPDATE /*PREFIX*/ORDERS
     SET LOCKED=:LOCKED,
         TYPE_PROCESS=:TYPE_PROCESS
   WHERE ORDER_ID=:ORDER_ID;

END;

--

/* Удаление процедуры блокировки заказов */

DROP PROCEDURE/*PREFIX*/LOCK_ORDERS

--

/* Создание процедуры получения заказов на блокировку */

CREATE OR ALTER PROCEDURE /*PREFIX*/GET_LOCK_ORDERS
RETURNS (
  ORDER_ID VARCHAR(32),
  ACTION_ID VARCHAR(32))
AS
BEGIN
  FOR SELECT ORDER_ID, ACTION_ID
        FROM /*PREFIX*/ORDERS
       WHERE PARENT_ID IS NULL
         AND DATE_HISTORY IS NULL
         AND WHO_HISTORY_ID IS NULL
         AND TYPE_PROCESS=0
         AND FINISHED<>1
         AND LOCKED IS NULL
         AND CURRENT_TIMESTAMP>=(DATE_ARRIVAL-(BEFORE_PERIOD*(1e0/24/60)))
       ORDER BY DATE_BEGIN
        INTO :ORDER_ID, :ACTION_ID DO BEGIN

    SUSPEND;

  END

END;

--

/* Создание процедуры проверки заказа на блокировку */

CREATE OR ALTER PROCEDURE /*PREFIX*/CHECK_LOCK_ORDER(
  ORDER_ID VARCHAR(32)
)
RETURNS (
  LOCKED VARCHAR(32)
)
AS
BEGIN
  LOCKED=NULL;

  FOR SELECT LOCKED
        FROM /*PREFIX*/ORDERS
       WHERE ORDER_ID=:ORDER_ID
        INTO :LOCKED DO BEGIN

    BREAK;
  END

END;

--

/* Создание индекса на дату истории */

CREATE INDEX IDX_ORDERS_DATE_HISTORY
ON ORDERS (DATE_HISTORY)

--

/* Создание индекса на дату прибытия */

CREATE INDEX IDX_ORDERS_DATE_ARRIVAL
ON ORDERS (DATE_ARRIVAL)

--

/* Создание индекса на дату принятия */

CREATE INDEX IDX_ORDERS_DATE_ACCEPT
ON ORDERS (DATE_ACCEPT)

--

/* Создание индекса на дату начала */

CREATE INDEX IDX_ORDERS_DATE_BEGIN
ON ORDERS (DATE_BEGIN)

--

/* Создание индекса на дату окончания */

CREATE INDEX IDX_ORDERS_DATE_END
ON ORDERS (DATE_END)

--

/* Создание индекса на период до */

CREATE INDEX IDX_ORDERS_BEFORE_PERIOD
ON ORDERS (BEFORE_PERIOD)

--

/* Создание индекса на флаг окончания заказа */

CREATE INDEX IDX_ORDERS_FINISHED
ON ORDERS (FINISHED)

--

/* Удаление представления регистрации на стоянках с положительным балансом */

DROP VIEW /*PREFIX*/S_PARK_POSITIVE_STATES

--

/* Удаление представления регистрации на стоянках */

DROP VIEW /*PREFIX*/S_PARK_STATES

--

/* Создание представления регистрации на стоянках */

CREATE VIEW /*PREFIX*/S_PARK_STATES(
    PARK_STATE_ID,
    DRIVER_ID,
    PARK_ID,
    DATE_IN,
    DATE_OUT,
    PARK_NAME,
    PARK_DESCRIPTION,
    DRIVER_NAME,
    CAR_ID,
    MIN_BALANCE,
    PRIORITY,
    CAR_COLOR,
    CAR_BRAND,
    CAR_STATE_NUM,
    CAR_TYPE_ID,
    CAR_CALLSIGN)
AS
SELECT PS.*,
       P.NAME AS PARK_NAME,
       P.DESCRIPTION AS PARK_DESCRIPTION,
       A.USER_NAME AS DRIVER_NAME,
       D.CAR_ID,
       D.MIN_BALANCE,
       D.PRIORITY,
       C.COLOR AS CAR_COLOR,
       C.BRAND AS CAR_BRAND,
       C.STATE_NUM AS CAR_STATE_NUM,
       C.CAR_TYPE_ID,
       C.CALLSIGN AS CAR_CALLSIGN
  FROM /*PREFIX*/PARK_STATES PS
  JOIN /*PREFIX*/ACCOUNTS A ON A.ACCOUNT_ID=PS.DRIVER_ID
  JOIN /*PREFIX*/PARKS P ON P.PARK_ID=PS.PARK_ID
  JOIN /*PREFIX*/DRIVERS D ON D.DRIVER_ID=PS.DRIVER_ID
  JOIN /*PREFIX*/CARS C ON C.CAR_ID=D.CAR_ID

--

/* Удаление представления водителей на стоянках с положительным балансом */

DROP VIEW /*PREFIX*/S_DRIVER_POSITIVE_PARKS

--

/* Удаление представления водителей на стоянках */

DROP VIEW /*PREFIX*/S_DRIVER_PARKS

--

/* Создание представления водителей на стоянках */

CREATE VIEW /*PREFIX*/S_DRIVER_PARKS(
    PARK_STATE_ID,
    DRIVER_ID,
    PARK_ID,
    DATE_IN,
    DATE_OUT,
    DRIVER_NAME,
    CAR_ID,
    MIN_BALANCE,
    PRIORITY,
    CAR_COLOR,
    CAR_BRAND,
    CAR_STATE_NUM,
    CAR_CALLSIGN,
    CAR_TYPE_ID,
    CAR_TYPE_NAME,
    CAR_TYPE_FONT_COLOR,
    CAR_TYPE_BRUSH_COLOR,
    PARK_NAME)
AS
SELECT PS.*,
       A.USER_NAME AS DRIVER_NAME,
       D.CAR_ID,
       D.MIN_BALANCE,
       D.PRIORITY,
       C.COLOR AS CAR_COLOR,
       C.BRAND AS CAR_BRAND,
       C.STATE_NUM AS CAR_STATE_NUM,
       C.CALLSIGN AS CAR_CALLSIGN,
       C.CAR_TYPE_ID,
       CT.NAME AS CAR_TYPE_NAME,
       CT.FONT_COLOR AS CAR_TYPE_FONT_COLOR,
       CT.BRUSH_COLOR AS CAR_TYPE_BRUSH_COLOR,
       P.NAME AS PARK_NAME
  FROM PARK_STATES PS
  JOIN PARKS P ON P.PARK_ID=PS.PARK_ID
  JOIN ACCOUNTS A ON A.ACCOUNT_ID=PS.DRIVER_ID
  JOIN DRIVERS D ON D.DRIVER_ID=PS.DRIVER_ID
  JOIN CARS C ON C.CAR_ID=D.CAR_ID
  JOIN CAR_TYPES CT ON CT.CAR_TYPE_ID=C.CAR_TYPE_ID

--

/* Удаление представления водителей на сменах с положительным балансом */

DROP VIEW /*PREFIX*/S_DRIVER_POSITIVE_SHIFTS

--

/* Удаление представления водителей на сменах */

DROP VIEW /*PREFIX*/S_DRIVER_SHIFTS

--

/* Создание представления водителей на сменах */

CREATE VIEW /*PREFIX*/S_DRIVER_SHIFTS(
    SHIFT_ID,
    DRIVER_ID,
    DATE_BEGIN,
    DATE_END,
    DRIVER_NAME,
    CAR_ID,
    MIN_BALANCE,
    PRIORITY,
    CAR_COLOR,
    CAR_BRAND,
    CAR_STATE_NUM,
    CAR_CALLSIGN,
    CAR_TYPE_ID,
    CAR_TYPE_NAME,
    CAR_TYPE_FONT_COLOR,
    CAR_TYPE_BRUSH_COLOR,
    PARK_ID,
    PARK_NAME,
    PARK_DESCRIPTION)
AS
SELECT S.*,
       A.USER_NAME AS DRIVER_NAME,
       D.CAR_ID,
       D.MIN_BALANCE,
       D.PRIORITY,
       C.COLOR AS CAR_COLOR,
       C.BRAND AS CAR_BRAND,
       C.STATE_NUM AS CAR_STATE_NUM,
       C.CALLSIGN AS CAR_CALLSIGN,
       C.CAR_TYPE_ID,
       CT.NAME AS CAR_TYPE_NAME,
       CT.FONT_COLOR AS CAR_TYPE_FONT_COLOR,
       CT.BRUSH_COLOR AS CAR_TYPE_BRUSH_COLOR,
       P.PARK_ID,
       P.NAME AS PARK_NAME,
       P.DESCRIPTION AS PARK_DESCRIPTION
  FROM /*PREFIX*/SHIFTS S
  JOIN /*PREFIX*/ACCOUNTS A ON A.ACCOUNT_ID=S.ACCOUNT_ID
  JOIN /*PREFIX*/DRIVERS D ON D.DRIVER_ID=S.ACCOUNT_ID
  JOIN /*PREFIX*/CARS C ON C.CAR_ID=D.CAR_ID
  JOIN /*PREFIX*/CAR_TYPES CT ON CT.CAR_TYPE_ID=C.CAR_TYPE_ID
  LEFT JOIN /*PREFIX*/PARK_STATES PS ON PS.DRIVER_ID=D.DRIVER_ID AND PS.DATE_OUT IS NULL
  LEFT JOIN /*PREFIX*/PARKS P ON P.PARK_ID=PS.PARK_ID

--

/* Создание процедуры обработки результата водитель прибыл */

CREATE OR ALTER PROCEDURE /*PREFIX*/PR_ARRIVAL_DRIVER (
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE PHONE VARCHAR(100);
DECLARE DRIVER_ID VARCHAR(32);
DECLARE COST_RATE NUMERIC(15,2);
DECLARE COLOR VARCHAR(100);
DECLARE BRAND VARCHAR(100);
DECLARE STATE_NUM VARCHAR(50);
DECLARE PREFIX VARCHAR(10);
DECLARE STREET VARCHAR(100);
DECLARE HOUSE VARCHAR(10);
DECLARE FLAT VARCHAR(10);
DECLARE PORCH VARCHAR(10);
DECLARE LOCALITY VARCHAR(100);
DECLARE RECIPIENT_ID VARCHAR(32);
DECLARE S VARCHAR(1000);
DECLARE ADDRESS VARCHAR(1000);
DECLARE CNT INTEGER;
BEGIN

  SELECT O.PHONE, O.DRIVER_ID, O.COST_RATE,
         C.COLOR, C.BRAND, C.STATE_NUM
    FROM /*PREFIX*/ORDERS O
    LEFT JOIN /*PREFIX*/DRIVERS D ON D.DRIVER_ID=O.DRIVER_ID
    LEFT JOIN /*PREFIX*/CARS C ON C.CAR_ID=D.CAR_ID
   WHERE ORDER_ID=:ORDER_ID
    INTO :PHONE, :DRIVER_ID, :COST_RATE,
         :COLOR, :BRAND, :STATE_NUM;

  UPDATE /*PREFIX*/ORDERS
     SET DATE_BEGIN=CURRENT_TIMESTAMP
   WHERE ORDER_ID=:ORDER_ID;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    IF (PHONE IS NOT NULL) THEN BEGIN

      IF (/*PREFIX*/SUBSTR(PHONE,1,3)='+79')  THEN BEGIN

        RECIPIENT_ID=NULL;

        FOR SELECT ACCOUNT_ID
              FROM /*PREFIX*/ACCOUNTS
             WHERE PHONE=:PHONE
              INTO :RECIPIENT_ID DO BEGIN

          IF (RECIPIENT_ID IS NOT NULL) THEN
            BREAK;
        END

/*        S='Выходите, такси '||COLOR||', '||BRAND||', '||STATE_NUM||'.';*/

        IF (COST_RATE>0.0) THEN BEGIN

/*          S=S||' Стоимость = '||CAST(CAST(COST_RATE AS NUMERIC(15,0)) AS VARCHAR(30))||' р.';*/

          SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('8D9E6C9F4852AD8142205F027B2A5288') INTO :S;

        END ELSE BEGIN

/*          S=S||' Стоимость не определена';*/

          SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('93EBB0171E37A0884313759C0DA1EB3D') INTO :S;

        END

        IF (S IS NOT NULL) THEN BEGIN

          S=/*PREFIX*/REPLACE_STRING(S,'%COLOR',COLOR);
          S=/*PREFIX*/REPLACE_STRING(S,'%BRAND',BRAND);
          S=/*PREFIX*/REPLACE_STRING(S,'%STATE_NUM',STATE_NUM);
          S=/*PREFIX*/REPLACE_STRING(S,'%COST_RATE',CAST(CAST(COST_RATE AS NUMERIC(15,0)) AS VARCHAR(30)));

          INSERT INTO /*PREFIX*/OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                              TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED)
                                      VALUES (/*PREFIX*/GET_UNIQUE_ID(),:ACCOUNT_ID,:RECIPIENT_ID,CURRENT_TIMESTAMP,
                                              :S,NULL,0,:PHONE,NULL,0,NULL);

        END

        SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('F4384929079999BB47A895BFCA5BB382') INTO :S;

        IF (S IS NOT NULL) THEN BEGIN

          INSERT INTO /*PREFIX*/OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                              TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED)
                                      VALUES (/*PREFIX*/GET_UNIQUE_ID(),:ACCOUNT_ID,:RECIPIENT_ID,CURRENT_TIMESTAMP,
                                              :S,NULL,0,:PHONE,NULL,0,NULL);

        END

      END

    END

    SELECT PHONE_MOBILE
      FROM /*PREFIX*/DRIVERS
     WHERE DRIVER_ID=:DRIVER_ID
      INTO :PHONE;

    SELECT COUNT(*)
      FROM /*PREFIX*/ROUTES
     WHERE ORDER_ID=:ORDER_ID
      INTO CNT;

    ADDRESS='';

    IF (CNT=1) THEN BEGIN

      FOR SELECT S.PREFIX, S.NAME, R.HOUSE, R.FLAT, R.PORCH, L.NAME
            FROM /*PREFIX*/ROUTES R
            LEFT JOIN /*PREFIX*/STREETS S ON S.STREET_ID=R.STREET_ID
            LEFT JOIN /*PREFIX*/LOCALITIES L ON L.LOCALITY_ID=S.LOCALITY_ID
           WHERE R.ORDER_ID=:ORDER_ID
           ORDER BY R.PRIORITY DESC
            INTO :PREFIX, :STREET, :HOUSE, :FLAT, :PORCH, :LOCALITY DO BEGIN
        BREAK;
      END

      IF ((STREET IS NOT NULL) AND (HOUSE IS NOT NULL)) THEN BEGIN

        IF (PREFIX IS NOT NULL) THEN
          ADDRESS=PREFIX||' ';

        IF (STREET IS NOT NULL) THEN
          ADDRESS=ADDRESS||STREET;

        IF (HOUSE IS NOT NULL) THEN
          ADDRESS=ADDRESS||' '||HOUSE;

        IF (FLAT IS NOT NULL) THEN
          ADDRESS=ADDRESS||'-'||FLAT;

        IF (PORCH IS NOT NULL) THEN
          ADDRESS=ADDRESS||' п.'||PORCH;

        IF (LOCALITY IS NOT NULL) THEN
          ADDRESS=ADDRESS||', '||LOCALITY;

      END ELSE BEGIN

        SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('7ED5E8A8BBD9870A411517B54D9EB973') INTO :ADDRESS;

      END

    END ELSE BEGIN

/*      ADDRESS='Уточните маршрут.';*/

      SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('7ED5E8A8BBD9870A411517B54D9EB973') INTO :ADDRESS;
    END

    IF (COST_RATE>0.0) THEN BEGIN

/*      S=ADDRESS||' Стоимость = '||CAST(CAST(COST_RATE AS NUMERIC(15,0)) AS VARCHAR(30))||' р.';*/

      SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('9C8BC7D14DAEAE5C4DC8C1C91B20BCC2') INTO :S;

    END ELSE BEGIN

/*      S=ADDRESS||' Стоимость не определена';*/

      SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('92009DB6C3EAA9E74B80D333538FE40D') INTO :S;

    END

    IF (S IS NOT NULL) THEN BEGIN

      S=/*PREFIX*/REPLACE_STRING(S,'%ADDRESS',ADDRESS);
      S=/*PREFIX*/REPLACE_STRING(S,'%COST_RATE',CAST(CAST(COST_RATE AS NUMERIC(15,0)) AS VARCHAR(30)));

      RECIPIENT_ID=DRIVER_ID;

      INSERT INTO /*PREFIX*/OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                          TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED)
                                  VALUES (/*PREFIX*/GET_UNIQUE_ID(),:ACCOUNT_ID,:RECIPIENT_ID,CURRENT_TIMESTAMP,
                                          :S,NULL,0,:PHONE,NULL,2,NULL);
    END

  END

END;

--

/* Создание процедуры отказа клиента на этапе прибыл */

CREATE OR ALTER PROCEDURE /*PREFIX*/PR_REFUSE_CLIENT_COME_OUT (
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE DRIVER_ID VARCHAR(32);
DECLARE PARK_ID VARCHAR(32);
DECLARE PARK_NAME VARCHAR(100);
DECLARE PHONE VARCHAR(100);
DECLARE PARK_STATE_ID VARCHAR(32);
DECLARE DATE_IN TIMESTAMP;
DECLARE S VARCHAR(1000);
BEGIN

  SELECT DRIVER_ID, PARK_ID
    FROM /*PREFIX*/ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID, :PARK_ID;

  UPDATE /*PREFIX*/ORDERS
     SET DATE_END=CURRENT_TIMESTAMP,
         WHO_PROCESS_ID=:ACCOUNT_ID,
         FINISHED=1
   WHERE ORDER_ID=:ORDER_ID;

  IF ((DRIVER_ID IS NOT NULL) AND (PARK_ID IS NOT NULL)) THEN BEGIN

    FOR SELECT PS.PARK_STATE_ID, P.NAME, PS.DATE_IN
          FROM /*PREFIX*/PARK_STATES PS
          JOIN /*PREFIX*/PARKS P ON P.PARK_ID=PS.PARK_ID
         WHERE PS.PARK_ID=:PARK_ID
         ORDER BY PS.DATE_IN
          INTO :PARK_STATE_ID, :PARK_NAME, :DATE_IN DO BEGIN

      DATE_IN=DATE_IN-2*(1e0/24/60/60);

      INSERT INTO /*PREFIX*/PARK_STATES (PARK_STATE_ID,DRIVER_ID,PARK_ID,DATE_IN,DATE_OUT)
                                 VALUES (/*PREFIX*/GET_UNIQUE_ID(),:DRIVER_ID,:PARK_ID,:DATE_IN,NULL);

      BREAK;
    END

    IF (PARK_NAME IS NULL) THEN BEGIN

      INSERT INTO /*PREFIX*/PARK_STATES (PARK_STATE_ID,DRIVER_ID,PARK_ID,DATE_IN,DATE_OUT)
                                 VALUES (/*PREFIX*/GET_UNIQUE_ID(),:DRIVER_ID,:PARK_ID,CURRENT_TIMESTAMP,NULL);

      SELECT NAME
        FROM /*PREFIX*/PARKS
       WHERE PARK_ID=:PARK_ID
        INTO :PARK_NAME;

    END

    SELECT PHONE_MOBILE
      FROM /*PREFIX*/DRIVERS
     WHERE DRIVER_ID=:DRIVER_ID
      INTO :PHONE;

    SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('13D70B96F52BBE8D4E115CCC194F3B10') INTO :S;

    IF (S IS NOT NULL) THEN BEGIN

      S=/*PREFIX*/REPLACE_STRING(S,'%PARK_NAME',PARK_NAME);

      INSERT INTO /*PREFIX*/OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                          TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED)
                                  VALUES (/*PREFIX*/GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                          :S,NULL,0,:PHONE,NULL,2,NULL);
    END

  END

END;

--

/* Создание таблицы заданий */

CREATE TABLE /*PREFIX*/TASKS
(
  TASK_ID VARCHAR(32) NOT NULL,
  APPLICATION_ID VARCHAR(32) NOT NULL,
  ACCOUNT_ID VARCHAR(32),
  INTERFACE_ID VARCHAR(32),
  NAME VARCHAR(100) NOT NULL,
  DESCRIPTION VARCHAR(250),
  DATE_BEGIN TIMESTAMP NOT NULL,
  DATE_END TIMESTAMP,
  SCHEDULE INTEGER NOT NULL,
  PRIORITY INTEGER NOT NULL,
  ENABLED INTEGER NOT NULL,
  PROC_NAME VARCHAR(100),
  COMMAND_STRING VARCHAR(250),
  REPEAT_ENABLED INTEGER NOT NULL,
  REPEAT_TYPE INTEGER,
  REPEAT_VALUE INTEGER,
  REPEAT_COUNT INTEGER,
  DAY_FREQUENCY INTEGER,
  WEEK_FREQUENCY INTEGER,
  MONDAY INTEGER NOT NULL,
  TUESDAY INTEGER NOT NULL,
  WEDNESDAY INTEGER NOT NULL,
  THURSDAY INTEGER NOT NULL,
  FRIDAY INTEGER NOT NULL,
  SATURDAY INTEGER NOT NULL,
  SUNDAY INTEGER NOT NULL,
  MONTH_DAY INTEGER,
  JANUARY INTEGER NOT NULL,
  FEBRUARY INTEGER NOT NULL,
  MARCH INTEGER NOT NULL,
  APRIL INTEGER NOT NULL,
  MAY INTEGER NOT NULL,
  JUNE INTEGER NOT NULL,
  JULY INTEGER NOT NULL,
  AUGUST INTEGER NOT NULL,
  SEPTEMBER INTEGER NOT NULL,
  OCTOBER INTEGER NOT NULL,
  NOVEMBER INTEGER NOT NULL,
  DECEMBER INTEGER NOT NULL,
  DATE_EXECUTE TIMESTAMP,
  RESULT_STRING VARCHAR(250),
  PRIMARY KEY (TASK_ID),
  FOREIGN KEY (APPLICATION_ID) REFERENCES /*PREFIX*/APPLICATIONS (APPLICATION_ID),
  FOREIGN KEY (ACCOUNT_ID) REFERENCES /*PREFIX*/ACCOUNTS (ACCOUNT_ID),
  FOREIGN KEY (INTERFACE_ID) REFERENCES /*PREFIX*/INTERFACES (INTERFACE_ID)
)

--

/* Создание просмотра таблицы заданий */

CREATE VIEW /*PREFIX*/S_TASKS
(
  TASK_ID,
  APPLICATION_ID,
  ACCOUNT_ID,
  INTERFACE_ID,
  NAME,
  DESCRIPTION,
  DATE_BEGIN,
  DATE_END,
  SCHEDULE,
  PRIORITY,
  ENABLED,
  PROC_NAME,
  COMMAND_STRING,
  REPEAT_ENABLED,
  REPEAT_TYPE,
  REPEAT_VALUE,
  REPEAT_COUNT,
  DAY_FREQUENCY,
  WEEK_FREQUENCY,
  MONDAY,
  TUESDAY,
  WEDNESDAY,
  THURSDAY,
  FRIDAY,
  SATURDAY,
  SUNDAY,
  MONTH_DAY,
  JANUARY,
  FEBRUARY,
  MARCH,
  APRIL,
  MAY,
  JUNE,
  JULY,
  AUGUST,
  SEPTEMBER,
  OCTOBER,
  NOVEMBER,
  DECEMBER,
  DATE_EXECUTE,
  RESULT_STRING,
  APPLICATION_NAME,
  USER_NAME,
  INTERFACE_NAME
)
AS
  SELECT T.*,
         A.NAME AS APPLICATION_NAME,
         AC.USER_NAME,
         I.NAME AS INTERFACE_NAME
    FROM /*PREFIX*/TASKS T
    JOIN /*PREFIX*/APPLICATIONS A ON A.APPLICATION_ID=T.APPLICATION_ID
    LEFT JOIN /*PREFIX*/ACCOUNTS AC ON AC.ACCOUNT_ID=T.ACCOUNT_ID
    LEFT JOIN /*PREFIX*/INTERFACES I ON I.INTERFACE_ID=T.INTERFACE_ID

--

/* Создание процедуры добавления задания */

CREATE PROCEDURE /*PREFIX*/I_TASK
(
  TASK_ID VARCHAR(32),
  APPLICATION_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32),
  INTERFACE_ID VARCHAR(32),
  NAME VARCHAR(100),
  DESCRIPTION VARCHAR(250),
  DATE_BEGIN TIMESTAMP,
  DATE_END TIMESTAMP,
  SCHEDULE INTEGER,
  PRIORITY INTEGER,
  ENABLED INTEGER,
  PROC_NAME VARCHAR(100),
  COMMAND_STRING VARCHAR(250),
  REPEAT_ENABLED INTEGER,
  REPEAT_TYPE INTEGER,
  REPEAT_VALUE INTEGER,
  REPEAT_COUNT INTEGER,
  DAY_FREQUENCY INTEGER,
  WEEK_FREQUENCY INTEGER,
  MONDAY INTEGER,
  TUESDAY INTEGER,
  WEDNESDAY INTEGER,
  THURSDAY INTEGER,
  FRIDAY INTEGER,
  SATURDAY INTEGER,
  SUNDAY INTEGER,
  MONTH_DAY INTEGER,
  JANUARY INTEGER,
  FEBRUARY INTEGER,
  MARCH INTEGER,
  APRIL INTEGER,
  MAY INTEGER,
  JUNE INTEGER,
  JULY INTEGER,
  AUGUST INTEGER,
  SEPTEMBER INTEGER,
  OCTOBER INTEGER,
  NOVEMBER INTEGER,
  DECEMBER INTEGER,
  DATE_EXECUTE TIMESTAMP,
  RESULT_STRING VARCHAR(250)
)
AS
BEGIN
  INSERT INTO /*PREFIX*/TASKS (TASK_ID,APPLICATION_ID,ACCOUNT_ID,INTERFACE_ID,NAME,DESCRIPTION,DATE_BEGIN,
                               DATE_END,SCHEDULE,PRIORITY,ENABLED,PROC_NAME,COMMAND_STRING,REPEAT_ENABLED,
                               REPEAT_TYPE,REPEAT_VALUE,REPEAT_COUNT,DAY_FREQUENCY,WEEK_FREQUENCY,
                               MONDAY,TUESDAY,WEDNESDAY,THURSDAY,FRIDAY,SATURDAY,SUNDAY,MONTH_DAY,
                               JANUARY,FEBRUARY,MARCH,APRIL,MAY,JUNE,JULY,AUGUST,SEPTEMBER,OCTOBER,NOVEMBER,DECEMBER,
                               DATE_EXECUTE,RESULT_STRING)
       VALUES (:TASK_ID,:APPLICATION_ID,:ACCOUNT_ID,:INTERFACE_ID,:NAME,:DESCRIPTION,:DATE_BEGIN,
               :DATE_END,:SCHEDULE,:PRIORITY,:ENABLED,:PROC_NAME,:COMMAND_STRING,:REPEAT_ENABLED,
               :REPEAT_TYPE,:REPEAT_VALUE,:REPEAT_COUNT,:DAY_FREQUENCY,:WEEK_FREQUENCY,
               :MONDAY,:TUESDAY,:WEDNESDAY,:THURSDAY,:FRIDAY,:SATURDAY,:SUNDAY,:MONTH_DAY,
               :JANUARY,:FEBRUARY,:MARCH,:APRIL,:MAY,:JUNE,:JULY,:AUGUST,:SEPTEMBER,:OCTOBER,:NOVEMBER,:DECEMBER,
               :DATE_EXECUTE,:RESULT_STRING);
END;

--

/* Создание процедуры изменения задания */

CREATE PROCEDURE /*PREFIX*/U_TASK
(
  TASK_ID VARCHAR(32),
  APPLICATION_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32),
  INTERFACE_ID VARCHAR(32),
  NAME VARCHAR(100),
  DESCRIPTION VARCHAR(250),
  DATE_BEGIN TIMESTAMP,
  DATE_END TIMESTAMP,
  SCHEDULE INTEGER,
  PRIORITY INTEGER,
  ENABLED INTEGER,
  PROC_NAME VARCHAR(100),
  COMMAND_STRING VARCHAR(250),
  REPEAT_ENABLED INTEGER,
  REPEAT_TYPE INTEGER,
  REPEAT_VALUE INTEGER,
  REPEAT_COUNT INTEGER,
  DAY_FREQUENCY INTEGER,
  WEEK_FREQUENCY INTEGER,
  MONDAY INTEGER,
  TUESDAY INTEGER,
  WEDNESDAY INTEGER,
  THURSDAY INTEGER,
  FRIDAY INTEGER,
  SATURDAY INTEGER,
  SUNDAY INTEGER,
  MONTH_DAY INTEGER,
  JANUARY INTEGER,
  FEBRUARY INTEGER,
  MARCH INTEGER,
  APRIL INTEGER,
  MAY INTEGER,
  JUNE INTEGER,
  JULY INTEGER,
  AUGUST INTEGER,
  SEPTEMBER INTEGER,
  OCTOBER INTEGER,
  NOVEMBER INTEGER,
  DECEMBER INTEGER,
  DATE_EXECUTE TIMESTAMP,
  RESULT_STRING VARCHAR(250),
  OLD_TASK_ID VARCHAR(32)
)
AS
BEGIN
  UPDATE /*PREFIX*/TASKS
     SET TASK_ID=:TASK_ID,
         APPLICATION_ID=:APPLICATION_ID,
         ACCOUNT_ID=:ACCOUNT_ID,
         INTERFACE_ID=:INTERFACE_ID,
         NAME=:NAME,
         DESCRIPTION=:DESCRIPTION,
         DATE_BEGIN=:DATE_BEGIN,
         DATE_END=:DATE_END,
         SCHEDULE=:SCHEDULE,
         PRIORITY=:PRIORITY,
         ENABLED=:ENABLED,
         PROC_NAME=:PROC_NAME,
         COMMAND_STRING=:COMMAND_STRING,
         REPEAT_ENABLED=:REPEAT_ENABLED,
         REPEAT_TYPE=:REPEAT_TYPE,
         REPEAT_VALUE=:REPEAT_VALUE,
         REPEAT_COUNT=:REPEAT_COUNT,
         DAY_FREQUENCY=:DAY_FREQUENCY,
         WEEK_FREQUENCY=:WEEK_FREQUENCY,
         MONDAY=:MONDAY,
         TUESDAY=:TUESDAY,
         WEDNESDAY=:WEDNESDAY,
         THURSDAY=:THURSDAY,
         FRIDAY=:FRIDAY,
         SATURDAY=:SATURDAY,
         SUNDAY=:SUNDAY,
         MONTH_DAY=:MONTH_DAY,
         JANUARY=:JANUARY,
         FEBRUARY=:FEBRUARY,
         MARCH=:MARCH,
         APRIL=:APRIL,
         MAY=:MAY,
         JUNE=:JUNE,
         JULY=:JULY,
         AUGUST=:AUGUST,
         SEPTEMBER=:SEPTEMBER,
         OCTOBER=:OCTOBER,
         NOVEMBER=:NOVEMBER,
         DECEMBER=:DECEMBER,
         DATE_EXECUTE=:DATE_EXECUTE,
         RESULT_STRING=:RESULT_STRING
   WHERE TASK_ID=:OLD_TASK_ID;
END;

--

/* Создание процедуры удаления задания */

CREATE PROCEDURE /*PREFIX*/D_TASK
(
  OLD_TASK_ID VARCHAR(32)
)
AS
BEGIN
  DELETE FROM /*PREFIX*/TASKS
        WHERE TASK_ID=:OLD_TASK_ID;
END;

--

/* Создание таблицы обмена */

CREATE TABLE /*PREFIX*/EXCHANGES
(
  EXCHANGE_ID VARCHAR(32) NOT NULL,
  NAME VARCHAR(100) NOT NULL,
  DESCRIPTION VARCHAR(250),
  SCRIPT BLOB,
  SOURCE VARCHAR(100) NOT NULL,
  SOURCE_BEFORE BLOB,
  SOURCE_AFTER BLOB,
  DESTINATION VARCHAR(100) NOT NULL,
  DESTINATION_BEFORE BLOB,
  DESTINATION_AFTER BLOB,
  PRIORITY INTEGER,
  ENABLED INTEGER NOT NULL,
  PRIMARY KEY (EXCHANGE_ID)
)

--

/* Создание просмотра таблицы обмена */

CREATE VIEW /*PREFIX*/S_EXCHANGES
AS
  SELECT *
    FROM /*PREFIX*/EXCHANGES

--

/* Создание процедуры добавления обмена */

CREATE PROCEDURE /*PREFIX*/I_EXCHANGE
(
  EXCHANGE_ID VARCHAR(32),
  NAME VARCHAR(100),
  DESCRIPTION VARCHAR(250),
  SCRIPT BLOB,
  SOURCE VARCHAR(100),
  SOURCE_BEFORE BLOB,
  SOURCE_AFTER BLOB,
  DESTINATION VARCHAR(100),
  DESTINATION_BEFORE BLOB,
  DESTINATION_AFTER BLOB,
  PRIORITY INTEGER,
  ENABLED INTEGER
)
AS
BEGIN
  INSERT INTO /*PREFIX*/EXCHANGES (EXCHANGE_ID,NAME,DESCRIPTION,SCRIPT,
                                   SOURCE,SOURCE_BEFORE,SOURCE_AFTER,
                                   DESTINATION,DESTINATION_BEFORE,DESTINATION_AFTER,
                                   PRIORITY,ENABLED)
       VALUES (:EXCHANGE_ID,:NAME,:DESCRIPTION,:SCRIPT,
               :SOURCE,:SOURCE_BEFORE,:SOURCE_AFTER,
               :DESTINATION,:DESTINATION_BEFORE,:DESTINATION_AFTER,
               :PRIORITY,:ENABLED);
END;

--

/* Создание процедуры изменения обмена */

CREATE PROCEDURE /*PREFIX*/U_EXCHANGE
(
  EXCHANGE_ID VARCHAR(32),
  NAME VARCHAR(100),
  DESCRIPTION VARCHAR(250),
  SCRIPT BLOB,
  SOURCE VARCHAR(100),
  SOURCE_BEFORE BLOB,
  SOURCE_AFTER BLOB,
  DESTINATION VARCHAR(100),
  DESTINATION_BEFORE BLOB,
  DESTINATION_AFTER BLOB,
  PRIORITY INTEGER,
  ENABLED INTEGER,
  OLD_EXCHANGE_ID VARCHAR(32)
)
AS
BEGIN
  UPDATE /*PREFIX*/EXCHANGES
     SET EXCHANGE_ID=:EXCHANGE_ID,
         NAME=:NAME,
         DESCRIPTION=:DESCRIPTION,
         SCRIPT=:SCRIPT,
         SOURCE=:SOURCE,
         SOURCE_BEFORE=:SOURCE_BEFORE,
         SOURCE_AFTER=:SOURCE_AFTER,
         DESTINATION=:DESTINATION,
         DESTINATION_BEFORE=:DESTINATION_BEFORE,
         DESTINATION_AFTER=:DESTINATION_AFTER,
         PRIORITY=:PRIORITY,
         ENABLED=:ENABLED
   WHERE EXCHANGE_ID=:OLD_EXCHANGE_ID;
END;

--

/* Создание процедуры удаления обмена */

CREATE PROCEDURE /*PREFIX*/D_EXCHANGE
(
  OLD_EXCHANGE_ID VARCHAR(32)
)
AS
BEGIN
  DELETE FROM /*PREFIX*/EXCHANGES
        WHERE EXCHANGE_ID=:OLD_EXCHANGE_ID;
END;

--

CREATE OR ALTER PROCEDURE /*PREFIX*/TASK_TEST
(
  TASK_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32)
)
AS
BEGIN
END;

--

CREATE OR ALTER PROCEDURE /*PREFIX*/GET_DATE_TO
(
  MONTH_COUNT INTEGER
)
RETURNS (
  DATE_TO TIMESTAMP
)
AS
  DECLARE Y INTEGER;
  DECLARE M INTEGER;
BEGIN
  IF (MONTH_COUNT IS NULL) THEN
    MONTH_COUNT=1;

  IF (MONTH_COUNT>12) THEN
    MONTH_COUNT=12;

  DATE_TO=CURRENT_TIMESTAMP;
  Y=EXTRACT(YEAR FROM DATE_TO);
  M=EXTRACT(MONTH FROM DATE_TO);
  M=M-MONTH_COUNT;
  IF (M<=0) THEN BEGIN
    M=12+M;
    Y=Y-1;
  END

  DATE_TO=CAST('01.'||CAST(M AS VARCHAR(2))||'.'||CAST(Y AS VARCHAR(4)) AS TIMESTAMP);

  SUSPEND;

END;

--

CREATE INDEX IDX_PARK_STATES_DATE_IN ON PARK_STATES (DATE_IN)

--

CREATE INDEX IDX_PARK_STATES_DATE_OUT ON PARK_STATES (DATE_OUT)

--

CREATE INDEX IDX_SHIFTS_DATE_BEGIN ON SHIFTS (DATE_BEGIN)

--

CREATE INDEX IDX_SHIFTS_DATE_END ON SHIFTS (DATE_END)

--

CREATE INDEX IDX_IN_MESSAGES_DATE_SEND ON IN_MESSAGES (DATE_SEND)

--

CREATE INDEX IDX_IN_MESSAGES_CONTACT ON IN_MESSAGES (CONTACT)

--

CREATE INDEX IDX_OUT_MESSAGES_DATE_CREATE ON OUT_MESSAGES (DATE_CREATE)

--

CREATE INDEX IDX_OUT_MESSAGES_DATE_OUT ON OUT_MESSAGES (DATE_OUT)

--

CREATE INDEX IDX_OUT_MESSAGES_CONTACT ON OUT_MESSAGES (CONTACT)

--

CREATE INDEX IDX_OUT_MESSAGES_PRIORITY ON OUT_MESSAGES (PRIORITY)

--

CREATE OR ALTER PROCEDURE /*PREFIX*/EXCHANGE_BEFORE
(
  MONTH_COUNT INTEGER
)
AS
  DECLARE CNT INTEGER;
  DECLARE RECEIPT_TYPE_ID VARCHAR(32);
  DECLARE CHARGE_TYPE_ID VARCHAR(32);
  DECLARE WHO_INSERT_ID VARCHAR(32);
  DECLARE DATE_TO TIMESTAMP;
  DECLARE ACCOUNT_ID VARCHAR(32);
  DECLARE SUM_RECEIPT NUMERIC(15,2);
  DECLARE SUM_CHARGE NUMERIC(15,2);
BEGIN
  WHO_INSERT_ID='EF536273DCCB8A6E42EFEF0972F87CCC'; /* Администратор */
  RECEIPT_TYPE_ID='41C4384E4D878D7947BCDB2C69681382'; /* Перенос остатков */
  CHARGE_TYPE_ID='07BA0951D3B0A2984307761888D416F6'; /* Перенос остатков */

  SELECT DATE_TO
    FROM /*PREFIX*/GET_DATE_TO(:MONTH_COUNT)
    INTO :DATE_TO;

  SELECT COUNT(*)
    FROM /*PREFIX*/RECEIPT_TYPES
   WHERE RECEIPT_TYPE_ID=:RECEIPT_TYPE_ID
    INTO :CNT;

  IF (CNT=0) THEN BEGIN
    INSERT INTO /*PREFIX*/RECEIPT_TYPES (RECEIPT_TYPE_ID,NAME,DESCRIPTION,SUM_RECEIPT)
         VALUES (:RECEIPT_TYPE_ID,'Перенос остатков',NULL,NULL);
  END

  SELECT COUNT(*)
    FROM /*PREFIX*/CHARGE_TYPES
   WHERE CHARGE_TYPE_ID=:CHARGE_TYPE_ID
    INTO :CNT;

  IF (CNT=0) THEN BEGIN
    INSERT INTO /*PREFIX*/CHARGE_TYPES (CHARGE_TYPE_ID,NAME,DESCRIPTION,SUM_CHARGE)
         VALUES (:CHARGE_TYPE_ID,'Перенос остатков',NULL,NULL);
  END

  FOR SELECT ACCOUNT_ID, SUM(SUM_RECEIPT)
        FROM /*PREFIX*/RECEIPTS
       WHERE DATE_RECEIPT<:DATE_TO
       GROUP BY ACCOUNT_ID
        INTO :ACCOUNT_ID, :SUM_RECEIPT  DO BEGIN

    DELETE FROM /*PREFIX*/RECEIPTS
          WHERE RECEIPT_TYPE_ID=:RECEIPT_TYPE_ID
            AND DATE_RECEIPT=:DATE_TO
            AND ACCOUNT_ID=:ACCOUNT_ID;

    INSERT INTO /*PREFIX*/RECEIPTS (RECEIPT_ID,RECEIPT_TYPE_ID,ACCOUNT_ID,WHO_CREATE_ID,
                                    SUM_RECEIPT,DATE_RECEIPT,DATE_CREATE,DESCRIPTION)
         VALUES (GET_UNIQUE_ID(),:RECEIPT_TYPE_ID,:ACCOUNT_ID,:WHO_INSERT_ID,
                 :SUM_RECEIPT,:DATE_TO,CURRENT_TIMESTAMP,NULL);

  END

  FOR SELECT ACCOUNT_ID, SUM(SUM_CHARGE)
        FROM /*PREFIX*/CHARGES
       WHERE DATE_CHARGE<:DATE_TO
       GROUP BY ACCOUNT_ID
        INTO :ACCOUNT_ID, :SUM_CHARGE DO BEGIN

    DELETE FROM /*PREFIX*/CHARGES
          WHERE CHARGE_TYPE_ID=:CHARGE_TYPE_ID
            AND DATE_CHARGE=:DATE_TO
            AND ACCOUNT_ID=:ACCOUNT_ID;

    INSERT INTO /*PREFIX*/CHARGES (CHARGE_ID,CHARGE_TYPE_ID,ACCOUNT_ID,WHO_CREATE_ID,
                                   SUM_CHARGE,DATE_CHARGE,DATE_CREATE,DESCRIPTION)
         VALUES (GET_UNIQUE_ID(),:CHARGE_TYPE_ID,:ACCOUNT_ID,:WHO_INSERT_ID,
                 :SUM_CHARGE,:DATE_TO,CURRENT_TIMESTAMP,NULL);

  END

END;

--

CREATE OR ALTER PROCEDURE /*PREFIX*/EXCHANGE_AFTER
(
  MONTH_COUNT INTEGER
)
AS
  DECLARE DATE_TO TIMESTAMP;
BEGIN

  SELECT DATE_TO
    FROM /*PREFIX*/GET_DATE_TO(:MONTH_COUNT)
    INTO :DATE_TO;

  DELETE FROM /*PREFIX*/RECEIPTS
        WHERE DATE_RECEIPT<:DATE_TO;

  DELETE FROM /*PREFIX*/CHARGES
        WHERE DATE_CHARGE<:DATE_TO;

  DELETE FROM /*PREFIX*/PARK_STATES
        WHERE DATE_IN<:DATE_TO;

  DELETE FROM /*PREFIX*/SHIFTS
        WHERE DATE_BEGIN<:DATE_TO;

  DELETE FROM /*PREFIX*/ROUTES
        WHERE ORDER_ID IN (SELECT ORDER_ID FROM /*PREFIX*/ORDERS
                            WHERE DATE_ACCEPT<:DATE_TO);

  DELETE FROM /*PREFIX*/ORDER_SERVICES
        WHERE ORDER_ID IN (SELECT ORDER_ID FROM /*PREFIX*/ORDERS
                            WHERE DATE_ACCEPT<:DATE_TO);

  DELETE FROM /*PREFIX*/ORDERS
        WHERE DATE_ACCEPT<:DATE_TO
          AND PARENT_ID IS NOT NULL;

  DELETE FROM /*PREFIX*/ORDERS
        WHERE DATE_ACCEPT<:DATE_TO
          AND PARENT_ID IS NULL;

  DELETE FROM /*PREFIX*/OUT_MESSAGES
        WHERE DATE_CREATE<:DATE_TO;

  DELETE FROM /*PREFIX*/IN_MESSAGES
        WHERE DATE_SEND<:DATE_TO;

END;

--

CREATE OR ALTER PROCEDURE /*PREFIX*/SET_STATISTICS
AS
  DECLARE INDEX_NAME VARCHAR(100);
BEGIN

  FOR SELECT I.RDB$INDEX_NAME
        FROM RDB$INDICES I
       WHERE (I.RDB$SYSTEM_FLAG = 0)
        INTO :INDEX_NAME DO BEGIN

    EXECUTE STATEMENT 'SET STATISTICS INDEX '||INDEX_NAME;

  END

END;

--

/* Фиксация изменений */

COMMIT