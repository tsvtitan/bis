/* Создание процедуры снятия со стоянки */

CREATE OR ALTER PROCEDURE D_DRIVER_PARK (
  DRIVER_ID VARCHAR(32),
  PARK_ID VARCHAR(32),
  DATE_OUT TIMESTAMP)
AS
BEGIN
  UPDATE /*PREFIX*/PARK_STATES
     SET DATE_OUT=:DATE_OUT
   WHERE DRIVER_ID=:DRIVER_ID
     AND PARK_ID=:PARK_ID
     AND DATE_OUT IS NULL;
END;

/* Создание процедуры закрытия смены */

CREATE OR ALTER PROCEDURE D_DRIVER_SHIFT (
  SHIFT_ID VARCHAR(32),
  DRIVER_ID VARCHAR(32),
  PARK_ID VARCHAR(32),
  DATE_END TIMESTAMP,
  LOCKED INTEGER)
AS
BEGIN
  UPDATE /*PREFIX*/SHIFTS
     SET DATE_END=:DATE_END
   WHERE ACCOUNT_ID=:DRIVER_ID
     AND SHIFT_ID=:SHIFT_ID;

  IF (PARK_ID IS NOT NULL) THEN BEGIN

    UPDATE /*PREFIX*/PARK_STATES
       SET DATE_OUT=:DATE_END
     WHERE DRIVER_ID=:DRIVER_ID
       AND PARK_ID=:PARK_ID
       AND DATE_OUT IS NULL;

  END

  UPDATE /*PREFIX*/ACCOUNTS
     SET LOCKED=:LOCKED
   WHERE ACCOUNT_ID=:DRIVER_ID;

END;

--

/* Создание процедуры выхода на смену */

CREATE OR ALTER PROCEDURE I_DRIVER_SHIFT (
  SHIFT_ID VARCHAR(32),
  DRIVER_ID VARCHAR(32),
  PARK_ID VARCHAR(32),
  DATE_BEGIN TIMESTAMP)
AS
BEGIN
  INSERT INTO /*PREFIX*/SHIFTS (SHIFT_ID,ACCOUNT_ID,DATE_BEGIN)
       VALUES (:SHIFT_ID,:DRIVER_ID,:DATE_BEGIN);

  IF (PARK_ID IS NOT NULL) THEN BEGIN

    UPDATE /*PREFIX*/PARK_STATES
       SET DATE_OUT=:DATE_BEGIN
     WHERE DRIVER_ID=:DRIVER_ID
       AND DATE_OUT IS NULL;

    INSERT INTO /*PREFIX*/PARK_STATES(PARK_STATE_ID,DRIVER_ID,PARK_ID,DATE_IN)
           VALUES (/*PREFIX*/GET_UNIQUE_ID(),:DRIVER_ID,:PARK_ID,CURRENT_TIMESTAMP);

  END

END;

--

/* Создание процедуры обработки кода закрытия смены */

CREATE OR ALTER PROCEDURE CODE_SHIFT_CLOSE (
  ACCOUNT_ID VARCHAR(32),
  IN_MESSAGE_ID VARCHAR(32))
AS
DECLARE CONTACT VARCHAR(100);
DECLARE SENDER_ID VARCHAR(32);
DECLARE S VARCHAR(1000);
DECLARE CNT INTEGER;
DECLARE D TIMESTAMP;
DECLARE DATE_BEGIN TIMESTAMP;
DECLARE SHIFT_ID VARCHAR(32);
DECLARE HOURS NUMERIC(10,1);
BEGIN
  SELECT CONTACT, SENDER_ID
    FROM IN_MESSAGES
   WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID
    INTO CONTACT, SENDER_ID;

  IF ((CONTACT IS NOT NULL) AND (SENDER_ID IS NOT NULL)) THEN BEGIN

    SELECT COUNT(*)
      FROM DRIVERS
     WHERE DRIVER_ID=:SENDER_ID
      INTO :CNT;

    IF (CNT>0) THEN BEGIN

      SELECT COUNT(*)
        FROM ORDERS
       WHERE DRIVER_ID=:SENDER_ID
         AND PARENT_ID IS NULL
         AND DATE_HISTORY IS NULL
         AND FINISHED<>1
        INTO :CNT;

      IF (CNT>0) THEN BEGIN

/*        S='Вы на заказе';*/

        SELECT CONST_VALUE FROM GET_CONST_VALUE('0A2F3602D3FD9A0E476E367410F37492') INTO :S;

        IF (S IS NOT NULL) THEN BEGIN

          INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                              TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED)
                                       VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                               :S,NULL,0,:CONTACT,NULL,1,NULL);
        END

      END ELSE BEGIN

        FOR SELECT DATE_BEGIN, SHIFT_ID
              FROM SHIFTS
             WHERE ACCOUNT_ID=:SENDER_ID
               AND DATE_END IS NULL
              INTO :DATE_BEGIN, :SHIFT_ID DO BEGIN

          D=CURRENT_TIMESTAMP;

          UPDATE PARK_STATES
             SET DATE_OUT=:D
           WHERE DRIVER_ID=:SENDER_ID
             AND DATE_OUT IS NULL;

          UPDATE SHIFTS
             SET DATE_END=:D
           WHERE SHIFT_ID=:SHIFT_ID
             AND DATE_END IS NULL;

          HOURS=CAST((D-DATE_BEGIN)*(1e0*24) AS NUMERIC(10,1));

/*          S='Ваша смена закрыта в '||/*PERFIX*//*FORMAT_DATETIME('hh:nn:ss dd.mm.yyyy',D)||'.';
          S=S||' Длительность = '||CAST(HOURS AS VARCHAR(30))||' ч. ';*/

          SELECT CONST_VALUE FROM GET_CONST_VALUE('5D8701DF0DEDB7A6491181074CE5A88D') INTO :S;

          IF (S IS NOT NULL) THEN BEGIN

            S=REPLACE_STRING(S,'%TIME_DATE',/*PERFIX*/FORMAT_DATETIME('hh:nn:ss dd.mm.yyyy',D));
            S=REPLACE_STRING(S,'%HOURS',CAST(HOURS AS VARCHAR(30)));

            INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                                TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED)
                                        VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                                :S,NULL,0,:CONTACT,NULL,1,NULL);
          END
        END

      END

    END

  END
END;

--

ALTER TABLE /*PREFIX*/ALARMS
ADD SENDER_ID VARCHAR(32)

--

UPDATE /*PREFIX*/ALARMS
   SET SENDER_ID='EF536273DCCB8A6E42EFEF0972F87CCC'

--

ALTER TABLE /*PREFIX*/ALARMS
ADD FOREIGN KEY (SENDER_ID) REFERENCES /*PREFIX*/ACCOUNTS (ACCOUNT_ID)

--

update RDB$RELATION_FIELDS set
RDB$NULL_FLAG = 1
where (RDB$FIELD_NAME = 'SENDER_ID') and
(RDB$RELATION_NAME = 'ALARMS')

--

DROP VIEW S_ALARMS

--

CREATE VIEW S_ALARMS(
    ALARM_ID,
    RECIPIENT_ID,
    TYPE_ALARM,
    DATE_BEGIN,
    DATE_END,
    CAPTION,
    TEXT_ALARM,
    SENDER_ID,
    SENDER_NAME,
    RECIPIENT_NAME)
AS
SELECT A.*,
       A1.USER_NAME AS SENDER_NAME,
       A2.USER_NAME AS RECIPIENT_NAME
  FROM /*PREFIX*/ALARMS A
  JOIN /*PREFIX*/ACCOUNTS A1 ON A1.ACCOUNT_ID=A.SENDER_ID
  LEFT JOIN /*PREFIX*/ACCOUNTS A2 ON A2.ACCOUNT_ID=A.RECIPIENT_ID

--

CREATE OR ALTER PROCEDURE I_ALARM (
  ALARM_ID VARCHAR(32),
  SENDER_ID VARCHAR(32),
  RECIPIENT_ID VARCHAR(32),
  TYPE_ALARM INTEGER,
  DATE_BEGIN TIMESTAMP,
  DATE_END TIMESTAMP,
  CAPTION VARCHAR(100),
  TEXT_ALARM VARCHAR(4000))
AS
BEGIN
  INSERT INTO /*PREFIX*/ALARMS (ALARM_ID,SENDER_ID,RECIPIENT_ID,TYPE_ALARM,
                                DATE_BEGIN,DATE_END,CAPTION,TEXT_ALARM)
       VALUES (:ALARM_ID,:SENDER_ID,:RECIPIENT_ID,:TYPE_ALARM,
               :DATE_BEGIN,:DATE_END,:CAPTION,:TEXT_ALARM);
END

--

CREATE OR ALTER PROCEDURE U_ALARM (
  ALARM_ID VARCHAR(32),
  SENDER_ID VARCHAR(32),
  RECIPIENT_ID VARCHAR(32),
  TYPE_ALARM INTEGER,
  DATE_BEGIN TIMESTAMP,
  DATE_END TIMESTAMP,
  CAPTION VARCHAR(100),
  TEXT_ALARM VARCHAR(4000),
  OLD_ALARM_ID VARCHAR(32))
AS
BEGIN
  UPDATE /*PREFIX*/ALARMS
     SET ALARM_ID=:ALARM_ID,
         SENDER_ID=:SENDER_ID,
         RECIPIENT_ID=:RECIPIENT_ID,
         TYPE_ALARM=:TYPE_ALARM,
         DATE_BEGIN=:DATE_BEGIN,
         DATE_END=:DATE_END,
         CAPTION=:CAPTION,
         TEXT_ALARM=:TEXT_ALARM
   WHERE ALARM_ID=:OLD_ALARM_ID;
END

--

CREATE OR ALTER PROCEDURE D_ALARM (
  OLD_ALARM_ID VARCHAR(32))
AS
BEGIN
  DELETE FROM /*PREFIX*/ALARMS 
        WHERE ALARM_ID=:OLD_ALARM_ID;
END

--

CREATE OR ALTER PROCEDURE CODE_LOSE (
  ACCOUNT_ID VARCHAR(32),
  IN_MESSAGE_ID VARCHAR(32))
AS
DECLARE CONTACT VARCHAR(100);
DECLARE SENDER_ID VARCHAR(32);
DECLARE TEXT_IN VARCHAR(4000);
DECLARE CNT INTEGER;
DECLARE SUM_CHARGE NUMERIC(15,2);
DECLARE SUM_RECEIPT NUMERIC(15,2);
DECLARE BALANCE NUMERIC(15,2);
DECLARE MIN_BALANCE NUMERIC(15,2);
DECLARE USER_NAME VARCHAR(100);
DECLARE CALLSIGN VARCHAR(10);
DECLARE S VARCHAR(250);
BEGIN
  SELECT IM.CONTACT, IM.SENDER_ID, IM.TEXT_IN
    FROM IN_MESSAGES IM
    LEFT JOIN CODE_MESSAGES CM ON CM.CODE_MESSAGE_ID=IM.CODE_MESSAGE_ID
   WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID
    INTO :CONTACT, :SENDER_ID, :TEXT_IN;

  IF ((CONTACT IS NOT NULL) AND (SENDER_ID IS NOT NULL) AND (TEXT_IN IS NOT NULL)) THEN BEGIN

    SELECT COUNT(*)
      FROM DRIVERS D
      JOIN  ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
     WHERE D.DRIVER_ID=:SENDER_ID
       AND A.LOCKED<>1
      INTO :CNT;

    IF (CNT>0) THEN BEGIN

      SELECT (CASE WHEN SUM(SUM_CHARGE) IS NULL THEN 0.0 ELSE SUM(SUM_CHARGE) END)
        FROM CHARGES
       WHERE ACCOUNT_ID=:SENDER_ID
        INTO :SUM_CHARGE;

      SELECT (CASE WHEN SUM(SUM_RECEIPT) IS NULL THEN 0.0 ELSE SUM(SUM_RECEIPT) END)
        FROM RECEIPTS
       WHERE ACCOUNT_ID=:SENDER_ID
        INTO :SUM_RECEIPT;

      BALANCE=SUM_RECEIPT-SUM_CHARGE;

      SELECT D.MIN_BALANCE, A.USER_NAME, C.CALLSIGN
        FROM DRIVERS D
        JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
        JOIN CARS C ON C.CAR_ID=D.CAR_ID
       WHERE D.DRIVER_ID=:SENDER_ID
        INTO :MIN_BALANCE, :USER_NAME, :CALLSIGN;

      SELECT COUNT(*)
        FROM SHIFTS
       WHERE ACCOUNT_ID=:SENDER_ID
         AND DATE_END IS NULL
        INTO :CNT;

      IF ((CNT>0) AND ((MIN_BALANCE IS NULL) OR ((MIN_BALANCE IS NOT NULL) AND (BALANCE>MIN_BALANCE)))) THEN BEGIN

        S=:CALLSIGN||' '||:USER_NAME;
        INSERT INTO ALARMS (ALARM_ID,SENDER_ID,RECIPIENT_ID,TYPE_ALARM,DATE_BEGIN,DATE_END,
                                      CAPTION,TEXT_ALARM)
                              VALUES (GET_UNIQUE_ID(),'CA25F4C3A6DA8C334D20D3C4F2A2EF62',NULL,0,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP+5*(1e0/24/60),
                                      'Водитель заблудился',:S);

        SELECT CONST_VALUE FROM GET_CONST_VALUE('AB84E2116D3485A847EEE59DB47CE27B') INTO :S;

        IF (S IS NOT NULL) THEN BEGIN

          S=REPLACE_STRING(S,'%CODE',TEXT_IN);

          INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                              TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED)
                                      VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                              :S,NULL,0,:CONTACT,NULL,1,NULL);
        END

      END

    END

  END
END

--

CREATE OR ALTER PROCEDURE CODE_INCIDENT (
  ACCOUNT_ID VARCHAR(32),
  IN_MESSAGE_ID VARCHAR(32))
AS
DECLARE CONTACT VARCHAR(100);
DECLARE SENDER_ID VARCHAR(32);
DECLARE TEXT_IN VARCHAR(4000);
DECLARE CNT INTEGER;
DECLARE SUM_CHARGE NUMERIC(15,2);
DECLARE SUM_RECEIPT NUMERIC(15,2);
DECLARE BALANCE NUMERIC(15,2);
DECLARE MIN_BALANCE NUMERIC(15,2);
DECLARE USER_NAME VARCHAR(100);
DECLARE CALLSIGN VARCHAR(10);
DECLARE S VARCHAR(250);
BEGIN
  SELECT IM.CONTACT, IM.SENDER_ID, IM.TEXT_IN
    FROM IN_MESSAGES IM
    LEFT JOIN CODE_MESSAGES CM ON CM.CODE_MESSAGE_ID=IM.CODE_MESSAGE_ID
   WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID
    INTO :CONTACT, :SENDER_ID, :TEXT_IN;

  IF ((CONTACT IS NOT NULL) AND (SENDER_ID IS NOT NULL) AND (TEXT_IN IS NOT NULL)) THEN BEGIN

    SELECT COUNT(*)
      FROM DRIVERS D
      JOIN  ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
     WHERE D.DRIVER_ID=:SENDER_ID
       AND A.LOCKED<>1
      INTO :CNT;

    IF (CNT>0) THEN BEGIN

      SELECT (CASE WHEN SUM(SUM_CHARGE) IS NULL THEN 0.0 ELSE SUM(SUM_CHARGE) END)
        FROM CHARGES
       WHERE ACCOUNT_ID=:SENDER_ID
        INTO :SUM_CHARGE;

      SELECT (CASE WHEN SUM(SUM_RECEIPT) IS NULL THEN 0.0 ELSE SUM(SUM_RECEIPT) END)
        FROM RECEIPTS
       WHERE ACCOUNT_ID=:SENDER_ID
        INTO :SUM_RECEIPT;

      BALANCE=SUM_RECEIPT-SUM_CHARGE;

      SELECT D.MIN_BALANCE, A.USER_NAME, C.CALLSIGN
        FROM DRIVERS D
        JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
        JOIN CARS C ON C.CAR_ID=D.CAR_ID
       WHERE D.DRIVER_ID=:SENDER_ID
        INTO :MIN_BALANCE, :USER_NAME, :CALLSIGN;

      SELECT COUNT(*)
        FROM SHIFTS
       WHERE ACCOUNT_ID=:SENDER_ID
         AND DATE_END IS NULL
        INTO :CNT;

      IF ((CNT>0) AND ((MIN_BALANCE IS NULL) OR ((MIN_BALANCE IS NOT NULL) AND (BALANCE>MIN_BALANCE)))) THEN BEGIN

        S=:CALLSIGN||' '||:USER_NAME;
        INSERT INTO ALARMS (ALARM_ID,SENDER_ID,RECIPIENT_ID,TYPE_ALARM,DATE_BEGIN,DATE_END,
                                      CAPTION,TEXT_ALARM)
                              VALUES (GET_UNIQUE_ID(),'CA25F4C3A6DA8C334D20D3C4F2A2EF62',NULL,1,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP+5*(1e0/24/60),
                                      'Черезвычайное проишествие',:S);

        SELECT CONST_VALUE FROM GET_CONST_VALUE('7B7B35D636E1B840426877D1EB07428F') INTO :S;

        IF (S IS NOT NULL) THEN BEGIN

          S=REPLACE_STRING(S,'%CODE',TEXT_IN);

          INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                              TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED)
                                      VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                              :S,NULL,0,:CONTACT,NULL,1,NULL);
        END

      END

    END

  END
END

--

/* Фиксация изменений */

COMMIT