unit BisTaxiDataShiftEditFm;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, ExtCtrls, ComCtrls, DB,
  BisDataEditFm, BisParam, BisControls, ImgList;                                                           

type
  TBisTaxiDataShiftEditForm = class(TBisDataEditForm)
    LabelAccount: TLabel;
    EditAccount: TEdit;
    LabelDateBegin: TLabel;
    DateTimePickerBegin: TDateTimePicker;
    DateTimePickerBeginTime: TDateTimePicker;
    ButtonAccount: TButton;
    LabelDateEnd: TLabel;
    DateTimePickerEnd: TDateTimePicker;
    DateTimePickerEndTime: TDateTimePicker;
  private
  public
    constructor Create(AOwner: TComponent); override;
    procedure BeforeShow; override;
  end;

  TBisTaxiDataShiftEditFormIface=class(TBisDataEditFormIface)
  public
    constructor Create(AOwner: TComponent); override;
  end;

  TBisTaxiDataShiftFilterFormIface=class(TBisTaxiDataShiftEditFormIface)
  public
    constructor Create(AOwner: TComponent); override;
  end;

  TBisTaxiDataShiftInsertFormIface=class(TBisTaxiDataShiftEditFormIface)
  public
    constructor Create(AOwner: TComponent); override;
  end;

  TBisTaxiDataShiftUpdateFormIface=class(TBisTaxiDataShiftEditFormIface)
  public
    constructor Create(AOwner: TComponent); override;
  end;

  TBisTaxiDataShiftDeleteFormIface=class(TBisTaxiDataShiftEditFormIface)
  public
    constructor Create(AOwner: TComponent); override;
  end;

var
  BisTaxiDataShiftEditForm: TBisTaxiDataShiftEditForm;

implementation

uses BisUtils, BisTaxiConsts, BisCore, BisFilterGroups;

{$R *.dfm}

{ TBisTaxiDataShiftEditFormIface }

constructor TBisTaxiDataShiftEditFormIface.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  FormClass:=TBisTaxiDataShiftEditForm;
  with Params do begin
    AddKey('SHIFT_ID').Older('OLD_SHIFT_ID');
    AddEditDataSelect('ACCOUNT_ID','EditAccount','LabelAccount','ButtonAccount',
                       TBisDesignDataAccountsFormIface,'USER_NAME',true,false);
    AddEditDateTime('DATE_BEGIN','DateTimePickerBegin','DateTimePickerBeginTime','LabelDateBegin',true).FilterCondition:=fcEqualGreater;
    AddEditDateTime('DATE_END','DateTimePickerEnd','DateTimePickerEndTime','LabelDateEnd').FilterCondition:=fcEqualLess;
  end;
end;

{ TBisTaxiDataShiftFilterFormIface }

constructor TBisTaxiDataShiftFilterFormIface.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  Caption:='Фильтр смен';
end;

{ TBisTaxiDataShiftInsertFormIface }

constructor TBisTaxiDataShiftInsertFormIface.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  ProviderName:='I_SHIFT';
  Caption:='Создать смену';
end;

{ TBisTaxiDataShiftUpdateFormIface }

constructor TBisTaxiDataShiftUpdateFormIface.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  ProviderName:='U_SHIFT';
  Caption:='Изменить смену';
end;

{ TBisTaxiDataShiftDeleteFormIface }

constructor TBisTaxiDataShiftDeleteFormIface.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  ProviderName:='D_SHIFT';
  Caption:='Удалить смену';
end;

{ TBisTaxiDataShiftEditForm }

constructor TBisTaxiDataShiftEditForm.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

procedure TBisTaxiDataShiftEditForm.BeforeShow;
begin
  inherited BeforeShow;
  if Mode in [emInsert,emDuplicate] then begin
    with Provider.Params do begin
      Find('DATE_BEGIN').SetNewValue(Core.ServerDate);
    end;
    UpdateButtonState;
  end;
end;

end.
