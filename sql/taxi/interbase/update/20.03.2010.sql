4D39D8318FB6B77F42241D2B1336B192
6C5F5E35B4F0B54A470F466044C8EB3F
7ED5E8A8BBD9870A411517B54D9EB973
92009DB6C3EAA9E74B80D333538FE40D
9C8BC7D14DAEAE5C4DC8C1C91B20BCC2
D3F68032AD999D004140A480A8AAF749

--

CREATE OR ALTER PROCEDURE EXCHANGE_BEFORE (
  MONTH_COUNT INTEGER)
AS
  DECLARE CNT INTEGER;
  DECLARE RECEIPT_TYPE_ID VARCHAR(32);
  DECLARE CHARGE_TYPE_ID VARCHAR(32);
  DECLARE WHO_INSERT_ID VARCHAR(32);
  DECLARE DATE_TO TIMESTAMP;
  DECLARE ACCOUNT_ID VARCHAR(32);
  DECLARE SUM_RECEIPT NUMERIC(15,2);
  DECLARE SUM_CHARGE NUMERIC(15,2);
BEGIN
  WHO_INSERT_ID='EF536273DCCB8A6E42EFEF0972F87CCC'; /* Сергей */
  RECEIPT_TYPE_ID='41C4384E4D878D7947BCDB2C69681382'; /* Перенос остатков */
  CHARGE_TYPE_ID='07BA0951D3B0A2984307761888D416F6'; /* Перенос остатков */

  SELECT DATE_TO
    FROM /*PREFIX*/GET_DATE_TO(:MONTH_COUNT)
    INTO :DATE_TO;

  SELECT COUNT(*)
    FROM /*PREFIX*/RECEIPT_TYPES
   WHERE RECEIPT_TYPE_ID=:RECEIPT_TYPE_ID
    INTO :CNT;

  IF (CNT=0) THEN BEGIN
    INSERT INTO /*PREFIX*/RECEIPT_TYPES (RECEIPT_TYPE_ID,NAME,DESCRIPTION,SUM_RECEIPT)
         VALUES (:RECEIPT_TYPE_ID,'Перенос остатков',NULL,NULL);
  END

  SELECT COUNT(*)
    FROM /*PREFIX*/CHARGE_TYPES
   WHERE CHARGE_TYPE_ID=:CHARGE_TYPE_ID
    INTO :CNT;

  IF (CNT=0) THEN BEGIN
    INSERT INTO /*PREFIX*/CHARGE_TYPES (CHARGE_TYPE_ID,NAME,DESCRIPTION,SUM_CHARGE)
         VALUES (:CHARGE_TYPE_ID,'Перенос остатков',NULL,NULL);
  END

  FOR SELECT ACCOUNT_ID, SUM(SUM_RECEIPT)
        FROM /*PREFIX*/RECEIPTS
       WHERE DATE_RECEIPT<:DATE_TO
       GROUP BY ACCOUNT_ID
        INTO :ACCOUNT_ID, :SUM_RECEIPT  DO BEGIN

    DELETE FROM /*PREFIX*/RECEIPTS
          WHERE RECEIPT_TYPE_ID=:RECEIPT_TYPE_ID
            AND DATE_RECEIPT=:DATE_TO
            AND ACCOUNT_ID=:ACCOUNT_ID;

    INSERT INTO /*PREFIX*/RECEIPTS (RECEIPT_ID,RECEIPT_TYPE_ID,ACCOUNT_ID,WHO_CREATE_ID,
                                    SUM_RECEIPT,DATE_RECEIPT,DATE_CREATE,DESCRIPTION)
         VALUES (GET_UNIQUE_ID(),:RECEIPT_TYPE_ID,:ACCOUNT_ID,:WHO_INSERT_ID,
                 :SUM_RECEIPT,:DATE_TO,CURRENT_TIMESTAMP,NULL);

  END

  FOR SELECT ACCOUNT_ID, SUM(SUM_CHARGE)
        FROM /*PREFIX*/CHARGES
       WHERE DATE_CHARGE<:DATE_TO
       GROUP BY ACCOUNT_ID
        INTO :ACCOUNT_ID, :SUM_CHARGE DO BEGIN

    DELETE FROM /*PREFIX*/CHARGES
          WHERE CHARGE_TYPE_ID=:CHARGE_TYPE_ID
            AND DATE_CHARGE=:DATE_TO
            AND ACCOUNT_ID=:ACCOUNT_ID;

    INSERT INTO /*PREFIX*/CHARGES (CHARGE_ID,CHARGE_TYPE_ID,ACCOUNT_ID,WHO_CREATE_ID,
                                   SUM_CHARGE,DATE_CHARGE,DATE_CREATE,DESCRIPTION)
         VALUES (GET_UNIQUE_ID(),:CHARGE_TYPE_ID,:ACCOUNT_ID,:WHO_INSERT_ID,
                 :SUM_CHARGE,:DATE_TO,CURRENT_TIMESTAMP,NULL);

  END

END

--

CREATE OR ALTER PROCEDURE EXCHANGE_AFTER
(
  MONTH_COUNT INTEGER,
  MODE INTEGER
)
AS
DECLARE DATE_TO TIMESTAMP;
BEGIN

  SELECT DATE_TO
    FROM GET_DATE_TO(:MONTH_COUNT)
    INTO :DATE_TO;

  IF (MODE=1) THEN BEGIN

    DELETE FROM RECEIPTS
          WHERE DATE_RECEIPT<:DATE_TO;

    DELETE FROM CHARGES
          WHERE DATE_CHARGE<:DATE_TO;

  END ELSE BEGIN

    DELETE FROM PARK_STATES
          WHERE DATE_IN<:DATE_TO;

    DELETE FROM SHIFTS
          WHERE DATE_BEGIN<:DATE_TO;

    DELETE FROM OUT_MESSAGES
          WHERE DATE_CREATE<:DATE_TO;

    DELETE FROM IN_MESSAGES
          WHERE DATE_SEND<:DATE_TO;

    DELETE FROM ROUTES
          WHERE ORDER_ID IN (SELECT ORDER_ID FROM ORDERS
                              WHERE DATE_ACCEPT<:DATE_TO);

    DELETE FROM ORDER_SERVICES
          WHERE ORDER_ID IN (SELECT ORDER_ID FROM ORDERS
                              WHERE DATE_ACCEPT<:DATE_TO);

    DELETE FROM ORDERS
          WHERE DATE_ACCEPT<:DATE_TO
            AND PARENT_ID IS NOT NULL;

    DELETE FROM ORDERS
          WHERE DATE_ACCEPT<:DATE_TO
            AND PARENT_ID IS NULL;
  END

END

--

CREATE TABLE /*PREFIX*/ROUTE_HISTORY
(
  PHONE VARCHAR(100) NOT NULL,
  STREET_ID VARCHAR(32) NOT NULL,
  HOUSE VARCHAR(10) NOT NULL,
  FLAT VARCHAR(10),
  PORCH VARCHAR(10),
  DESCRIPTION VARCHAR(250),
  CLIENT_ID VARCHAR(32),
  AMOUNT INTEGER NOT NULL,
  DATE_FIRST TIMESTAMP NOT NULL,
  DATE_LAST TIMESTAMP NOT NULL,
  PRIMARY KEY (PHONE,STREET_ID,HOUSE),
  FOREIGN KEY (STREET_ID) REFERENCES /*PREFIX*/STREETS (STREET_ID),
  FOREIGN KEY (CLIENT_ID) REFERENCES /*PREFIX*/CLIENTS (CLIENT_ID)
)

--

CREATE VIEW /*PREFIX*/S_ROUTE_HISTORY
(
  PHONE,
  STREET_ID,
  HOUSE,
  FLAT,
  PORCH,
  DESCRIPTION,
  CLIENT_ID,
  AMOUNT,
  DATE_FIRST,
  DATE_LAST,
  STREET_NAME,
  STREET_PREFIX,
  LOCALITY_ID,
  LOCALITY_NAME,
  LOCALITY_PREFIX,
  CLIENT_USER_NAME,
  CLIENT_SURNAME,
  CLIENT_NAME,
  CLIENT_PATRONYMIC
)
AS
SELECT RS.*,
       S.NAME AS STREET_NAME,
       S.PREFIX AS STREET_PREFIX,
       L.LOCALITY_ID,
       L.NAME AS LOCALITY_NAME,
       L.PREFIX AS LOCALITY_PREFIX,
       A.USER_NAME AS CLIENT_USER_NAME,
       A.SURNAME AS CLIENT_SURNAME,
       A.NAME AS CLIENT_NAME,
       A.PATRONYMIC AS CLIENT_PATRONYMIC
  FROM /*PREFIX*/ROUTE_HISTORY RS
  JOIN /*PREFIX*/STREETS S ON S.STREET_ID=RS.STREET_ID
  JOIN /*PREFIX*/LOCALITIES L ON L.LOCALITY_ID=S.LOCALITY_ID
  LEFT JOIN /*PREFIX*/CLIENTS C ON C.CLIENT_ID=RS.CLIENT_ID
  LEFT JOIN /*PREFIX*/ACCOUNTS A ON A.ACCOUNT_ID=C.CLIENT_ID

--

CREATE OR ALTER PROCEDURE /*PREFIX*/I_ROUTE_HISTORY
(
  PHONE VARCHAR(100),
  STREET_ID VARCHAR(32),
  HOUSE VARCHAR(10),
  FLAT VARCHAR(10),
  PORCH VARCHAR(10),
  DESCRIPTION VARCHAR(250),
  CLIENT_ID VARCHAR(32),
  AMOUNT INTEGER,
  DATE_FIRST TIMESTAMP,
  DATE_LAST TIMESTAMP
)
AS
BEGIN
  INSERT INTO /*PREFIX*/ROUTE_HISTORY (PHONE,STREET_ID,HOUSE,FLAT,PORCH,DESCRIPTION,CLIENT_ID,AMOUNT,DATE_FIRST,DATE_LAST)
                               VALUES (:PHONE,:STREET_ID,:HOUSE,:FLAT,:PORCH,:DESCRIPTION,:CLIENT_ID,:AMOUNT,:DATE_FIRST,:DATE_LAST);
END;

--

CREATE OR ALTER PROCEDURE /*PREFIX*/U_ROUTE_HISTORY
(
  PHONE VARCHAR(100),
  STREET_ID VARCHAR(32),
  HOUSE VARCHAR(10),
  FLAT VARCHAR(10),
  PORCH VARCHAR(10),
  DESCRIPTION VARCHAR(250),
  CLIENT_ID VARCHAR(32),
  AMOUNT INTEGER,
  DATE_FIRST TIMESTAMP,
  DATE_LAST TIMESTAMP,
  OLD_PHONE VARCHAR(100),
  OLD_STREET_ID VARCHAR(32),
  OLD_HOUSE VARCHAR(10)
)
AS
BEGIN
  UPDATE /*PREFIX*/ROUTE_HISTORY
     SET PHONE=:PHONE,
         STREET_ID=:STREET_ID,
         HOUSE=:HOUSE,
         FLAT=:FLAT,
         PORCH=:PORCH,
         DESCRIPTION=:DESCRIPTION,
         CLIENT_ID=:CLIENT_ID,
         AMOUNT=:AMOUNT,
         DATE_FIRST=:DATE_FIRST,
         DATE_LAST=:DATE_LAST
   WHERE PHONE=:OLD_PHONE
     AND STREET_ID=:OLD_STREET_ID
     AND HOUSE=:OLD_HOUSE;
END;

--

CREATE OR ALTER PROCEDURE /*PREFIX*/D_ROUTE_HISTORY
(
  OLD_PHONE VARCHAR(100),
  OLD_STREET_ID VARCHAR(32),
  OLD_HOUSE VARCHAR(10)
)
AS
BEGIN
  DELETE FROM /*PREFIX*/ROUTE_HISTORY 
        WHERE PHONE=:OLD_PHONE
          AND STREET_ID=:OLD_STREET_ID
          AND HOUSE=:OLD_HOUSE;
END;

--

CREATE OR ALTER PROCEDURE I_ORDER (
  ORDER_ID VARCHAR(32),
  ACTION_ID VARCHAR(32),
  RATE_ID VARCHAR(32),
  CAR_TYPE_ID VARCHAR(32),
  WHO_ACCEPT_ID VARCHAR(32),
  STREET_ID VARCHAR(32),
  ZONE_ID VARCHAR(32),
  PARENT_ID VARCHAR(32),
  CAR_ID VARCHAR(32),
  WHO_PROCESS_ID VARCHAR(32),
  RESULT_ID VARCHAR(32),
  PARK_ID VARCHAR(32),
  SOURCE_ID VARCHAR(32),
  DISCOUNT_ID VARCHAR(32),
  DRIVER_ID VARCHAR(32),
  ORDER_NUM VARCHAR(10),
  PHONE VARCHAR(100),
  HOUSE VARCHAR(10),
  FLAT VARCHAR(10),
  PORCH VARCHAR(10),
  DATE_ACCEPT TIMESTAMP,
  DATE_ARRIVAL TIMESTAMP,
  DATE_BEGIN TIMESTAMP,
  DATE_END TIMESTAMP,
  CUSTOMER VARCHAR(250),
  DESCRIPTION VARCHAR(250),
  COST_RATE NUMERIC(15,2),
  COST_FACT NUMERIC(15,2),
  TYPE_ACCEPT INTEGER,
  TYPE_PROCESS INTEGER,
  DATE_HISTORY TIMESTAMP,
  WHO_HISTORY_ID VARCHAR(32),
  BEFORE_PERIOD INTEGER,
  FINISHED INTEGER,
  LOCKED VARCHAR(32),
  CLIENT_ID VARCHAR(32),
  COST_GROSS NUMERIC(15,2))
AS
DECLARE CNT INTEGER;
DECLARE ACCOUNT_ID VARCHAR(32);
DECLARE USER_NAME VARCHAR(100);
BEGIN

 /* IF (CLIENT_ID IS NULL) THEN BEGIN

    SELECT COUNT(*)
      FROM CLIENTS C
      JOIN ACCOUNTS A ON A.ACCOUNT_ID=C.CLIENT_ID
     WHERE A.PHONE=:PHONE
      INTO :CNT;

    IF (CNT=0) THEN BEGIN

      ACCOUNT_ID=GET_UNIQUE_ID();
      IF (CUSTOMER IS NOT NULL) THEN
        USER_NAME=SUB_STRING(CUSTOMER,1,100);
      IF (USER_NAME IS NULL) THEN
        USER_NAME=PHONE;

      INSERT INTO ACCOUNTS (ACCOUNT_ID,DATE_CREATE,USER_NAME,PHONE,IS_ROLE,LOCKED)
                              VALUES (:ACCOUNT_ID,CURRENT_TIMESTAMP,:USER_NAME,:PHONE,0,0);

      CLIENT_ID=ACCOUNT_ID;

      INSERT INTO CLIENTS (CLIENT_ID,SOURCE_ID,STREET_ID,HOUSE,FLAT,PORCH,ADDRESS_DESC)
                             VALUES (:CLIENT_ID,:SOURCE_ID,:STREET_ID,:HOUSE,:FLAT,:PORCH,:DESCRIPTION);

    END

  END     */

  INSERT INTO ORDERS (ORDER_ID,ACTION_ID,RATE_ID,CAR_TYPE_ID,WHO_ACCEPT_ID,
                                STREET_ID,ZONE_ID,PARENT_ID,
                                CAR_ID,WHO_PROCESS_ID,RESULT_ID,PARK_ID,
                                SOURCE_ID,DISCOUNT_ID,DRIVER_ID,ORDER_NUM,PHONE,
                                HOUSE,FLAT,PORCH,
                                DATE_ACCEPT,DATE_ARRIVAL,DATE_BEGIN,DATE_END,CUSTOMER,
                                DESCRIPTION,COST_RATE,COST_FACT,TYPE_ACCEPT,
                                TYPE_PROCESS,DATE_HISTORY,WHO_HISTORY_ID,BEFORE_PERIOD,
                                FINISHED,LOCKED,CLIENT_ID,COST_GROSS)
       VALUES (:ORDER_ID,:ACTION_ID,:RATE_ID,:CAR_TYPE_ID,:WHO_ACCEPT_ID,
               :STREET_ID,:ZONE_ID,:PARENT_ID,
               :CAR_ID,:WHO_PROCESS_ID,:RESULT_ID,:PARK_ID,
               :SOURCE_ID,:DISCOUNT_ID,:DRIVER_ID,:ORDER_NUM,:PHONE,
               :HOUSE,:FLAT,:PORCH,
               :DATE_ACCEPT,:DATE_ARRIVAL,:DATE_BEGIN,:DATE_END,:CUSTOMER,
               :DESCRIPTION,:COST_RATE,:COST_FACT,:TYPE_ACCEPT,
               :TYPE_PROCESS,:DATE_HISTORY,:WHO_HISTORY_ID,:BEFORE_PERIOD,
               :FINISHED,:LOCKED,:CLIENT_ID,:COST_GROSS);

END

--

CREATE OR ALTER PROCEDURE I_ROUTE (
  ROUTE_ID VARCHAR(32),
  ORDER_ID VARCHAR(32),
  ZONE_ID VARCHAR(32),
  STREET_ID VARCHAR(32),
  HOUSE VARCHAR(10),
  FLAT VARCHAR(10),
  PORCH VARCHAR(10),
  DISTANCE NUMERIC(15,2),
  COST NUMERIC(15,2),
  PERIOD INTEGER,
  AMOUNT INTEGER,
  PRIORITY INTEGER
)
AS
BEGIN
  INSERT INTO /*PREFIX*/ROUTES (ROUTE_ID,ORDER_ID,ZONE_ID,STREET_ID,HOUSE,
                                FLAT,PORCH,DISTANCE,COST,PERIOD,AMOUNT,PRIORITY)
       VALUES (:ROUTE_ID,:ORDER_ID,:ZONE_ID,:STREET_ID,:HOUSE,
               :FLAT,:PORCH,:DISTANCE,:COST,:PERIOD,:AMOUNT,:PRIORITY);

END

--

CREATE OR ALTER PROCEDURE CREATE_ROUTE_HISTORY
(
   ORDER_ID VARCHAR(32)
)
AS
DECLARE PHONE VARCHAR(100);
DECLARE CLIENT_ID VARCHAR(32);
DECLARE STREET_ID VARCHAR(32);
DECLARE HOUSE VARCHAR(10);
DECLARE FLAT VARCHAR(10);
DECLARE PORCH VARCHAR(10);
DECLARE DESCRIPTION VARCHAR(250);
DECLARE DATE_ACCEPT TIMESTAMP;
DECLARE CNT INTEGER;
BEGIN

  SELECT PHONE,STREET_ID,HOUSE,FLAT,PORCH,
         DESCRIPTION,CLIENT_ID,DATE_ACCEPT
    FROM ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :PHONE,:STREET_ID,:HOUSE,:FLAT,:PORCH,
         :DESCRIPTION,:CLIENT_ID,:DATE_ACCEPT;

  SELECT COUNT(*)
    FROM ROUTE_HISTORY
   WHERE PHONE=:PHONE
     AND STREET_ID=:STREET_ID
     AND HOUSE=:HOUSE
    INTO :CNT;

  IF (CNT=0) THEN BEGIN

    INSERT INTO ROUTE_HISTORY (PHONE,STREET_ID,HOUSE,FLAT,PORCH,DESCRIPTION,
                               CLIENT_ID,AMOUNT,DATE_FIRST,DATE_LAST)
                       VALUES (:PHONE,:STREET_ID,:HOUSE,:FLAT,:PORCH,:DESCRIPTION,
                               :CLIENT_ID,1,:DATE_ACCEPT,:DATE_ACCEPT);

  END ELSE BEGIN

    UPDATE ROUTE_HISTORY
       SET FLAT=:FLAT,
           PORCH=:PORCH,
           DESCRIPTION=:DESCRIPTION,
           CLIENT_ID=:CLIENT_ID,
           AMOUNT=AMOUNT+1,
           DATE_LAST=:DATE_ACCEPT
     WHERE PHONE=:PHONE
       AND STREET_ID=:STREET_ID
       AND HOUSE=:HOUSE;

  END

  DESCRIPTION=NULL;

  FOR SELECT STREET_ID,HOUSE,FLAT,PORCH
        FROM ROUTES
       WHERE ORDER_ID=:ORDER_ID
        INTO :STREET_ID,:HOUSE,:FLAT,:PORCH DO BEGIN

    IF ((STREET_ID IS NOT NULL) AND (HOUSE IS NOT NULL)) THEN BEGIN

      SELECT COUNT(*)
        FROM ROUTE_HISTORY
       WHERE PHONE=:PHONE
         AND STREET_ID=:STREET_ID
         AND HOUSE=:HOUSE
        INTO :CNT;

      IF (CNT=0) THEN BEGIN

        INSERT INTO ROUTE_HISTORY (PHONE,STREET_ID,HOUSE,FLAT,PORCH,
                                   CLIENT_ID,AMOUNT,DATE_FIRST,DATE_LAST)
                           VALUES (:PHONE,:STREET_ID,:HOUSE,:FLAT,:PORCH,
                                   :CLIENT_ID,1,:DATE_ACCEPT,:DATE_ACCEPT);

      END ELSE BEGIN

        UPDATE ROUTE_HISTORY
           SET FLAT=:FLAT,
               PORCH=:PORCH,
               CLIENT_ID=:CLIENT_ID,
               AMOUNT=AMOUNT+1,
               DATE_LAST=:DATE_ACCEPT
         WHERE PHONE=:PHONE
           AND STREET_ID=:STREET_ID
           AND HOUSE=:HOUSE;

      END

    END

  END

END

--

CREATE OR ALTER PROCEDURE FILL_ROUTE_HISTORY
AS
DECLARE ORDER_ID VARCHAR(32);
BEGIN

  FOR SELECT ORDER_ID
        FROM ORDERS
       WHERE PARENT_ID IS NULL
         AND FINISHED=1
        INTO :ORDER_ID  DO BEGIN

    EXECUTE PROCEDURE CREATE_ROUTE_HISTORY(ORDER_ID);

  END

END

--

CREATE OR ALTER PROCEDURE PR_FULL_CALC (
    ORDER_ID VARCHAR(32),
    ACCOUNT_ID VARCHAR(32)) 
AS
DECLARE COST_RATE NUMERIC(15,2);
DECLARE COST_FACT NUMERIC(15,2);
DECLARE PHONE VARCHAR(100);
DECLARE DRIVER_ID VARCHAR(32);
DECLARE RECIPIENT_ID VARCHAR(32);
DECLARE SUM_CHARGE NUMERIC(15,2);
DECLARE SUM_RECEIPT NUMERIC(15,2);
DECLARE BALANCE NUMERIC(15,2);
DECLARE MIN_BALANCE NUMERIC(15,2);
DECLARE CHARGE_TYPE_ID VARCHAR(32);
DECLARE S VARCHAR(1000);
BEGIN

  SELECT PHONE, DRIVER_ID, COST_RATE, COST_FACT
    FROM ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :PHONE, :DRIVER_ID, :COST_RATE, :COST_FACT;

  IF ((COST_FACT IS NULL) OR (COST_FACT<=0.0))  THEN
    COST_FACT=:COST_RATE;

  IF (COST_FACT<=0.0) THEN BEGIN

    SELECT CONST_VALUE FROM GET_CONST_VALUE('4BB5C780923E872D436DA3DA31C9E0B0') INTO :S;

    IF (S IS NOT NULL) THEN BEGIN

      SELECT PHONE
        FROM ACCOUNTS
       WHERE ACCOUNT_ID=:DRIVER_ID
        INTO :PHONE;

      INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                        VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                :S,NULL,0,:PHONE,NULL,2,NULL,CURRENT_TIMESTAMP);
    END

    EXECUTE PROCEDURE PR_MANUAL(ORDER_ID,ACCOUNT_ID);

  END ELSE BEGIN

    UPDATE ORDERS
       SET FINISHED=1,
           DATE_END=CURRENT_TIMESTAMP,
           WHO_PROCESS_ID=:ACCOUNT_ID,
           COST_FACT=:COST_FACT
     WHERE ORDER_ID=:ORDER_ID;

    EXECUTE PROCEDURE CREATE_ROUTE_HISTORY(ORDER_ID);

    IF (DRIVER_ID IS NOT NULL) THEN BEGIN

      IF (PHONE IS NOT NULL) THEN BEGIN

        IF (SUBSTR(PHONE,1,3)='+79')  THEN BEGIN

          RECIPIENT_ID=NULL;

          FOR SELECT ACCOUNT_ID
                FROM ACCOUNTS
               WHERE PHONE=:PHONE
                INTO :RECIPIENT_ID DO BEGIN

            IF (RECIPIENT_ID IS NOT NULL) THEN
              BREAK;
          END

          SELECT CONST_VALUE FROM GET_CONST_VALUE('05B75340B170BF5141FC63F5CDF7FCD6') INTO :S;

          IF (S IS NOT NULL) THEN BEGIN

            INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                      TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                              VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:RECIPIENT_ID,CURRENT_TIMESTAMP,
                                      :S,NULL,0,:PHONE,NULL,2,NULL,CURRENT_TIMESTAMP);
          END

          SELECT CONST_VALUE FROM GET_CONST_VALUE('E9FFA9589ABD8C174474572B72017BCC') INTO :S;

          IF (S IS NOT NULL) THEN BEGIN

            INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                      TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                              VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:RECIPIENT_ID,CURRENT_TIMESTAMP,
                                      :S,NULL,0,:PHONE,NULL,2,NULL,CURRENT_TIMESTAMP);
          END

        END

      END

      CHARGE_TYPE_ID='E1BC9789DA9DB2B041C0784EBE92BFC9'; /* Выполнение заказа */

      SELECT RET_SUM
        FROM GET_DRIVER_SUM(:DRIVER_ID,:COST_FACT)
        INTO :SUM_CHARGE;

      INSERT INTO CHARGES (CHARGE_ID,WHO_CREATE_ID,CHARGE_TYPE_ID,ACCOUNT_ID,
                           SUM_CHARGE,DATE_CHARGE,DATE_CREATE,DESCRIPTION)
                   VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:CHARGE_TYPE_ID,:DRIVER_ID,
                           :SUM_CHARGE,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,NULL);

      EXECUTE PROCEDURE GET_ACCOUNT_BALANCE(:DRIVER_ID)
       RETURNING_VALUES :SUM_CHARGE, :SUM_RECEIPT, :BALANCE;

      SELECT MIN_BALANCE
        FROM DRIVERS
       WHERE DRIVER_ID=:DRIVER_ID
        INTO :MIN_BALANCE;

      IF ((MIN_BALANCE IS NULL) OR ((MIN_BALANCE IS NOT NULL) AND (BALANCE>MIN_BALANCE))) THEN BEGIN

        SELECT CONST_VALUE FROM GET_CONST_VALUE('16835607B30CA79F4CE883B53AFE972D') INTO :S;

      END ELSE BEGIN

        UPDATE SHIFTS
           SET DATE_END=CURRENT_TIMESTAMP
         WHERE ACCOUNT_ID=:DRIVER_ID
           AND DATE_END IS NULL;

        SELECT CONST_VALUE FROM GET_CONST_VALUE('634880F305E9AA434245E3E596697001') INTO :S;

      END

      SELECT PHONE
        FROM ACCOUNTS
       WHERE ACCOUNT_ID=:DRIVER_ID
        INTO :PHONE;

      IF (S IS NOT NULL) THEN BEGIN

        S=REPLACE_STRING(S,'%BALANCE',CAST(BALANCE AS VARCHAR(30)));

        INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                  TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                          VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                  :S,NULL,0,:PHONE,NULL,2,NULL,CURRENT_TIMESTAMP);
      END

      EXECUTE PROCEDURE QUERY_PARK_STATES (ACCOUNT_ID,DRIVER_ID,PHONE);

    END
  END
END

--

CREATE OR ALTER PROCEDURE FILL_CLIENT_HISTORY
AS
DECLARE CLIENT_ID VARCHAR(32);
DECLARE PHONE VARCHAR(100);
BEGIN

  FOR SELECT C.CLIENT_ID, A.PHONE
        FROM CLIENTS C
        JOIN ACCOUNTS A ON A.ACCOUNT_ID=C.CLIENT_ID
        INTO :CLIENT_ID, :PHONE DO BEGIN

    UPDATE ROUTE_HISTORY
       SET CLIENT_ID=:CLIENT_ID
     WHERE PHONE=:PHONE;

  END

END

--

CREATE OR ALTER PROCEDURE I_DRIVER_SHIFT (
  SHIFT_ID VARCHAR(32),
  DRIVER_ID VARCHAR(32),
  PARK_ID VARCHAR(32),
  DATE_BEGIN TIMESTAMP,
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE SUM_CHARGE NUMERIC(15,2);
DECLARE SUM_RECEIPT NUMERIC(15,2);
DECLARE BALANCE NUMERIC(15,2);
DECLARE MIN_BALANCE NUMERIC(15,2);
DECLARE PARK_NAME VARCHAR(100);
DECLARE PARK_DESCRIPTION VARCHAR(250);
DECLARE PRIORITY INTEGER;
DECLARE S VARCHAR(1000);
DECLARE CONTACT VARCHAR(100);
BEGIN

  EXECUTE PROCEDURE GET_ACCOUNT_BALANCE(:DRIVER_ID)
   RETURNING_VALUES :SUM_CHARGE, :SUM_RECEIPT, :BALANCE;

  SELECT MIN_BALANCE
    FROM DRIVERS
   WHERE DRIVER_ID=:DRIVER_ID
    INTO :MIN_BALANCE;

  IF ((MIN_BALANCE IS NULL) OR ((MIN_BALANCE IS NOT NULL) AND (BALANCE>MIN_BALANCE))) THEN BEGIN

    INSERT INTO /*PREFIX*/SHIFTS (SHIFT_ID,ACCOUNT_ID,DATE_BEGIN)
         VALUES (:SHIFT_ID,:DRIVER_ID,:DATE_BEGIN);

    SELECT PHONE
      FROM ACCOUNTS
     WHERE ACCOUNT_ID=:DRIVER_ID
      INTO :CONTACT;

    IF (PARK_ID IS NOT NULL) THEN BEGIN

      UPDATE /*PREFIX*/PARK_STATES
         SET DATE_OUT=:DATE_BEGIN
       WHERE DRIVER_ID=:DRIVER_ID
         AND DATE_OUT IS NULL;

      INSERT INTO /*PREFIX*/PARK_STATES(PARK_STATE_ID,DRIVER_ID,PARK_ID,DATE_IN)
           VALUES (/*PREFIX*/GET_UNIQUE_ID(),:DRIVER_ID,:PARK_ID,:DATE_BEGIN);

      SELECT COUNT(*)
        FROM PARK_STATES
       WHERE PARK_ID=:PARK_ID
         AND DATE_OUT IS NULL
        INTO PRIORITY;

      SELECT CONST_VALUE FROM GET_CONST_VALUE('D98222D30163A3FE4B647ABF4A2C179F') INTO :S;

      IF (S IS NOT NULL) THEN BEGIN

        SELECT NAME, DESCRIPTION
          FROM PARKS
         WHERE PARK_ID=:PARK_ID
          INTO :PARK_NAME, :PARK_DESCRIPTION;

        S=REPLACE_STRING(S,'%PRIORITY',CAST(PRIORITY AS VARCHAR(10)));
        S=REPLACE_STRING(S,'%PARK_NAME',PARK_NAME);
        S=REPLACE_STRING(S,'%PARK_DESCRIPTION',PARK_DESCRIPTION);
        S=REPLACE_STRING(S,'%BALANCE',CAST(BALANCE AS VARCHAR(30)));

        INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                  TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                          VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                  :S,NULL,0,:CONTACT,NULL,1,NULL,CURRENT_TIMESTAMP);
      END

    END ELSE BEGIN

      SELECT CONST_VALUE FROM GET_CONST_VALUE('C83CCF38CF6CAB374FAB6FA49754B07F') INTO :S;

      IF (S IS NOT NULL) THEN BEGIN

        S=REPLACE_STRING(S,'%BALANCE',CAST(BALANCE AS VARCHAR(30)));

        INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                  TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                          VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                  :S,NULL,0,:CONTACT,NULL,1,NULL,CURRENT_TIMESTAMP);

      END

    END
  END

END

--

CREATE OR ALTER PROCEDURE TASK_SHIFT_CLOSE (
  TASK_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE DRIVER_ID VARCHAR(32);
DECLARE PHONE VARCHAR(100);
DECLARE NAME VARCHAR(100);
DECLARE PATRONYMIC VARCHAR(100);
DECLARE S VARCHAR(1000);
DECLARE S1 VARCHAR(1000);
DECLARE D TIMESTAMP;
DECLARE SHIFT_BEGIN TIMESTAMP;
DECLARE PARK_IN TIMESTAMP;
DECLARE PARK_OUT TIMESTAMP;
DECLARE CNT INTEGER;
BEGIN

  SELECT CONST_VALUE FROM GET_CONST_VALUE('4D39D8318FB6B77F42241D2B1336B192') INTO :S;

  IF (S IS NOT NULL) THEN BEGIN

    D=CURRENT_TIMESTAMP;

    FOR SELECT D.DRIVER_ID, A.PHONE, A.NAME, A.PATRONYMIC
          FROM DRIVERS D
          JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
         WHERE A.LOCKED<>1
          INTO :DRIVER_ID, :PHONE, :NAME, :PATRONYMIC DO BEGIN

      SELECT MAX(DATE_BEGIN)
        FROM SHIFTS
       WHERE DATE_END IS NULL
         AND ACCOUNT_ID=:DRIVER_ID
        INTO :SHIFT_BEGIN;

      IF (SHIFT_BEGIN IS NOT NULL) THEN BEGIN

        D=CURRENT_TIMESTAMP-90*60*(1e0/24/60/60);

        SELECT MAX(DATE_IN), MAX(DATE_OUT)
          FROM PARK_STATES
         WHERE DRIVER_ID=:DRIVER_ID
          INTO :PARK_IN, :PARK_OUT;

        IF (PARK_IN IS NULL) THEN BEGIN
          PARK_IN=SHIFT_BEGIN;
          PARK_OUT=PARK_IN;
        END

        SELECT COUNT(*)
          FROM PARK_STATES
         WHERE DRIVER_ID=:DRIVER_ID
           AND DATE_OUT IS NULL
          INTO :CNT;
                                 
        IF ((CNT=0) AND (D>PARK_IN) AND (D>PARK_OUT) AND (D>SHIFT_BEGIN)) THEN BEGIN

          SELECT COUNT(*)
            FROM ORDERS
           WHERE DRIVER_ID=:DRIVER_ID
             AND FINISHED<>1
             AND PARENT_ID IS NULL
            INTO :CNT;

          IF (CNT=0) THEN BEGIN

            UPDATE SHIFTS
               SET DATE_END=CURRENT_TIMESTAMP
             WHERE DATE_END IS NULL
               AND ACCOUNT_ID=:DRIVER_ID;

            S1=S;

            INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                      TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                              VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                      :S1,NULL,0,:PHONE,NULL,2,NULL,:D);

            D=CURRENT_TIMESTAMP+5*(1e0/24/60/60);

          END

        END

      END

    END

  END

END

--

CREATE OR ALTER PROCEDURE TASK_CHANGE_PRIORITY (
  TASK_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE DRIVER_ID VARCHAR(32);
DECLARE PHONE VARCHAR(100);
DECLARE NAME VARCHAR(100);
DECLARE PATRONYMIC VARCHAR(100);
DECLARE S VARCHAR(1000);
DECLARE S1 VARCHAR(1000);
DECLARE D TIMESTAMP;
DECLARE CNT INTEGER;
DECLARE NEW_PRIORITY INTEGER;
DECLARE PRIORITY INTEGER;
BEGIN

  SELECT CONST_VALUE FROM GET_CONST_VALUE('6C5F5E35B4F0B54A470F466044C8EB3F') INTO :S;

  IF (S IS NOT NULL) THEN BEGIN

    D=CURRENT_TIMESTAMP;

    FOR SELECT D.DRIVER_ID, D.PRIORITY,
               A.PHONE, A.NAME, A.PATRONYMIC
          FROM DRIVERS D
          JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
         WHERE A.LOCKED<>1
          INTO :DRIVER_ID, :PRIORITY,
               :PHONE, :NAME, :PATRONYMIC DO BEGIN

      SELECT COUNT(*)
        FROM ORDERS
       WHERE DRIVER_ID=:DRIVER_ID
         AND FINISHED=1
         AND PARENT_ID IS NULL
         AND RESULT_ID='6DD8DFDC671DB9A742E418FD268E7DC4' /* полный расчет */
         AND DATE_ACCEPT>=(CURRENT_TIMESTAMP-7*24*60*60*(1e0/24/60/60))
        INTO :CNT;

      IF ((CNT>=0) AND (CNT<=8)) THEN
        NEW_PRIORITY=3;

      IF ((CNT>8) AND (CNT<=15)) THEN
        NEW_PRIORITY=2;

      IF ((CNT>15) AND (CNT<=30)) THEN
        NEW_PRIORITY=1;

      IF (CNT>30) THEN
        NEW_PRIORITY=0;

      IF (PRIORITY<>NEW_PRIORITY) THEN BEGIN

        PRIORITY=NEW_PRIORITY;

        UPDATE DRIVERS
           SET PRIORITY=:PRIORITY
         WHERE DRIVER_ID=:DRIVER_ID;

        S1=S;
        S1=REPLACE_STRING(S1,'%PRIORITY',PRIORITY);
        S1=REPLACE_STRING(S1,'%ORDER_COUNT',CNT);

        INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                  TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                          VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                  :S1,NULL,0,:PHONE,NULL,2,NULL,:D);
        D=CURRENT_TIMESTAMP+5*(1e0/24/60/60);

      END

    END

  END

END

--

CREATE OR ALTER PROCEDURE TRY_PARK_IN
(
  ACCOUNT_ID VARCHAR(32),
  DRIVER_ID VARCHAR(32),
  CODE VARCHAR(100)
)
AS
DECLARE S VARCHAR(1000);
DECLARE PHONE VARCHAR(100);
DECLARE CNT INTEGER;
DECLARE SUM_CHARGE NUMERIC(15,2);
DECLARE SUM_RECEIPT NUMERIC(15,2);
DECLARE BALANCE NUMERIC(15,2);
DECLARE MIN_BALANCE NUMERIC(15,2);
DECLARE D TIMESTAMP;
DECLARE PARK_ID VARCHAR(32);
DECLARE PARK_NAME VARCHAR(100);
DECLARE PARK_DESCRIPTION VARCHAR(250);
DECLARE PRIORITY INTEGER;
BEGIN

  IF ((DRIVER_ID IS NOT NULL) AND (CODE IS NOT NULL)) THEN BEGIN

    SELECT A.PHONE
      FROM DRIVERS D
      JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
     WHERE D.DRIVER_ID=:DRIVER_ID
       AND A.LOCKED<>1
      INTO :PHONE;

    IF (PHONE IS NOT NULL) THEN BEGIN

      EXECUTE PROCEDURE GET_ACCOUNT_BALANCE(:DRIVER_ID)
       RETURNING_VALUES :SUM_CHARGE, :SUM_RECEIPT, :BALANCE;

      SELECT MIN_BALANCE
        FROM DRIVERS
       WHERE DRIVER_ID=:DRIVER_ID
        INTO :MIN_BALANCE;

      IF ((MIN_BALANCE IS NULL) OR ((MIN_BALANCE IS NOT NULL) AND (BALANCE>MIN_BALANCE))) THEN BEGIN

        SELECT COUNT(*)
          FROM ORDERS
         WHERE DRIVER_ID=:DRIVER_ID
           AND PARENT_ID IS NULL
           AND DATE_HISTORY IS NULL
           AND FINISHED<>1
          INTO :CNT;

        IF (CNT>0) THEN BEGIN

          SELECT CONST_VALUE FROM GET_CONST_VALUE('764B2BA8498AB18345852AA2FE39F4D9') INTO :S;

          IF (S IS NOT NULL) THEN BEGIN

            INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                      TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                              VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                      :S,NULL,0,:PHONE,NULL,2,NULL,CURRENT_TIMESTAMP);
          END

        END ELSE BEGIN

          UPDATE PARK_STATES
             SET DATE_OUT=CURRENT_TIMESTAMP
           WHERE DRIVER_ID=:DRIVER_ID
             AND DATE_OUT IS NULL;

          SELECT COUNT(*)
            FROM SHIFTS
           WHERE ACCOUNT_ID=:DRIVER_ID
             AND DATE_END IS NULL
            INTO :CNT;

          D=CURRENT_TIMESTAMP;

          IF (CNT=0) THEN BEGIN

            INSERT INTO SHIFTS (SHIFT_ID,ACCOUNT_ID,DATE_BEGIN,DATE_END)
                        VALUES (GET_UNIQUE_ID(),:DRIVER_ID,:D,NULL);

          END

          PARK_ID=NULL;
          PARK_NAME=NULL;

          FOR SELECT P.PARK_ID, P.NAME, P.DESCRIPTION
                FROM PARKS P
               WHERE (((P.MAX_COUNT IS NOT NULL) AND
                       (P.MAX_COUNT> (SELECT COUNT(*)
                                        FROM PARK_STATES
                                       WHERE DATE_OUT IS NULL
                                         AND PARK_ID=P.PARK_ID)))
                      OR (P.MAX_COUNT IS NULL))
                 AND P.NAME=:CODE
                INTO :PARK_ID, :PARK_NAME, :PARK_DESCRIPTION  DO BEGIN
            BREAK;
          END

          IF (PARK_ID IS NOT NULL) THEN BEGIN

            INSERT INTO PARK_STATES (PARK_STATE_ID,PARK_ID,DRIVER_ID,DATE_IN,DATE_OUT)
                             VALUES (GET_UNIQUE_ID(),:PARK_ID,:DRIVER_ID,:D,NULL);

            SELECT COUNT(*)
              FROM PARK_STATES
             WHERE PARK_ID=:PARK_ID
               AND DATE_OUT IS NULL
              INTO PRIORITY;

            SELECT CONST_VALUE FROM GET_CONST_VALUE('80627FCA459EA3574F6BA8730F32946F') INTO :S;

            IF (S IS NOT NULL) THEN BEGIN

              S=REPLACE_STRING(S,'%PRIORITY',CAST(PRIORITY AS VARCHAR(10)));
              S=REPLACE_STRING(S,'%PARK_NAME',PARK_NAME);
              S=REPLACE_STRING(S,'%PARK_DESCRIPTION',PARK_DESCRIPTION);
              S=REPLACE_STRING(S,'%BALANCE',CAST(BALANCE AS VARCHAR(30)));

              INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                        TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                                VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                        :S,NULL,0,:PHONE,NULL,1,NULL,CURRENT_TIMESTAMP);
            END

          END ELSE BEGIN

            SELECT CONST_VALUE FROM GET_CONST_VALUE('18B1E217D3789DDF4BCE1EEE9C7AB7A5') INTO :S;

            IF (S IS NOT NULL) THEN BEGIN

              INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                        TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                                VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                        :S,NULL,0,:PHONE,NULL,1,NULL,CURRENT_TIMESTAMP);
            END

          END

        END

      END ELSE BEGIN

        SELECT CONST_VALUE FROM GET_CONST_VALUE('0690BD9649C89DD8472558C3270F35D6') INTO :S;

        IF (S IS NOT NULL) THEN BEGIN

          INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                    TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                            VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                    :S,NULL,0,:PHONE,NULL,1,NULL,CURRENT_TIMESTAMP);
        END

      END

    END

  END
END

--

CREATE OR ALTER PROCEDURE CODE_PARK_IN (
  ACCOUNT_ID VARCHAR(32),
  IN_MESSAGE_ID VARCHAR(32))
AS
DECLARE SENDER_ID VARCHAR(32);
DECLARE CODE VARCHAR(100);
BEGIN
  SELECT IM.SENDER_ID, CM.CODE
    FROM IN_MESSAGES IM
    LEFT JOIN CODE_MESSAGES CM ON CM.CODE_MESSAGE_ID=IM.CODE_MESSAGE_ID
   WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID
    INTO :SENDER_ID, :CODE;

  IF ((SENDER_ID IS NOT NULL) AND (CODE IS NOT NULL)) THEN BEGIN

    EXECUTE PROCEDURE TRY_PARK_IN (ACCOUNT_ID,SENDER_ID,CODE);
  END
END

--

CREATE OR ALTER PROCEDURE PR_FULL_CALC (
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE COST_RATE NUMERIC(15,2);
DECLARE COST_FACT NUMERIC(15,2);
DECLARE PHONE VARCHAR(100);
DECLARE DRIVER_ID VARCHAR(32);
DECLARE RECIPIENT_ID VARCHAR(32);
DECLARE SUM_CHARGE NUMERIC(15,2);
DECLARE SUM_RECEIPT NUMERIC(15,2);
DECLARE BALANCE NUMERIC(15,2);
DECLARE MIN_BALANCE NUMERIC(15,2);
DECLARE CHARGE_TYPE_ID VARCHAR(32);
DECLARE S VARCHAR(1000);
DECLARE CODE VARCHAR(100);
DECLARE CNT INTEGER;
BEGIN

  SELECT PHONE, DRIVER_ID, COST_RATE, COST_FACT
    FROM ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :PHONE, :DRIVER_ID, :COST_RATE, :COST_FACT;

  IF ((COST_FACT IS NULL) OR (COST_FACT<=0.0))  THEN
    COST_FACT=:COST_RATE;

  IF (COST_FACT<=0.0) THEN BEGIN

    SELECT CONST_VALUE FROM GET_CONST_VALUE('4BB5C780923E872D436DA3DA31C9E0B0') INTO :S;

    IF (S IS NOT NULL) THEN BEGIN

      SELECT PHONE
        FROM ACCOUNTS
       WHERE ACCOUNT_ID=:DRIVER_ID
        INTO :PHONE;

      INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                        VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                :S,NULL,0,:PHONE,NULL,2,NULL,CURRENT_TIMESTAMP);
    END

    EXECUTE PROCEDURE PR_MANUAL(ORDER_ID,ACCOUNT_ID);

  END ELSE BEGIN

    UPDATE ORDERS
       SET FINISHED=1,
           DATE_END=CURRENT_TIMESTAMP,
           WHO_PROCESS_ID=:ACCOUNT_ID,
           COST_FACT=:COST_FACT
     WHERE ORDER_ID=:ORDER_ID;

    EXECUTE PROCEDURE CREATE_ROUTE_HISTORY(ORDER_ID);

    IF (DRIVER_ID IS NOT NULL) THEN BEGIN

      IF (PHONE IS NOT NULL) THEN BEGIN

        IF (SUBSTR(PHONE,1,3)='+79')  THEN BEGIN

          RECIPIENT_ID=NULL;

          FOR SELECT ACCOUNT_ID
                FROM ACCOUNTS
               WHERE PHONE=:PHONE
                INTO :RECIPIENT_ID DO BEGIN

            IF (RECIPIENT_ID IS NOT NULL) THEN
              BREAK;
          END

          SELECT CONST_VALUE FROM GET_CONST_VALUE('05B75340B170BF5141FC63F5CDF7FCD6') INTO :S;

          IF (S IS NOT NULL) THEN BEGIN

            INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                      TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                              VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:RECIPIENT_ID,CURRENT_TIMESTAMP,
                                      :S,NULL,0,:PHONE,NULL,2,NULL,CURRENT_TIMESTAMP);
          END

          SELECT CONST_VALUE FROM GET_CONST_VALUE('E9FFA9589ABD8C174474572B72017BCC') INTO :S;

          IF (S IS NOT NULL) THEN BEGIN

            INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                      TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                              VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:RECIPIENT_ID,CURRENT_TIMESTAMP,
                                      :S,NULL,0,:PHONE,NULL,2,NULL,CURRENT_TIMESTAMP);
          END

        END

      END

      CHARGE_TYPE_ID='E1BC9789DA9DB2B041C0784EBE92BFC9'; /* Выполнение заказа */

      SELECT RET_SUM
        FROM GET_DRIVER_SUM(:DRIVER_ID,:COST_FACT)
        INTO :SUM_CHARGE;

      INSERT INTO CHARGES (CHARGE_ID,WHO_CREATE_ID,CHARGE_TYPE_ID,ACCOUNT_ID,
                           SUM_CHARGE,DATE_CHARGE,DATE_CREATE,DESCRIPTION)
                   VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:CHARGE_TYPE_ID,:DRIVER_ID,
                           :SUM_CHARGE,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,NULL);

      EXECUTE PROCEDURE GET_ACCOUNT_BALANCE(:DRIVER_ID)
       RETURNING_VALUES :SUM_CHARGE, :SUM_RECEIPT, :BALANCE;

      SELECT MIN_BALANCE
        FROM DRIVERS
       WHERE DRIVER_ID=:DRIVER_ID
        INTO :MIN_BALANCE;

      IF ((MIN_BALANCE IS NULL) OR ((MIN_BALANCE IS NOT NULL) AND (BALANCE>MIN_BALANCE))) THEN BEGIN

        SELECT CONST_VALUE FROM GET_CONST_VALUE('16835607B30CA79F4CE883B53AFE972D') INTO :S;

      END ELSE BEGIN

        UPDATE SHIFTS
           SET DATE_END=CURRENT_TIMESTAMP
         WHERE ACCOUNT_ID=:DRIVER_ID
           AND DATE_END IS NULL;

        SELECT CONST_VALUE FROM GET_CONST_VALUE('634880F305E9AA434245E3E596697001') INTO :S;

      END

      SELECT PHONE
        FROM ACCOUNTS
       WHERE ACCOUNT_ID=:DRIVER_ID
        INTO :PHONE;

      IF (S IS NOT NULL) THEN BEGIN

        S=REPLACE_STRING(S,'%BALANCE',CAST(BALANCE AS VARCHAR(30)));

        INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                  TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                          VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                  :S,NULL,0,:PHONE,NULL,2,NULL,CURRENT_TIMESTAMP);
      END

      FOR SELECT TRIM(SUB_STRING(IM.TEXT_IN,2,100))
            FROM IN_MESSAGES IM
            JOIN CODE_MESSAGES CM ON CM.CODE_MESSAGE_ID=IM.CODE_MESSAGE_ID
           WHERE IM.SENDER_ID=:DRIVER_ID
             AND IM.CODE_MESSAGE_ID='0388BCC17DE1A1754B566F18AEEED771' /* Клиент рассчитался полностью */
             AND IM.TYPE_MESSAGE=0
             AND CM.ENABLED=1
           ORDER BY IM.DATE_IN DESC
            INTO :CODE DO BEGIN

        SELECT COUNT(*)
          FROM CODE_MESSAGES
         WHERE CODE=:CODE
          INTO :CNT;

        IF (CNT=1) THEN BEGIN

          EXECUTE PROCEDURE TRY_PARK_IN(ACCOUNT_ID,DRIVER_ID,CODE);

        END ELSE BEGIN

          EXECUTE PROCEDURE QUERY_PARK_STATES (ACCOUNT_ID,DRIVER_ID,PHONE);

        END

        BREAK;
      END

    END

  END
END

--

CREATE OR ALTER PROCEDURE PR_ARRIVAL_DRIVER
(
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32)
)
AS
DECLARE PHONE VARCHAR(100);
DECLARE DRIVER_ID VARCHAR(32);
DECLARE COST_RATE NUMERIC(15,2);
DECLARE COLOR VARCHAR(100);
DECLARE BRAND VARCHAR(100);
DECLARE STATE_NUM VARCHAR(50);
DECLARE PREFIX VARCHAR(10);
DECLARE STREET VARCHAR(100);
DECLARE HOUSE VARCHAR(10);
DECLARE FLAT VARCHAR(10);
DECLARE PORCH VARCHAR(10);
DECLARE LOCALITY VARCHAR(100);
DECLARE RECIPIENT_ID VARCHAR(32);
DECLARE S VARCHAR(1000);
DECLARE S1 VARCHAR(1000);
DECLARE ADDRESS VARCHAR(1000);
DECLARE NUM INTEGER;
DECLARE CNT INTEGER;
DECLARE FLAG INTEGER;
DECLARE D TIMESTAMP;
BEGIN

  SELECT O.PHONE, O.DRIVER_ID, O.COST_RATE,
         C.COLOR, C.BRAND, C.STATE_NUM
    FROM ORDERS O
    LEFT JOIN DRIVERS D ON D.DRIVER_ID=O.DRIVER_ID
    LEFT JOIN CARS C ON C.CAR_ID=D.CAR_ID
   WHERE ORDER_ID=:ORDER_ID
    INTO :PHONE, :DRIVER_ID, :COST_RATE,
         :COLOR, :BRAND, :STATE_NUM;

  UPDATE ORDERS
     SET DATE_BEGIN=CURRENT_TIMESTAMP
   WHERE ORDER_ID=:ORDER_ID;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    IF (PHONE IS NOT NULL) THEN BEGIN

      IF (SUBSTR(PHONE,1,3)='+79')  THEN BEGIN

        RECIPIENT_ID=NULL;

        FOR SELECT ACCOUNT_ID
              FROM ACCOUNTS
             WHERE PHONE=:PHONE
              INTO :RECIPIENT_ID DO BEGIN

          IF (RECIPIENT_ID IS NOT NULL) THEN
            BREAK;
        END

        FLAG=0;

        FOR SELECT STREET_ID, HOUSE
              FROM ROUTES
             WHERE ORDER_ID=:ORDER_ID
             ORDER BY PRIORITY
              INTO :STREET, :HOUSE DO BEGIN

          IF ((STREET IS NOT NULL) AND (HOUSE IS NOT NULL)) THEN BEGIN

          END ELSE BEGIN

            FLAG=1;

          END
        END

        IF ((COST_RATE>0.0) AND (FLAG=0)) THEN BEGIN

          SELECT CONST_VALUE FROM GET_CONST_VALUE('8D9E6C9F4852AD8142205F027B2A5288') INTO :S;

        END ELSE BEGIN

          SELECT CONST_VALUE FROM GET_CONST_VALUE('93EBB0171E37A0884313759C0DA1EB3D') INTO :S;

        END

        IF (S IS NOT NULL) THEN BEGIN

          S=REPLACE_STRING(S,'%COLOR',COLOR);
          S=REPLACE_STRING(S,'%BRAND',BRAND);
          S=REPLACE_STRING(S,'%STATE_NUM',STATE_NUM);
          S=REPLACE_STRING(S,'%COST_RATE',CAST(CAST(COST_RATE AS NUMERIC(15,0)) AS VARCHAR(30)));

          INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                    TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                            VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:RECIPIENT_ID,CURRENT_TIMESTAMP,
                                    :S,NULL,0,:PHONE,NULL,0,NULL,CURRENT_TIMESTAMP);

        END

        SELECT CONST_VALUE FROM GET_CONST_VALUE('F4384929079999BB47A895BFCA5BB382') INTO :S;

        IF (S IS NOT NULL) THEN BEGIN

          INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                    TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                            VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:RECIPIENT_ID,CURRENT_TIMESTAMP,
                                    :S,NULL,0,:PHONE,NULL,0,NULL,CURRENT_TIMESTAMP);

        END

      END

    END

    SELECT PHONE
      FROM ACCOUNTS
     WHERE ACCOUNT_ID=:DRIVER_ID
      INTO :PHONE;

    FLAG=0;
    NUM=0;

    SELECT COUNT(*)
      FROM ROUTES
     WHERE ORDER_ID=:ORDER_ID
      INTO :CNT;

    D=CURRENT_TIMESTAMP;

    FOR SELECT S.PREFIX, S.NAME, R.HOUSE, R.FLAT, R.PORCH, L.NAME
          FROM ROUTES R
          LEFT JOIN STREETS S ON S.STREET_ID=R.STREET_ID
          LEFT JOIN LOCALITIES L ON L.LOCALITY_ID=S.LOCALITY_ID
         WHERE R.ORDER_ID=:ORDER_ID
         ORDER BY R.PRIORITY
          INTO :PREFIX, :STREET, :HOUSE, :FLAT, :PORCH, :LOCALITY DO BEGIN

      ADDRESS='';
      S=NULL;

      IF ((STREET IS NOT NULL) AND (HOUSE IS NOT NULL)) THEN BEGIN

        IF (PREFIX IS NOT NULL) THEN
          ADDRESS=PREFIX||' ';

        IF (STREET IS NOT NULL) THEN
          ADDRESS=ADDRESS||STREET;

        IF (HOUSE IS NOT NULL) THEN
          ADDRESS=ADDRESS||' '||HOUSE;

        IF (FLAT IS NOT NULL) THEN
          ADDRESS=ADDRESS||'-'||FLAT;

        IF (PORCH IS NOT NULL) THEN
          ADDRESS=ADDRESS||' п.'||PORCH;

        IF (LOCALITY IS NOT NULL) THEN
          ADDRESS=ADDRESS||', '||LOCALITY;

        SELECT CONST_VALUE FROM GET_CONST_VALUE('92009DB6C3EAA9E74B80D333538FE40D') INTO :S;

      END ELSE BEGIN

        FLAG=1;

        SELECT CONST_VALUE FROM GET_CONST_VALUE('7ED5E8A8BBD9870A411517B54D9EB973') INTO :S;

      END

      IF (S IS NOT NULL) THEN BEGIN

        NUM=NUM+1;

        S=REPLACE_STRING(S,'%NUM',NUM);
        S=REPLACE_STRING(S,'%COUNT',CNT);
        S=REPLACE_STRING(S,'%ADDRESS',ADDRESS);

        IF (NUM=CNT) THEN BEGIN

          IF ((FLAG=0) AND (COST_RATE>0.0)) THEN

            SELECT CONST_VALUE FROM GET_CONST_VALUE('9C8BC7D14DAEAE5C4DC8C1C91B20BCC2') INTO :S1;

          ELSE

            SELECT CONST_VALUE FROM GET_CONST_VALUE('D3F68032AD999D004140A480A8AAF749') INTO :S1;

        END ELSE

          S1=S;


        IF (S1 IS NOT NULL) THEN BEGIN

          S1=REPLACE_STRING(S1,'%ADDRESS',S);
          S1=REPLACE_STRING(S1,'%COST_RATE',CAST(CAST(COST_RATE AS NUMERIC(15,0)) AS VARCHAR(30)));

          RECIPIENT_ID=DRIVER_ID;

          INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                    TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                            VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:RECIPIENT_ID,CURRENT_TIMESTAMP,
                                    :S1,NULL,0,:PHONE,NULL,2,NULL,:D);

          D=D+1*(1e0/24/60/60);

        END

      END

    END

  END

END

--


