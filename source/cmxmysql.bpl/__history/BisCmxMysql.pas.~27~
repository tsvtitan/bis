unit BisCmxMysql;

interface

uses BisConnectionModules, BisModules, BisCoreObjects,
     BisCoreIntf;

procedure InitConnectionModule(AModule: TBisConnectionModule); stdcall;

exports
  InitConnectionModule;

implementation

uses Classes, Variants, DB,
     BisCmxMySqlConnection, BisDataSet, BisCore, BisConsts,
     BisCmxMySqlConsts, BisCmxConsts;

procedure InitConnectionModule(AModule: TBisConnectionModule); stdcall;
var
  Params: TBisDataSet;
  Stream: TMemoryStream;
{var
  DSConnections: TBisDataSet;
  Stream: TMemoryStream;  }
{
  DSParams: TBisDataSet;


  AConnection: TBisCmxMySqlConnection;}
begin
  with AModule.Table do begin
    if Active and not IsEmpty then begin
      Params:=TBisDataSet.Create(nil);
      Stream:=TMemoryStream.Create;
      try
        TBlobField(FieldByName(SFieldParams)).SaveToStream(Stream);
        Params.LoadFromStream(Stream);
        if DSParams.Active and not DSParams.IsEmpty then begin
          AConnection:=TBisCmxMySqlConnection.Create(AModule.Connections);
          AConnection.ObjectName:=DSConnections.FieldByName(SFieldName).AsString+AConnection.ObjectName;
          if AModule.Connections.AddConnection(AConnection) then begin
            AConnection.Caption:=DSConnections.FieldByName(SFieldCaption).AsString;
            AConnection.Description:=DSConnections.FieldByName(SFieldDescription).AsString;
            AConnection.Enabled:=Boolean(DSConnections.FieldByName(SFieldEnabled).AsInteger);
            AConnection.InitDefaultParams(DSParams);
          end else
            AConnection.Free;
        end;
      finally
        Stream.Free;
        Params.Free;
      end;
    end;
  end;

{  if Core.LocalBase.BaseLoaded then begin
    DSConnections:=TBisDataSet.Create(nil);
    Stream:=TMemoryStream.Create;
    try
      if Core.LocalBase.ReadParam(AModule.ObjectName,Stream) then beign
      end;
    finally
      Stream.Free;
      DSConnections.Free;
    end;
  end;

{  if Core.LocalBase.BaseLoaded then begin
    DSConnections:=TBisDataSet.Create(nil);
    Stream:=TMemoryStream.Create;
    try
      ParamName:=Core.Config.Read(AModule.ObjectName,SParamConnections,SConnections);
      if Core.LocalBase.ReadParam(ParamName,Stream) then begin
        DSConnections.LoadFromStream(Stream);
        if DSConnections.Active and not DSConnections.IsEmpty then begin
          DSConnections.First;
          while not DSConnections.Eof do begin
            Stream.Clear;
            if DSConnections.FieldByName(SFieldParams).IsBlob and
               not VarIsNull(DSConnections.FieldByName(SFieldParams).Value) then begin
              DSParams:=TBisDataSet.Create(nil);
              try
                TBlobField(DSConnections.FieldByName(SFieldParams)).SaveToStream(Stream);
                DSParams.LoadFromStream(Stream);
                if DSParams.Active and not DSParams.IsEmpty then begin
                  AConnection:=TBisCmxMySqlConnection.Create(AModule.Connections);
                  AConnection.ObjectName:=DSConnections.FieldByName(SFieldName).AsString+AConnection.ObjectName;
                  if AModule.Connections.AddConnection(AConnection) then begin
                    AConnection.Caption:=DSConnections.FieldByName(SFieldCaption).AsString;
                    AConnection.Description:=DSConnections.FieldByName(SFieldDescription).AsString;
                    AConnection.Enabled:=Boolean(DSConnections.FieldByName(SFieldEnabled).AsInteger);
                    AConnection.InitDefaultParams(DSParams);
                  end else
                    AConnection.Free;
                end;
              finally
                DSParams.Free;
              end;
            end;
            DSConnections.Next;
          end;
        end;
      end;
    finally
      Stream.Free;
      DSConnections.Free;
    end;
  end;}
end;

end.
