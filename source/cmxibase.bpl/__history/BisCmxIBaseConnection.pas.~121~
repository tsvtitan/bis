unit BisCmxIBaseConnection;

interface

uses Classes, DB,
     BisDataSet, BisCmxConnection;

type
  TBisCmxIBaseSession=class(TBisCmxSession)
  protected
    function ExecuteOpen(Proc: TBisCmxProc; OpenDataSet: TBisDataSet): TDataSet; override;
  public
    constructor Create(ASessions: TBisCmxSessions); override;
  end;

  TBisCmxIBaseSessions=class(TBisCmxSessions)
  protected
    function GetSessionClass: TBisCmxSessionClass; override;
  public
    constructor Create(AConnection: TBisCmxConnection); override;
  end;

  TBisCmxIBaseConnection=class(TBisCmxConnection)
  protected
    function GetSessionsClass: TBisCmxSessionsClass; override;
  public
    constructor Create(AOwner: TComponent); override;
  end;

implementation

uses SysUtils,   
     BisUtils;

{ TBisCmxIBaseSession }

constructor TBisCmxIBaseSession.Create(ASessions: TBisCmxSessions);
begin
  inherited Create(ASessions);
  SCheckPermissions:='NAME=%s';
  SFormatDateTime:='yyyy-mm-dd hh:nn:ss';  // English
  SSqlInsert:='INSERT INTO /*PREFIX*/SESSIONS (SESSION_ID,APPLICATION_ID,ACCOUNT_ID,DATE_CREATE,DATE_CHANGE,PARAMS) '+
              'VALUES (%s,%s,%s,%s,%s,:PARAMS)';
  SSqlUpdate:='UPDATE /*PREFIX*/SESSIONS SET DATE_CHANGE=%s WHERE SESSION_ID=%s';
  SSqlDelete:='DELETE FROM /*PREFIX*/SESSIONS WHERE SESSION_ID=%s';
  SSqlLoadPermissions:='SELECT P.INTERFACE_ID, I.NAME, P.RIGHT_ACCESS, P."VALUE" '+
                       'FROM /*PREFIX*/PERMISSIONS P JOIN /*PREFIX*/INTERFACES I ON I.INTERFACE_ID=P.INTERFACE_ID '+
                       'WHERE P.ACCOUNT_ID IN (%s)';
  SSqlLoadLocks:='SELECT METHOD, OBJECT, DESCRIPTION, IP_LIST FROM /*PREFIX*/LOCKS '+
                 'WHERE ((DATE_BEGIN<=%s AND DATE_END IS NULL) OR (DATE_BEGIN<=%s AND DATE_END>=%s)) '+
                 'AND APPLICATION_ID=%s AND (ACCOUNT_ID IN (%s) OR ACCOUNT_ID IS NULL) '+
                 'ORDER BY DATE_BEGIN';  
  SSqlLoadRoles:='SELECT ROLE_ID FROM /*PREFIX*/ACCOUNT_ROLES WHERE ACCOUNT_ID=%s';
  SSqlLoadProfile:='SELECT P.PROFILE FROM /*PREFIX*/PROFILES P WHERE P.APPLICATION_ID=%s AND P.ACCOUNT_ID=%s';
  SSqlSaveProfile:='UPDATE /*PREFIX*/PROFILES SET PROFILE=:PROFILE WHERE APPLICATION_ID=%s AND ACCOUNT_ID=%s';
  SSqlLoadInterfaces:='SELECT AI.INTERFACE_ID, AI.PRIORITY, AI.AUTO_RUN, I.NAME, I.DESCRIPTION, '+
                      'I."MODULE_NAME", I.MODULE_INTERFACE, I.INTERFACE_TYPE, '+
                      'S.SCRIPT_ID, S.ENGINE AS SCRIPT_ENGINE, S.PLACE AS SCRIPT_PLACE, '+
                      'R.REPORT_ID, R.ENGINE AS REPORT_ENGINE, R.PLACE AS REPORT_PLACE, '+
                      'D.DOCUMENT_ID, D.OLE_CLASS AS DOCUMENT_OLE_CLASS, D.PLACE AS DOCUMENT_PLACE '+
                      'FROM /*PREFIX*/APPLICATION_INTERFACES AI '+
                      'JOIN /*PREFIX*/INTERFACES I ON I.INTERFACE_ID=AI.INTERFACE_ID '+
                      'LEFT JOIN /*PREFIX*/SCRIPTS S ON S.SCRIPT_ID=AI.INTERFACE_ID '+
                      'LEFT JOIN /*PREFIX*/REPORTS R ON R.REPORT_ID=AI.INTERFACE_ID '+
                      'LEFT JOIN /*PREFIX*/DOCUMENTS D ON D.DOCUMENT_ID=AI.INTERFACE_ID '+
                      'WHERE AI.APPLICATION_ID=%s AND AI.ACCOUNT_ID IN (%s) '+
                      'ORDER BY AI.PRIORITY';
  SSqlGetRecords:='SELECT %s FROM %s %s %s %s %s';
  SSqlGetRecordsCount:='SELECT COUNT(*) FROM (%s)';
  SSqlLoadMenus:='SELECT M.MENU_ID, M.PARENT_ID, M.NAME, M.DESCRIPTION, M.INTERFACE_ID, '+
                 'M.SHORTCUT, M.PICTURE, M.PRIORITY '+
                 'FROM /*PREFIX*/APPLICATION_MENUS AP '+
                 'JOIN /*PREFIX*/MENUS M ON M.MENU_ID=AP.MENU_ID '+
                 'WHERE AP.APPLICATION_ID=%s '+
                 'AND (M.INTERFACE_ID IN (SELECT INTERFACE_ID FROM /*PREFIX*/APPLICATION_INTERFACES '+
                                          'WHERE APPLICATION_ID=AP.APPLICATION_ID AND ACCOUNT_ID IN (%s)) '+
                 'OR M.INTERFACE_ID IS NULL) '+
                 'ORDER BY M."LEVEL", M.PRIORITY ';
  SSqlLoadTasks:='SELECT TASK_ID, NAME, DESCRIPTION, INTERFACE_ID, '+
                 'ENABLED, DATE_BEGIN, DATE_END, SCHEDULE, PRIORITY, '+
                 'PROC_NAME, COMMAND_STRING, DAY_FREQUENCY, WEEK_FREQUENCY, '+
                 'MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY, '+
                 'MONTH_DAY, JANUARY, FEBRUARY, MARCH, APRIL, MAY, JUNE, '+
                 'JULY, AUGUST, SEPTEMBER, OCTOBER, NOVEMBER, DECEMBER, '+
                 'REPEAT_ENABLED, REPEAT_TYPE, REPEAT_VALUE, REPEAT_COUNT, '+
                 'DATE_EXECUTE, RESULT_STRING '+
                 'FROM /*PREFIX*/TASKS '+
                 'WHERE APPLICATION_ID=%s AND (ACCOUNT_ID IN (%s) OR ACCOUNT_ID IS NULL) '+
                 'ORDER BY DATE_BEGIN';
  SSqlSaveTask:='UPDATE /*PREFIX*/TASKS SET DATE_EXECUTE=%s, RESULT_STRING=%s WHERE TASK_ID=%s';
  SSqlLoadAlarms:='SELECT ALARM_ID, TYPE_ALARM, DATE_BEGIN, CAPTION, TEXT_ALARM, A1.USER_NAME '+
                  'FROM /*PREFIX*/ALARMS A '+
                  'JOIN /*PREFIX*/ACCOUNTS A1 ON A1.ACCOUNT_ID=A.SENDER_ID '+
                  'WHERE ((A.DATE_BEGIN<=CURRENT_TIMESTAMP AND A.DATE_END IS NULL) OR '+
                  '(A.DATE_BEGIN<=CURRENT_TIMESTAMP AND A.DATE_END>=CURRENT_TIMESTAMP)) '+
                  'AND (A.RECIPIENT_ID IN (%s) OR A.RECIPIENT_ID IS NULL) '+
                  'ORDER BY A.DATE_BEGIN';
  SSqlLoadScript:='SELECT SCRIPT, PLACE FROM /*PREFIX*/SCRIPTS WHERE SCRIPT_ID=%s';
  SSqlLoadReport:='SELECT REPORT, PLACE FROM /*PREFIX*/REPORTS WHERE REPORT_ID=%s';
  SSqlLoadDocument:='SELECT DOCUMENT, PLACE FROM /*PREFIX*/DOCUMENTS WHERE DOCUMENT_ID=%s';
  SParamPrefix:='';
end;

function TBisCmxIBaseSession.ExecuteOpen(Proc: TBisCmxProc; OpenDataSet: TBisDataSet): TDataSet;
var
  Query: TBisCmxQuery;
  i: Integer;
  Params: String;
  Param: TParam;
  NewParam: TParam;
  First: Boolean;
begin
  Result:=Proc;
  if Assigned(Proc) then begin
    Query:=TBisCmxQuery.Create(nil);
    try
      Query.SQLConnection:=Proc.SQLConnection;
      Query.ParamCheck:=false;
      First:=true;
      Params:='';
      for i:=0 to Proc.Params.Count-1 do begin
        Param:=Proc.Params[i];
        if (Param.ParamType in [ptInput,ptInputOutput]) then begin

          NewParam:=TParam(Query.Params.Add);
          NewParam.Name:=Param.Name;
          NewParam.Value:=Param.Value;
          NewParam.DataType:=Param.DataType;
          NewParam.ParamType:=Param.ParamType;

          if First then begin
            Params:=':'+Param.Name;
            First:=false;
          end else Params:=Params+',:'+Param.Name;
        end;
      end;
      if Trim(Params)<>'' then begin
        Params:='('+Params+')';
        Query.ParamCheck:=true;
      end;
      Query.SQL.Text:=FormatEx('SELECT * FROM %s%s',[Proc.StoredProcName,Params]);
      Query.Open;
      if Query.Active then begin
        OpenDataSet.CreateTable(Query);
        OpenDataSet.CopyRecords(Query);
        Result:=OpenDataSet;
      end;
    finally
      Query.Free;
    end;
  end;
end;

{ TBisCmxIBaseSessions }

constructor TBisCmxIBaseSessions.Create(AConnection: TBisCmxConnection);
begin
  inherited Create(AConnection);
  SSchemaOverride:='';
  SFormatSchemaName:='';
end;

function TBisCmxIBaseSessions.GetSessionClass: TBisCmxSessionClass;
begin
  Result:=TBisCmxIBaseSession;
end;

{ TBisCmxIBaseConnection }

constructor TBisCmxIBaseConnection.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  SSqlGetDbUserName:='SELECT ACCOUNT_ID, DB_USER_NAME, DB_PASSWORD, "PASSWORD" FROM /*PREFIX*/ACCOUNTS '+
                     'WHERE UPPER(USER_NAME)=%s AND LOCKED<>1';
  SSqlApplicationExists:='SELECT A.LOCKED, P.PROFILE '+
                          'FROM /*PREFIX*/PROFILES P '+
                          'JOIN /*PREFIX*/APPLICATIONS A ON A.APPLICATION_ID=P.APPLICATION_ID '+
                          'WHERE P.APPLICATION_ID=%s '+
                          'AND P.ACCOUNT_ID=%s';
  SSqlSessionExists:='SELECT SESSION_ID FROM /*PREFIX*/SESSIONS WHERE SESSION_ID=%s ';
  SSqlGetServerDate:='SELECT DISTINCT(CURRENT_TIMESTAMP) FROM /*PREFIX*/APPLICATIONS';
  SFieldNameQuote:='"';
  SFormatDateTimeValue:='yyyy-mm-dd hh:nn:ss';
  SFormatDateValue:='yyyy-mm-dd';
  SSqlInsert:='INSERT INTO %s (%s) VALUES (%s)';
  SSqlUpdate:='UPDATE %s SET %s WHERE %s';
  SSQLGetKeys:='SELECT I.RDB$FIELD_NAME '+
               'FROM RDB$RELATION_CONSTRAINTS RC, RDB$INDEX_SEGMENTS I, RDB$INDICES IDX '+
               'WHERE (I.RDB$INDEX_NAME = RC.RDB$INDEX_NAME) AND '+
               '(IDX.RDB$INDEX_NAME = RC.RDB$INDEX_NAME) AND '+
               '(RC.RDB$CONSTRAINT_TYPE = ''PRIMARY KEY'') AND '+
               '(RC.RDB$RELATION_NAME = %s) '+
               'ORDER BY I.RDB$FIELD_POSITION';
  SFormatFilterDateValue:='%s';
end;

function TBisCmxIBaseConnection.GetSessionsClass: TBisCmxSessionsClass;
begin
  Result:=TBisCmxIBaseSessions;
end;


end.
