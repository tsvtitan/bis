ALTER TABLE SOURCES
ADD VISIBLE INTEGER

--

CREATE OR ALTER VIEW S_SOURCES
AS
SELECT *
  FROM SOURCES
 ORDER BY PRIORITY

--

CREATE OR ALTER PROCEDURE I_SOURCE
(
  SOURCE_ID VARCHAR(32),
  NAME VARCHAR(100),
  DESCRIPTION VARCHAR(250),
  PRIORITY INTEGER,
  VISIBLE INTEGER
)
AS
BEGIN
  INSERT INTO SOURCES (SOURCE_ID,NAME,DESCRIPTION,PRIORITY,VISIBLE)
       VALUES (:SOURCE_ID,:NAME,:DESCRIPTION,:PRIORITY,:VISIBLE);
END

--

CREATE OR ALTER PROCEDURE U_SOURCE
(
  SOURCE_ID VARCHAR(32),
  NAME VARCHAR(100),
  DESCRIPTION VARCHAR(250),
  PRIORITY INTEGER,
  VISIBLE INTEGER,
  OLD_SOURCE_ID VARCHAR(32)
)
AS
BEGIN
  UPDATE SOURCES
     SET SOURCE_ID=:SOURCE_ID,
         NAME=:NAME,
         DESCRIPTION=:DESCRIPTION,
         PRIORITY=:PRIORITY,
         VISIBLE=:VISIBLE
   WHERE SOURCE_ID=:OLD_SOURCE_ID;
END

--

UPDATE SOURCES
SET VISIBLE=1

--

ALTER TABLE CAR_TYPES
ADD VISIBLE INTEGER

--

CREATE OR ALTER VIEW S_CAR_TYPES
AS
SELECT *
  FROM CAR_TYPES
 ORDER BY PRIORITY

--

CREATE OR ALTER PROCEDURE I_CAR_TYPE
(
  CAR_TYPE_ID VARCHAR(32),
  NAME VARCHAR(100),
  DESCRIPTION VARCHAR(250),
  FONT_COLOR INTEGER,
  BRUSH_COLOR INTEGER,
  RATIO NUMERIC(4,2),
  COST_IDLE NUMERIC(15,2),
  PRIORITY INTEGER,
  VISIBLE INTEGER
)
AS
BEGIN
  INSERT INTO CAR_TYPES (CAR_TYPE_ID,NAME,DESCRIPTION,FONT_COLOR,BRUSH_COLOR,
                         RATIO,COST_IDLE,PRIORITY,VISIBLE)
       VALUES (:CAR_TYPE_ID,:NAME,:DESCRIPTION,:FONT_COLOR,:BRUSH_COLOR,
               :RATIO,:PRIORITY,:COST_IDLE,:VISIBLE);
END

--

CREATE OR ALTER PROCEDURE U_CAR_TYPE
(
  CAR_TYPE_ID VARCHAR(32),
  NAME VARCHAR(100),
  DESCRIPTION VARCHAR(250),
  FONT_COLOR INTEGER,
  BRUSH_COLOR INTEGER,
  RATIO NUMERIC(4,2),
  COST_IDLE NUMERIC(15,2),
  PRIORITY INTEGER,
  VISIBLE INTEGER,
  OLD_CAR_TYPE_ID VARCHAR(32)
)
AS
BEGIN
  UPDATE CAR_TYPES
     SET CAR_TYPE_ID=:CAR_TYPE_ID,
         NAME=:NAME,
         DESCRIPTION=:DESCRIPTION,
         FONT_COLOR=:FONT_COLOR,
         BRUSH_COLOR=:BRUSH_COLOR,
         RATIO=:RATIO,
         COST_IDLE=:COST_IDLE,
         PRIORITY=:PRIORITY,
         VISIBLE=:VISIBLE
   WHERE CAR_TYPE_ID=:OLD_CAR_TYPE_ID;
END

--

UPDATE CAR_TYPES
SET VISIBLE=1

--

CREATE OR ALTER VIEW S_ACTIONS
AS
SELECT *
  FROM ACTIONS
 ORDER BY PRIORITY

--

CREATE OR ALTER VIEW S_RESULTS
(
    RESULT_ID,
    ACTION_ID,
    NEXT_ID,
    NAME,
    DESCRIPTION,
    PROC_DETECT,
    PROC_PROCESS,
    FONT_COLOR,
    BRUSH_COLOR,
    PRIORITY,
    VISIBLE,
    ACTION_NAME,
    NEXT_NAME
)
AS
SELECT R.*,
       A1.NAME AS ACTION_NAME,
       A2.NAME AS NEXT_NAME
  FROM RESULTS R
  JOIN ACTIONS A1 ON A1.ACTION_ID=R.ACTION_ID
  LEFT JOIN ACTIONS A2 ON A2.ACTION_ID=R.NEXT_ID
 ORDER BY R.PRIORITY

--

CREATE OR ALTER VIEW S_ORDERS
(
    ORDER_ID,
    ACTION_ID,
    RATE_ID,
    CAR_TYPE_ID,
    WHO_ACCEPT_ID,
    STREET_ID,
    ZONE_ID,
    PARENT_ID,
    CAR_ID,
    WHO_PROCESS_ID,
    WHO_HISTORY_ID,
    RESULT_ID,
    PARK_ID,
    SOURCE_ID,
    DISCOUNT_ID,
    DRIVER_ID,
    ORDER_NUM,
    PHONE,
    HOUSE,
    FLAT,
    PORCH,
    DATE_ACCEPT,
    DATE_ARRIVAL,
    DATE_BEGIN,
    DATE_END,
    CUSTOMER,
    DESCRIPTION,
    COST_RATE,
    COST_FACT,
    TYPE_ACCEPT,
    TYPE_PROCESS,
    DATE_HISTORY,
    BEFORE_PERIOD,
    FINISHED,
    LOCKED,
    CLIENT_ID,
    COST_GROSS,
    FIRM_ID,
    ACTION_NAME,
    ACTION_BRUSH_COLOR,
    ACTION_FONT_COLOR,
    ACTION_PERIOD,
    RATE_NAME,
    CAR_TYPE_NAME,
    WHO_ACCEPT,
    FIRM_SMALL_NAME,
    STREET_NAME,
    STREET_PREFIX,
    LOCALITY_ID,
    LOCALITY_NAME,
    LOCALITY_PREFIX,
    ZONE_NAME,
    PARENT_ORDER_NUM,
    CLIENT_USER_NAME,
    CLIENT_SURNAME,
    CLIENT_NAME,
    CLIENT_PATRONYMIC,
    CLIENT_FIRM_SMALL_NAME,
    CAR_BRAND,
    CAR_STATE_NUM,
    CAR_COLOR,
    CAR_CALLSIGN,
    WHO_PROCESS,
    WHO_HISTORY,
    RESULT_NAME,
    RESULT_BRUSH_COLOR,
    RESULT_FONT_COLOR,
    PARK_NAME,
    PARK_DESCRIPTION,
    SOURCE_NAME,
    DISCOUNT_NUM,
    DISCOUNT_TYPE_NAME,
    DRIVER_USER_NAME,
    DRIVER_SURNAME,
    DRIVER_NAME,
    DRIVER_PATRONYMIC,
    DRIVER_PHONE,
    STATUS,
    ROUTE_STREET_ID,
    ROUTE_STREET_NAME,
    ROUTE_STREET_PREFIX,
    ROUTE_LOCALITY_ID,
    ROUTE_LOCALITY_NAME,
    ROUTE_LOCALITY_PREFIX,
    ROUTE_HOUSE,
    ROUTE_FLAT,
    ROUTE_PORCH,
    ROUTE_ZONE_ID,
    ROUTE_ZONE_NAME
)
AS
SELECT O.*,
       A.NAME AS ACTION_NAME,
       A.BRUSH_COLOR AS ACTION_BRUSH_COLOR,
       A.FONT_COLOR AS ACTION_FONT_COLOR,
       A.PERIOD AS ACTION_PERIOD,
       R.NAME AS RATE_NAME,
       CT.NAME AS CAR_TYPE_NAME,
       A1.USER_NAME AS WHO_ACCEPT,
       F.SMALL_NAME AS FIRM_SMALL_NAME,
       S1.NAME AS STREET_NAME,
       S1.PREFIX AS STREET_PREFIX,
       L1.LOCALITY_ID,
       L1.NAME AS LOCALITY_NAME,
       L1.PREFIX AS LOCALITY_PREFIX,
       Z1.NAME AS ZONE_NAME,
       OP.ORDER_NUM AS PARENT_ORDER_NUM,
       A5.USER_NAME AS CLIENT_USER_NAME,
       A5.SURNAME AS CLIENT_SURNAME,
       A5.NAME AS CLIENT_NAME,
       A5.PATRONYMIC AS CLIENT_PATRONYMIC,
       F5.SMALL_NAME AS CLIENT_FIRM_SMALL_NAME,
       C.BRAND AS CAR_BRAND,
       C.STATE_NUM AS CAR_STATE_NUM,
       C.COLOR AS CAR_COLOR,
       C.CALLSIGN AS CAR_CALLSIGN,
       A2.USER_NAME AS WHO_PROCESS,
       A4.USER_NAME AS WHO_HISTORY,
       RT.NAME AS RESULT_NAME,
       RT.BRUSH_COLOR AS RESULT_BRUSH_COLOR,
       RT.FONT_COLOR AS RESULT_FONT_COLOR,
       P.NAME AS PARK_NAME,
       P.DESCRIPTION AS PARK_DESCRIPTION,
       S.NAME AS SOURCE_NAME,
       D.NUM AS DISCOUNT_NUM,
       DT.NAME AS DISCOUNT_TYPE_NAME,
       A3.USER_NAME AS DRIVER_USER_NAME,
       A3.SURNAME AS DRIVER_SURNAME,
       A3.NAME AS DRIVER_NAME,
       A3.PATRONYMIC AS DRIVER_PATRONYMIC,
       A3.PHONE AS DRIVER_PHONE,
       (CASE WHEN (O.FINISHED=0) AND (CURRENT_TIMESTAMP>=(O.DATE_ARRIVAL-(O.BEFORE_PERIOD*(1e0/24/60)))) THEN 0
             WHEN (O.FINISHED=0) AND (CURRENT_TIMESTAMP<(O.DATE_ARRIVAL-(O.BEFORE_PERIOD*(1e0/24/60)))) THEN 1
             WHEN O.FINISHED=1 THEN 2
        ELSE 0 END) AS STATUS,
       S2.STREET_ID AS ROUTE_STREET_ID,
       S2.NAME AS ROUTE_STREET_NAME,
       S2.PREFIX AS ROUTE_STREET_PREFIX,
       L2.LOCALITY_ID AS ROUTE_LOCALITY_ID,
       L2.NAME AS ROUTE_LOCALITY_NAME,
       L2.PREFIX AS ROUTE_LOCALITY_PREFIX,
       RO.HOUSE AS ROUTE_HOUSE,
       RO.FLAT AS ROUTE_FLAT,
       RO.PORCH AS ROUTE_PORCH,
       RO.ZONE_ID AS ROUTE_ZONE_ID,
       Z2.NAME AS ROUTE_ZONE_NAME

  FROM ORDERS O
  JOIN ACTIONS A ON A.ACTION_ID=O.ACTION_ID
  JOIN RATES R ON R.RATE_ID=O.RATE_ID
  JOIN CAR_TYPES CT ON CT.CAR_TYPE_ID=O.CAR_TYPE_ID
  JOIN ACCOUNTS A1 ON A1.ACCOUNT_ID=O.WHO_ACCEPT_ID
  LEFT JOIN FIRMS F ON F.FIRM_ID=O.FIRM_ID
  LEFT JOIN STREETS S1 ON S1.STREET_ID=O.STREET_ID
  LEFT JOIN LOCALITIES L1 ON L1.LOCALITY_ID=S1.LOCALITY_ID
  LEFT JOIN ZONES Z1 ON Z1.ZONE_ID=O.ZONE_ID
  LEFT JOIN ORDERS OP ON OP.ORDER_ID=O.PARENT_ID
  LEFT JOIN CLIENTS CL ON CL.CLIENT_ID=O.CLIENT_ID
  LEFT JOIN ACCOUNTS A5 ON A5.ACCOUNT_ID=CL.CLIENT_ID
  LEFT JOIN FIRMS F5 ON F5.FIRM_ID=A5.FIRM_ID
  LEFT JOIN CARS C ON C.CAR_ID=O.CAR_ID
  LEFT JOIN ACCOUNTS A2 ON A2.ACCOUNT_ID=O.WHO_PROCESS_ID
  LEFT JOIN ACCOUNTS A4 ON A4.ACCOUNT_ID=O.WHO_HISTORY_ID
  LEFT JOIN RESULTS RT ON RT.RESULT_ID=O.RESULT_ID
  LEFT JOIN PARKS P ON P.PARK_ID=O.PARK_ID
  LEFT JOIN SOURCES S ON S.SOURCE_ID=O.SOURCE_ID
  LEFT JOIN DISCOUNTS D ON D.DISCOUNT_ID=O.DISCOUNT_ID
  LEFT JOIN DISCOUNT_TYPES DT ON DT.DISCOUNT_TYPE_ID=D.DISCOUNT_TYPE_ID
  LEFT JOIN DRIVERS DR ON DR.DRIVER_ID=O.DRIVER_ID
  LEFT JOIN ACCOUNTS A3 ON A3.ACCOUNT_ID=DR.DRIVER_ID
  LEFT JOIN ROUTES RO ON RO.ORDER_ID=O.ORDER_ID AND 
                         RO.PRIORITY=(SELECT MAX(PRIORITY)
                                        FROM ROUTES
                                       WHERE ORDER_ID=O.ORDER_ID)
  LEFT JOIN STREETS S2 ON S2.STREET_ID=RO.STREET_ID
  LEFT JOIN LOCALITIES L2 ON L2.LOCALITY_ID=S2.LOCALITY_ID
  LEFT JOIN ZONES Z2 ON Z2.ZONE_ID=RO.ZONE_ID
 ORDER BY O.DATE_ARRIVAL, O.DATE_ACCEPT

--

ALTER TABLE RECEIPT_TYPES
ADD VIRTUAL INTEGER

--

UPDATE RECEIPT_TYPES
SET VIRTUAL=0

--

ALTER TABLE RECEIPT_TYPES
ADD VISIBLE INTEGER

--

UPDATE RECEIPT_TYPES
SET VISIBLE=1

--

CREATE OR ALTER VIEW S_RECEIPT_TYPES
AS
SELECT *
  FROM RECEIPT_TYPES
 ORDER BY NAME

--

CREATE OR ALTER PROCEDURE I_RECEIPT_TYPE
(
  RECEIPT_TYPE_ID VARCHAR(32),
  NAME VARCHAR(100),
  DESCRIPTION VARCHAR(250),
  SUM_RECEIPT NUMERIC(15,2),
  VIRTUAL INTEGER,
  VISIBLE INTEGER
)
AS
BEGIN
  INSERT INTO RECEIPT_TYPES (RECEIPT_TYPE_ID,NAME,DESCRIPTION,
                             SUM_RECEIPT,VIRTUAL,VISIBLE)
       VALUES (:RECEIPT_TYPE_ID,:NAME,:DESCRIPTION,
               :SUM_RECEIPT,:VIRTUAL,:VISIBLE);
END

--

CREATE OR ALTER PROCEDURE U_RECEIPT_TYPE
(
  RECEIPT_TYPE_ID VARCHAR(32),
  NAME VARCHAR(100),
  DESCRIPTION VARCHAR(250),
  SUM_RECEIPT NUMERIC(15,2),
  VIRTUAL INTEGER,
  VISIBLE INTEGER,
  OLD_RECEIPT_TYPE_ID VARCHAR(32)
)
AS
BEGIN
  UPDATE RECEIPT_TYPES
     SET RECEIPT_TYPE_ID=:RECEIPT_TYPE_ID,
         NAME=:NAME,
         DESCRIPTION=:DESCRIPTION,
         SUM_RECEIPT=:SUM_RECEIPT,
         VIRTUAL=:VIRTUAL,
         VISIBLE=:VISIBLE
   WHERE RECEIPT_TYPE_ID=:OLD_RECEIPT_TYPE_ID;
END

--

ALTER TABLE CHARGE_TYPES
ADD VIRTUAL INTEGER

--

UPDATE CHARGE_TYPES
   SET VIRTUAL=0

--

ALTER TABLE CHARGE_TYPES
ADD VISIBLE INTEGER

--

UPDATE CHARGE_TYPES
   SET VISIBLE=1

--

CREATE OR ALTER VIEW S_CHARGE_TYPES
AS
SELECT *
  FROM CHARGE_TYPES
 ORDER BY NAME

--

CREATE OR ALTER PROCEDURE I_CHARGE_TYPE
(
  CHARGE_TYPE_ID VARCHAR(32),
  NAME VARCHAR(100),
  DESCRIPTION VARCHAR(250),
  SUM_CHARGE NUMERIC(15,2),
  VIRTUAL INTEGER,
  VISIBLE INTEGER
)
AS
BEGIN
  INSERT INTO CHARGE_TYPES (CHARGE_TYPE_ID,NAME,DESCRIPTION,
                            SUM_CHARGE,VIRTUAL,VISIBLE)
       VALUES (:CHARGE_TYPE_ID,:NAME,:DESCRIPTION,
               :SUM_CHARGE,:VIRTUAL,:VISIBLE);
END

--

CREATE OR ALTER PROCEDURE U_CHARGE_TYPE
(
  CHARGE_TYPE_ID VARCHAR(32),
  NAME VARCHAR(100),
  DESCRIPTION VARCHAR(250),
  SUM_CHARGE NUMERIC(15,2),
  VIRTUAL INTEGER,
  VISIBLE INTEGER,
  OLD_CHARGE_TYPE_ID VARCHAR(32)
)
AS
BEGIN
  UPDATE CHARGE_TYPES
     SET CHARGE_TYPE_ID=:CHARGE_TYPE_ID,
         NAME=:NAME,
         DESCRIPTION=:DESCRIPTION,
         SUM_CHARGE=:SUM_CHARGE,
         VIRTUAL=:VIRTUAL,
         VISIBLE=:VISIBLE
   WHERE CHARGE_TYPE_ID=:OLD_CHARGE_TYPE_ID;
END

--

CREATE OR ALTER VIEW S_CLIENTS
(
    CLIENT_ID,
    CLIENT_GROUP_ID,
    CALC_ID,
    SOURCE_ID,
    METHOD_ID,
    STREET_ID,
    HOUSE,
    FLAT,
    PORCH,
    "INDEX",
    ADDRESS_DESC,
    SEX,
    PASSPORT,
    DATE_BIRTH,
    PLACE_BIRTH,
    MIN_BALANCE,
    PHONE,
    DESCRIPTION,
    USER_NAME,
    "PASSWORD",
    DATE_CREATE,
    LOCKED,
    SURNAME,
    NAME,
    PATRONYMIC,
    FIRM_ID,
    JOB_TITLE,
    CLIENT_GROUP_NAME,
    CALC_NAME,
    SOURCE_NAME,
    METHOD_NAME,
    FIRM_SMALL_NAME,
    STREET_NAME,
    STREET_PREFIX,
    LOCALITY_ID,
    LOCALITY_NAME,
    LOCALITY_PREFIX
)
AS
SELECT C.*,
       A.PHONE,
       A.DESCRIPTION,
       A.USER_NAME,
       A."PASSWORD",
       A.DATE_CREATE,
       A.LOCKED,
       A.SURNAME,
       A.NAME,
       A.PATRONYMIC,
       A.FIRM_ID,
       A.JOB_TITLE,
       CG.NAME AS CLIENT_GROUP_NAME,
       CL.NAME AS CALC_NAME,
       S.NAME AS SOURCE_NAME,
       M.NAME AS METHOD_NAME,
       F.SMALL_NAME AS FIRM_SMALL_NAME,
       S1.NAME AS STREET_NAME,
       S1.PREFIX AS STREET_PREFIX,
       L1.LOCALITY_ID AS LOCALITY_ID,
       L1.NAME AS LOCALITY_NAME,
       L1.PREFIX AS LOCALITY_PREFIX
  FROM CLIENTS C
  JOIN ACCOUNTS A ON A.ACCOUNT_ID=C.CLIENT_ID
  LEFT JOIN CLIENT_GROUPS CG ON CG.CLIENT_GROUP_ID=C.CLIENT_GROUP_ID
  LEFT JOIN CALCS CL ON CL.CALC_ID=C.CALC_ID
  LEFT JOIN SOURCES S ON S.SOURCE_ID=C.SOURCE_ID
  LEFT JOIN METHODS M ON M.METHOD_ID=C.METHOD_ID
  LEFT JOIN FIRMS F ON F.FIRM_ID=A.FIRM_ID
  LEFT JOIN STREETS S1 ON S1.STREET_ID=C.STREET_ID
  LEFT JOIN LOCALITIES L1 ON L1.LOCALITY_ID=S1.LOCALITY_ID
 ORDER BY A.USER_NAME

--

CREATE OR ALTER VIEW S_DRIVERS
(
    DRIVER_ID,
    CALC_ID,
    CAR_ID,
    PHONE_HOME,
    LICENSE,
    CATEGORIES,
    INSURANCE,
    HEALTH_CERT,
    ADDICT_CERT,
    PASSPORT,
    PLACE_BIRTH,
    DATE_BIRTH,
    ADDRESS_RESIDENCE,
    ADDRESS_ACTUAL,
    MIN_BALANCE,
    PRIORITY,
    METHOD_ID,
    DATE_PRIORITY,
    MIN_HOURS,
    DATE_SCHEDULE,
    PHONE,
    DESCRIPTION,
    USER_NAME,
    DATE_CREATE,
    LOCKED,
    SURNAME,
    NAME,
    PATRONYMIC,
    FIRM_ID,
    CAR_STATE_NUM,
    CAR_BRAND,
    CAR_COLOR,
    CAR_CALLSIGN,
    CALC_NAME,
    METHOD_NAME,
    FIRM_SMALL_NAME
)
AS
SELECT D.*,
       A.PHONE,
       A.DESCRIPTION,
       A.USER_NAME,
       A.DATE_CREATE,
       A.LOCKED,
       A.SURNAME,
       A.NAME,
       A.PATRONYMIC,
       A.FIRM_ID,
       CR.STATE_NUM AS CAR_STATE_NUM,
       CR.BRAND AS CAR_BRAND,
       CR.COLOR AS CAR_COLOR,
       CR.CALLSIGN AS CAR_CALLSIGN,
       CL.NAME AS CALC_NAME,
       M.NAME AS METHOD_NAME,
       F.SMALL_NAME AS FIRM_SMALL_NAME
  FROM DRIVERS D
  JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
  JOIN CARS CR ON CR.CAR_ID=D.CAR_ID
  LEFT JOIN CALCS CL ON CL.CALC_ID=D.CALC_ID
  LEFT JOIN METHODS M ON M.METHOD_ID=D.METHOD_ID
  LEFT JOIN FIRMS F ON F.FIRM_ID=A.FIRM_ID
 ORDER BY A.SURNAME, A.NAME, A.PATRONYMIC

--

ALTER TABLE CALLS
ADD CALLER_DIVERSION VARCHAR(100)

--

CREATE OR ALTER VIEW S_CALLS
AS
SELECT C.CALL_ID,
       C.CALL_RESULT_ID,
       C.LINE_ID,
       C.DIRECTION,
       C.OPERATOR_ID,
       C.ORDER_ID,
       C.FIRM_ID,
       C.CREATOR_ID,
       C.DATE_CREATE,
       C.CALLER_ID,
       C.CALLER_PHONE,
       C.CALLER_DIVERSION,
       C.ACCEPTOR_ID,
       C.ACCEPTOR_PHONE,
       C.DATE_FOUND,
       C.DATE_BEGIN,
       C.DATE_END,
       C.TYPE_END,
       LOAD_BLOB('d:\audio\'||BLOB_TO_STRING(C.CALLER_AUDIO,1,32)) AS CALLER_AUDIO,
       LOAD_BLOB('d:\audio\'||BLOB_TO_STRING(C.ACCEPTOR_AUDIO,1,32)) AS ACCEPTOR_AUDIO,
       C.IN_CHANNEL,
       C.OUT_CHANNEL,
       CR.NAME AS CALL_RESULT_NAME,
       A1.USER_NAME AS CREATOR_USER_NAME,
       OP.NAME AS OPERATOR_NAME,
       A2.USER_NAME AS CALLER_USER_NAME,
       A2.SURNAME AS CALLER_SURNAME,
       A2.NAME AS CALLER_NAME,
       A2.PATRONYMIC AS CALLER_PATRONYMIC,
       A3.USER_NAME AS ACCEPTOR_USER_NAME,
       A3.SURNAME AS ACCEPTOR_SURNAME,
       A3.NAME AS ACCEPTOR_NAME,
       A3.PATRONYMIC AS ACCEPTOR_PATRONYMIC,
       F.SMALL_NAME AS FIRM_SMALL_NAME
  FROM CALLS C
  JOIN ACCOUNTS A1 ON A1.ACCOUNT_ID=C.CREATOR_ID
  LEFT JOIN CALL_RESULTS CR ON CR.CALL_RESULT_ID=C.CALL_RESULT_ID
  LEFT JOIN OPERATORS OP ON OP.OPERATOR_ID=C.OPERATOR_ID
  LEFT JOIN ACCOUNTS A2 ON A2.ACCOUNT_ID=C.CALLER_ID
  LEFT JOIN ACCOUNTS A3 ON A3.ACCOUNT_ID=C.ACCEPTOR_ID
  LEFT JOIN FIRMS F ON F.FIRM_ID=C.FIRM_ID
 ORDER BY C.DATE_CREATE DESC

--

CREATE OR ALTER PROCEDURE I_CALL
(
  CALL_ID VARCHAR(32),
  LINE_ID VARCHAR(32),
  DIRECTION INTEGER,
  OPERATOR_ID VARCHAR(32),
  CALL_RESULT_ID VARCHAR(32),
  FIRM_ID VARCHAR(32),
  CREATOR_ID VARCHAR(32),
  DATE_CREATE TIMESTAMP,
  CALLER_ID VARCHAR(32),
  CALLER_PHONE VARCHAR(100),
  CALLER_DIVERSION VARCHAR(100),
  ACCEPTOR_ID VARCHAR(32),
  ACCEPTOR_PHONE VARCHAR(100),
  DATE_FOUND TIMESTAMP,
  DATE_BEGIN TIMESTAMP,
  DATE_END TIMESTAMP,
  TYPE_END INTEGER,
  CALLER_AUDIO BLOB,
  ACCEPTOR_AUDIO BLOB,
  IN_CHANNEL VARCHAR(100),
  OUT_CHANNEL VARCHAR(100)
)
AS
DECLARE PATH VARCHAR(50) = 'd:\audio\';
DECLARE S VARCHAR(32);
DECLARE TEMP_CALLER_AUDIO BLOB;
DECLARE TEMP_ACCEPTOR_AUDIO BLOB;
BEGIN

  S=GET_UNIQUE_ID();
  TEMP_CALLER_AUDIO=NULL;
  IF (BLOB_LENGTH(CALLER_AUDIO)>0) THEN BEGIN
    IF (SAVE_BLOB(CALLER_AUDIO,PATH||S)=0) THEN
      TEMP_CALLER_AUDIO=STRING_TO_BLOB(S);
  END

  S=GET_UNIQUE_ID();
  TEMP_ACCEPTOR_AUDIO=NULL;
  IF (BLOB_LENGTH(ACCEPTOR_AUDIO)>0) THEN BEGIN
    IF (SAVE_BLOB(ACCEPTOR_AUDIO,PATH||S)=0) THEN
      TEMP_ACCEPTOR_AUDIO=STRING_TO_BLOB(S);
  END

  INSERT INTO CALLS (CALL_ID,LINE_ID,DIRECTION,OPERATOR_ID,CALL_RESULT_ID,
                     FIRM_ID,CREATOR_ID,DATE_CREATE,CALLER_ID,CALLER_PHONE,CALLER_DIVERSION,
                     ACCEPTOR_ID,ACCEPTOR_PHONE,DATE_FOUND,DATE_BEGIN,DATE_END,TYPE_END,
                     CALLER_AUDIO,ACCEPTOR_AUDIO,IN_CHANNEL,OUT_CHANNEL)
             VALUES (:CALL_ID,:LINE_ID,:DIRECTION,:OPERATOR_ID,:CALL_RESULT_ID,
                     :FIRM_ID,:CREATOR_ID,:DATE_CREATE,:CALLER_ID,:CALLER_PHONE,:CALLER_DIVERSION,
                     :ACCEPTOR_ID,:ACCEPTOR_PHONE,:DATE_FOUND,:DATE_BEGIN,:DATE_END,:TYPE_END,
                     :TEMP_CALLER_AUDIO,:TEMP_ACCEPTOR_AUDIO,:IN_CHANNEL,:OUT_CHANNEL);
END

--

CREATE OR ALTER PROCEDURE U_CALL
(
  CALL_ID VARCHAR(32),
  LINE_ID VARCHAR(32),
  DIRECTION INTEGER,
  OPERATOR_ID VARCHAR(32),
  CALL_RESULT_ID VARCHAR(32),
  FIRM_ID VARCHAR(32),
  CREATOR_ID VARCHAR(32),
  DATE_CREATE TIMESTAMP,
  CALLER_ID VARCHAR(32),
  CALLER_PHONE VARCHAR(100),
  CALLER_DIVERSION VARCHAR(100),
  ACCEPTOR_ID VARCHAR(32),
  ACCEPTOR_PHONE VARCHAR(100),
  DATE_FOUND TIMESTAMP,
  DATE_BEGIN TIMESTAMP,
  DATE_END TIMESTAMP,
  TYPE_END INTEGER,
  CALLER_AUDIO BLOB,
  ACCEPTOR_AUDIO BLOB,
  IN_CHANNEL VARCHAR(100),
  OUT_CHANNEL VARCHAR(100),
  OLD_CALL_ID VARCHAR(32)
)
AS
DECLARE PATH VARCHAR(50) = 'd:\audio\';
DECLARE S1 VARCHAR(32);
DECLARE S2 VARCHAR(32);
DECLARE TEMP_CALLER_AUDIO BLOB;
DECLARE TEMP_ACCEPTOR_AUDIO BLOB;
BEGIN

  SELECT FIRST 1
         BLOB_TO_STRING(C.CALLER_AUDIO,1,32),
         BLOB_TO_STRING(C.ACCEPTOR_AUDIO,1,32)
    FROM CALLS C
   WHERE CALL_ID=:OLD_CALL_ID
    INTO :S1, S2;

  IF ((S1 IS NULL) OR (S1='')) THEN
    S1=GET_UNIQUE_ID();

  TEMP_CALLER_AUDIO=NULL;
  IF (BLOB_LENGTH(CALLER_AUDIO)>0) THEN BEGIN
    IF (SAVE_BLOB(CALLER_AUDIO,PATH||S1)=0) THEN
      TEMP_CALLER_AUDIO=STRING_TO_BLOB(S1);
  END ELSE
    DELETE_FILE(PATH||S1);

  IF ((S2 IS NULL) OR (S2='')) THEN
    S2=GET_UNIQUE_ID();

  TEMP_ACCEPTOR_AUDIO=NULL;
  IF (BLOB_LENGTH(ACCEPTOR_AUDIO)>0) THEN BEGIN
    IF (SAVE_BLOB(ACCEPTOR_AUDIO,PATH||S2)=0) THEN
      TEMP_ACCEPTOR_AUDIO=STRING_TO_BLOB(S2);
  END ELSE
    DELETE_FILE(PATH||S2);

  UPDATE CALLS
     SET CALL_ID=:CALL_ID,
         LINE_ID=:LINE_ID,
         DIRECTION=:DIRECTION,
         OPERATOR_ID=:OPERATOR_ID,
         CALL_RESULT_ID=:CALL_RESULT_ID,
         FIRM_ID=:FIRM_ID,
         CREATOR_ID=:CREATOR_ID,
         DATE_CREATE=:DATE_CREATE,
         CALLER_ID=:CALLER_ID,
         CALLER_PHONE=:CALLER_PHONE,
         CALLER_DIVERSION=:CALLER_DIVERSION,
         ACCEPTOR_ID=:ACCEPTOR_ID,
         ACCEPTOR_PHONE=:ACCEPTOR_PHONE,
         DATE_FOUND=:DATE_FOUND,
         DATE_BEGIN=:DATE_BEGIN,
         DATE_END=:DATE_END,
         TYPE_END=:TYPE_END,
         CALLER_AUDIO=:TEMP_CALLER_AUDIO,
         ACCEPTOR_AUDIO=:TEMP_ACCEPTOR_AUDIO,
         IN_CHANNEL=:IN_CHANNEL,
         OUT_CHANNEL=:OUT_CHANNEL
   WHERE CALL_ID=:OLD_CALL_ID;
END;

--

CREATE OR ALTER PROCEDURE INCOMING_CALL_CHECK
(
  CALLER_PHONE VARCHAR(100),
  CALLER_DIVERSION VARCHAR(100),
  CHANNEL VARCHAR(100)
)
RETURNS (
  ACCOUNT_ID VARCHAR(32),
  PHONE VARCHAR(100),
  OPERATOR_ID VARCHAR(32),
  FIRM_ID VARCHAR(32),
  CHECKED INTEGER)
AS
DECLARE CNT INTEGER;
DECLARE RANGE_MIN BIGINT;
DECLARE RANGE_MAX BIGINT;
DECLARE PHONE_NUM BIGINT;
BEGIN
  CHECKED=0;

  IF (CHANNEL IS NOT NULL) THEN BEGIN

    FIRM_ID=NULL;

    IF (CHANNEL='CallServerSipChannel2026672') THEN

      FIRM_ID='C49DF004D660BBAF434839044848F5B8';

    IF (CHANNEL='CallServerSipChannel2904021') THEN

      FIRM_ID='81DCAB751C23A5C942A41C19FE3FC78E';

  END

  IF ((CALLER_PHONE IS NOT NULL) AND (CALLER_PHONE<>'Anonymous')) THEN BEGIN

    PHONE=CALLER_PHONE;

    EXECUTE PROCEDURE TRANSFORM_PHONE (PHONE)
     RETURNING_VALUES PHONE;

    EXECUTE PROCEDURE CONVERT_PHONE(PHONE,1)
     RETURNING_VALUES PHONE;

    EXECUTE PROCEDURE GET_OPERATOR (PHONE)
     RETURNING_VALUES OPERATOR_ID, RANGE_MIN, RANGE_MAX, PHONE_NUM;

    SELECT FIRST 1
           ACCOUNT_ID
      FROM ACCOUNTS
     WHERE PHONE=:PHONE
      INTO :ACCOUNT_ID;

    IF (ACCOUNT_ID IS NULL) THEN BEGIN

      SELECT FIRST 1
             CLIENT_ID
        FROM CLIENT_PHONES
       WHERE PHONE=:PHONE
        INTO :ACCOUNT_ID;

    END

    SELECT COUNT(*)
      FROM BLACKS
     WHERE PHONE=:PHONE
      INTO :CNT;

    IF (CNT=0) THEN BEGIN

      CHECKED=1;

    END

  END

END

--

CREATE OR ALTER PROCEDURE CALL_SET_ORDER_ID
(
  CALL_ID VARCHAR(32),
  ORDER_ID VARCHAR(32)
)
AS
BEGIN

   UPDATE CALLS
      SET ORDER_ID=:ORDER_ID
    WHERE CALL_ID=:CALL_ID;

END

--

CREATE OR ALTER PROCEDURE I_ORDER
(
  SESSION_ID VARCHAR(32),
  ORDER_ID VARCHAR(32),
  ACTION_ID VARCHAR(32),
  RATE_ID VARCHAR(32),
  CAR_TYPE_ID VARCHAR(32),
  WHO_ACCEPT_ID VARCHAR(32),
  STREET_ID VARCHAR(32),
  ZONE_ID VARCHAR(32),
  PARENT_ID VARCHAR(32),
  CAR_ID VARCHAR(32),
  WHO_PROCESS_ID VARCHAR(32),
  RESULT_ID VARCHAR(32),
  PARK_ID VARCHAR(32),
  SOURCE_ID VARCHAR(32),
  DISCOUNT_ID VARCHAR(32),
  DRIVER_ID VARCHAR(32),
  ORDER_NUM VARCHAR(10),
  PHONE VARCHAR(100),
  HOUSE VARCHAR(10),
  FLAT VARCHAR(10),
  PORCH VARCHAR(10),
  DATE_ACCEPT TIMESTAMP,
  DATE_ARRIVAL TIMESTAMP,
  DATE_BEGIN TIMESTAMP,
  DATE_END TIMESTAMP,
  CUSTOMER VARCHAR(250),
  DESCRIPTION VARCHAR(250),
  COST_RATE NUMERIC(15,2),
  COST_FACT NUMERIC(15,2),
  TYPE_ACCEPT INTEGER,
  TYPE_PROCESS INTEGER,
  DATE_HISTORY TIMESTAMP,
  WHO_HISTORY_ID VARCHAR(32),
  BEFORE_PERIOD INTEGER,
  FINISHED INTEGER,
  LOCKED VARCHAR(32),
  CLIENT_ID VARCHAR(32),
  COST_GROSS NUMERIC(15,2),
  FIRM_ID VARCHAR(32)
)
AS
BEGIN

  INSERT INTO ORDERS (ORDER_ID,ACTION_ID,RATE_ID,CAR_TYPE_ID,WHO_ACCEPT_ID,
                      STREET_ID,ZONE_ID,PARENT_ID,
                      CAR_ID,WHO_PROCESS_ID,RESULT_ID,PARK_ID,
                      SOURCE_ID,DISCOUNT_ID,DRIVER_ID,ORDER_NUM,PHONE,
                      HOUSE,FLAT,PORCH,
                      DATE_ACCEPT,DATE_ARRIVAL,DATE_BEGIN,DATE_END,CUSTOMER,
                      DESCRIPTION,COST_RATE,COST_FACT,TYPE_ACCEPT,
                      TYPE_PROCESS,DATE_HISTORY,WHO_HISTORY_ID,BEFORE_PERIOD,
                      FINISHED,LOCKED,CLIENT_ID,COST_GROSS,FIRM_ID)
              VALUES (:ORDER_ID,:ACTION_ID,:RATE_ID,:CAR_TYPE_ID,:WHO_ACCEPT_ID,
                      :STREET_ID,:ZONE_ID,:PARENT_ID,
                      :CAR_ID,:WHO_PROCESS_ID,:RESULT_ID,:PARK_ID,
                      :SOURCE_ID,:DISCOUNT_ID,:DRIVER_ID,:ORDER_NUM,:PHONE,
                      :HOUSE,:FLAT,:PORCH,
                      :DATE_ACCEPT,:DATE_ARRIVAL,:DATE_BEGIN,:DATE_END,:CUSTOMER,
                      :DESCRIPTION,:COST_RATE,:COST_FACT,:TYPE_ACCEPT,
                      :TYPE_PROCESS,:DATE_HISTORY,:WHO_HISTORY_ID,:BEFORE_PERIOD,
                      :FINISHED,:LOCKED,:CLIENT_ID,:COST_GROSS,:FIRM_ID);

END

--

CREATE OR ALTER PROCEDURE D_ORDER
(
  SESSION_ID VARCHAR(32),
  OLD_ORDER_ID VARCHAR(32)
)
AS
BEGIN
  UPDATE IN_MESSAGES
     SET ORDER_ID=NULL
   WHERE ORDER_ID IN (SELECT ORDER_ID FROM ORDERS
                            WHERE PARENT_ID=:OLD_ORDER_ID);

/*  DELETE FROM IN_MESSAGES
        WHERE ORDER_ID IN (SELECT ORDER_ID FROM ORDERS
                            WHERE PARENT_ID=:OLD_ORDER_ID);*/

  UPDATE OUT_MESSAGES
     SET ORDER_ID=NULL
   WHERE ORDER_ID IN (SELECT ORDER_ID FROM ORDERS
                            WHERE PARENT_ID=:OLD_ORDER_ID);

/*  DELETE FROM OUT_MESSAGES
        WHERE ORDER_ID IN (SELECT ORDER_ID FROM ORDERS
                            WHERE PARENT_ID=:OLD_ORDER_ID);*/

  UPDATE CALLS
     SET ORDER_ID=NULL
   WHERE ORDER_ID IN (SELECT ORDER_ID FROM ORDERS
                            WHERE PARENT_ID=:OLD_ORDER_ID);

/*  DELETE FROM CALLS
        WHERE ORDER_ID IN (SELECT ORDER_ID FROM ORDERS
                            WHERE PARENT_ID=:OLD_ORDER_ID);*/

  UPDATE CHARGES
     SET ORDER_ID=NULL
   WHERE ORDER_ID IN (SELECT ORDER_ID FROM ORDERS
                            WHERE PARENT_ID=:OLD_ORDER_ID);

/*  DELETE FROM CHARGES
        WHERE ORDER_ID IN (SELECT ORDER_ID FROM ORDERS
                            WHERE PARENT_ID=:OLD_ORDER_ID);*/

  UPDATE RECEIPTS
     SET ORDER_ID=NULL
   WHERE ORDER_ID IN (SELECT ORDER_ID FROM ORDERS
                            WHERE PARENT_ID=:OLD_ORDER_ID);

/*  DELETE FROM RECEIPTS
        WHERE ORDER_ID IN (SELECT ORDER_ID FROM ORDERS
                            WHERE PARENT_ID=:OLD_ORDER_ID);*/

  DELETE FROM ROUTES
        WHERE ORDER_ID IN (SELECT ORDER_ID FROM ORDERS
                            WHERE PARENT_ID=:OLD_ORDER_ID);

  DELETE FROM ORDER_SERVICES
        WHERE ORDER_ID IN (SELECT ORDER_ID FROM ORDERS
                            WHERE PARENT_ID=:OLD_ORDER_ID);

  DELETE FROM ORDERS
        WHERE PARENT_ID=:OLD_ORDER_ID;

  UPDATE IN_MESSAGES
     SET ORDER_ID=NULL
   WHERE ORDER_ID=:OLD_ORDER_ID;

/*  DELETE FROM IN_MESSAGES
        WHERE ORDER_ID=:OLD_ORDER_ID; */

  UPDATE OUT_MESSAGES
     SET ORDER_ID=NULL
   WHERE ORDER_ID=:OLD_ORDER_ID;

/*  DELETE FROM OUT_MESSAGES
        WHERE ORDER_ID=:OLD_ORDER_ID;*/

  UPDATE CALLS
     SET ORDER_ID=NULL
   WHERE ORDER_ID=:OLD_ORDER_ID;

/*  DELETE FROM CALLS
        WHERE ORDER_ID=:OLD_ORDER_ID;*/

  UPDATE CHARGES
     SET ORDER_ID=NULL
   WHERE ORDER_ID=:OLD_ORDER_ID;

/*  DELETE FROM CHARGES
        WHERE ORDER_ID=:OLD_ORDER_ID;*/

  UPDATE RECEIPTS
     SET ORDER_ID=NULL
   WHERE ORDER_ID=:OLD_ORDER_ID;

/*  DELETE FROM RECEIPTS
        WHERE ORDER_ID=:OLD_ORDER_ID;*/

  DELETE FROM ROUTES
        WHERE ORDER_ID=:OLD_ORDER_ID;

  DELETE FROM ORDER_SERVICES
        WHERE ORDER_ID=:OLD_ORDER_ID;

  DELETE FROM ORDERS
        WHERE ORDER_ID=:OLD_ORDER_ID;

END

--

CREATE OR ALTER PROCEDURE APPLY_CALL_RESULT
(
  CALL_ID VARCHAR(32),
  CALL_RESULT_ID VARCHAR(32)
)
AS
BEGIN

  UPDATE CALLS
     SET CALL_RESULT_ID=:CALL_RESULT_ID
   WHERE CALL_ID=:CALL_ID;

END

--

CREATE OR ALTER PROCEDURE EXCHANGE_AFTER
(
  MONTH_COUNT INTEGER,
  MODE INTEGER
)
AS
DECLARE DATE_TO TIMESTAMP;
BEGIN

  SELECT DATE_TO
    FROM GET_DATE_TO(:MONTH_COUNT)
    INTO :DATE_TO;

  IF (MODE=1) THEN BEGIN

    DELETE FROM RECEIPTS
          WHERE DATE_RECEIPT<:DATE_TO;

    DELETE FROM CHARGES
          WHERE DATE_CHARGE<:DATE_TO;

  END ELSE BEGIN

    DELETE FROM PARK_STATES
          WHERE DATE_IN<:DATE_TO;

    DELETE FROM SHIFTS
          WHERE DATE_BEGIN<:DATE_TO;

    DELETE FROM OUT_MESSAGES
          WHERE DATE_CREATE<:DATE_TO;

    DELETE FROM IN_MESSAGES
          WHERE DATE_SEND<:DATE_TO;

    DELETE FROM CALLS
          WHERE DATE_CREATE<:DATE_TO;

    DELETE FROM ROUTES
          WHERE ORDER_ID IN (SELECT ORDER_ID FROM ORDERS
                              WHERE DATE_ACCEPT<:DATE_TO);

    DELETE FROM ORDER_SERVICES
          WHERE ORDER_ID IN (SELECT ORDER_ID FROM ORDERS
                              WHERE DATE_ACCEPT<:DATE_TO);

    DELETE FROM ORDERS
          WHERE DATEADD(DAY,-3,DATE_ACCEPT)<:DATE_TO
            AND PARENT_ID IS NOT NULL
            AND ORDER_ID NOT IN (SELECT ORDER_ID FROM OUT_MESSAGES)
            AND ORDER_ID NOT IN (SELECT ORDER_ID FROM IN_MESSAGES)
            AND ORDER_ID NOT IN (SELECT ORDER_ID FROM CALLS)
            AND ORDER_ID NOT IN (SELECT ORDER_ID FROM CHARGES)
            AND ORDER_ID NOT IN (SELECT ORDER_ID FROM RECEIPTS);


    DELETE FROM ORDERS
          WHERE DATEADD(DAY,-3,DATE_ACCEPT)<:DATE_TO
            AND PARENT_ID IS NULL
            AND ORDER_ID NOT IN (SELECT ORDER_ID FROM OUT_MESSAGES)
            AND ORDER_ID NOT IN (SELECT ORDER_ID FROM IN_MESSAGES)
            AND ORDER_ID NOT IN (SELECT ORDER_ID FROM CALLS)
            AND ORDER_ID NOT IN (SELECT ORDER_ID FROM CHARGES)
            AND ORDER_ID NOT IN (SELECT ORDER_ID FROM RECEIPTS);

  END

END

--

CREATE OR ALTER PROCEDURE GET_ACCOUNT_BALANCE
(
  ACCOUNT_ID VARCHAR(32)
)
RETURNS
(
  SUM_CHARGE NUMERIC(15,2),
  SUM_RECEIPT NUMERIC(15,2),
  BALANCE NUMERIC(15,2)
)
AS
BEGIN

  SELECT SUM(C.SUM_CHARGE)
    FROM CHARGES C
    JOIN CHARGE_TYPES CT ON CT.CHARGE_TYPE_ID=C.CHARGE_TYPE_ID
   WHERE C.ACCOUNT_ID=:ACCOUNT_ID
     AND CT.VIRTUAL=0
    INTO :SUM_CHARGE;

  IF (SUM_CHARGE IS NULL) THEN
    SUM_CHARGE=0.0;

  SELECT SUM(R.SUM_RECEIPT)
    FROM RECEIPTS R
    JOIN RECEIPT_TYPES RT ON RT.RECEIPT_TYPE_ID=R.RECEIPT_TYPE_ID
   WHERE R.ACCOUNT_ID=:ACCOUNT_ID
     AND RT.VIRTUAL=0
    INTO :SUM_RECEIPT;

  IF (SUM_RECEIPT IS NULL) THEN
    SUM_RECEIPT=0.0;

  BALANCE=SUM_RECEIPT-SUM_CHARGE;
END

--

CREATE OR ALTER PROCEDURE GET_CLIENT_BY_USER_NAME
(
   USER_NAME VARCHAR(100)
)
RETURNS
(
  CLIENT_ID VARCHAR(32),
  PHONE VARCHAR(100),
  BALANCE NUMERIC(15,2),
  SURNAME VARCHAR(100),
  NAME VARCHAR(100),
  PATRONYMIC VARCHAR(100),
  FIRM_SMALL_NAME VARCHAR(100),
  JOB_TITLE VARCHAR(100),
  LOCALITY_ID VARCHAR(32),
  LOCALITY_PREFIX VARCHAR(10),
  LOCALITY_NAME VARCHAR(100),
  STREET_ID VARCHAR(32),
  STREET_PREFIX VARCHAR(10),
  STREET_NAME VARCHAR(100),
  HOUSE VARCHAR(10),
  FLAT VARCHAR(10),
  PORCH VARCHAR(10),
  ADDRESS_DESC VARCHAR(250)
)
AS
  DECLARE SUM_CHARGE NUMERIC(15,2);
  DECLARE SUM_RECEIPT NUMERIC(15,2);
BEGIN

  SELECT FIRST 1
         C.CLIENT_ID, A.PHONE, A.SURNAME, A.NAME, A.PATRONYMIC,
         F.SMALL_NAME, A.JOB_TITLE, L.LOCALITY_ID, L.PREFIX, L.NAME,
         S.STREET_ID, S.PREFIX, S.NAME, C.HOUSE, C.FLAT, C.PORCH, C.ADDRESS_DESC
    FROM CLIENTS C
    JOIN ACCOUNTS A ON A.ACCOUNT_ID=C.CLIENT_ID
    LEFT JOIN FIRMS F ON F.FIRM_ID=A.FIRM_ID
    LEFT JOIN STREETS S ON S.STREET_ID=C.STREET_ID
    LEFT JOIN LOCALITIES L ON L.LOCALITY_ID=S.LOCALITY_ID
   WHERE UPPER(A.USER_NAME)=UPPER(:USER_NAME)
     AND A.LOCKED<>1
    INTO :CLIENT_ID, :PHONE, :SURNAME, :NAME, :PATRONYMIC,
         :FIRM_SMALL_NAME, :JOB_TITLE, :LOCALITY_ID, :LOCALITY_PREFIX, :LOCALITY_NAME,
         :STREET_ID, :STREET_PREFIX, :STREET_NAME, :HOUSE, :FLAT, :PORCH, :ADDRESS_DESC;

  IF (CLIENT_ID IS NOT NULL) THEN BEGIN

    EXECUTE PROCEDURE GET_ACCOUNT_BALANCE(CLIENT_ID)
     RETURNING_VALUES SUM_CHARGE, SUM_RECEIPT, BALANCE;

  END

END

--

CREATE OR ALTER PROCEDURE GET_CLIENT_BY_PHONE
(
  PHONE VARCHAR(100)
)
RETURNS
(
  CLIENT_ID VARCHAR(32),
  USER_NAME VARCHAR(100),
  BALANCE NUMERIC(15,2),
  SURNAME VARCHAR(100),
  NAME VARCHAR(100),
  PATRONYMIC VARCHAR(100),
  FIRM_SMALL_NAME VARCHAR(100),
  JOB_TITLE VARCHAR(100),
  LOCALITY_ID VARCHAR(32),
  LOCALITY_PREFIX VARCHAR(10),
  LOCALITY_NAME VARCHAR(100),
  STREET_ID VARCHAR(32),
  STREET_PREFIX VARCHAR(10),
  STREET_NAME VARCHAR(100),
  HOUSE VARCHAR(10),
  FLAT VARCHAR(10),
  PORCH VARCHAR(10),
  ADDRESS_DESC VARCHAR(250)
)
AS
  DECLARE SUM_CHARGE NUMERIC(15,2);
  DECLARE SUM_RECEIPT NUMERIC(15,2);
BEGIN

  SELECT FIRST 1
         C.CLIENT_ID, A.USER_NAME, A.SURNAME, A.NAME, A.PATRONYMIC,
         F.SMALL_NAME, A.JOB_TITLE, L.LOCALITY_ID, L.PREFIX, L.NAME,
         S.STREET_ID, S.PREFIX, S.NAME, C.HOUSE, C.FLAT, C.PORCH, C.ADDRESS_DESC
    FROM CLIENTS C
    JOIN ACCOUNTS A ON A.ACCOUNT_ID=C.CLIENT_ID
    LEFT JOIN FIRMS F ON F.FIRM_ID=A.FIRM_ID
    LEFT JOIN STREETS S ON S.STREET_ID=C.STREET_ID
    LEFT JOIN LOCALITIES L ON L.LOCALITY_ID=S.LOCALITY_ID
   WHERE UPPER(A.PHONE)=UPPER(:PHONE)
     AND A.LOCKED<>1
    INTO :CLIENT_ID, :USER_NAME, :SURNAME, :NAME, :PATRONYMIC,
         :FIRM_SMALL_NAME, :JOB_TITLE, :LOCALITY_ID, :LOCALITY_PREFIX, :LOCALITY_NAME,
         :STREET_ID, :STREET_PREFIX, :STREET_NAME, :HOUSE, :FLAT, :PORCH, :ADDRESS_DESC;
                                 
  IF (CLIENT_ID IS NULL) THEN BEGIN

    SELECT FIRST 1
           C.CLIENT_ID, A.USER_NAME, A.SURNAME, A.NAME, A.PATRONYMIC,
           F.SMALL_NAME, A.JOB_TITLE, L.LOCALITY_ID, L.PREFIX, L.NAME,
           S.STREET_ID, S.PREFIX, S.NAME, C.HOUSE, C.FLAT, C.PORCH, C.ADDRESS_DESC
      FROM CLIENT_PHONES CP
      JOIN CLIENTS C ON C.CLIENT_ID=CP.CLIENT_ID
      JOIN ACCOUNTS A ON A.ACCOUNT_ID=C.CLIENT_ID
      LEFT JOIN FIRMS F ON F.FIRM_ID=A.FIRM_ID
      LEFT JOIN STREETS S ON S.STREET_ID=C.STREET_ID
      LEFT JOIN LOCALITIES L ON L.LOCALITY_ID=S.LOCALITY_ID
     WHERE UPPER(CP.PHONE)=UPPER(:PHONE)
       AND A.LOCKED<>1
      INTO :CLIENT_ID, :USER_NAME, :SURNAME, :NAME, :PATRONYMIC,
           :FIRM_SMALL_NAME, :JOB_TITLE, :LOCALITY_ID, :LOCALITY_PREFIX, :LOCALITY_NAME,
           :STREET_ID, :STREET_PREFIX, :STREET_NAME, :HOUSE, :FLAT, :PORCH, :ADDRESS_DESC;

  END

  IF (CLIENT_ID IS NOT NULL) THEN BEGIN

    EXECUTE PROCEDURE GET_ACCOUNT_BALANCE(CLIENT_ID)
     RETURNING_VALUES SUM_CHARGE, SUM_RECEIPT, BALANCE;

  END

END

--



