/* Создание таблицы заданий */

CREATE TABLE /*PREFIX*/TASKS
(
  TASK_ID VARCHAR(32) NOT NULL,
  APPLICATION_ID VARCHAR(32) NOT NULL,
  ACCOUNT_ID VARCHAR(32),
  INTERFACE_ID VARCHAR(32),
  NAME VARCHAR(100) NOT NULL,
  DESCRIPTION VARCHAR(250),
  DATE_BEGIN TIMESTAMP NOT NULL,
  DATE_END TIMESTAMP,
  SCHEDULE INTEGER NOT NULL,
  PRIORITY INTEGER NOT NULL,
  ENABLED INTEGER NOT NULL,
  PROC_NAME VARCHAR(100),
  COMMAND_STRING VARCHAR(250),
  REPEAT_ENABLED INTEGER NOT NULL,
  REPEAT_TYPE INTEGER,
  REPEAT_VALUE INTEGER,
  REPEAT_COUNT INTEGER,
  DAY_FREQUENCY INTEGER,
  WEEK_FREQUENCY INTEGER,
  MONDAY INTEGER NOT NULL,
  TUESDAY INTEGER NOT NULL,
  WEDNESDAY INTEGER NOT NULL,
  THURSDAY INTEGER NOT NULL,
  FRIDAY INTEGER NOT NULL,
  SATURDAY INTEGER NOT NULL,
  SUNDAY INTEGER NOT NULL,
  MONTH_DAY INTEGER,
  JANUARY INTEGER NOT NULL,
  FEBRUARY INTEGER NOT NULL,
  MARCH INTEGER NOT NULL,
  APRIL INTEGER NOT NULL,
  MAY INTEGER NOT NULL,
  JUNE INTEGER NOT NULL,
  JULY INTEGER NOT NULL,
  AUGUST INTEGER NOT NULL,
  SEPTEMBER INTEGER NOT NULL,
  OCTOBER INTEGER NOT NULL,
  NOVEMBER INTEGER NOT NULL,
  DECEMBER INTEGER NOT NULL,
  DATE_EXECUTE TIMESTAMP,
  RESULT_STRING VARCHAR(250),
  PRIMARY KEY (TASK_ID),
  FOREIGN KEY (APPLICATION_ID) REFERENCES /*PREFIX*/APPLICATIONS (APPLICATION_ID),
  FOREIGN KEY (ACCOUNT_ID) REFERENCES /*PREFIX*/ACCOUNTS (ACCOUNT_ID),
  FOREIGN KEY (INTERFACE_ID) REFERENCES /*PREFIX*/INTERFACES (INTERFACE_ID)
)

--

/* Создание просмотра таблицы заданий */

CREATE VIEW /*PREFIX*/S_TASKS
(
  TASK_ID,
  APPLICATION_ID,
  ACCOUNT_ID,
  INTERFACE_ID,
  NAME,
  DESCRIPTION,
  DATE_BEGIN,
  DATE_END,
  SCHEDULE,
  PRIORITY,
  ENABLED,
  PROC_NAME,
  COMMAND_STRING,
  REPEAT_ENABLED,
  REPEAT_TYPE,
  REPEAT_VALUE,
  REPEAT_COUNT,
  DAY_FREQUENCY,
  WEEK_FREQUENCY,
  MONDAY,
  TUESDAY,
  WEDNESDAY,
  THURSDAY,
  FRIDAY,
  SATURDAY,
  SUNDAY,
  MONTH_DAY,
  JANUARY,
  FEBRUARY,
  MARCH,
  APRIL,
  MAY,
  JUNE,
  JULY,
  AUGUST,
  SEPTEMBER,
  OCTOBER,
  NOVEMBER,
  DECEMBER,
  DATE_EXECUTE,
  RESULT_STRING,
  APPLICATION_NAME,
  USER_NAME,
  INTERFACE_NAME
)
AS
  SELECT T.*,
         A.NAME AS APPLICATION_NAME,
         AC.USER_NAME,
         I.NAME AS INTERFACE_NAME
    FROM /*PREFIX*/TASKS T
    JOIN /*PREFIX*/APPLICATIONS A ON A.APPLICATION_ID=T.APPLICATION_ID
    LEFT JOIN /*PREFIX*/ACCOUNTS AC ON AC.ACCOUNT_ID=T.ACCOUNT_ID
    LEFT JOIN /*PREFIX*/INTERFACES I ON I.INTERFACE_ID=T.INTERFACE_ID

--

/* Создание процедуры добавления задания */

CREATE OR ALTER PROCEDURE /*PREFIX*/I_TASK
(
  TASK_ID VARCHAR(32),
  APPLICATION_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32),
  INTERFACE_ID VARCHAR(32),
  NAME VARCHAR(100),
  DESCRIPTION VARCHAR(250),
  DATE_BEGIN TIMESTAMP,
  DATE_END TIMESTAMP,
  SCHEDULE INTEGER,
  PRIORITY INTEGER,
  ENABLED INTEGER,
  PROC_NAME VARCHAR(100),
  COMMAND_STRING VARCHAR(250),
  REPEAT_ENABLED INTEGER,
  REPEAT_TYPE INTEGER,
  REPEAT_VALUE INTEGER,
  REPEAT_COUNT INTEGER,
  DAY_FREQUENCY INTEGER,
  WEEK_FREQUENCY INTEGER,
  MONDAY INTEGER,
  TUESDAY INTEGER,
  WEDNESDAY INTEGER,
  THURSDAY INTEGER,
  FRIDAY INTEGER,
  SATURDAY INTEGER,
  SUNDAY INTEGER,
  MONTH_DAY INTEGER,
  JANUARY INTEGER,
  FEBRUARY INTEGER,
  MARCH INTEGER,
  APRIL INTEGER,
  MAY INTEGER,
  JUNE INTEGER,
  JULY INTEGER,
  AUGUST INTEGER,
  SEPTEMBER INTEGER,
  OCTOBER INTEGER,
  NOVEMBER INTEGER,
  DECEMBER INTEGER,
  DATE_EXECUTE TIMESTAMP,
  RESULT_STRING VARCHAR(250)
)
AS
BEGIN
  INSERT INTO /*PREFIX*/TASKS (TASK_ID,APPLICATION_ID,ACCOUNT_ID,INTERFACE_ID,NAME,DESCRIPTION,DATE_BEGIN,
                               DATE_END,SCHEDULE,PRIORITY,ENABLED,PROC_NAME,COMMAND_STRING,REPEAT_ENABLED,
                               REPEAT_TYPE,REPEAT_VALUE,REPEAT_COUNT,DAY_FREQUENCY,WEEK_FREQUENCY,
                               MONDAY,TUESDAY,WEDNESDAY,THURSDAY,FRIDAY,SATURDAY,SUNDAY,MONTH_DAY,
                               JANUARY,FEBRUARY,MARCH,APRIL,MAY,JUNE,JULY,AUGUST,SEPTEMBER,OCTOBER,NOVEMBER,DECEMBER,
                               DATE_EXECUTE,RESULT_STRING)
       VALUES (:TASK_ID,:APPLICATION_ID,:ACCOUNT_ID,:INTERFACE_ID,:NAME,:DESCRIPTION,:DATE_BEGIN,
               :DATE_END,:SCHEDULE,:PRIORITY,:ENABLED,:PROC_NAME,:COMMAND_STRING,:REPEAT_ENABLED,
               :REPEAT_TYPE,:REPEAT_VALUE,:REPEAT_COUNT,:DAY_FREQUENCY,:WEEK_FREQUENCY,
               :MONDAY,:TUESDAY,:WEDNESDAY,:THURSDAY,:FRIDAY,:SATURDAY,:SUNDAY,:MONTH_DAY,
               :JANUARY,:FEBRUARY,:MARCH,:APRIL,:MAY,:JUNE,:JULY,:AUGUST,:SEPTEMBER,:OCTOBER,:NOVEMBER,:DECEMBER,
               :DATE_EXECUTE,:RESULT_STRING);
END;

--

/* Создание процедуры изменения задания */

CREATE OR ALTER PROCEDURE /*PREFIX*/U_TASK
(
  TASK_ID VARCHAR(32),
  APPLICATION_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32),
  INTERFACE_ID VARCHAR(32),
  NAME VARCHAR(100),
  DESCRIPTION VARCHAR(250),
  DATE_BEGIN TIMESTAMP,
  DATE_END TIMESTAMP,
  SCHEDULE INTEGER,
  PRIORITY INTEGER,
  ENABLED INTEGER,
  PROC_NAME VARCHAR(100),
  COMMAND_STRING VARCHAR(250),
  REPEAT_ENABLED INTEGER,
  REPEAT_TYPE INTEGER,
  REPEAT_VALUE INTEGER,
  REPEAT_COUNT INTEGER,
  DAY_FREQUENCY INTEGER,
  WEEK_FREQUENCY INTEGER,
  MONDAY INTEGER,
  TUESDAY INTEGER,
  WEDNESDAY INTEGER,
  THURSDAY INTEGER,
  FRIDAY INTEGER,
  SATURDAY INTEGER,
  SUNDAY INTEGER,
  MONTH_DAY INTEGER,
  JANUARY INTEGER,
  FEBRUARY INTEGER,
  MARCH INTEGER,
  APRIL INTEGER,
  MAY INTEGER,
  JUNE INTEGER,
  JULY INTEGER,
  AUGUST INTEGER,
  SEPTEMBER INTEGER,
  OCTOBER INTEGER,
  NOVEMBER INTEGER,
  DECEMBER INTEGER,
  DATE_EXECUTE TIMESTAMP,
  RESULT_STRING VARCHAR(250),
  OLD_TASK_ID VARCHAR(32)
)
AS
BEGIN
  UPDATE /*PREFIX*/TASKS
     SET TASK_ID=:TASK_ID,
         APPLICATION_ID=:APPLICATION_ID,
         ACCOUNT_ID=:ACCOUNT_ID,
         INTERFACE_ID=:INTERFACE_ID,
         NAME=:NAME,
         DESCRIPTION=:DESCRIPTION,
         DATE_BEGIN=:DATE_BEGIN,
         DATE_END=:DATE_END,
         SCHEDULE=:SCHEDULE,
         PRIORITY=:PRIORITY,
         ENABLED=:ENABLED,
         PROC_NAME=:PROC_NAME,
         COMMAND_STRING=:COMMAND_STRING,
         REPEAT_ENABLED=:REPEAT_ENABLED,
         REPEAT_TYPE=:REPEAT_TYPE,
         REPEAT_VALUE=:REPEAT_VALUE,
         REPEAT_COUNT=:REPEAT_COUNT,
         DAY_FREQUENCY=:DAY_FREQUENCY,
         WEEK_FREQUENCY=:WEEK_FREQUENCY,
         MONDAY=:MONDAY,
         TUESDAY=:TUESDAY,
         WEDNESDAY=:WEDNESDAY,
         THURSDAY=:THURSDAY,
         FRIDAY=:FRIDAY,
         SATURDAY=:SATURDAY,
         SUNDAY=:SUNDAY,
         MONTH_DAY=:MONTH_DAY,
         JANUARY=:JANUARY,
         FEBRUARY=:FEBRUARY,
         MARCH=:MARCH,
         APRIL=:APRIL,
         MAY=:MAY,
         JUNE=:JUNE,
         JULY=:JULY,
         AUGUST=:AUGUST,
         SEPTEMBER=:SEPTEMBER,
         OCTOBER=:OCTOBER,
         NOVEMBER=:NOVEMBER,
         DECEMBER=:DECEMBER,
         DATE_EXECUTE=:DATE_EXECUTE,
         RESULT_STRING=:RESULT_STRING
   WHERE TASK_ID=:OLD_TASK_ID;
END;

--

/* Создание процедуры удаления задания */

CREATE OR ALTER PROCEDURE /*PREFIX*/D_TASK
(
  OLD_TASK_ID VARCHAR(32)
)
AS
BEGIN
  DELETE FROM /*PREFIX*/TASKS
        WHERE TASK_ID=:OLD_TASK_ID;
END;

--

/* Создание таблицы обмена */

CREATE TABLE /*PREFIX*/EXCHANGES
(
  EXCHANGE_ID VARCHAR(32) NOT NULL,
  NAME VARCHAR(100) NOT NULL,
  DESCRIPTION VARCHAR(250),
  SCRIPT BLOB,
  SOURCE VARCHAR(100) NOT NULL,
  SOURCE_BEFORE BLOB,
  SOURCE_AFTER BLOB,
  DESTINATION VARCHAR(100) NOT NULL,
  DESTINATION_BEFORE BLOB,
  DESTINATION_AFTER BLOB,
  PRIORITY INTEGER,
  ENABLED INTEGER NOT NULL,
  PRIMARY KEY (EXCHANGE_ID)
)

--

/* Создание просмотра таблицы обмена */

CREATE VIEW /*PREFIX*/S_EXCHANGES
AS
  SELECT *
    FROM /*PREFIX*/EXCHANGES

--

/* Создание процедуры добавления обмена */

CREATE OR ALTER PROCEDURE /*PREFIX*/I_EXCHANGE
(
  EXCHANGE_ID VARCHAR(32),
  NAME VARCHAR(100),
  DESCRIPTION VARCHAR(250),
  SCRIPT BLOB,
  SOURCE VARCHAR(100),
  SOURCE_BEFORE BLOB,
  SOURCE_AFTER BLOB,
  DESTINATION VARCHAR(100),
  DESTINATION_BEFORE BLOB,
  DESTINATION_AFTER BLOB,
  PRIORITY INTEGER,
  ENABLED INTEGER
)
AS
BEGIN
  INSERT INTO /*PREFIX*/EXCHANGES (EXCHANGE_ID,NAME,DESCRIPTION,SCRIPT,
                                   SOURCE,SOURCE_BEFORE,SOURCE_AFTER,
                                   DESTINATION,DESTINATION_BEFORE,DESTINATION_AFTER,
                                   PRIORITY,ENABLED)
       VALUES (:EXCHANGE_ID,:NAME,:DESCRIPTION,:SCRIPT,
               :SOURCE,:SOURCE_BEFORE,:SOURCE_AFTER,
               :DESTINATION,:DESTINATION_BEFORE,:DESTINATION_AFTER,
               :PRIORITY,:ENABLED);
END;

--

/* Создание процедуры изменения обмена */

CREATE OR ALTER PROCEDURE /*PREFIX*/U_EXCHANGE
(
  EXCHANGE_ID VARCHAR(32),
  NAME VARCHAR(100),
  DESCRIPTION VARCHAR(250),
  SCRIPT BLOB,
  SOURCE VARCHAR(100),
  SOURCE_BEFORE BLOB,
  SOURCE_AFTER BLOB,
  DESTINATION VARCHAR(100),
  DESTINATION_BEFORE BLOB,
  DESTINATION_AFTER BLOB,
  PRIORITY INTEGER,
  ENABLED INTEGER,
  OLD_EXCHANGE_ID VARCHAR(32)
)
AS
BEGIN
  UPDATE /*PREFIX*/EXCHANGES
     SET EXCHANGE_ID=:EXCHANGE_ID,
         NAME=:NAME,
         DESCRIPTION=:DESCRIPTION,
         SCRIPT=:SCRIPT,
         SOURCE=:SOURCE,
         SOURCE_BEFORE=:SOURCE_BEFORE,
         SOURCE_AFTER=:SOURCE_AFTER,
         DESTINATION=:DESTINATION,
         DESTINATION_BEFORE=:DESTINATION_BEFORE,
         DESTINATION_AFTER=:DESTINATION_AFTER,
         PRIORITY=:PRIORITY,
         ENABLED=:ENABLED
   WHERE EXCHANGE_ID=:OLD_EXCHANGE_ID;
END;

--

/* Создание процедуры удаления обмена */

CREATE OR ALTER PROCEDURE /*PREFIX*/D_EXCHANGE
(
  OLD_EXCHANGE_ID VARCHAR(32)
)
AS
BEGIN
  DELETE FROM /*PREFIX*/EXCHANGES
        WHERE EXCHANGE_ID=:OLD_EXCHANGE_ID;
END;

--

/* Создание процедуры получения статистики по розыгрышу */


CREATE OR ALTER PROCEDURE /*PREFIX*/GET_LOTTERY_STATISTICS
(
  TIRAGE_ID VARCHAR(32)
)
RETURNS
(
  ALL_COUNT INTEGER,
  USED_COUNT INTEGER,
  NOT_USED_COUNT INTEGER,
  PRIZE_SUM NUMERIC(15,2),
  JACKPOT_SUM NUMERIC(15,2),
  FIRST_ROUND_SUM NUMERIC(15,2),
  SECOND_ROUND_SUM NUMERIC(15,2),
  THIRD_ROUND_SUM NUMERIC(15,2),
  FOURTH_ROUND_SUM NUMERIC(15,2)
)
AS
  DECLARE TICKET_COST NUMERIC(15,2);
  DECLARE PRIZE_PERCENT NUMERIC(4,2);
  DECLARE JACKPOT_PERCENT NUMERIC(4,2);
  DECLARE FIRST_ROUND_PERCENT NUMERIC(4,2);
  DECLARE TEMP_SUM NUMERIC(15,2);
BEGIN

  SELECT TICKET_COST, PRIZE_PERCENT, JACKPOT_PERCENT,
         FIRST_ROUND_PERCENT, THIRD_ROUND_SUM, FOURTH_ROUND_SUM
    FROM /*PREFIX*/TIRAGES
   WHERE TIRAGE_ID=:TIRAGE_ID
    INTO :TICKET_COST, :PRIZE_PERCENT, :JACKPOT_PERCENT,
         :FIRST_ROUND_PERCENT, :THIRD_ROUND_SUM, :FOURTH_ROUND_SUM;

  SELECT COUNT(*)
    FROM /*PREFIX*/TICKETS
   WHERE TIRAGE_ID=:TIRAGE_ID
    INTO :ALL_COUNT;

  SELECT COUNT(*)
    FROM /*PREFIX*/TICKETS
   WHERE TIRAGE_ID=:TIRAGE_ID
     AND NOT_USED=1
    INTO :NOT_USED_COUNT;

  USED_COUNT=ALL_COUNT-NOT_USED_COUNT;

  PRIZE_SUM=(TICKET_COST*USED_COUNT)*PRIZE_PERCENT/100;
  JACKPOT_SUM=PRIZE_SUM*JACKPOT_PERCENT/100;

  IF (FOURTH_ROUND_SUM IS NULL) THEN
    FOURTH_ROUND_SUM=0.0;

  TEMP_SUM=PRIZE_SUM-FOURTH_ROUND_SUM;
  FIRST_ROUND_SUM=TEMP_SUM*FIRST_ROUND_PERCENT/100;
  SECOND_ROUND_SUM=TEMP_SUM-FIRST_ROUND_SUM-THIRD_ROUND_SUM;

END;

--

/* Создание процедуры получения статистики по тиражу */

CREATE OR ALTER PROCEDURE GET_TIRAGE_STATISTICS
(
  TIRAGE_ID VARCHAR(32),
  TICKET_COST NUMERIC(15,2),
  PRIZE_PERCENT NUMERIC(4,2),
  JACKPOT_PERCENT NUMERIC(4,2),
  FIRST_ROUND_PERCENT NUMERIC(4,2),
  THIRD_ROUND_SUM NUMERIC(15,2),
  FOURTH_ROUND_SUM NUMERIC(15,2)
)
RETURNS
(
  ALL_COUNT INTEGER,
  USED_COUNT INTEGER,
  NOT_USED_COUNT INTEGER,
  PRIZE_SUM NUMERIC(15,2),
  JACKPOT_SUM NUMERIC(15,2),
  FIRST_ROUND_SUM NUMERIC(15,2),
  SECOND_ROUND_SUM NUMERIC(15,2)
)
AS
DECLARE VARIABLE TEMP_SUM NUMERIC(15,2);
BEGIN

  SELECT COUNT(*)
    FROM /*PREFIX*/TICKETS
   WHERE TIRAGE_ID=:TIRAGE_ID
    INTO :ALL_COUNT;

  SELECT COUNT(*)
    FROM /*PREFIX*/TICKETS
   WHERE TIRAGE_ID=:TIRAGE_ID
     AND NOT_USED=1
    INTO :NOT_USED_COUNT;

  USED_COUNT=ALL_COUNT-NOT_USED_COUNT;

  PRIZE_SUM=(TICKET_COST*USED_COUNT)*PRIZE_PERCENT/100;
  JACKPOT_SUM=PRIZE_SUM*JACKPOT_PERCENT/100;

  IF (FOURTH_ROUND_SUM IS NULL) THEN
    FOURTH_ROUND_SUM=0.0;

  TEMP_SUM=PRIZE_SUM-FOURTH_ROUND_SUM;
  FIRST_ROUND_SUM=TEMP_SUM*FIRST_ROUND_PERCENT/100;
  SECOND_ROUND_SUM=TEMP_SUM-FIRST_ROUND_SUM-THIRD_ROUND_SUM;

END;

--

/* Создание процедуры получения протокола розыгрыша */

CREATE OR ALTER PROCEDURE /*PREFIX*/GET_PROTOCOL
(
  TIRAGE_ID VARCHAR(32)
)
RETURNS
(
  TICKET_ID VARCHAR(32),
  ROUND_NUM INTEGER,
  NUM VARCHAR(8),
  SERIES VARCHAR(5),
  PRIZE_ID VARCHAR(32),
  PRIZE_NAME VARCHAR(40),
  PRIZE_COST NUMERIC(15,2),
  SURNAME VARCHAR(100),
  NAME VARCHAR(100),
  PATRONYMIC VARCHAR(100),
  ADDRESS VARCHAR(250),
  PHONE VARCHAR(100)
)
AS
DECLARE ALL_COUNT INTEGER;
DECLARE USED_COUNT INTEGER;
DECLARE NOT_USED_COUNT INTEGER;
DECLARE PRIZE_SUM NUMERIC(15,2);
DECLARE JACKPOT_SUM NUMERIC(15,2);
DECLARE FIRST_ROUND_SUM NUMERIC(15,2);
DECLARE SECOND_ROUND_SUM NUMERIC(15,2);
DECLARE THIRD_ROUND_SUM NUMERIC(15,2);
DECLARE FOURTH_ROUND_SUM NUMERIC(15,2);
DECLARE TICKET_COUNT INTEGER;
BEGIN

  EXECUTE PROCEDURE /*PREFIX*/GET_LOTTERY_STATISTICS(:TIRAGE_ID)
   RETURNING_VALUES :ALL_COUNT,:USED_COUNT,:NOT_USED_COUNT,:PRIZE_SUM,
                    :JACKPOT_SUM,:FIRST_ROUND_SUM,:SECOND_ROUND_SUM,
                    :THIRD_ROUND_SUM,:FOURTH_ROUND_SUM;

  SELECT COUNT(*)
    FROM /*PREFIX*/GET_TICKET_LINES(:TIRAGE_ID,NULL,1,1)
    INTO :TICKET_COUNT;

  IF (TICKET_COUNT=0) THEN TICKET_COUNT=1;

  PRIZE_NAME='Денежный приз';
  PRIZE_COST=FIRST_ROUND_SUM/TICKET_COUNT;
  PRIZE_COST=CAST(PRIZE_COST AS NUMERIC(15,0));

  FOR SELECT TL.TICKET_ID,1,T.NUM,T.SERIES,
             NULL,:PRIZE_NAME,:PRIZE_COST,
             T.SURNAME,T.NAME,T.PATRONYMIC,T.ADDRESS,T.PHONE
        FROM /*PREFIX*/GET_TICKET_LINES(:TIRAGE_ID,NULL,1,1) TL
        JOIN /*PREFIX*/TICKETS T ON T.TICKET_ID=TL.TICKET_ID
        INTO :TICKET_ID,:ROUND_NUM,:NUM,:SERIES,
             :PRIZE_ID,:PRIZE_NAME,:PRIZE_COST,
             :SURNAME,:NAME,:PATRONYMIC,:ADDRESS,:PHONE DO BEGIN
    SUSPEND;
  END

  SELECT COUNT(*)
    FROM /*PREFIX*/GET_TICKET_LINE_COUNT(:TIRAGE_ID,NULL,2,1)
   WHERE LINE_COUNT>3
    INTO :TICKET_COUNT;

  IF (TICKET_COUNT=0) THEN TICKET_COUNT=1;

  PRIZE_NAME='Денежный приз';
  PRIZE_COST=SECOND_ROUND_SUM/TICKET_COUNT;
  PRIZE_COST=CAST(PRIZE_COST AS NUMERIC(15,0));

  FOR SELECT TL.TICKET_ID,2,T.NUM,T.SERIES,
             NULL,:PRIZE_NAME,:PRIZE_COST,
             T.SURNAME,T.NAME,T.PATRONYMIC,T.ADDRESS,T.PHONE
        FROM /*PREFIX*/GET_TICKET_LINE_COUNT(:TIRAGE_ID,NULL,2,1) TL
        JOIN /*PREFIX*/TICKETS T ON T.TICKET_ID=TL.TICKET_ID
       WHERE TL.LINE_COUNT>3
        INTO :TICKET_ID,:ROUND_NUM,:NUM,:SERIES,
             :PRIZE_ID,:PRIZE_NAME,:PRIZE_COST,
             :SURNAME,:NAME,:PATRONYMIC,:ADDRESS,:PHONE DO BEGIN
    SUSPEND;
  END

  FOR SELECT PRIZE_ID, NAME, COST
        FROM /*PREFIX*/PRIZES
       WHERE TIRAGE_ID=:TIRAGE_ID
         AND ROUND_NUM=3
       ORDER BY PRIORITY
        INTO :PRIZE_ID,:PRIZE_NAME,:PRIZE_COST DO BEGIN

    SELECT COUNT(*)
      FROM /*PREFIX*/GET_TICKET_SERIES(:TIRAGE_ID,:PRIZE_ID,3)
      INTO :TICKET_COUNT;

    IF (TICKET_COUNT=0) THEN TICKET_COUNT=1;

    PRIZE_COST=PRIZE_COST/TICKET_COUNT;
    PRIZE_COST=CAST(PRIZE_COST AS NUMERIC(15,0));

    FOR SELECT TL.TICKET_ID,3,T.NUM,T.SERIES,
               :PRIZE_ID,:PRIZE_NAME,:PRIZE_COST,
               T.SURNAME,T.NAME,T.PATRONYMIC,T.ADDRESS,T.PHONE
          FROM /*PREFIX*/GET_TICKET_SERIES(:TIRAGE_ID,:PRIZE_ID,3) TL
          JOIN /*PREFIX*/TICKETS T ON T.TICKET_ID=TL.TICKET_ID
          INTO :TICKET_ID,:ROUND_NUM,:NUM,:SERIES,
               :PRIZE_ID,:PRIZE_NAME,:PRIZE_COST,
               :SURNAME,:NAME,:PATRONYMIC,:ADDRESS,:PHONE DO BEGIN
      SUSPEND;
    END
  END

  SELECT COUNT(*)
    FROM /*PREFIX*/GET_TICKET_NUM(:TIRAGE_ID,NULL,4)
    INTO :TICKET_COUNT;

  IF (TICKET_COUNT=0) THEN TICKET_COUNT=1;

  PRIZE_NAME='Квартира';
  PRIZE_COST=FOURTH_ROUND_SUM/TICKET_COUNT;
  PRIZE_COST=CAST(PRIZE_COST AS NUMERIC(15,0));

  FOR SELECT TL.TICKET_ID,4,T.NUM,T.SERIES,
             NULL,:PRIZE_NAME,:PRIZE_COST,
             T.SURNAME,T.NAME,T.PATRONYMIC,T.ADDRESS,T.PHONE
        FROM /*PREFIX*/GET_TICKET_NUM(:TIRAGE_ID,NULL,4) TL
        JOIN /*PREFIX*/TICKETS T ON T.TICKET_ID=TL.TICKET_ID
        INTO :TICKET_ID,:ROUND_NUM,:NUM,:SERIES,
             :PRIZE_ID,:PRIZE_NAME,:PRIZE_COST,
             :SURNAME,:NAME,:PATRONYMIC,:ADDRESS,:PHONE DO BEGIN
    SUSPEND;
  END

END;

--

/* Фиксация изменений */

COMMIT