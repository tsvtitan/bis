unit BisScriptModules;

interface

uses Classes,
     BisObject, BisModules, BisScriptIface;

type
  TBisScriptModule=class;

  TBisScriptModuleInitProc=procedure (AModule: TBisScriptModule); stdcall;

  TBisScriptModule=class(TBisModule)
  private
    FInitProc: TBisScriptModuleInitProc;
    FScriptClass: TBisScriptClass;
  protected
    procedure DoInitProc(AModule: TBisModule); override;
  public
    property ScriptClass: TBisScriptClass read FScriptClass write FScriptClass; 
  end;

  TBisScriptModules=class(TBisModules)
  private
    function GetItems(Index: Integer): TBisScriptModule;
  protected
    function GetObjectClass: TBisObjectClass; override;
  public

    property Items[Index: Integer]: TBisScriptModule read GetItems;
  end;


implementation

uses Windows, SysUtils, 
     BisConsts, BisLogger, BisUtils;

{ TBisScriptModule }

procedure TBisScriptModule.DoInitProc(AModule: TBisModule);
begin
  @FInitProc:=GetProcAddress(Module,PChar(SInitScriptModule));
  if Assigned(@FInitProc) then begin
    try
      FInitProc(Self);
      LoggerWrite(FormatEx(SInitSuccess,[FileName]));
    except
      On E: Exception do begin
        LoggerWrite(FormatEx(SInitFailed,[FileName,E.Message]),ltError);
      end;
    end;
  end else begin
    LoggerWrite(FormatEx(SInitProcNotFound,[FileName]),ltError);
  end;
end;

{ TBisScriptModules }

function TBisScriptModules.GetItems(Index: Integer): TBisScriptModule;
begin
  Result:=TBisScriptModule(inherited Items[Index]);
end;

function TBisScriptModules.GetObjectClass: TBisObjectClass;
begin
  Result:=TBisScriptModule;
end;

end.
