// DO NOT EDIT THIS FILE - WARNING WARNING - Generated file
unit DBXStringEncoder;
interface
uses
  SysUtils;
type
  TDBXStringEncoder = class
  public
    constructor Create;
    function ExtractEncodeBuffer: TBytes;
    function Encode(const Source: WideString; Dest: TBytes; DestOff: Integer; MaxBytes: Integer; NullTerm: Boolean): Boolean;
    destructor Destroy; override;
  private
    procedure GrowEncodeBufTo(OldBuf: TBytes; NewLength: Integer);
  protected
    FEncodeLength: Integer;
    FEncodeBuf: TBytes;
    FEncodeOff: Integer;
    FReadOff: Integer;
  public
    property EncodeBuf: TBytes read FEncodeBuf;
    property EncodeOff: Integer read FEncodeOff;
  end;

implementation
uses
  DBXPlatform,
  DBXPlatformUtil;

constructor TDBXStringEncoder.Create;
begin
  inherited Create;
  FEncodeLength := -1;
end;

procedure TDBXStringEncoder.GrowEncodeBufTo(OldBuf: TBytes; NewLength: Integer);
begin
  if FEncodeLength < NewLength then
  begin
    FEncodeLength := NewLength;
    SetLength(FEncodeBuf,NewLength + 2);
  end;
  if OldBuf <> nil then
    TDBXPlatform.CopyByteArray(OldBuf, FReadOff, FEncodeBuf, 0, FEncodeOff + 1 - FReadOff);
  FEncodeOff := FEncodeOff - FReadOff;
  FReadOff := 0;
end;

function TDBXStringEncoder.ExtractEncodeBuffer: TBytes;
var
  Buffer: TBytes;
begin
  ;
  ;
  FEncodeLength := -1;
  FEncodeOff := 0;
  FReadOff := 0;
  Buffer := FEncodeBuf;
  FEncodeBuf := nil;
  Result := Buffer;
end;

function TDBXStringEncoder.Encode(const Source: WideString; Dest: TBytes; DestOff: Integer; MaxBytes: Integer; NullTerm: Boolean): Boolean;
var
  Len: Integer;
  OrgLen: Integer;
  Ch: WideChar;
  Off: Integer;
  NewSize: Integer;
begin
  FReadOff := DestOff;
  FEncodeOff := DestOff;
  Len := Length(Source);
  OrgLen := Len;
  if Len > MaxBytes then
  begin
    ;
    GrowEncodeBufTo(nil, Len);
    Dest := FEncodeBuf;
    MaxBytes := FEncodeLength;
  end;
  Decr(FEncodeOff);
  Incr(Len);
  Off := -1;
  while Decr(Len) > 0 do
  begin
    Off := Off + 1;
    Ch := Source[1+Off];
    if Ch > WideChar(254) then
    begin
//vs        int newSize = (length*2) + 1 + encodeOff;
      NewSize := OrgLen + Len + 1;
      if NewSize > MaxBytes then
      begin
        GrowEncodeBufTo(Dest, NewSize);
        Dest := FEncodeBuf;
      end;
      Dest[Incr(FEncodeOff)] := Byte(255);
      Len := Len + 1;
      Decr(Off);
      while Decr(Len) > 0 do
      begin
        Ch := Source[1+Incr(Off)];
        Dest[Incr(FEncodeOff)] := Byte((Ord(Ch) shr 8));
        Dest[Incr(FEncodeOff)] := Ord(Ch);
      end;
      if NullTerm then
      begin
        Dest[Incr(FEncodeOff)] := Byte(0);
        Dest[Incr(FEncodeOff)] := Byte(0);
      end;
      Incr(FEncodeOff);
      begin
        Result := Dest = FEncodeBuf;
        exit;
      end;
    end;
    ;
    FEncodeOff := FEncodeOff + 1;
    Dest[FEncodeOff] := Ord(Ch);
  end;
  if NullTerm then
    Dest[Incr(FEncodeOff)] := Byte(0);
  Incr(FEncodeOff);
  Result := Dest = FEncodeBuf;
end;

destructor TDBXStringEncoder.Destroy;
begin
  FEncodeBuf := nil;
  inherited Destroy;
end;

end.
