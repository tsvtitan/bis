
CREATE TABLE /*PREFIX*/CONSTS
(
  NAME VARCHAR(100) NOT NULL,
  DESCRIPTION VARCHAR(250),
  VALUE IMAGE NOT NULL,
  PRIMARY KEY (NAME)
)

--

CREATE VIEW /*PREFIX*/S_CONSTS
AS
SELECT * FROM /*PREFIX*/CONSTS

--

CREATE PROCEDURE /*PREFIX*/I_CONST
  @NAME VARCHAR(100),
  @DESCRIPTION VARCHAR(250),
  @VALUE IMAGE
AS
BEGIN
  INSERT INTO /*PREFIX*/CONSTS (NAME,DESCRIPTION,VALUE)
       VALUES (@NAME,@DESCRIPTION,@VALUE);
END;

--

CREATE PROCEDURE /*PREFIX*/U_CONST
  @NAME VARCHAR(100),
  @DESCRIPTION VARCHAR(250),
  @VALUE IMAGE,
  @OLD_NAME VARCHAR(100)
AS
BEGIN
  UPDATE /*PREFIX*/CONSTS
     SET NAME=@NAME,
         DESCRIPTION=@DESCRIPTION,
         VALUE=@VALUE
   WHERE NAME=@OLD_NAME;
END;

--

CREATE PROCEDURE /*PREFIX*/D_CONST
  @OLD_NAME VARCHAR(100)
AS
BEGIN
  DELETE FROM /*PREFIX*/CONSTS 
        WHERE NAME=@OLD_NAME;
END;

--

CREATE PROCEDURE /*PREFIX*/CALC_FIXED_ROUBLE
  @AGREEMENT_ID VARCHAR(32),
  @DATE_BEGIN DATETIME,
  @DATE_END DATETIME
AS
BEGIN
  SET NOCOUNT ON;
  
  DECLARE @DEBTOR_NUM VARCHAR(100),
          @DATE_DEBT DATETIME,
          @DEBTOR_NAME VARCHAR(300),
          @DEBT_PERIOD INTEGER,
          @AMOUNT_ARRIVAL FLOAT,
          @COST_SERVICE FLOAT,
          @FIXED_PART FLOAT,
          @VARIABLE_PART FLOAT,
          @AMOUNT_REMUNERATION FLOAT,
          @MAX_DATE DATETIME,
          @MIN_DATE DATETIME,
          @AMOUNT_BEFORE FLOAT;

  CREATE TABLE #CALC_FIXED_ROUBLE
  (
    DEBTOR_NUM VARCHAR(100),
    DATE_DEBT DATETIME,
    DEBTOR_NAME VARCHAR(300),
    DEBT_PERIOD INTEGER,
    AMOUNT_ARRIVAL FLOAT,
    COST_SERVICE FLOAT,
    FIXED_PART FLOAT,
    VARIABLE_PART FLOAT,
    AMOUNT_REMUNERATION FLOAT
  );
  
  SELECT @MIN_DATE=MIN(DATE_PAYMENT), @MAX_DATE=MAX(DATE_PAYMENT) 
    FROM /*PREFIX*/PAYMENTS
   WHERE STATE=1
     AND DEAL_ID IN (SELECT DEAL_ID FROM /*PREFIX*/DEALS 
                      WHERE AGREEMENT_ID=@AGREEMENT_ID
                        AND DATE_CLOSE IS NULL);

  IF (@DATE_BEGIN IS NOT NULL) SET @MIN_DATE=@DATE_BEGIN;

  IF (@DATE_END IS NOT NULL) SET @MAX_DATE=@DATE_END;

  DECLARE CUR CURSOR  
      FOR SELECT D.DEBTOR_NUM,
                 DATEADD(DAY,-D1.DEBT_PERIOD,CURRENT_TIMESTAMP) AS DATE_DEBT, 
                 DB.SURNAME+' '+DB.NAME+' '+DB.PATRONYMIC AS DEBTOR_NAME,
                 D1.DEBT_PERIOD AS DEBT_PERIOD,
                 (CASE 
                    WHEN P1.AMOUNT IS NULL THEN 0
                    ELSE P1.AMOUNT
                  END) AS AMOUNT_ARRIVAL,
                 (CASE 
                   WHEN D1.DEBT_PERIOD<=60 THEN 9
                   WHEN (D1.DEBT_PERIOD>60) AND (D1.DEBT_PERIOD<=90) THEN 12
                   WHEN (D1.DEBT_PERIOD>90) AND (D1.DEBT_PERIOD<=120) THEN 16
                   WHEN (D1.DEBT_PERIOD>120) AND (D1.DEBT_PERIOD<=180) THEN 20
                   ELSE 25
                  END) AS COST_SERVICE,
                 (CASE 
                    WHEN P2.AMOUNT IS NULL THEN 0
                    ELSE P2.AMOUNT
                  END) AS AMOUNT_BEFORE
  
            FROM /*PREFIX*/DEALS D
            JOIN /*PREFIX*/DEBTORS DB ON DB.DEBTOR_ID=D.DEBTOR_ID
            JOIN (SELECT DEAL_ID, ARREAR_PERIOD+DATEDIFF(DAY,DATE_ISSUE,CURRENT_TIMESTAMP) AS DEBT_PERIOD 
                    FROM /*PREFIX*/DEALS) AS D1 ON D1.DEAL_ID=D.DEAL_ID
            LEFT JOIN (SELECT DEAL_ID, SUM(AMOUNT) AS AMOUNT 
                         FROM /*PREFIX*/PAYMENTS 
                        WHERE STATE=1
                          AND DATE_PAYMENT>=@MIN_DATE 
                          AND DATE_PAYMENT<=@MAX_DATE 
                        GROUP BY DEAL_ID)AS P1 ON P1.DEAL_ID=D.DEAL_ID
            LEFT JOIN (SELECT DEAL_ID, SUM(AMOUNT) AS AMOUNT 
                         FROM /*PREFIX*/PAYMENTS 
                        WHERE STATE=1
                          AND DATE_PAYMENT<@MIN_DATE 
                        GROUP BY DEAL_ID)AS P2 ON P2.DEAL_ID=D.DEAL_ID
           WHERE D.AGREEMENT_ID=@AGREEMENT_ID
             AND D.DATE_CLOSE IS NULL 
      FOR READ ONLY;

  OPEN CUR;

  FETCH NEXT FROM CUR
  INTO @DEBTOR_NUM,@DATE_DEBT,@DEBTOR_NAME,@DEBT_PERIOD,@AMOUNT_ARRIVAL,
       @COST_SERVICE,@AMOUNT_BEFORE;

  WHILE @@FETCH_STATUS=0 BEGIN
    
    IF (@AMOUNT_ARRIVAL>0.0) BEGIN

      SET @FIXED_PART=0.0; 
     
      IF (@AMOUNT_ARRIVAL>=1000.0) AND (@AMOUNT_BEFORE<1000.0) BEGIN
        SET @FIXED_PART=300.0;   
      END;

      SET @VARIABLE_PART=@AMOUNT_ARRIVAL*@COST_SERVICE/100;

      SET @AMOUNT_REMUNERATION=@FIXED_PART+@VARIABLE_PART;

      INSERT INTO #CALC_FIXED_ROUBLE (DEBTOR_NUM,DATE_DEBT,DEBTOR_NAME,DEBT_PERIOD,AMOUNT_ARRIVAL,
                                      COST_SERVICE,FIXED_PART,VARIABLE_PART,AMOUNT_REMUNERATION)
           VALUES (@DEBTOR_NUM,@DATE_DEBT,@DEBTOR_NAME,@DEBT_PERIOD,@AMOUNT_ARRIVAL,
                   @COST_SERVICE,@FIXED_PART,@VARIABLE_PART,@AMOUNT_REMUNERATION);
    END;

    FETCH NEXT FROM CUR 
    INTO @DEBTOR_NUM,@DATE_DEBT,@DEBTOR_NAME,@DEBT_PERIOD,@AMOUNT_ARRIVAL,
         @COST_SERVICE,@AMOUNT_BEFORE;
  END;

  CLOSE CUR;
  DEALLOCATE CUR;

  SET NOCOUNT OFF;

  SELECT * FROM #CALC_FIXED_ROUBLE
   ORDER BY DEBTOR_NAME;

  DROP TABLE #CALC_FIXED_ROUBLE; 
END;

--

CREATE PROCEDURE /*PREFIX*/CALC_EFFICIENCY_ROUBLE
  @AGREEMENT_ID VARCHAR(32),
  @DATE_BEGIN DATETIME,
  @DATE_END DATETIME
AS
BEGIN
  SET NOCOUNT ON;
  
  DECLARE @DEBTOR_NUM VARCHAR(100),
          @DATE_DEBT DATETIME,
          @DEBTOR_NAME VARCHAR(300),
          @DEBT_PERIOD INTEGER,
          @AMOUNT_ARRIVAL FLOAT,
          @COST_SERVICE FLOAT,
          @FIXED_PART FLOAT,
          @VARIABLE_PART FLOAT,
          @AMOUNT_REMUNERATION FLOAT,
          @MAX_DATE DATETIME,
          @MIN_DATE DATETIME,
          @ACTIVE_BRIEFCASE FLOAT,
          @EFFICIENCY FLOAT;

  CREATE TABLE #CALC_EFFICIENCY_ROUBLE
  (
    DEBTOR_NUM VARCHAR(100),
    DATE_DEBT DATETIME,
    DEBTOR_NAME VARCHAR(300),
    DEBT_PERIOD INTEGER,
    AMOUNT_ARRIVAL FLOAT,
    COST_SERVICE FLOAT,
    FIXED_PART FLOAT,
    VARIABLE_PART FLOAT,
    AMOUNT_REMUNERATION FLOAT
  );
  
  SELECT @MIN_DATE=MIN(DATE_PAYMENT), @MAX_DATE=MAX(DATE_PAYMENT) 
    FROM /*PREFIX*/PAYMENTS
   WHERE STATE=1
     AND DEAL_ID IN (SELECT DEAL_ID FROM /*PREFIX*/DEALS 
                      WHERE AGREEMENT_ID=@AGREEMENT_ID
                        AND DATE_CLOSE IS NULL);

  IF (@DATE_BEGIN IS NOT NULL) SET @MIN_DATE=@DATE_BEGIN;

  IF (@DATE_END IS NOT NULL) SET @MAX_DATE=@DATE_END;

  SELECT @ACTIVE_BRIEFCASE=SUM(INITIAL_DEBT)  
    FROM /*PREFIX*/DEALS
   WHERE AGREEMENT_ID=@AGREEMENT_ID
     AND DATE_CLOSE IS NULL;

  SET @EFFICIENCY=0.0;
  
  IF (@ACTIVE_BRIEFCASE>0.0) BEGIN

    SELECT @EFFICIENCY=(SUM(P.AMOUNT)/@ACTIVE_BRIEFCASE*100)
      FROM (SELECT (CASE 
                      WHEN P1.AMOUNT IS NULL THEN 0
                      ELSE P1.AMOUNT
                    END) AS AMOUNT
              FROM /*PREFIX*/DEALS D  
              LEFT JOIN (SELECT DEAL_ID, SUM(AMOUNT) AS AMOUNT 
                           FROM /*PREFIX*/PAYMENTS 
                          WHERE STATE=1
                            AND DATE_PAYMENT>=@MIN_DATE 
                            AND DATE_PAYMENT<=@MAX_DATE 
                          GROUP BY DEAL_ID)AS P1 ON P1.DEAL_ID=D.DEAL_ID
             WHERE D.AGREEMENT_ID=@AGREEMENT_ID
               AND D.DATE_CLOSE IS NULL) P;
  END;

  DECLARE CUR CURSOR  
      FOR SELECT D.DEBTOR_NUM,
                 DATEADD(DAY,-D1.DEBT_PERIOD,CURRENT_TIMESTAMP) AS DATE_DEBT, 
                 DB.SURNAME+' '+DB.NAME+' '+DB.PATRONYMIC AS DEBTOR_NAME,
                 D1.DEBT_PERIOD AS DEBT_PERIOD,
                 (CASE 
                    WHEN P1.AMOUNT IS NULL THEN 0
                    ELSE P1.AMOUNT
                  END) AS AMOUNT_ARRIVAL,
                 (CASE
                    WHEN (@EFFICIENCY<5.0) THEN CASE 
                                                WHEN (D1.DEBT_PERIOD<90) THEN 0.0
                                                WHEN (D1.DEBT_PERIOD>=90) AND (D1.DEBT_PERIOD<=180) THEN 8.5
                                                WHEN (D1.DEBT_PERIOD>180) AND (D1.DEBT_PERIOD<=270) THEN 12.5
                                                WHEN (D1.DEBT_PERIOD>270) AND (D1.DEBT_PERIOD<=360) THEN 14.5
                                                ELSE 17.0
                                               END
                    WHEN (@EFFICIENCY>=5.0) 
                     AND (@EFFICIENCY<10.0) THEN CASE 
                                                WHEN (D1.DEBT_PERIOD<90) THEN 0.0
                                                WHEN (D1.DEBT_PERIOD>=90) AND (D1.DEBT_PERIOD<=180) THEN 12.5
                                                WHEN (D1.DEBT_PERIOD>180) AND (D1.DEBT_PERIOD<=270) THEN 14.5
                                                WHEN (D1.DEBT_PERIOD>270) AND (D1.DEBT_PERIOD<=360) THEN 17.0
                                                ELSE 20.0
                                               END
                    WHEN (@EFFICIENCY>=10.0) 
                     AND (@EFFICIENCY<15.0) THEN CASE 
                                                WHEN (D1.DEBT_PERIOD<90) THEN 0.0
                                                WHEN (D1.DEBT_PERIOD>=90) AND (D1.DEBT_PERIOD<=180) THEN 14.5
                                                WHEN (D1.DEBT_PERIOD>180) AND (D1.DEBT_PERIOD<=270) THEN 17.0
                                                WHEN (D1.DEBT_PERIOD>270) AND (D1.DEBT_PERIOD<=360) THEN 20.0
                                                ELSE 23.0
                                               END
                    WHEN (@EFFICIENCY>=15.0) THEN CASE 
                                                WHEN (D1.DEBT_PERIOD<90) THEN 0.0
                                                WHEN (D1.DEBT_PERIOD>=90) AND (D1.DEBT_PERIOD<=180) THEN 17.0
                                                WHEN (D1.DEBT_PERIOD>180) AND (D1.DEBT_PERIOD<=270) THEN 20.0
                                                WHEN (D1.DEBT_PERIOD>270) AND (D1.DEBT_PERIOD<=360) THEN 23.0
                                                ELSE 25.5
                                               END
                  END)AS COST_SERVICE
  
            FROM /*PREFIX*/DEALS D
            JOIN /*PREFIX*/DEBTORS DB ON DB.DEBTOR_ID=D.DEBTOR_ID
            JOIN (SELECT DEAL_ID, ARREAR_PERIOD+DATEDIFF(DAY,DATE_ISSUE,CURRENT_TIMESTAMP) AS DEBT_PERIOD 
                    FROM /*PREFIX*/DEALS) AS D1 ON D1.DEAL_ID=D.DEAL_ID
            LEFT JOIN (SELECT DEAL_ID, SUM(AMOUNT) AS AMOUNT 
                         FROM /*PREFIX*/PAYMENTS 
                        WHERE STATE=1
                          AND DATE_PAYMENT>=@MIN_DATE 
                          AND DATE_PAYMENT<=@MAX_DATE 
                        GROUP BY DEAL_ID)AS P1 ON P1.DEAL_ID=D.DEAL_ID
           WHERE D.AGREEMENT_ID=@AGREEMENT_ID
             AND D.DATE_CLOSE IS NULL 
      FOR READ ONLY;

  OPEN CUR;

  FETCH NEXT FROM CUR
  INTO @DEBTOR_NUM,@DATE_DEBT,@DEBTOR_NAME,@DEBT_PERIOD,@AMOUNT_ARRIVAL,
       @COST_SERVICE;

  WHILE @@FETCH_STATUS=0 BEGIN
    
    IF (@AMOUNT_ARRIVAL>0.0) BEGIN

      SET @FIXED_PART=0.0; 
     
      SET @VARIABLE_PART=@AMOUNT_ARRIVAL*@COST_SERVICE/100;

      SET @AMOUNT_REMUNERATION=@FIXED_PART+@VARIABLE_PART;

      INSERT INTO #CALC_EFFICIENCY_ROUBLE (DEBTOR_NUM,DATE_DEBT,DEBTOR_NAME,DEBT_PERIOD,AMOUNT_ARRIVAL,
                                           COST_SERVICE,FIXED_PART,VARIABLE_PART,AMOUNT_REMUNERATION)
           VALUES (@DEBTOR_NUM,@DATE_DEBT,@DEBTOR_NAME,@DEBT_PERIOD,@AMOUNT_ARRIVAL,
                   @COST_SERVICE,@FIXED_PART,@VARIABLE_PART,@AMOUNT_REMUNERATION);
    END;

    FETCH NEXT FROM CUR 
    INTO @DEBTOR_NUM,@DATE_DEBT,@DEBTOR_NAME,@DEBT_PERIOD,@AMOUNT_ARRIVAL,
         @COST_SERVICE;
  END;

  CLOSE CUR;
  DEALLOCATE CUR;

  SET NOCOUNT OFF;

  SELECT * FROM #CALC_EFFICIENCY_ROUBLE
   ORDER BY DEBTOR_NAME;

  DROP TABLE #CALC_EFFICIENCY_ROUBLE; 
END;

--

CREATE PROCEDURE /*PREFIX*/EXPENSESES_UPTIME
  @ACCOUNT_ID VARCHAR(32),
  @DATE_BEGIN DATETIME,
  @DATE_END DATETIME
AS
BEGIN
  DECLARE @MIN_DATE DATETIME,
          @MAX_DATE DATETIME;
 
  SELECT @MIN_DATE=MIN(CONVERT(DATETIME,CONVERT(VARCHAR(10),DATE_BEGIN,104),104)), 
         @MAX_DATE=MAX(CONVERT(DATETIME,CONVERT(VARCHAR(10),DATE_BEGIN,104),104)) 
    FROM /*PREFIX*/TASKS
   WHERE PERFORMER_ID=@ACCOUNT_ID
     AND RESULT_ID IS NOT NULL;

  IF (@DATE_BEGIN IS NOT NULL) SET @MIN_DATE=@DATE_BEGIN;

  IF (@DATE_END IS NOT NULL) SET @MAX_DATE=@DATE_END;

  SELECT T.DATE_WORK,
         T.DATE_BEGIN,
         T.DATE_END,
         DATEADD(SS,T.TIME_WORK,0) AS TIME_WORK,
         DATEADD(SS,DATEDIFF(SS,T.DATE_BEGIN,T.DATE_END)-T.TIME_WORK,0) AS TIME_INTERVAL,
         T.TASK_COUNT            
    FROM (SELECT CONVERT(DATETIME,CONVERT(VARCHAR(10),DATE_BEGIN,104),104) AS DATE_WORK,
                 MIN(T.DATE_BEGIN) AS DATE_BEGIN, 
                 MAX(T.DATE_END) AS DATE_END, 
                 SUM(DATEDIFF(SS,T.DATE_BEGIN,T.DATE_END)) AS TIME_WORK,
                 COUNT(*) AS TASK_COUNT
            FROM /*PREFIX*/TASKS T
           WHERE T.PERFORMER_ID=@ACCOUNT_ID
             AND T.RESULT_ID IS NOT NULL
             AND CONVERT(DATETIME,CONVERT(VARCHAR(10),DATE_BEGIN,104),104)>=@MIN_DATE
             AND CONVERT(DATETIME,CONVERT(VARCHAR(10),DATE_BEGIN,104),104)<=@MAX_DATE 
      GROUP BY CONVERT(DATETIME,CONVERT(VARCHAR(10),DATE_BEGIN,104),104)) T
   ORDER BY T.DATE_WORK;
END;

--

CREATE PROCEDURE /*PREFIX*/ANALYSIS_ACTIVITY
  @AGREEMENT_ID VARCHAR(32),
  @DATE_BEGIN DATETIME,
  @DATE_END DATETIME
AS
BEGIN
  DECLARE @MIN_DATE DATETIME,
          @MAX_DATE DATETIME;
 
  IF (@AGREEMENT_ID IS NOT NULL) BEGIN  
    SELECT @MIN_DATE=MIN(CONVERT(DATETIME,CONVERT(VARCHAR(10),T.DATE_BEGIN,104),104)), 
           @MAX_DATE=MAX(CONVERT(DATETIME,CONVERT(VARCHAR(10),T.DATE_BEGIN,104),104)) 
      FROM /*PREFIX*/TASKS T
      JOIN /*PREFIX*/DEALS D ON D.DEAL_ID=T.DEAL_ID
     WHERE T.RESULT_ID IS NOT NULL
       AND D.AGREEMENT_ID=@AGREEMENT_ID;
  END ELSE BEGIN
    SELECT @MIN_DATE=MIN(CONVERT(DATETIME,CONVERT(VARCHAR(10),T.DATE_BEGIN,104),104)), 
           @MAX_DATE=MAX(CONVERT(DATETIME,CONVERT(VARCHAR(10),T.DATE_BEGIN,104),104)) 
      FROM /*PREFIX*/TASKS T
     WHERE T.RESULT_ID IS NOT NULL;
  END;

  IF (@DATE_BEGIN IS NOT NULL) SET @MIN_DATE=@DATE_BEGIN;

  IF (@DATE_END IS NOT NULL) SET @MAX_DATE=@DATE_END;

  IF (@AGREEMENT_ID IS NOT NULL) BEGIN
    SELECT T.ACTION_ID,
           T.DATE_WORK,
           A.NAME AS ACTION_NAME,
           T.ACTION_COUNT
     FROM (SELECT T.ACTION_ID,  
                  CONVERT(DATETIME,CONVERT(VARCHAR(10),T.DATE_BEGIN,104),104) AS DATE_WORK,
                  COUNT(*) AS ACTION_COUNT
             FROM /*PREFIX*/TASKS T
             JOIN /*PREFIX*/DEALS D ON D.DEAL_ID=T.DEAL_ID
            WHERE T.RESULT_ID IS NOT NULL 
              AND CONVERT(DATETIME,CONVERT(VARCHAR(10),T.DATE_BEGIN,104),104)>=@MIN_DATE
              AND CONVERT(DATETIME,CONVERT(VARCHAR(10),T.DATE_BEGIN,104),104)<=@MAX_DATE          
              AND D.AGREEMENT_ID=@AGREEMENT_ID
            GROUP BY T.ACTION_ID, CONVERT(DATETIME,CONVERT(VARCHAR(10),T.DATE_BEGIN,104),104)) T
     JOIN ACTIONS A ON A.ACTION_ID=T.ACTION_ID
    ORDER BY T.DATE_WORK;
  END ELSE BEGIN
    SELECT T.ACTION_ID,
           T.DATE_WORK,
           A.NAME AS ACTION_NAME,
           T.ACTION_COUNT
     FROM (SELECT T.ACTION_ID,  
                  CONVERT(DATETIME,CONVERT(VARCHAR(10),T.DATE_BEGIN,104),104) AS DATE_WORK,
                  COUNT(*) AS ACTION_COUNT
             FROM /*PREFIX*/TASKS T
            WHERE T.RESULT_ID IS NOT NULL 
              AND CONVERT(DATETIME,CONVERT(VARCHAR(10),T.DATE_BEGIN,104),104)>=@MIN_DATE
              AND CONVERT(DATETIME,CONVERT(VARCHAR(10),T.DATE_BEGIN,104),104)<=@MAX_DATE          
            GROUP BY T.ACTION_ID, CONVERT(DATETIME,CONVERT(VARCHAR(10),T.DATE_BEGIN,104),104)) T
     JOIN ACTIONS A ON A.ACTION_ID=T.ACTION_ID
    ORDER BY T.DATE_WORK;
  END;
END;

--

CREATE PROCEDURE /*PREFIX*/FEATURE_DEBTOR
  @AGREEMENT_ID VARCHAR(32),
  @DATE_BEGIN DATETIME,
  @DATE_END DATETIME
AS
BEGIN
  DECLARE @MIN_DATE DATETIME,
          @MAX_DATE DATETIME;

  IF (@AGREEMENT_ID IS NOT NULL) BEGIN 
    SELECT @MIN_DATE=MIN(DATE_ISSUE), @MAX_DATE=MAX(DATE_ISSUE) 
      FROM /*PREFIX*/DEALS
     WHERE DATE_CLOSE IS NULL
       AND AGREEMENT_ID=@AGREEMENT_ID;
  END ELSE BEGIN
    SELECT @MIN_DATE=MIN(DATE_ISSUE), @MAX_DATE=MAX(DATE_ISSUE) 
      FROM /*PREFIX*/DEALS
     WHERE DATE_CLOSE IS NULL;
  END;

  IF (@DATE_BEGIN IS NOT NULL) SET @MIN_DATE=@DATE_BEGIN;

  IF (@DATE_END IS NOT NULL) SET @MAX_DATE=@DATE_END;

  IF (@AGREEMENT_ID IS NOT NULL) BEGIN
    SELECT DB.SEX,
           D1.DEAL_COUNT AS AGE_30,
           D2.DEAL_COUNT AS AGE_31_45,
           D3.DEAL_COUNT AS AGE_46_60,
           D4.DEAL_COUNT AS AGE_61, 
           COUNT(*) AS DEAL_COUNT
      FROM /*PREFIX*/DEALS D
      JOIN /*PREFIX*/DEBTORS DB ON DB.DEBTOR_ID=D.DEBTOR_ID
      LEFT JOIN (SELECT DB.SEX, COUNT(*) AS DEAL_COUNT
                   FROM /*PREFIX*/ DEALS D
                   JOIN /*PREFIX*/DEBTORS DB ON DB.DEBTOR_ID=D.DEBTOR_ID
                  WHERE DATEDIFF(YY,DB.DATE_BIRTH,CURRENT_TIMESTAMP)<30
                    AND D.AGREEMENT_ID=@AGREEMENT_ID
                    AND D.DATE_ISSUE>=@MIN_DATE 
                    AND D.DATE_ISSUE<=@MAX_DATE 
                  GROUP BY DB.SEX) D1 ON D1.SEX=DB.SEX
      LEFT JOIN (SELECT DB.SEX, COUNT(*) AS DEAL_COUNT
                   FROM /*PREFIX*/ DEALS D
                   JOIN /*PREFIX*/DEBTORS DB ON DB.DEBTOR_ID=D.DEBTOR_ID
                  WHERE DATEDIFF(YY,DB.DATE_BIRTH,CURRENT_TIMESTAMP)>=31
                    AND DATEDIFF(YY,DB.DATE_BIRTH,CURRENT_TIMESTAMP)<=45
                    AND D.AGREEMENT_ID=@AGREEMENT_ID
                    AND D.DATE_ISSUE>=@MIN_DATE 
                    AND D.DATE_ISSUE<=@MAX_DATE 
                  GROUP BY DB.SEX) D2 ON D2.SEX=DB.SEX
      LEFT JOIN (SELECT DB.SEX, COUNT(*) AS DEAL_COUNT
                   FROM /*PREFIX*/ DEALS D
                   JOIN /*PREFIX*/DEBTORS DB ON DB.DEBTOR_ID=D.DEBTOR_ID
                  WHERE DATEDIFF(YY,DB.DATE_BIRTH,CURRENT_TIMESTAMP)>=46
                    AND DATEDIFF(YY,DB.DATE_BIRTH,CURRENT_TIMESTAMP)<=60
                    AND D.AGREEMENT_ID=@AGREEMENT_ID
                    AND D.DATE_ISSUE>=@MIN_DATE 
                    AND D.DATE_ISSUE<=@MAX_DATE 
                  GROUP BY DB.SEX) D3 ON D3.SEX=DB.SEX
      LEFT JOIN (SELECT DB.SEX, COUNT(*) AS DEAL_COUNT
                   FROM /*PREFIX*/ DEALS D
                   JOIN /*PREFIX*/DEBTORS DB ON DB.DEBTOR_ID=D.DEBTOR_ID
                  WHERE DATEDIFF(YY,DB.DATE_BIRTH,CURRENT_TIMESTAMP)>=61
                    AND D.AGREEMENT_ID=@AGREEMENT_ID
                    AND D.DATE_ISSUE>=@MIN_DATE 
                    AND D.DATE_ISSUE<=@MAX_DATE 
                  GROUP BY DB.SEX) D4 ON D4.SEX=DB.SEX
     WHERE D.AGREEMENT_ID=@AGREEMENT_ID
       AND D.DATE_ISSUE>=@MIN_DATE 
       AND D.DATE_ISSUE<=@MAX_DATE  
     GROUP BY DB.SEX, D1.DEAL_COUNT, D2.DEAL_COUNT, D3.DEAL_COUNT, D4.DEAL_COUNT
     ORDER BY DB.SEX;
  END ELSE BEGIN
    SELECT DB.SEX,
           D1.DEAL_COUNT AS AGE_30,
           D2.DEAL_COUNT AS AGE_31_45,
           D3.DEAL_COUNT AS AGE_46_60,
           D4.DEAL_COUNT AS AGE_61, 
           COUNT(*) AS DEAL_COUNT
      FROM /*PREFIX*/DEALS D
      JOIN /*PREFIX*/DEBTORS DB ON DB.DEBTOR_ID=D.DEBTOR_ID
      LEFT JOIN (SELECT DB.SEX, COUNT(*) AS DEAL_COUNT
                   FROM /*PREFIX*/ DEALS D
                   JOIN /*PREFIX*/DEBTORS DB ON DB.DEBTOR_ID=D.DEBTOR_ID
                  WHERE DATEDIFF(YY,DB.DATE_BIRTH,CURRENT_TIMESTAMP)<30
                    AND D.DATE_ISSUE>=@MIN_DATE 
                    AND D.DATE_ISSUE<=@MAX_DATE 
                  GROUP BY DB.SEX) D1 ON D1.SEX=DB.SEX
      LEFT JOIN (SELECT DB.SEX, COUNT(*) AS DEAL_COUNT
                   FROM /*PREFIX*/ DEALS D
                   JOIN /*PREFIX*/DEBTORS DB ON DB.DEBTOR_ID=D.DEBTOR_ID
                  WHERE DATEDIFF(YY,DB.DATE_BIRTH,CURRENT_TIMESTAMP)>=31
                    AND DATEDIFF(YY,DB.DATE_BIRTH,CURRENT_TIMESTAMP)<=45
                    AND D.DATE_ISSUE>=@MIN_DATE 
                    AND D.DATE_ISSUE<=@MAX_DATE 
                  GROUP BY DB.SEX) D2 ON D2.SEX=DB.SEX
      LEFT JOIN (SELECT DB.SEX, COUNT(*) AS DEAL_COUNT
                   FROM /*PREFIX*/ DEALS D
                   JOIN /*PREFIX*/DEBTORS DB ON DB.DEBTOR_ID=D.DEBTOR_ID
                  WHERE DATEDIFF(YY,DB.DATE_BIRTH,CURRENT_TIMESTAMP)>=46
                    AND DATEDIFF(YY,DB.DATE_BIRTH,CURRENT_TIMESTAMP)<=60
                    AND D.DATE_ISSUE>=@MIN_DATE 
                    AND D.DATE_ISSUE<=@MAX_DATE 
                  GROUP BY DB.SEX) D3 ON D3.SEX=DB.SEX
      LEFT JOIN (SELECT DB.SEX, COUNT(*) AS DEAL_COUNT
                   FROM /*PREFIX*/ DEALS D
                   JOIN /*PREFIX*/DEBTORS DB ON DB.DEBTOR_ID=D.DEBTOR_ID
                  WHERE DATEDIFF(YY,DB.DATE_BIRTH,CURRENT_TIMESTAMP)>=61
                    AND D.DATE_ISSUE>=@MIN_DATE 
                    AND D.DATE_ISSUE<=@MAX_DATE 
                  GROUP BY DB.SEX) D4 ON D4.SEX=DB.SEX
     WHERE D.DATE_ISSUE>=@MIN_DATE 
       AND D.DATE_ISSUE<=@MAX_DATE  
     GROUP BY DB.SEX, D1.DEAL_COUNT, D2.DEAL_COUNT, D3.DEAL_COUNT, D4.DEAL_COUNT
     ORDER BY DB.SEX;
  END;  
END;

--

CREATE PROCEDURE /*PREFIX*/DISTRIBUTION_STATUS
  @AGREEMENT_ID VARCHAR(32),
  @DATE_BEGIN DATETIME,
  @DATE_END DATETIME
AS
BEGIN
  DECLARE @MIN_DATE DATETIME,
          @MAX_DATE DATETIME,
          @SQL NVARCHAR(2000),
          @STATUS_ID VARCHAR(32),
          @NAME VARCHAR(100),
          @CONDITION VARCHAR(250),
          @TABLE_NAME VARCHAR(100),
          @PRIORITY INTEGER,
          @STATUS_COUNT INTEGER,
          @FLAG INTEGER;

  IF (@AGREEMENT_ID IS NOT NULL) BEGIN 
    SELECT @MIN_DATE=MIN(DATE_ISSUE), @MAX_DATE=MAX(DATE_ISSUE) 
      FROM /*PREFIX*/DEALS
     WHERE DATE_CLOSE IS NULL
       AND AGREEMENT_ID=@AGREEMENT_ID;
  END ELSE BEGIN
    SELECT @MIN_DATE=MIN(DATE_ISSUE), @MAX_DATE=MAX(DATE_ISSUE) 
      FROM /*PREFIX*/DEALS
     WHERE DATE_CLOSE IS NULL;
  END;

  IF (@DATE_BEGIN IS NOT NULL) SET @MIN_DATE=@DATE_BEGIN;

  IF (@DATE_END IS NOT NULL) SET @MAX_DATE=@DATE_END;

  SET NOCOUNT ON;
  
  CREATE TABLE #DISTRIBUTION_STATUS
  (
    STATUS_ID VARCHAR(32),
    NAME VARCHAR(100),
    STATUS_COUNT INTEGER,
    PRIORITY INTEGER
  );

  DECLARE CUR CURSOR  
      FOR SELECT STATUS_ID,
                 NAME,
                 CONDITION,
                 TABLE_NAME,
                 PRIORITY
            FROM /*PREFIX*/STATUSES
           ORDER BY PRIORITY 
      FOR READ ONLY;

  OPEN CUR;

  FETCH NEXT FROM CUR
  INTO @STATUS_ID,@NAME,@CONDITION,@TABLE_NAME,@PRIORITY;

  WHILE @@FETCH_STATUS=0 BEGIN

    SET @STATUS_COUNT=0;
    SET @SQL=N'SELECT @CNT=COUNT(*) FROM '+@TABLE_NAME;    
    SET @FLAG=0;
    
    IF (@CONDITION IS NOT NULL) AND (RTRIM(LTRIM(@CONDITION))<>'') BEGIN
      SET @SQL=@SQL+' WHERE '+@CONDITION;      
      SET @FLAG=1;
    END;

    IF (@AGREEMENT_ID IS NOT NULL) BEGIN
      IF (@FLAG=0) BEGIN
        SET @SQL=@SQL+' WHERE AGREEMENT_ID='+QUOTENAME(@AGREEMENT_ID,'''');    
      END ELSE BEGIN
        SET @SQL=@SQL+' AND AGREEMENT_ID='+QUOTENAME(@AGREEMENT_ID,'''');    
      END;
    END;

    EXECUTE sp_executesql @SQL, N'@CNT INTEGER OUTPUT', @CNT=@STATUS_COUNT OUTPUT;
    
    INSERT INTO #DISTRIBUTION_STATUS (STATUS_ID,NAME,STATUS_COUNT,PRIORITY)
         VALUES (@STATUS_ID,@NAME,@STATUS_COUNT,@PRIORITY);

    FETCH NEXT FROM CUR 
    INTO @STATUS_ID,@NAME,@CONDITION,@TABLE_NAME,@PRIORITY;
  END;

  CLOSE CUR;
  DEALLOCATE CUR;

  SET NOCOUNT OFF;

  SELECT * FROM #DISTRIBUTION_STATUS
   ORDER BY PRIORITY;

  DROP TABLE #DISTRIBUTION_STATUS; 

END;

--

CREATE PROCEDURE /*PREFIX*/ANALYSIS_WORK_EMPLOYEE
  @ACCOUNT_ID VARCHAR(32),
  @DATE_BEGIN DATETIME,
  @DATE_END DATETIME
AS
BEGIN
  DECLARE @MIN_DATE DATETIME,
          @MAX_DATE DATETIME;

  IF (@ACCOUNT_ID IS NOT NULL) BEGIN
    SELECT @MIN_DATE=MIN(CONVERT(DATETIME,CONVERT(VARCHAR(10),DATE_BEGIN,104),104)), 
           @MAX_DATE=MAX(CONVERT(DATETIME,CONVERT(VARCHAR(10),DATE_BEGIN,104),104))
      FROM /*PREFIX*/TASKS
     WHERE PERFORMER_ID=@ACCOUNT_ID
       AND RESULT_ID IS NOT NULL;
  END ELSE BEGIN
    SELECT @MIN_DATE=MIN(CONVERT(DATETIME,CONVERT(VARCHAR(10),DATE_BEGIN,104),104)), 
           @MAX_DATE=MAX(CONVERT(DATETIME,CONVERT(VARCHAR(10),DATE_BEGIN,104),104))
      FROM /*PREFIX*/TASKS
     WHERE RESULT_ID IS NOT NULL;
  END; 

  IF (@DATE_BEGIN IS NOT NULL) SET @MIN_DATE=@DATE_BEGIN;

  IF (@DATE_END IS NOT NULL) SET @MAX_DATE=@DATE_END;
  
  IF (@ACCOUNT_ID IS NOT NULL) BEGIN
    
    SELECT AC.ACCOUNT_ID,
           AC.SURNAME,
           AC.NAME,
           AC.PATRONYMIC,
           A.ACTION_ID,
           A.NAME AS ACTION_NAME,
           R.RESULT_ID,
           R.NAME AS RESULT_NAME,
           AR.PRIORITY,
           COUNT(*) AS TASK_COUNT
      FROM /*PREFIX*/TASKS T 
      JOIN /*PREFIX*/ACTIONS A ON A.ACTION_ID=T.ACTION_ID
      JOIN /*PREFIX*/RESULTS R ON R.RESULT_ID=T.RESULT_ID
      JOIN /*PREFIX*/ACTION_RESULTS AR ON AR.ACTION_ID=A.ACTION_ID AND AR.RESULT_ID=R.RESULT_ID
      JOIN /*PREFIX*/ACCOUNTS AC ON AC.ACCOUNT_ID=T.PERFORMER_ID
     WHERE T.RESULT_ID IS NOT NULL
       AND T.PERFORMER_ID=@ACCOUNT_ID
       AND CONVERT(DATETIME,CONVERT(VARCHAR(10),DATE_BEGIN,104),104)>=@MIN_DATE
       AND CONVERT(DATETIME,CONVERT(VARCHAR(10),DATE_BEGIN,104),104)<=@MAX_DATE   
     GROUP BY AC.ACCOUNT_ID, AC.SURNAME, AC.NAME, AC.PATRONYMIC, A.ACTION_ID, A.NAME, R.NAME, R.RESULT_ID, AR.PRIORITY
     ORDER BY AC.SURNAME, AC.NAME, AC.PATRONYMIC, A.NAME, AR.PRIORITY;

  END ELSE BEGIN

    SELECT AC.ACCOUNT_ID,
           AC.SURNAME,
           AC.NAME,
           AC.PATRONYMIC,
           A.ACTION_ID,
           A.NAME AS ACTION_NAME,
           R.RESULT_ID,
           R.NAME AS RESULT_NAME,
           AR.PRIORITY,
           COUNT(*) AS TASK_COUNT
      FROM /*PREFIX*/TASKS T 
      JOIN /*PREFIX*/ACTIONS A ON A.ACTION_ID=T.ACTION_ID
      JOIN /*PREFIX*/RESULTS R ON R.RESULT_ID=T.RESULT_ID
      JOIN /*PREFIX*/ACTION_RESULTS AR ON AR.ACTION_ID=A.ACTION_ID AND AR.RESULT_ID=R.RESULT_ID
      JOIN /*PREFIX*/ACCOUNTS AC ON AC.ACCOUNT_ID=T.PERFORMER_ID
     WHERE T.RESULT_ID IS NOT NULL
       AND CONVERT(DATETIME,CONVERT(VARCHAR(10),DATE_BEGIN,104),104)>=@MIN_DATE
       AND CONVERT(DATETIME,CONVERT(VARCHAR(10),DATE_BEGIN,104),104)<=@MAX_DATE   
     GROUP BY AC.ACCOUNT_ID, AC.SURNAME, AC.NAME, AC.PATRONYMIC, A.ACTION_ID, A.NAME, R.NAME, R.RESULT_ID, AR.PRIORITY
     ORDER BY AC.SURNAME, AC.NAME, AC.PATRONYMIC, A.NAME, AR.PRIORITY;

  END;

END;

--

CREATE PROCEDURE /*PREFIX*/ROLL_ON_AMOUNT
  @AGREEMENT_ID VARCHAR(32),
  @DATE DATETIME,
  @AMOUNT_BEGIN FLOAT,
  @AMOUNT_END FLOAT
AS
BEGIN
  DECLARE @MAX_DATE DATETIME,
          @MIN_AMOUNT FLOAT,
          @MAX_AMOUNT FLOAT;

  SELECT @MAX_DATE=MAX(DATE_PAYMENT),
         @MIN_AMOUNT=MIN(AMOUNT),
         @MAX_AMOUNT=MAX(AMOUNT)  
    FROM /*PREFIX*/PAYMENTS
   WHERE STATE=1
     AND DEAL_ID IN (SELECT DEAL_ID FROM /*PREFIX*/DEALS 
                      WHERE AGREEMENT_ID=@AGREEMENT_ID
                        AND DATE_CLOSE IS NULL);

  IF (@DATE IS NOT NULL) SET @MAX_DATE=@DATE;

  IF (@AMOUNT_BEGIN IS NOT NULL) SET @MIN_AMOUNT=@AMOUNT_BEGIN;

  IF (@AMOUNT_END IS NOT NULL) SET @MAX_AMOUNT=@AMOUNT_END;

  IF (@AGREEMENT_ID IS NOT NULL) BEGIN
    SELECT T.* 
      FROM (SELECT D.DEAL_ID,
                   D.ACCOUNT_NUM,
                   DB.SURNAME,
                   DB.NAME,
                   DB.PATRONYMIC,
                   DB.DATE_BIRTH,
                   DATEADD(DAY,-D1.DEBT_PERIOD,CURRENT_TIMESTAMP) AS DATE_DEBT, 
                   DB.ADDRESS_RESIDENCE,
                   D.DEBT_INFORMATION,
                   (CASE 
                      WHEN P1.AMOUNT IS NULL THEN D.INITIAL_DEBT
                      ELSE D.INITIAL_DEBT-P1.AMOUNT
                    END) AS DEBT
              FROM DEALS D
              JOIN DEBTORS DB ON DB.DEBTOR_ID=D.DEBTOR_ID
              JOIN (SELECT DEAL_ID, 
                           ARREAR_PERIOD+DATEDIFF(DAY,DATE_ISSUE,CURRENT_TIMESTAMP) AS DEBT_PERIOD 
                      FROM /*PREFIX*/DEALS) AS D1 ON D1.DEAL_ID=D.DEAL_ID
              LEFT JOIN (SELECT DEAL_ID, SUM(AMOUNT) AS AMOUNT 
                           FROM /*PREFIX*/PAYMENTS 
                          WHERE STATE=1
                            AND DATE_PAYMENT<=@MAX_DATE
                          GROUP BY DEAL_ID) AS P1 ON P1.DEAL_ID=D.DEAL_ID
             WHERE D.AGREEMENT_ID=@AGREEMENT_ID) T
     WHERE T.DEBT>=@MIN_AMOUNT
       AND T.DEBT<=@MAX_AMOUNT
     ORDER BY T.ADDRESS_RESIDENCE, T.SURNAME, T.NAME, T.PATRONYMIC, T.DEBT; 
  END;
END;

--

CREATE VIEW /*PREFIX*/S_DIRECTION_DRESSAGE
AS
 SELECT D.DEAL_ID,
        DB.SURNAME, 
        DB.NAME,
        DB.PATRONYMIC,
        DB.DATE_BIRTH,
        DB.PLACE_BIRTH,
        DB.PASSPORT,
        D.ACCOUNT_NUM,
        DB.ADDRESS_RESIDENCE,
        DB.ADDRESS_ACTUAL,
        DB.ADDRESS_ADDITIONAL,
        DB.ADDRESS_WORK,
        D.DEBT_INFORMATION,
        (CASE  
          WHEN P1.AMOUNT IS NULL THEN D.INITIAL_DEBT
          ELSE D.INITIAL_DEBT-P1.AMOUNT
         END) AS CURRENT_DEBT, 
        D.ARREAR_PERIOD,
        DATEADD(DAY,-D1.DEBT_PERIOD,CURRENT_TIMESTAMP) AS DATE_DEBT,
        C.NAME AS CURRENCY_NAME
     FROM /*PREFIX*/DEALS D
     JOIN /*PREFIX*/DEBTORS DB ON DB.DEBTOR_ID=D.DEBTOR_ID
     JOIN /*PREFIX*/AGREEMENTS A ON A.AGREEMENT_ID=D.AGREEMENT_ID
     JOIN /*PREFIX*/VARIANTS V ON V.VARIANT_ID=A.VARIANT_ID
     JOIN /*PREFIX*/CURRENCY C ON C.CURRENCY_ID=V.CURRENCY_ID
     JOIN (SELECT DEAL_ID, 
                  ARREAR_PERIOD+DATEDIFF(DAY,DATE_ISSUE,CURRENT_TIMESTAMP) AS DEBT_PERIOD 
            FROM /*PREFIX*/DEALS) AS D1 ON D1.DEAL_ID=D.DEAL_ID
     LEFT JOIN (SELECT DEAL_ID, 
                       SUM(AMOUNT) AS AMOUNT 
                  FROM /*PREFIX*/PAYMENTS 
                 WHERE STATE=1
                 GROUP BY DEAL_ID) AS P1 ON P1.DEAL_ID=D.DEAL_ID 

--

CREATE VIEW /*PREFIX*/S_ROLL_LETTERS
AS
 SELECT D.DEAL_ID,
        D.ACCOUNT_NUM,
        DB.SURNAME, 
        DB.NAME,
        DB.PATRONYMIC,
        DB.DATE_BIRTH,
        DATEADD(DAY,-D1.DEBT_PERIOD,CURRENT_TIMESTAMP) AS DATE_DEBT,
        DB.ADDRESS_RESIDENCE,
        (CASE  
          WHEN P1.AMOUNT IS NULL THEN D.INITIAL_DEBT
          ELSE D.INITIAL_DEBT-P1.AMOUNT
         END) AS CURRENT_DEBT, 
        C.NAME AS CURRENCY_NAME
     FROM /*PREFIX*/DEALS D
     JOIN /*PREFIX*/DEBTORS DB ON DB.DEBTOR_ID=D.DEBTOR_ID
     JOIN /*PREFIX*/AGREEMENTS A ON A.AGREEMENT_ID=D.AGREEMENT_ID
     JOIN /*PREFIX*/VARIANTS V ON V.VARIANT_ID=A.VARIANT_ID
     JOIN /*PREFIX*/CURRENCY C ON C.CURRENCY_ID=V.CURRENCY_ID
     JOIN (SELECT DEAL_ID, 
                  ARREAR_PERIOD+DATEDIFF(DAY,DATE_ISSUE,CURRENT_TIMESTAMP) AS DEBT_PERIOD 
            FROM /*PREFIX*/DEALS) AS D1 ON D1.DEAL_ID=D.DEAL_ID
     LEFT JOIN (SELECT DEAL_ID, 
                       SUM(AMOUNT) AS AMOUNT 
                  FROM /*PREFIX*/PAYMENTS 
                 WHERE STATE=1
                 GROUP BY DEAL_ID) AS P1 ON P1.DEAL_ID=D.DEAL_ID    

--

CREATE PROCEDURE /*PREFIX*/ACT_OF_REVISE
  @AGREEMENT_ID VARCHAR(32),
  @DATE DATETIME
AS
BEGIN
  DECLARE @MAX_DATE DATETIME;

  SELECT @MAX_DATE=MAX(DATE_PAYMENT)  
    FROM /*PREFIX*/PAYMENTS
   WHERE STATE=1
     AND DEAL_ID IN (SELECT DEAL_ID FROM /*PREFIX*/DEALS 
                      WHERE AGREEMENT_ID=@AGREEMENT_ID
                        AND DATE_CLOSE IS NULL);

  IF (@DATE IS NOT NULL) SET @MAX_DATE=@DATE;

  SELECT D.DEBTOR_NUM,
         DB.SURNAME,
         DB.NAME,
         DB.PATRONYMIC,
         P.DATE_PAYMENT,
         P.AMOUNT
    FROM /*PREFIX*/PAYMENTS P
    JOIN /*PERFIX*/DEALS D ON D.DEAL_ID=P.DEAL_ID
    JOIN DEBTORS DB ON DB.DEBTOR_ID=D.DEBTOR_ID
  WHERE P.STATE=1
    AND D.AGREEMENT_ID=@AGREEMENT_ID
  ORDER BY D.DEBTOR_NUM;
END;

--

CREATE PROCEDURE /*PREFIX*/WORK_WITH_DEBTOR
  @AGREEMENT_ID VARCHAR(32),
  @DATE_BEGIN DATETIME,
  @DATE_END DATETIME
AS
BEGIN
  DECLARE @MIN_DATE DATETIME,
          @MAX_DATE DATETIME;

   SELECT @MIN_DATE=MIN(CONVERT(DATETIME,CONVERT(VARCHAR(10),DATE_BEGIN,104),104)), 
          @MAX_DATE=MAX(CONVERT(DATETIME,CONVERT(VARCHAR(10),DATE_BEGIN,104),104))
     FROM /*PREFIX*/TASKS
    WHERE RESULT_ID IS NOT NULL;

  IF (@DATE_BEGIN IS NOT NULL) SET @MIN_DATE=@DATE_BEGIN;

  IF (@DATE_END IS NOT NULL) SET @MAX_DATE=@DATE_END;

  SELECT T.* 
    FROM (SELECT D.DEAL_ID,
                 D.DEBTOR_NUM,
                 DATEADD(DAY,-D1.DEBT_PERIOD,CURRENT_TIMESTAMP) AS DATE_DEBT,
                 DB.SURNAME,
                 DB.NAME,
                 DB.PATRONYMIC,
                 CONVERT(DATETIME,CONVERT(VARCHAR(10),T.DATE_BEGIN,104),104) AS DATE_TASK,
                 T.ACTION_ID,
                 A.NAME AS ACTION_NAME,
                 T.RESULT_ID,
                 R.NAME AS RESULT_NAME,
                 T.DESCRIPTION,
                 T.DATE_BEGIN
            FROM /*PREFIX*/TASKS T
            JOIN /*PREFIX*/DEALS D ON D.DEAL_ID=T.DEAL_ID
            JOIN /*PREFIF*/DEBTORS DB ON DB.DEBTOR_ID=D.DEBTOR_ID
            JOIN (SELECT DEAL_ID, 
                         ARREAR_PERIOD+DATEDIFF(DAY,DATE_ISSUE,CURRENT_TIMESTAMP) AS DEBT_PERIOD 
                    FROM /*PREFIX*/DEALS) AS D1 ON D1.DEAL_ID=D.DEAL_ID
            JOIN /*PREFIX*/ACTIONS A ON A.ACTION_ID=T.ACTION_ID
            JOIN /*PREFIX*/RESULTS R ON R.RESULT_ID=T.RESULT_ID
           WHERE D.AGREEMENT_ID=@AGREEMENT_ID
             AND CONVERT(DATETIME,CONVERT(VARCHAR(10),DATE_BEGIN,104),104)>=@MIN_DATE
             AND CONVERT(DATETIME,CONVERT(VARCHAR(10),DATE_BEGIN,104),104)<=@MAX_DATE   
             AND T.RESULT_ID IS NOT NULL) T
   ORDER BY T.SURNAME, T.NAME, T.PATRONYMIC, T.DATE_BEGIN;

END;

--

CREATE PROCEDURE /*PREFIX*/DEBTOR_PAYMENTS
  @AGREEMENT_ID VARCHAR(32),
  @DATE_BEGIN DATETIME,
  @DATE_END DATETIME
AS
BEGIN
  DECLARE @MIN_DATE DATETIME,
          @MAX_DATE DATETIME;

  SELECT @MIN_DATE=MIN(DATE_PAYMENT), 
         @MAX_DATE=MAX(DATE_PAYMENT) 
    FROM /*PREFIX*/PAYMENTS
   WHERE STATE=1
     AND DEAL_ID IN (SELECT DEAL_ID FROM /*PREFIX*/DEALS 
                      WHERE AGREEMENT_ID=@AGREEMENT_ID
                        AND DATE_CLOSE IS NULL);

  IF (@DATE_BEGIN IS NOT NULL) SET @MIN_DATE=@DATE_BEGIN;

  IF (@DATE_END IS NOT NULL) SET @MAX_DATE=@DATE_END;

  SELECT D.DEBTOR_NUM,
         DB.SURNAME,
         DB.NAME,
         DB.PATRONYMIC, 
         DB.ADDRESS_RESIDENCE,
         D.INITIAL_DEBT,
         P1.AMOUNT,
         (CASE 
            WHEN P1.AMOUNT IS NULL THEN D.INITIAL_DEBT
            ELSE D.INITIAL_DEBT-P1.AMOUNT
          END) AS DEBT         
    FROM /*PREFIX*/DEALS D
    JOIN /*PREFIX*/DEBTORS DB ON DB.DEBTOR_ID=D.DEBTOR_ID
    LEFT JOIN (SELECT DEAL_ID, SUM(AMOUNT) AS AMOUNT 
                 FROM /*PREFIX*/PAYMENTS 
                WHERE STATE=1
                  AND DATE_PAYMENT>=@MIN_DATE 
                  AND DATE_PAYMENT<=@MAX_DATE 
                GROUP BY DEAL_ID) AS P1 ON P1.DEAL_ID=D.DEAL_ID
   WHERE D.AGREEMENT_ID=@AGREEMENT_ID
   ORDER BY DB.SURNAME, DB.NAME, DB.PATRONYMIC;

END;

--

CREATE VIEW /*PREFIX*/S_ENVELOPES
AS
 SELECT D.DEAL_ID,
        DB.SURNAME, 
        DB.NAME,
        DB.PATRONYMIC,
        DB.ADDRESS_RESIDENCE,
        DB.INDEX_RESIDENCE,
        DB.ADDRESS_ACTUAL,
        DB.INDEX_ACTUAL,
        DB.ADDRESS_ADDITIONAL,
        DB.INDEX_ADDITIONAL, 
        DB.ADDRESS_WORK,
        DB.INDEX_WORK,
        C.SURNAME_DP,
        C.NAME_DP,
        C.PATRONYMIC_DP
     FROM /*PREFIX*/DEALS D
     JOIN /*PREFIX*/DEBTORS DB ON DB.DEBTOR_ID=D.DEBTOR_ID
     LEFT JOIN /*PREFIX*/CASES C ON C.SURNAME_IP=DB.SURNAME AND C.NAME_IP=DB.NAME AND C.PATRONYMIC_IP=DB.PATRONYMIC

--

ALTER TABLE FIRMS
ADD LEGAL_INDEX VARCHAR(10)

--

ALTER TABLE FIRMS
ADD POST_INDEX VARCHAR(10)

--

ALTER VIEW /*PREFIX*/S_FIRMS
AS
  SELECT F.*, 
         FT.NAME AS FIRM_TYPE_NAME,
         F1.SMALL_NAME AS PARENT_SMALL_NAME
    FROM /*PREFIX*/FIRMS F
    JOIN /*PREFIX*/FIRM_TYPES FT ON FT.FIRM_TYPE_ID=F.FIRM_TYPE_ID
    LEFT JOIN /*PREFIX*/FIRMS F1 ON F1.FIRM_ID=F.PARENT_ID

--

ALTER PROCEDURE /*PREFIX*/I_FIRM
  @FIRM_ID VARCHAR(32),
  @FIRM_TYPE_ID VARCHAR(32),
  @PARENT_ID VARCHAR(32),
  @SMALL_NAME VARCHAR(250),
  @FULL_NAME VARCHAR(250),
  @INN VARCHAR(12),
  @PAYMENT_ACCOUNT VARCHAR(20),
  @BANK VARCHAR(250),
  @BIK VARCHAR(20),
  @CORR_ACCOUNT VARCHAR(20),
  @LEGAL_ADDRESS VARCHAR(250),
  @LEGAL_INDEX VARCHAR(10),
  @POST_ADDRESS VARCHAR(250),
  @POST_INDEX VARCHAR(10),
  @PHONE VARCHAR(250),
  @FAX VARCHAR(250),
  @EMAIL VARCHAR(100),
  @SITE VARCHAR(100),
  @OKONH VARCHAR(20),
  @OKPO VARCHAR(20),
  @KPP VARCHAR(20),
  @DIRECTOR VARCHAR(250),
  @ACCOUNTANT VARCHAR(250),
  @CONTACT_FACE VARCHAR(250)
AS
BEGIN
  INSERT INTO /*PREFIX*/FIRMS (FIRM_ID,FIRM_TYPE_ID,PARENT_ID,SMALL_NAME,FULL_NAME,INN,PAYMENT_ACCOUNT,
	                       BANK,BIK,CORR_ACCOUNT,LEGAL_ADDRESS,LEGAL_INDEX,POST_ADDRESS,POST_INDEX,
                               PHONE,FAX,EMAIL,SITE,OKONH,OKPO,KPP,DIRECTOR,ACCOUNTANT,CONTACT_FACE)
       VALUES (@FIRM_ID,@FIRM_TYPE_ID,@PARENT_ID,@SMALL_NAME,@FULL_NAME,@INN,@PAYMENT_ACCOUNT,
               @BANK,@BIK,@CORR_ACCOUNT,@LEGAL_ADDRESS,@LEGAL_INDEX,@POST_ADDRESS,@POST_INDEX,
               @PHONE,@FAX,@EMAIL,@SITE,@OKONH,@OKPO,@KPP,@DIRECTOR,@ACCOUNTANT,@CONTACT_FACE);
END;

--

ALTER PROCEDURE /*PREFIX*/U_FIRM
  @FIRM_ID VARCHAR(32),
  @FIRM_TYPE_ID VARCHAR(32),
  @PARENT_ID VARCHAR(32),
  @SMALL_NAME VARCHAR(250),
  @FULL_NAME VARCHAR(250),
  @INN VARCHAR(12),
  @PAYMENT_ACCOUNT VARCHAR(20),
  @BANK VARCHAR(250),
  @BIK VARCHAR(20),
  @CORR_ACCOUNT VARCHAR(20),
  @LEGAL_ADDRESS VARCHAR(250),
  @LEGAL_INDEX VARCHAR(10),
  @POST_ADDRESS VARCHAR(250),
  @POST_INDEX VARCHAR(10),
  @PHONE VARCHAR(250),
  @FAX VARCHAR(250),
  @EMAIL VARCHAR(100),
  @SITE VARCHAR(100),
  @OKONH VARCHAR(20),
  @OKPO VARCHAR(20),
  @KPP VARCHAR(20),
  @DIRECTOR VARCHAR(250),
  @ACCOUNTANT VARCHAR(250),
  @CONTACT_FACE VARCHAR(250),
  @OLD_FIRM_ID VARCHAR(32)
AS
BEGIN
  UPDATE /*PREFIX*/FIRMS
     SET FIRM_ID=@FIRM_ID,
         FIRM_TYPE_ID=@FIRM_TYPE_ID,
	 PARENT_ID=@PARENT_ID,
	 SMALL_NAME=@SMALL_NAME,
	 FULL_NAME=@FULL_NAME,
	 INN=@INN,
	 PAYMENT_ACCOUNT=@PAYMENT_ACCOUNT,
         BANK=@BANK,
	 BIK=@BIK,
         CORR_ACCOUNT=@CORR_ACCOUNT,
	 LEGAL_ADDRESS=@LEGAL_ADDRESS,
	 LEGAL_INDEX=@LEGAL_INDEX,
	 POST_ADDRESS=@POST_ADDRESS,
	 POST_INDEX=@POST_INDEX,
	 PHONE=@PHONE,
	 FAX=@FAX,
	 EMAIL=@EMAIL,
	 SITE=@SITE,
 	 OKONH=@OKONH,
	 OKPO=@OKPO,
	 KPP=@KPP,
	 DIRECTOR=@DIRECTOR,
	 ACCOUNTANT=@ACCOUNTANT,
         CONTACT_FACE=@CONTACT_FACE
   WHERE FIRM_ID=@OLD_FIRM_ID;
END;

--

CREATE VIEW /*PREFIX*/S_REQUIREMENTS
AS
 SELECT D.DEAL_ID,
        D.DEBTOR_NUM,
        D.DEBTOR_DATE, 
        D.ACCOUNT_NUM,
        DB.SURNAME, 
        DB.NAME,
        DB.SEX,
        DB.PATRONYMIC,
        DB.ADDRESS_RESIDENCE,
        DB.INDEX_RESIDENCE,
        DB.ADDRESS_ACTUAL,
        DB.INDEX_ACTUAL,
        DB.ADDRESS_ADDITIONAL,
        DB.INDEX_ADDITIONAL, 
        DB.ADDRESS_WORK,
        DB.INDEX_WORK,
        F.SMALL_NAME AS FIRM_SMALL_NAME,
        F.FULL_NAME AS FIRM_FULL_NAME,
        F.BANK AS FIRM_BANK,
        F.INN AS FIRM_INN,
        F.CORR_ACCOUNT  AS FIRM_CORR_ACCOUNT,
        F.BIK AS FIRM_BIK,
        F.LEGAL_ADDRESS AS FIRM_LEGAL_ADDRESS,
        F.LEGAL_INDEX AS FIRM_LEGAL_INDEX,
        F.PHONE AS FIRM_PHONE,
        F.FIRM_TYPE_ID,
        FT.NAME AS FIRM_TYPE_NAME,
        C.NAME AS CURRENCY_NAME,
        (CASE 
           WHEN P1.AMOUNT IS NULL THEN D.INITIAL_DEBT
           ELSE D.INITIAL_DEBT-P1.AMOUNT
         END) AS DEBT,
        (CASE 
           WHEN P1.DATE_PAYMENT IS NULL THEN D.DATE_ISSUE
           ELSE P1.DATE_PAYMENT
         END) AS DATE_DEBT   

     FROM /*PREFIX*/DEALS D
     JOIN /*PREFIX*/DEBTORS DB ON DB.DEBTOR_ID=D.DEBTOR_ID
     JOIN /*PREFIX*/AGREEMENTS A ON A.AGREEMENT_ID=D.AGREEMENT_ID
     JOIN /*PREFIX*/FIRMS F ON F.FIRM_ID=A.FIRM_ID
     JOIN /*PREFIX*/FIRM_TYPES FT ON FT.FIRM_TYPE_ID=F.FIRM_TYPE_ID
     JOIN /*PREFIX*/VARIANTS V ON V.VARIANT_ID=A.VARIANT_ID
     JOIN /*PREFIX*/CURRENCY C ON C.CURRENCY_ID=V.CURRENCY_ID
     LEFT JOIN (SELECT DEAL_ID, 
                       SUM(AMOUNT) AS AMOUNT,
                       MAX(DATE_PAYMENT) AS DATE_PAYMENT
                  FROM /*PREFIX*/PAYMENTS 
                 WHERE STATE=1
                 GROUP BY DEAL_ID) AS P1 ON P1.DEAL_ID=D.DEAL_ID

--