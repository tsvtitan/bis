unit BisDesignDataReportEditFm;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, ExtCtrls, Contnrs, ImgList,
  BisFm, BisDataEditFm, BisParam, BisReportEditorFm, BisControls;

type
  TBisDesignDataReportEditForm = class(TBisDataEditForm)
    LabelReport: TLabel;
    EditReport: TEdit;
    LabelEngine: TLabel;
    ComboBoxEngine: TComboBox;
    LabelPlace: TLabel;
    ComboBoxPlace: TComboBox;
    OpenDialog: TOpenDialog;
    ButtonLoad: TButton;
    ButtonSave: TButton;
    ButtonClear: TButton;
    SaveDialog: TSaveDialog;
    ButtonEditor: TButton;
    LabelName: TLabel;
    EditName: TEdit;
    LabelDescription: TLabel;
    MemoDescription: TMemo;
    CheckBoxRefresh: TCheckBox;
    procedure ButtonLoadClick(Sender: TObject);
    procedure ButtonSaveClick(Sender: TObject);
    procedure ButtonClearClick(Sender: TObject);
    procedure ButtonEditorClick(Sender: TObject);
    procedure EditReportChange(Sender: TObject);
  private
    FEditor: TBisReportEditorFormIface;
    function GetReportEditorClass: TBisReportEditorFormIfaceClass;
    procedure RunEditor;
    procedure EditorSaveChanges(Sender: TObject);
    procedure ChangeInterfaceId(Param: TBisParam);
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
    procedure BeforeShow; override;
    procedure ChangeParam(Param: TBisParam); override;
    function CheckParam(Param: TBisParam): Boolean; override;
    procedure Execute; override;
  end;

  TBisDesignDataReportEditFormIface=class(TBisDataEditFormIface)
  public
    constructor Create(AOwner: TComponent); override;
  end;

  TBisDesignDataReportInsertFormIface=class(TBisDesignDataReportEditFormIface)
  public
    constructor Create(AOwner: TComponent); override;
  end;

  TBisDesignDataReportUpdateFormIface=class(TBisDesignDataReportEditFormIface)
  public
    constructor Create(AOwner: TComponent); override;
  end;

  TBisDesignDataReportDeleteFormIface=class(TBisDesignDataReportEditFormIface)
  public
    constructor Create(AOwner: TComponent); override;
  end;

var
  BisDesignDataReportEditForm: TBisDesignDataReportEditForm;

implementation

uses
     BisDesignDataInterfacesFm, BisFilterGroups, BisInterfaces, BisUtils, BisProvider,
     BisConsts, BisDialogs, BisCore, BisReportModules;

{$R *.dfm}

{ TBisDesignDataReportEditFormIface }

constructor TBisDesignDataReportEditFormIface.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  FormClass:=TBisDesignDataReportEditForm;
  with Params do begin
    AddKey('INTERFACE_ID').Older('OLD_INTERFACE_ID');
    AddInvisible('REPORT_ID').Older('OLD_REPORT_ID');
    AddInvisible('INTERFACE_TYPE').Value:=Integer(itReport);
    AddEdit('NAME','EditName','LabelName',true);
    AddMemo('DESCRIPTION','MemoDescription','LabelDescription',false);
    AddComboBoxTextIndex('ENGINE','ComboBoxEngine','LabelEngine',true).ExcludeModes([emDuplicate,emUpdate]);
    AddComboBox('PLACE','ComboBoxPlace','LabelPlace',true).ExcludeModes([emDuplicate,emUpdate]);
    AddInvisible('REPORT').Required:=true;
  end;
end;

{ TBisDesignDataReportInsertFormIface }

constructor TBisDesignDataReportInsertFormIface.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  ProviderName:='I_REPORT';
  Caption:='Создать отчет';
end;

{ TBisDesignDataReportUpdateFormIface }

constructor TBisDesignDataReportUpdateFormIface.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  ProviderName:='U_REPORT';
  Caption:='Изменить отчет';
end;

{ TBisDesignDataReportDeleteFormIface }

constructor TBisDesignDataReportDeleteFormIface.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  ProviderName:='D_REPORT';
  Caption:='Удалить отчет';
end;

{ TBisDesignDataReportEditForm }

constructor TBisDesignDataReportEditForm.Create(AOwner: TComponent);
var
  Module: TBisReportModule;
  i: Integer;
begin
  inherited Create(AOwner);

  ComboBoxEngine.Clear;
  for i:=0 to Core.ReportModules.Count-1 do begin
    Module:=Core.ReportModules.Items[i];
    if Module.Enabled and Assigned(Module.ReportEditorClass) then
      ComboBoxEngine.Items.AddObject(Module.ObjectName,Module);
  end;

  EditReport.Color:=ColorControlReadOnly;
end;

destructor TBisDesignDataReportEditForm.Destroy;
begin
  FreeAndNilEx(FEditor);
  inherited Destroy;
end;

procedure TBisDesignDataReportEditForm.BeforeShow;
begin
  inherited BeforeShow;
  if Mode=emInsert then
    Provider.Params.ParamByName('REPORT_ID').SetNewValue(Provider.Params.ParamByName('INTERFACE_ID').Value);
  ButtonEditor.Enabled:=not Provider.Params.ParamByName('ENGINE').Empty and
                        (Mode in [emInsert,emDuplicate,emUpdate]);
  ButtonLoad.Enabled:=not Provider.Params.ParamByName('PLACE').Empty and
                      (Mode in [emInsert,emDuplicate,emUpdate]);
  ButtonClear.Enabled:=ButtonLoad.Enabled;
  LabelReport.Enabled:=ButtonEditor.Enabled;
  EditReport.Enabled:=ButtonEditor.Enabled;
end;

procedure TBisDesignDataReportEditForm.EditReportChange(Sender: TObject);
begin
  if not EditReport.ReadOnly then begin
    EditReport.OnChange:=nil;
    try
      Provider.Params.ParamByName('REPORT').Value:=EditReport.Text;
    finally
      EditReport.OnChange:=EditReportChange;
    end;
  end;
end;

procedure TBisDesignDataReportEditForm.ChangeInterfaceId(Param: TBisParam);
var
  AProvider: TBisProvider;
  ReportParam: TBisParam;
  EngineParam: TBisParam;
  PlaceParam: TBisParam;
begin
  if Mode in [emDuplicate,emUpdate] then begin
    ReportParam:=Param.Find('REPORT');
    EngineParam:=Param.Find('ENGINE');
    PlaceParam:=Param.Find('PLACE');
    if Assigned(ReportParam) then begin
      AProvider:=TBisProvider.Create(nil);
      try
        AProvider.ProviderName:='S_REPORTS';
        with AProvider.FieldNames do begin
          if Mode<>emDelete then
            AddInvisible('REPORT');
          AddInvisible('ENGINE');
          AddInvisible('PLACE');
        end;
        AProvider.FilterGroups.Add.Filters.Add('REPORT_ID',fcEqual,Param.Value);
        AProvider.Open;
        if AProvider.Active and not AProvider.IsEmpty then begin
          if Mode<>emDelete then
            ReportParam.SetNewValue(AProvider.FieldByName('REPORT').Value);
          EngineParam.SetNewValue(AProvider.FieldByName('ENGINE').Value);
          PlaceParam.SetNewValue(AProvider.FieldByName('PLACE').Value);
        end;
      finally
        AProvider.Free;
      end;
    end;
  end;
end;

procedure TBisDesignDataReportEditForm.ChangeParam(Param: TBisParam);
var
  AEmpty: Boolean;
begin
  inherited ChangeParam(Param);
  if AnsiSameText(Param.ParamName,'INTERFACE_ID') then begin
    Provider.Params.ParamByName('REPORT_ID').SetNewValue(Param.Value);
    ChangeInterfaceId(Param);
  end;
  if AnsiSameText(Param.ParamName,'ENGINE') then begin
    ButtonEditor.Enabled:=not Param.Empty and
                          not Provider.Params.ParamByName('PLACE').Empty and
                          (Mode in [emInsert,emDuplicate,emUpdate]);
  end;
  if AnsiSameText(Param.ParamName,'PLACE') then begin
    EditReport.ReadOnly:=not Boolean(VarToIntDef(Param.Value,0));
    EditReport.Color:=iff(EditReport.ReadOnly,ColorControlReadOnly,clWindow);
    ButtonEditor.Enabled:=not Param.Empty and
                          not Provider.Params.ParamByName('ENGINE').Empty and
                          (Mode in [emInsert,emDuplicate,emUpdate]);
    LabelReport.Enabled:=ButtonEditor.Enabled;
    EditReport.Enabled:=ButtonEditor.Enabled;
    ButtonLoad.Caption:=iff(EditReport.ReadOnly,'Загрузить','Выбрать');
    ChangeParam(Provider.Params.ParamByName('REPORT'));
  end;
  if AnsiSameText(Param.ParamName,'REPORT') then begin
    AEmpty:=Param.Empty;
    if EditReport.ReadOnly then
      EditReport.Text:=iff(AEmpty,'Не загружен','Загружен')
    else EditReport.Text:=VarToStrDef(Param.Value,'');
    ButtonLoad.Enabled:=(Mode in [emInsert,emDuplicate,emUpdate]);
    ButtonSave.Enabled:=not AEmpty and (Mode in [emInsert,emDuplicate,emUpdate]);
    ButtonClear.Enabled:=ButtonSave.Enabled;
  end;
end;

procedure TBisDesignDataReportEditForm.ButtonLoadClick(Sender: TObject);
var
  Param: TBisParam;
begin
  Param:=Provider.Params.Find('REPORT');
  if Assigned(Param) then begin
    if OpenDialog.Execute then begin
      if EditReport.ReadOnly then
        Param.LoadFromFile(OpenDialog.FileName)
      else Param.Value:=OpenDialog.FileName;
      UpdateButtonState;
    end;
  end;
end;

procedure TBisDesignDataReportEditForm.ButtonSaveClick(Sender: TObject);
var
  Param: TBisParam;
begin
  Param:=Provider.Params.Find('REPORT');
  if Assigned(Param) then begin
    SaveDialog.FileName:=EditName.Text;
    if SaveDialog.Execute then begin
      if EditReport.ReadOnly then
        Param.SaveToFile(SaveDialog.FileName)
      else CopyFile(PChar(VarToStrDef(Param.Value,'')),PChar(SaveDialog.FileName),false);  
    end;
  end;
end;

procedure TBisDesignDataReportEditForm.ButtonClearClick(Sender: TObject);
var
  Param: TBisParam;
begin
  Param:=Provider.Params.Find('REPORT');
  if Assigned(Param) then begin
    Param.Clear;
    UpdateButtonState;
  end;
end;

function TBisDesignDataReportEditForm.CheckParam(Param: TBisParam): Boolean;
begin
  if AnsiSameText(Param.ParamName,'REPORT') then begin
    ShowError(Format(SNeedControlValue,[LabelReport.Caption]));
    EditReport.SetFocus;
    Result:=false;
  end else
    Result:=inherited CheckParam(Param);
end;

procedure TBisDesignDataReportEditForm.ButtonEditorClick(Sender: TObject);
begin
  RunEditor;
end;

function TBisDesignDataReportEditForm.GetReportEditorClass: TBisReportEditorFormIfaceClass;
var
  Module: TBisReportModule;
begin
  Result:=nil;
  if ComboBoxEngine.ItemIndex<>-1 then begin
    Module:=TBisReportModule(ComboBoxEngine.Items.Objects[ComboBoxEngine.ItemIndex]);
    if Assigned(Module) then
      Result:=Module.ReportEditorClass;
  end;
end;

procedure TBisDesignDataReportEditForm.EditorSaveChanges(Sender: TObject);
var
  Stream: TMemoryStream;
  OldCursor: TCursor;
  Param: TBisParam;
  S: String;
begin
  Param:=Provider.Params.Find('REPORT');
  if Assigned(Param) and Assigned(Sender) and
     (Sender is TBisReportEditorForm) then begin
    Stream:=TMemoryStream.Create;
    OldCursor:=Screen.Cursor;
    Screen.Cursor:=crHourGlass;
    try
      if EditReport.ReadOnly then begin
        TBisReportEditorForm(Sender).SaveToStream(Stream);
        Stream.Position:=0;
        Param.LoadFromStream(Stream);
      end else begin
        S:=TBisReportEditorForm(Sender).FileName;
        TBisReportEditorForm(Sender).SaveToFile(S);
        Param.Value:=S;
      end;
      UpdateButtonState;
    finally
      Screen.Cursor:=OldCursor;
      Stream.Free;
    end;
  end;
end;

procedure TBisDesignDataReportEditForm.RunEditor;
var
  AClass: TBisReportEditorFormIfaceClass;
  ACaption: String;
  S: String;
  Param: TBisParam;
  Stream: TMemoryStream;
begin
  FreeAndNilEx(FEditor);
  AClass:=GetReportEditorClass;
  Param:=Provider.Params.Find('REPORT');
  if Assigned(AClass) and Assigned(Param) then begin
    Stream:=TMemoryStream.Create;
    try
      ACaption:=EditName.Text;
      FEditor:=AClass.Create(Self);
      FEditor.Init;
      FEditor.ReportId:=Null;
      FEditor.Caption:=iff(Trim(ACaption)='','Новый отчет',ACaption);
      FEditor.OnSaveChanges:=EditorSaveChanges;
      if EditReport.ReadOnly then begin
        S:='';
        Param.SaveToStream(Stream);
      end else begin
        S:=VarToStrDef(Param.Value,'');
        if FileExists(S) then begin
          Stream.LoadFromFile(S);
        end;
      end;
      Stream.Position:=0;
      FEditor.FileName:=S;
      FEditor.Stream:=Stream;
      FEditor.ShowType:=ShowType;
      if not AsModal then
        FEditor.Show
      else FEditor.ShowModal;
    finally
      if Assigned(FEditor) then
        FEditor.Stream:=nil;
      Stream.Free;
    end;
  end;
end;

procedure TBisDesignDataReportEditForm.Execute;
begin
  inherited Execute;
  if CheckBoxRefresh.Checked then begin
    Core.RefreshPermissions;
    Core.ReloadInterfaces;
  end;
end;


end.
