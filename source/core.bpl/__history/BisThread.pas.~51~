unit BisThread;

interface

uses Classes;

const
  ThreadNameAddress=$406D1388;

type
  TBisThreadNameInfo = record
    RecType: LongWord;  // Must be 0x1000
    Name: PChar;        // Pointer to name (in user address space)
    ThreadID: LongWord; // Thread ID (-1 indicates caller thread)
    Flags: LongWord;    // Reserved for future use. Must be zero
  end;

  TBisThread=class(TThread)
  private
    FName: String;
    function GetTerminated: Boolean;
  public
    constructor Create; virtual;
    procedure Execute; override;
    function Exists: Boolean;

    property Name: String read FName write FName;

    property Terminated: Boolean read GetTerminated;
  end;

implementation

uses Windows, SysUtils,
     BisCore;


procedure SetThreadName(AName: String);
var
  LThreadNameInfo: TThreadNameInfo;
begin
  if Trim(AName)<>'' then begin
    with LThreadNameInfo do begin
      RecType := $1000;
      Name := PChar(AName);
      ThreadID := $FFFFFFFF;
      Flags := 0;
    end;
    try
      // This is a wierdo Windows way to pass the info in
      RaiseException(ThreadNameAddress, 0, SizeOf(LThreadNameInfo) div SizeOf(LongWord),PDWord(@LThreadNameInfo));
    except
      //
    end;
  end;
end;

{ TBisThread }

constructor TBisThread.Create;
begin
  inherited Create(true);
  FName:=Copy(ClassName,5,Length(ClassName)-4-Length('Thread'));
end;

procedure TBisThread.Execute;
begin
  if Assigned(Core) and Assigned(Core.ExceptNotifier) then begin
    with Core.ExceptNotifier do begin
      IngnoreExceptions.Add(Exception);
      try
        SetThreadName(FName);
      finally
        IngnoreExceptions.Remove(Exception);
      end;
    end;
  end;
end;

function TBisThread.Exists: Boolean;
var
  Ret: DWord;
begin
  Ret:=WaitForSingleObject(Handle,0);
  Result:=Ret=WAIT_TIMEOUT;
end;

function TBisThread.GetTerminated: Boolean;
begin
  Result:=inherited Terminated;
end;

initialization
  SetThreadName('Main');
  
end.
