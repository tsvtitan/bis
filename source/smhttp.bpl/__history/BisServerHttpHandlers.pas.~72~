unit BisServerHttpHandlers;

interface

uses Classes,
     HTTPApp,
     BisObject, BisCoreObjects;

type

  TBisServerHttpHandler=class(TBisCoreObject)
  private
    FEnabled: Boolean;
    FPath: String;
    FHost: String;
  public
    function HandleRequest(Request: TWebRequest; Response: TWebResponse): Boolean; virtual;

    property Enabled: Boolean read FEnabled write FEnabled;
    property Host: String read FHost write FHost;
    property Path: String read FPath write FPath;
  end;

  TBisServerHttpHandlerClass=class of TBisServerHttpHandler;

  TBisServerHttpHandlers=class(TBisCoreObjects)
  private
    function GetItems(Index: Integer): TBisServerHttpHandler;
  protected
    function GetObjectClass: TBisObjectClass; override;
  public
    function AddClass(AClass: TBisServerHttpHandlerClass; const ObjectName: String=''): TBisServerHttpHandler;
    function AddHandler(AHandler: TBisServerHttpHandler): Boolean;
    procedure Remove(AHandler: TBisServerHttpHandler);
    function FindHandler(const Host, Document: String; var OutPath,OutScript: string): TBisServerHttpHandler;

    property Items[Index: Integer]: TBisServerHttpHandler read GetItems;
  end;


implementation

uses SysUtils,
     BisUtils, BisServerHttpConsts;

{ TBisServerHttpHandler }

function TBisServerHttpHandler.HandleRequest(Request: TWebRequest; Response: TWebResponse): Boolean;
begin
  Result:=false;
end;

{ TBisServerHttpHandlers }

function TBisServerHttpHandlers.GetItems(Index: Integer): TBisServerHttpHandler;
begin
  Result:=TBisServerHttpHandler(inherited Items[Index]);
end;

function TBisServerHttpHandlers.GetObjectClass: TBisObjectClass;
begin
  Result:=TBisServerHttpHandler;
end;

function TBisServerHttpHandlers.AddClass(AClass: TBisServerHttpHandlerClass; const ObjectName: String): TBisServerHttpHandler;
begin
  Result:=nil;
  if Assigned(AClass) then begin
    Result:=AClass.Create(Self);
    if Trim(ObjectName)<>'' then
      Result.ObjectName:=ObjectName;
    if not Assigned(Find(Result.ObjectName)) then begin
      Objects.Add(Result);
    end else begin
      FreeAndNilEx(Result);
    end;
  end;
end;

function TBisServerHttpHandlers.AddHandler(AHandler: TBisServerHttpHandler): Boolean;
begin
  Result:=false;
  if not Assigned(Find(AHandler.ObjectName)) then begin
    Objects.Add(AHandler);
    Result:=true;
  end;
end;

procedure TBisServerHttpHandlers.Remove(AHandler: TBisServerHttpHandler);
begin
  Objects.Remove(AHandler);
end;

function TBisServerHttpHandlers.FindHandler(const Host, Document: String; var OutPath, OutScript: string): TBisServerHttpHandler;
    
  function CheckPath(HandlerPath: string): Boolean;
  var
    Apos: Integer;
    S1,S2: string;
    Path: string;
  begin
    Result:=false;
    S1:=AnsiLowerCase(HandlerPath);
    S2:=AnsiLowerCase(Document);
    Apos:=AnsiPos(S1,S2);
    if Apos=1 then begin
      if Length(S1)<>Length(S2) then begin
        if Length(S1)<Length(S2) then begin
          Path:=Copy(Document,Length(HandlerPath)+1,Length(Document));
          if Length(Path)>0 then begin
            if Path[1]=SSlash then begin
              OutScript:=HandlerPath;
              OutPath:=Path;
              Result:=true;
            end;
          end;
        end;
      end else begin
        OutScript:=Document;
        OutPath:=SSlash;
        Result:=true;
      end;
    end else begin
      if (Trim(S2)='') and (S1=SSlash) then
      
    end;
  end;
  
var
  i: Integer;
  Item: TBisServerHttpHandler;
  Hosts, Paths: TStringList;
  APath: String;
  Flag: Boolean;
begin
  Result:=nil;
  Hosts:=TStringList.Create;
  Paths:=TStringList.Create;
  try
    for i:=0 to Count-1 do begin
      Item:=Items[i];
      if Item.Enabled then begin
        Hosts.Clear;
        Paths.Clear;
        GetStringsByString(Item.Host,';',Hosts);
        GetStringsByString(Item.Path,';',Paths);
        if Hosts.IndexOf(Host)<>-1 then begin
          Flag:=false;
          for APath in Paths do begin
            if CheckPath(APath) then begin
              Flag:=true;
              break;
            end;
          end;
          if Flag then begin
            Result:=Item;
            exit;
          end;
        end;
      end;
    end;
  finally
    Paths.Free;
    Hosts.Free;
  end;
end;


end.
