CREATE INDEX IDX_BLACKS_PHONE
ON BLACKS (PHONE)

--

CREATE INDEX IDX_ACCOUNTS_PHONE
ON ACCOUNTS (PHONE)

--

CREATE OR ALTER VIEW S_OFFICES(
    FIRM_ID,
    SMALL_NAME)
AS
SELECT T.* FROM
(
SELECT FIRM_ID, SMALL_NAME
  FROM FIRMS
 WHERE FIRM_ID='C49DF004D660BBAF434839044848F5B8'
 UNION
SELECT FIRM_ID, SMALL_NAME
  FROM FIRMS
 WHERE FIRM_ID='81DCAB751C23A5C942A41C19FE3FC78E'
 UNION
SELECT FIRM_ID, SMALL_NAME
  FROM FIRMS
 WHERE FIRM_ID='A0D1D8C02B29A90349328EC8C1E3208C'
) T
ORDER BY T.SMALL_NAME

--

CREATE INDEX IDX_CHARGES_DATE_CHARGE
ON CHARGES (DATE_CHARGE)

--

CREATE INDEX IDX_RECEIPTS_DATE_RECEIPT
ON RECEIPTS (DATE_RECEIPT)

--

CREATE OR ALTER PROCEDURE PROCESS_ORDER
(
  SESSION_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32),
  ORDER_ID VARCHAR(32),
  TYPE_PROCESS INTEGER
)
AS
DECLARE LOCKED VARCHAR(32);
DECLARE ACTION_ID VARCHAR(32);
DECLARE RESULT_ID VARCHAR(32);
DECLARE OLD_ORDER_ID VARCHAR(32);
DECLARE NEW_ORDER_ID VARCHAR(32);
BEGIN
  LOCKED=NULL;

  OLD_ORDER_ID=ORDER_ID;

  EXECUTE PROCEDURE CHECK_LOCK_ORDER(OLD_ORDER_ID)
   RETURNING_VALUES LOCKED;

  IF (LOCKED IS NULL) THEN BEGIN

    LOCKED=GET_UNIQUE_ID();

    UPDATE ORDERS
       SET LOCKED=:LOCKED,
           TYPE_PROCESS=:TYPE_PROCESS
     WHERE ORDER_ID=:OLD_ORDER_ID;

    FOR SELECT ACTION_ID
          FROM ORDERS
         WHERE ORDER_ID=:OLD_ORDER_ID
          INTO :ACTION_ID DO BEGIN
      BREAK;
    END

    EXECUTE PROCEDURE GET_DEFAULT_RESULT_ID(OLD_ORDER_ID,ACTION_ID)
     RETURNING_VALUES RESULT_ID;

    IF (RESULT_ID IS NOT NULL) THEN BEGIN

      EXECUTE PROCEDURE PROCESS_RESULT(SESSION_ID,OLD_ORDER_ID,GET_UNIQUE_ID(),RESULT_ID,ACCOUNT_ID,TYPE_PROCESS,NULL)
       RETURNING_VALUES NEW_ORDER_ID;

      IF (OLD_ORDER_ID<>NEW_ORDER_ID) THEN BEGIN
        OLD_ORDER_ID=NEW_ORDER_ID;
      END

    END

    UPDATE ORDERS
       SET LOCKED=NULL
     WHERE ORDER_ID=:OLD_ORDER_ID;

  END

END

--

CREATE OR ALTER PROCEDURE CODE_PROCESS_ORDER
(
  SESSION_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32),
  IN_MESSAGE_ID VARCHAR(32)
)
AS
DECLARE SENDER_ID VARCHAR(32);
DECLARE CODE VARCHAR(100);
DECLARE CNT INTEGER;
DECLARE SUM_CHARGE NUMERIC(15,2);
DECLARE SUM_RECEIPT NUMERIC(15,2);
DECLARE BALANCE NUMERIC(15,2);
DECLARE MIN_BALANCE NUMERIC(15,2);
DECLARE ORDER_ID VARCHAR(32);
BEGIN
  SELECT IM.SENDER_ID, CM.CODE
    FROM IN_MESSAGES IM
    LEFT JOIN CODE_MESSAGES CM ON CM.CODE_MESSAGE_ID=IM.CODE_MESSAGE_ID
   WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID
    INTO :SENDER_ID, :CODE;

  IF ((SENDER_ID IS NOT NULL) AND (CODE IS NOT NULL)) THEN BEGIN

    SELECT COUNT(*)
      FROM DRIVERS D
      JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
     WHERE D.DRIVER_ID=:SENDER_ID
       AND A.LOCKED<>1
      INTO :CNT;

    IF (CNT>0) THEN BEGIN

      EXECUTE PROCEDURE GET_ACCOUNT_BALANCE(:SENDER_ID)
       RETURNING_VALUES :SUM_CHARGE, :SUM_RECEIPT, :BALANCE;

      SELECT MIN_BALANCE
        FROM DRIVERS
       WHERE DRIVER_ID=:SENDER_ID
        INTO :MIN_BALANCE;

      IF ((MIN_BALANCE IS NULL) OR ((MIN_BALANCE IS NOT NULL) AND (BALANCE>MIN_BALANCE))) THEN BEGIN

        ORDER_ID=NULL;

        FOR SELECT ORDER_ID
              FROM ORDERS
             WHERE DRIVER_ID=:SENDER_ID
               AND PARENT_ID IS NULL
               AND DATE_HISTORY IS NULL
               AND FINISHED<>1
               AND LOCKED IS NULL
             ORDER BY DATE_ACCEPT DESC
              INTO :ORDER_ID DO BEGIN
          BREAK;
        END

        IF (ORDER_ID IS NOT NULL) THEN BEGIN

          UPDATE IN_MESSAGES
             SET ORDER_ID=:ORDER_ID
           WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID;

          EXECUTE PROCEDURE PROCESS_ORDER(SESSION_ID,ACCOUNT_ID,ORDER_ID,0);

        END

      END

    END

  END

END

--

CREATE OR ALTER PROCEDURE EVENT_PROCESS_ORDERS_BEGIN
(
  APPLICATION_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32),
  SESSION_ID VARCHAR(32),
  PROTOCOL INTEGER
)
AS
DECLARE TEMP INTEGER;
DECLARE SECTION VARCHAR(100);
BEGIN
  SECTION='6A30BEBFC254851B4C714703C2F9D225';
  FOR SELECT SUCCESS
       FROM SEND_EVENT(0,0,:APPLICATION_ID,:ACCOUNT_ID,NULL,:SESSION_ID,:PROTOCOL,:SECTION,NULL)
       INTO :TEMP DO BEGIN
  END
END

--

CREATE OR ALTER PROCEDURE EVENT_PROCESS_ORDERS_END
(
  APPLICATION_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32),
  SESSION_ID VARCHAR(32),
  PROTOCOL INTEGER
)
AS
DECLARE TEMP INTEGER;
DECLARE SECTION VARCHAR(100);
BEGIN
  SECTION='C8D75DBDEE64878445A0E03716FC7769';
  FOR SELECT SUCCESS
       FROM SEND_EVENT(0,0,:APPLICATION_ID,:ACCOUNT_ID,NULL,:SESSION_ID,:PROTOCOL,:SECTION,NULL)
       INTO :TEMP DO BEGIN
  END
END

--

CREATE OR ALTER PROCEDURE PROCESS_ORDERS_BEGIN
(
  SESSION_ID VARCHAR(32)
)
RETURNS (
  ORDER_ID VARCHAR(32),
  ACTION_ID VARCHAR(32))
AS
BEGIN
  EXECUTE PROCEDURE EVENT_PROCESS_ORDERS_BEGIN('A35F5701A7AA920E40812A71A690910D',NULL,SESSION_ID,0);

  FOR SELECT ORDER_ID, ACTION_ID
        FROM ORDERS
       WHERE PARENT_ID IS NULL
         AND DATE_HISTORY IS NULL
         AND WHO_HISTORY_ID IS NULL
         AND TYPE_PROCESS=0
         AND FINISHED<>1
         AND LOCKED IS NULL
         AND CURRENT_TIMESTAMP>=(DATE_ARRIVAL-(BEFORE_PERIOD*(1e0/24/60)))
       ORDER BY DATE_ARRIVAL, DATE_ACCEPT
        INTO :ORDER_ID, :ACTION_ID DO BEGIN

    SUSPEND;

  END

END

--

CREATE OR ALTER PROCEDURE PROCESS_ORDERS_END
(
  SESSION_ID VARCHAR(32)
)
AS
BEGIN
  EXECUTE PROCEDURE EVENT_REFRESH_ORDERS('A35F5701A7AA920E40812A71A690910D',NULL,SESSION_ID,0);

  EXECUTE PROCEDURE EVENT_REFRESH_SHIFTS('A35F5701A7AA920E40812A71A690910D',NULL,SESSION_ID,0);

  EXECUTE PROCEDURE EVENT_REFRESH_PARK_STATES('A35F5701A7AA920E40812A71A690910D',NULL,SESSION_ID,0);

  EXECUTE PROCEDURE EVENT_PROCESS_ORDERS_END('A35F5701A7AA920E40812A71A690910D',NULL,SESSION_ID,0);
END

--

CREATE OR ALTER PROCEDURE CREATE_ORDER_HISTORY
(
  SESSION_ID VARCHAR(32),
  OLD_ORDER_ID VARCHAR(32),
  NEW_ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32),
  ACTION_ID VARCHAR(32),
  RESULT_ID VARCHAR(32),
  TYPE_PROCESS INTEGER,
  DATE_BEGIN TIMESTAMP,
  WITH_DEPENDS INTEGER,
  WITH_EVENT INTEGER
)
AS
BEGIN

  INSERT INTO ORDERS (ORDER_ID,PARENT_ID,ACTION_ID,RATE_ID,CAR_TYPE_ID,
                      WHO_ACCEPT_ID,STREET_ID,ZONE_ID,CAR_ID,
                      WHO_PROCESS_ID,RESULT_ID,PARK_ID,SOURCE_ID,DISCOUNT_ID,
                      DRIVER_ID,ORDER_NUM,PHONE,HOUSE,FLAT,PORCH,
                      DATE_ACCEPT,DATE_ARRIVAL,DATE_BEGIN,DATE_END,CUSTOMER,
                      DESCRIPTION,COST_RATE,COST_FACT,TYPE_ACCEPT,
                      TYPE_PROCESS,DATE_HISTORY,WHO_HISTORY_ID,BEFORE_PERIOD,
                      FINISHED,LOCKED,CLIENT_ID,COST_GROSS,FIRM_ID)
  SELECT :NEW_ORDER_ID,NULL,:ACTION_ID,RATE_ID,CAR_TYPE_ID,
         WHO_ACCEPT_ID,STREET_ID,ZONE_ID,CAR_ID,
         NULL,:RESULT_ID,PARK_ID,SOURCE_ID,DISCOUNT_ID,
         DRIVER_ID,ORDER_NUM,PHONE,HOUSE,FLAT,PORCH,
         DATE_ACCEPT,DATE_ARRIVAL,:DATE_BEGIN,NULL,CUSTOMER,
         DESCRIPTION,COST_RATE,COST_FACT,TYPE_ACCEPT,
         :TYPE_PROCESS,NULL,NULL,BEFORE_PERIOD,FINISHED,LOCKED,CLIENT_ID,COST_GROSS,FIRM_ID
    FROM ORDERS
   WHERE ORDER_ID=:OLD_ORDER_ID;

  IF (WITH_DEPENDS IS NOT NULL) THEN BEGIN

    INSERT INTO ROUTES (ROUTE_ID,ORDER_ID,ZONE_ID,STREET_ID,HOUSE,
                        FLAT,PORCH,DISTANCE,COST,PERIOD,AMOUNT,PRIORITY)
    SELECT GET_UNIQUE_ID(),:NEW_ORDER_ID,ZONE_ID,STREET_ID,HOUSE,
           FLAT,PORCH,DISTANCE,COST,PERIOD,AMOUNT,PRIORITY
      FROM ROUTES
     WHERE ORDER_ID=:OLD_ORDER_ID;


    INSERT INTO ORDER_SERVICES (ORDER_ID,SERVICE_ID,COST,
                                DESCRIPTION,AMOUNT,PRIORITY)
    SELECT :NEW_ORDER_ID,SERVICE_ID,COST,
           DESCRIPTION,AMOUNT,PRIORITY
      FROM ORDER_SERVICES
     WHERE ORDER_ID=:OLD_ORDER_ID;

  END

  UPDATE ORDERS
     SET PARENT_ID=:NEW_ORDER_ID,
         DATE_HISTORY=CURRENT_TIMESTAMP,
         WHO_HISTORY_ID=:ACCOUNT_ID
   WHERE ORDER_ID=:OLD_ORDER_ID;

  UPDATE ORDERS
     SET PARENT_ID=:NEW_ORDER_ID
   WHERE PARENT_ID=:OLD_ORDER_ID;

  UPDATE IN_MESSAGES
     SET ORDER_ID=:NEW_ORDER_ID
   WHERE ORDER_ID=:OLD_ORDER_ID;

  UPDATE OUT_MESSAGES
     SET ORDER_ID=:NEW_ORDER_ID
   WHERE ORDER_ID=:OLD_ORDER_ID;

  IF (WITH_EVENT IS NOT NULL) THEN
    EXECUTE PROCEDURE EVENT_REFRESH_ORDER('A35F5701A7AA920E40812A71A690910D',NULL,SESSION_ID,0,
                                          OLD_ORDER_ID,NEW_ORDER_ID,TYPE_PROCESS,NULL);

END

--


