consts

F0532713CEE09A984B2D52D050A58EF0
8CDCC7F96A988CA2432AA812964351F3
3796835EECA2A1024C539A9BC0DAAD01

--

receipt_types

771A20E1595D97694D7905B0A3D70FF9
9088327EC6DB8B544CF127CDCA60BFBA

--


CREATE OR ALTER PROCEDURE TASK_SHIFT_REMINDER
(
    TASK_ID VARCHAR(32),
    ACCOUNT_ID VARCHAR(32)
)
AS
DECLARE DRIVER_ID VARCHAR(32);
DECLARE PHONE VARCHAR(100);
DECLARE NAME VARCHAR(100);
DECLARE PATRONYMIC VARCHAR(100);
DECLARE S VARCHAR(1000);
DECLARE S1 VARCHAR(1000);
DECLARE D TIMESTAMP;
DECLARE DTIME TIMESTAMP;
DECLARE DAY_HOUR INTEGER;
DECLARE WEEK_DAY INTEGER;
DECLARE CNT INTEGER;
DECLARE SUM_CHARGE NUMERIC(15,2);
DECLARE SUM_RECEIPT NUMERIC(15,2);
DECLARE BALANCE NUMERIC(15,2);
DECLARE MIN_BALANCE NUMERIC(15,2);
BEGIN

  SELECT CONST_VALUE FROM GET_CONST_VALUE('FDBF450952CB8E8A40A38BD5122034B3') INTO :S;

  IF (S IS NOT NULL) THEN BEGIN

    D=CURRENT_TIMESTAMP;

    FOR SELECT D.DRIVER_ID, A.PHONE, A.NAME, A.PATRONYMIC, D.MIN_BALANCE
          FROM DRIVERS D
          JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
         WHERE A.LOCKED<>1
           AND D.DATE_SCHEDULE IS NOT NULL
           AND D.DATE_SCHEDULE<=CURRENT_DATE
          INTO :DRIVER_ID, :PHONE, :NAME, :PATRONYMIC, :MIN_BALANCE DO BEGIN

      WEEK_DAY=EXTRACT(WEEKDAY FROM CURRENT_TIMESTAMP)-1;
      IF (WEEK_DAY<0) THEN
        WEEK_DAY=6;

      DAY_HOUR=EXTRACT(HOUR FROM CURRENT_TIMESTAMP)+1;
      IF (DAY_HOUR>23) THEN BEGIN
        DAY_HOUR=0;
        WEEK_DAY=WEEK_DAY+1;
        IF (WEEK_DAY>6) THEN
          WEEK_DAY=0;
      END

      SELECT COUNT(*)
        FROM DRIVER_WEEK_SCHEDULES
       WHERE WEEK_DAY=:WEEK_DAY
         AND DAY_HOUR=:DAY_HOUR
         AND DRIVER_ID=:DRIVER_ID
        INTO :CNT;

      IF (CNT>0) THEN BEGIN

        SELECT COUNT(*)
          FROM SHIFTS
         WHERE DATE_END IS NULL
           AND ACCOUNT_ID=:DRIVER_ID
           AND DATE_BEGIN<=CURRENT_TIMESTAMP
          INTO :CNT;

        IF (CNT=0) THEN BEGIN

          EXECUTE PROCEDURE GET_ACCOUNT_BALANCE(:DRIVER_ID)
           RETURNING_VALUES :SUM_CHARGE, :SUM_RECEIPT, :BALANCE;

          IF ((MIN_BALANCE IS NULL) OR ((MIN_BALANCE IS NOT NULL) AND (BALANCE>MIN_BALANCE))) THEN BEGIN

            DTIME=CAST((CAST(DAY_HOUR AS VARCHAR(2))||':00') AS TIME);

            S1=S;
            S1=REPLACE_STRING(S1,'%NAME',NAME);
            S1=REPLACE_STRING(S1,'%PATRONYMIC',PATRONYMIC);
            S1=REPLACE_STRING(S1,'%TIME',FORMAT_DATETIME('hh:nn',DTIME));

            INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                      TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                              VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                      :S1,NULL,0,:PHONE,NULL,1,NULL,:D);

            D=D+5*(1e0/24/60/60);

          END

        END

      END

    END

  END

END

--

CREATE OR ALTER PROCEDURE TASK_SHIFT_CHARGE
(
    TASK_ID VARCHAR(32),
    ACCOUNT_ID VARCHAR(32)
)
AS
DECLARE DRIVER_ID VARCHAR(32);
DECLARE PHONE VARCHAR(100);
DECLARE NAME VARCHAR(100);
DECLARE PATRONYMIC VARCHAR(100);
DECLARE S VARCHAR(1000);
DECLARE S1 VARCHAR(1000);
DECLARE D TIMESTAMP;
DECLARE DAY_HOUR INTEGER;
DECLARE WEEK_DAY INTEGER;
DECLARE CNT INTEGER;
DECLARE SUM_CHARGE NUMERIC(15,2);
DECLARE CHARGE_TYPE_ID VARCHAR(32);
DECLARE SUM_RECEIPT NUMERIC(15,2);
DECLARE BALANCE NUMERIC(15,2);
DECLARE MIN_BALANCE NUMERIC(15,2);
BEGIN

  SELECT CONST_VALUE FROM GET_CONST_VALUE('118C2CC432E5B9B44A9BF94757EC2EDE') INTO :S;

  IF (S IS NOT NULL) THEN BEGIN

    D=CURRENT_TIMESTAMP;

    FOR SELECT D.DRIVER_ID, A.PHONE, A.NAME, A.PATRONYMIC, D.MIN_BALANCE
          FROM DRIVERS D
          JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
         WHERE A.LOCKED<>1
           AND D.DATE_SCHEDULE IS NOT NULL
           AND D.DATE_SCHEDULE<=CURRENT_DATE
          INTO :DRIVER_ID, :PHONE, :NAME, :PATRONYMIC, :MIN_BALANCE DO BEGIN

      WEEK_DAY=EXTRACT(WEEKDAY FROM CURRENT_TIMESTAMP)-1;
      IF (WEEK_DAY<0) THEN
        WEEK_DAY=6;

      DAY_HOUR=EXTRACT(HOUR FROM CURRENT_TIMESTAMP);

      SELECT COUNT(*)
        FROM DRIVER_WEEK_SCHEDULES
       WHERE WEEK_DAY=:WEEK_DAY
         AND DAY_HOUR=:DAY_HOUR
         AND DRIVER_ID=:DRIVER_ID
        INTO :CNT;

      IF (CNT>0) THEN BEGIN

        SELECT COUNT(*)
          FROM SHIFTS
         WHERE DATE_END IS NULL
           AND ACCOUNT_ID=:DRIVER_ID
           AND DATE_BEGIN<=CURRENT_TIMESTAMP
          INTO :CNT;

        IF (CNT=0) THEN BEGIN

          EXECUTE PROCEDURE GET_ACCOUNT_BALANCE(:DRIVER_ID)
           RETURNING_VALUES :SUM_CHARGE, :SUM_RECEIPT, :BALANCE;

          IF ((MIN_BALANCE IS NULL) OR ((MIN_BALANCE IS NOT NULL) AND (BALANCE>MIN_BALANCE))) THEN BEGIN

            SUM_CHARGE=NULL;
            CHARGE_TYPE_ID='CF012E53C5C9A03E4A7F03194B84DA49'; /* Не выполнение графика */

            SELECT SUM_CHARGE
              FROM CHARGE_TYPES
             WHERE CHARGE_TYPE_ID=:CHARGE_TYPE_ID
              INTO :SUM_CHARGE;

            IF (SUM_CHARGE IS NOT NULL) THEN BEGIN

              INSERT INTO CHARGES (CHARGE_ID,WHO_CREATE_ID,CHARGE_TYPE_ID,ACCOUNT_ID,
                                   SUM_CHARGE,DATE_CHARGE,DATE_CREATE,DESCRIPTION)
                           VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:CHARGE_TYPE_ID,:DRIVER_ID,
                                   :SUM_CHARGE,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,NULL);

              S1=S;
              S1=REPLACE_STRING(S1,'%SUM_CHARGE',CAST(SUM_CHARGE AS VARCHAR(30)));

              INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                        TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,
                                        PRIORITY,LOCKED,DATE_BEGIN)
                                VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                        :S1,NULL,0,:PHONE,NULL,
                                        1,NULL,:D);

              D=D+5*(1e0/24/60/60);

            END

          END

        END

      END

    END

  END

END

--

CREATE OR ALTER PROCEDURE TASK_BALANCE_REMINDER
(
    TASK_ID VARCHAR(32),
    ACCOUNT_ID VARCHAR(32)
)
AS
DECLARE DRIVER_ID VARCHAR(32);
DECLARE PHONE VARCHAR(100);
DECLARE NAME VARCHAR(100);
DECLARE PATRONYMIC VARCHAR(100);
DECLARE S VARCHAR(1000);
DECLARE S1 VARCHAR(1000);
DECLARE D TIMESTAMP;
DECLARE CNT INTEGER;
DECLARE SUM_CHARGE NUMERIC(15,2);
DECLARE SUM_RECEIPT NUMERIC(15,2);
DECLARE BALANCE NUMERIC(15,2);
DECLARE MIN_BALANCE NUMERIC(15,2);
BEGIN

  SELECT CONST_VALUE FROM GET_CONST_VALUE('F0532713CEE09A984B2D52D050A58EF0') INTO :S;

  IF (S IS NOT NULL) THEN BEGIN

    D=CURRENT_TIMESTAMP;

    FOR SELECT D.DRIVER_ID, A.PHONE, A.NAME, A.PATRONYMIC
          FROM DRIVERS D
          JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
         WHERE A.LOCKED<>1
          INTO :DRIVER_ID, :PHONE, :NAME, :PATRONYMIC DO BEGIN

      EXECUTE PROCEDURE GET_ACCOUNT_BALANCE(:DRIVER_ID)
       RETURNING_VALUES :SUM_CHARGE, :SUM_RECEIPT, :BALANCE;

      IF (BALANCE<0) THEN BEGIN

        S1=S;
        S1=REPLACE_STRING(S1,'%BALANCE',CAST(BALANCE AS VARCHAR(30)));
        S1=REPLACE_STRING(S1,'-','');

        INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                  TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                          VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                  :S1,NULL,0,:PHONE,NULL,2,NULL,:D);

        D=D+5*(1e0/24/60/60);

      END

    END

  END

END

--


CREATE OR ALTER PROCEDURE TASK_HAPPY_BIRTHDAY
(
    TASK_ID VARCHAR(32),
    ACCOUNT_ID VARCHAR(32)) 
AS
DECLARE RECIPIENT_ID VARCHAR(32);
DECLARE PHONE VARCHAR(100);
DECLARE NAME VARCHAR(100);
DECLARE PATRONYMIC VARCHAR(100);
DECLARE S VARCHAR(1000);
DECLARE S1 VARCHAR(1000);
DECLARE D TIMESTAMP;
DECLARE CURRENT_DAY INTEGER;
DECLARE CURRENT_MONTH INTEGER;
DECLARE RECEIPT_TYPE_ID VARCHAR(32);
DECLARE SUM_RECEIPT NUMERIC(15,0);
BEGIN

  D=CURRENT_TIMESTAMP;

  CURRENT_DAY=EXTRACT(DAY FROM D);
  CURRENT_MONTH=EXTRACT(MONTH FROM D);

  SELECT CONST_VALUE FROM GET_CONST_VALUE('8CDCC7F96A988CA2432AA812964351F3') INTO :S;

  IF (S IS NOT NULL) THEN BEGIN

    FOR SELECT A.ACCOUNT_ID, A.PHONE, A.NAME, A.PATRONYMIC
          FROM DISPATCHERS D
          JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DISPATCHER_ID
         WHERE A.LOCKED<>1
           AND EXTRACT(DAY FROM D.DATE_BIRTH)=:CURRENT_DAY
           AND EXTRACT(MONTH FROM D.DATE_BIRTH)=:CURRENT_MONTH
          INTO :RECIPIENT_ID, :PHONE, :NAME, :PATRONYMIC DO BEGIN

      S1=S;
      S1=REPLACE_STRING(S1,'%NAME',NAME);
      S1=REPLACE_STRING(S1,'%PATRONYMIC',PATRONYMIC);

      INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                        VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:RECIPIENT_ID,CURRENT_TIMESTAMP,
                                :S1,NULL,0,:PHONE,NULL,2,NULL,:D);

      D=D+5*(1e0/24/60/60);
    END

  END

  SELECT CONST_VALUE FROM GET_CONST_VALUE('AF2D42CDBD398AFC4E0A988E3C57EF84') INTO :S;

  IF (S IS NOT NULL) THEN BEGIN

    FOR SELECT A.ACCOUNT_ID, A.PHONE, A.NAME, A.PATRONYMIC
          FROM DRIVERS D
          JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
         WHERE A.LOCKED<>1
           AND EXTRACT(DAY FROM D.DATE_BIRTH)=:CURRENT_DAY
           AND EXTRACT(MONTH FROM D.DATE_BIRTH)=:CURRENT_MONTH
          INTO :RECIPIENT_ID, :PHONE, :NAME, :PATRONYMIC DO BEGIN

      RECEIPT_TYPE_ID='771A20E1595D97694D7905B0A3D70FF9'; /* День рождения водителя */

      SELECT SUM_RECEIPT
        FROM RECEIPT_TYPES
       WHERE RECEIPT_TYPE_ID=:RECEIPT_TYPE_ID
        INTO :SUM_RECEIPT;

      IF (SUM_RECEIPT IS NOT NULL) THEN BEGIN

        INSERT INTO RECEIPTS (RECEIPT_ID,RECEIPT_TYPE_ID,ACCOUNT_ID,WHO_CREATE_ID,
                              SUM_RECEIPT,DATE_RECEIPT,DATE_CREATE,DESCRIPTION)
                      VALUES (GET_UNIQUE_ID(),:RECEIPT_TYPE_ID,:RECIPIENT_ID,:ACCOUNT_ID,
                              :SUM_RECEIPT,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,NULL);

        S1=S;
        S1=REPLACE_STRING(S1,'%NAME',NAME);
        S1=REPLACE_STRING(S1,'%PATRONYMIC',PATRONYMIC);
        S1=REPLACE_STRING(S1,'%SUM_RECEIPT',SUM_RECEIPT);

        INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                  TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                          VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:RECIPIENT_ID,CURRENT_TIMESTAMP,
                                  :S1,NULL,0,:PHONE,NULL,2,NULL,:D);

        D=D+5*(1e0/24/60/60);
      END

    END

  END

  SELECT CONST_VALUE FROM GET_CONST_VALUE('3796835EECA2A1024C539A9BC0DAAD01') INTO :S;

  IF (S IS NOT NULL) THEN BEGIN

    FOR SELECT A.ACCOUNT_ID, A.PHONE, A.NAME, A.PATRONYMIC
          FROM CLIENTS C
          JOIN ACCOUNTS A ON A.ACCOUNT_ID=C.CLIENT_ID
         WHERE A.LOCKED<>1
           AND EXTRACT(DAY FROM C.DATE_BIRTH)=:CURRENT_DAY
           AND EXTRACT(MONTH FROM C.DATE_BIRTH)=:CURRENT_MONTH
           AND C.CALC_ID IS NOT NULL
          INTO :RECIPIENT_ID, :PHONE, :NAME, :PATRONYMIC DO BEGIN

      RECEIPT_TYPE_ID='9088327EC6DB8B544CF127CDCA60BFBA'; /* День рождения клиента */

      SELECT SUM_RECEIPT
        FROM RECEIPT_TYPES
       WHERE RECEIPT_TYPE_ID=:RECEIPT_TYPE_ID
        INTO :SUM_RECEIPT;

      IF (SUM_RECEIPT IS NOT NULL) THEN BEGIN

        INSERT INTO RECEIPTS (RECEIPT_ID,RECEIPT_TYPE_ID,ACCOUNT_ID,WHO_CREATE_ID,
                              SUM_RECEIPT,DATE_RECEIPT,DATE_CREATE,DESCRIPTION)
                      VALUES (GET_UNIQUE_ID(),:RECEIPT_TYPE_ID,:RECIPIENT_ID,:ACCOUNT_ID,
                              :SUM_RECEIPT,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,NULL);

        S1=S;
        S1=REPLACE_STRING(S1,'%NAME',NAME);
        S1=REPLACE_STRING(S1,'%PATRONYMIC',PATRONYMIC);
        S1=REPLACE_STRING(S1,'%SUM_RECEIPT',SUM_RECEIPT);

        INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                  TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                          VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:RECIPIENT_ID,CURRENT_TIMESTAMP,
                                  :S1,NULL,0,:PHONE,NULL,2,NULL,:D);

        D=D+5*(1e0/24/60/60);

      END

    END

  END

END

--

DECLARE EXTERNAL FUNCTION SLEEP
    INTEGER
RETURNS INTEGER BY VALUE
ENTRY_POINT 'SLEEP' MODULE_NAME 'udfibase.dll'

--

DECLARE EXTERNAL FUNCTION EXECUTE_COMMAND
    CSTRING(32767),
    INTEGER
RETURNS INTEGER BY VALUE
ENTRY_POINT 'EXECUTE_COMMAND' MODULE_NAME 'udfibase.dll'

--

CREATE OR ALTER PROCEDURE RESTART_TASK_SERVER
AS
DECLARE RET INTEGER;
BEGIN
  RET=EXECUTE_COMMAND('sc stop TaxiTaskServer',0);

  RET=SLEEP(1000);

  RET=EXECUTE_COMMAND('sc start TaxiTaskServer',0);
END

--

CREATE OR ALTER PROCEDURE I_TASK
(
    TASK_ID VARCHAR(32),
    APPLICATION_ID VARCHAR(32),
    ACCOUNT_ID VARCHAR(32),
    INTERFACE_ID VARCHAR(32),
    NAME VARCHAR(100),
    DESCRIPTION VARCHAR(250),
    DATE_BEGIN TIMESTAMP,
    DATE_END TIMESTAMP,
    SCHEDULE INTEGER,
    PRIORITY INTEGER,
    ENABLED INTEGER,
    PROC_NAME VARCHAR(100),
    COMMAND_STRING VARCHAR(250),
    REPEAT_ENABLED INTEGER,
    REPEAT_TYPE INTEGER,
    REPEAT_VALUE INTEGER,
    REPEAT_COUNT INTEGER,
    DAY_FREQUENCY INTEGER,
    WEEK_FREQUENCY INTEGER,
    MONDAY INTEGER,
    TUESDAY INTEGER,
    WEDNESDAY INTEGER,
    THURSDAY INTEGER,
    FRIDAY INTEGER,
    SATURDAY INTEGER,
    SUNDAY INTEGER,
    MONTH_DAY INTEGER,
    JANUARY INTEGER,
    FEBRUARY INTEGER,
    MARCH INTEGER,
    APRIL INTEGER,
    MAY INTEGER,
    JUNE INTEGER,
    JULY INTEGER,
    AUGUST INTEGER,
    SEPTEMBER INTEGER,
    OCTOBER INTEGER,
    NOVEMBER INTEGER,
    DECEMBER INTEGER,
    DATE_EXECUTE TIMESTAMP,
    RESULT_STRING VARCHAR(250)) 
AS
BEGIN

  INSERT INTO /*PREFIX*/TASKS (TASK_ID,APPLICATION_ID,ACCOUNT_ID,INTERFACE_ID,NAME,DESCRIPTION,DATE_BEGIN,
                               DATE_END,SCHEDULE,PRIORITY,ENABLED,PROC_NAME,COMMAND_STRING,REPEAT_ENABLED,
                               REPEAT_TYPE,REPEAT_VALUE,REPEAT_COUNT,DAY_FREQUENCY,WEEK_FREQUENCY,
                               MONDAY,TUESDAY,WEDNESDAY,THURSDAY,FRIDAY,SATURDAY,SUNDAY,MONTH_DAY,
                               JANUARY,FEBRUARY,MARCH,APRIL,MAY,JUNE,JULY,AUGUST,SEPTEMBER,OCTOBER,NOVEMBER,DECEMBER,
                               DATE_EXECUTE,RESULT_STRING)
       VALUES (:TASK_ID,:APPLICATION_ID,:ACCOUNT_ID,:INTERFACE_ID,:NAME,:DESCRIPTION,:DATE_BEGIN,
               :DATE_END,:SCHEDULE,:PRIORITY,:ENABLED,:PROC_NAME,:COMMAND_STRING,:REPEAT_ENABLED,
               :REPEAT_TYPE,:REPEAT_VALUE,:REPEAT_COUNT,:DAY_FREQUENCY,:WEEK_FREQUENCY,
               :MONDAY,:TUESDAY,:WEDNESDAY,:THURSDAY,:FRIDAY,:SATURDAY,:SUNDAY,:MONTH_DAY,
               :JANUARY,:FEBRUARY,:MARCH,:APRIL,:MAY,:JUNE,:JULY,:AUGUST,:SEPTEMBER,:OCTOBER,:NOVEMBER,:DECEMBER,
               :DATE_EXECUTE,:RESULT_STRING);

  EXECUTE PROCEDURE RESTART_TASK_SERVER;

END

--

CREATE OR ALTER PROCEDURE U_TASK
(
    TASK_ID VARCHAR(32),
    APPLICATION_ID VARCHAR(32),
    ACCOUNT_ID VARCHAR(32),
    INTERFACE_ID VARCHAR(32),
    NAME VARCHAR(100),
    DESCRIPTION VARCHAR(250),
    DATE_BEGIN TIMESTAMP,
    DATE_END TIMESTAMP,
    SCHEDULE INTEGER,
    PRIORITY INTEGER,
    ENABLED INTEGER,
    PROC_NAME VARCHAR(100),
    COMMAND_STRING VARCHAR(250),
    REPEAT_ENABLED INTEGER,
    REPEAT_TYPE INTEGER,
    REPEAT_VALUE INTEGER,
    REPEAT_COUNT INTEGER,
    DAY_FREQUENCY INTEGER,
    WEEK_FREQUENCY INTEGER,
    MONDAY INTEGER,
    TUESDAY INTEGER,
    WEDNESDAY INTEGER,
    THURSDAY INTEGER,
    FRIDAY INTEGER,
    SATURDAY INTEGER,
    SUNDAY INTEGER,
    MONTH_DAY INTEGER,
    JANUARY INTEGER,
    FEBRUARY INTEGER,
    MARCH INTEGER,
    APRIL INTEGER,
    MAY INTEGER,
    JUNE INTEGER,
    JULY INTEGER,
    AUGUST INTEGER,
    SEPTEMBER INTEGER,
    OCTOBER INTEGER,
    NOVEMBER INTEGER,
    DECEMBER INTEGER,
    DATE_EXECUTE TIMESTAMP,
    RESULT_STRING VARCHAR(250),
    OLD_TASK_ID VARCHAR(32)) 
AS
BEGIN

  UPDATE /*PREFIX*/TASKS
     SET TASK_ID=:TASK_ID,
         APPLICATION_ID=:APPLICATION_ID,
         ACCOUNT_ID=:ACCOUNT_ID,
         INTERFACE_ID=:INTERFACE_ID,
         NAME=:NAME,
         DESCRIPTION=:DESCRIPTION,
         DATE_BEGIN=:DATE_BEGIN,
         DATE_END=:DATE_END,
         SCHEDULE=:SCHEDULE,
         PRIORITY=:PRIORITY,
         ENABLED=:ENABLED,
         PROC_NAME=:PROC_NAME,
         COMMAND_STRING=:COMMAND_STRING,
         REPEAT_ENABLED=:REPEAT_ENABLED,
         REPEAT_TYPE=:REPEAT_TYPE,
         REPEAT_VALUE=:REPEAT_VALUE,
         REPEAT_COUNT=:REPEAT_COUNT,
         DAY_FREQUENCY=:DAY_FREQUENCY,
         WEEK_FREQUENCY=:WEEK_FREQUENCY,
         MONDAY=:MONDAY,
         TUESDAY=:TUESDAY,
         WEDNESDAY=:WEDNESDAY,
         THURSDAY=:THURSDAY,
         FRIDAY=:FRIDAY,
         SATURDAY=:SATURDAY,
         SUNDAY=:SUNDAY,
         MONTH_DAY=:MONTH_DAY,
         JANUARY=:JANUARY,
         FEBRUARY=:FEBRUARY,
         MARCH=:MARCH,
         APRIL=:APRIL,
         MAY=:MAY,
         JUNE=:JUNE,
         JULY=:JULY,
         AUGUST=:AUGUST,
         SEPTEMBER=:SEPTEMBER,
         OCTOBER=:OCTOBER,
         NOVEMBER=:NOVEMBER,
         DECEMBER=:DECEMBER,
         DATE_EXECUTE=:DATE_EXECUTE,
         RESULT_STRING=:RESULT_STRING
   WHERE TASK_ID=:OLD_TASK_ID;

  EXECUTE PROCEDURE RESTART_TASK_SERVER;
END

--

CREATE OR ALTER PROCEDURE D_TASK
(
    OLD_TASK_ID VARCHAR(32)) 
AS
BEGIN

  DELETE FROM /*PREFIX*/TASKS
        WHERE TASK_ID=:OLD_TASK_ID;

  EXECUTE PROCEDURE RESTART_TASK_SERVER;

END

--

CREATE OR ALTER PROCEDURE TASK_DELETE_SESSIONS
(
    TASK_ID VARCHAR(32),
    ACCOUNT_ID VARCHAR(32)
)
AS
BEGIN
  DELETE FROM SESSIONS
   WHERE DATE_CHANGE<(CURRENT_TIMESTAMP-10*60*(1e0/24/60/60))
     AND APPLICATION_ID='A35F5701A7AA920E40812A71A690910D'; /* Такси клиент */
END

--

