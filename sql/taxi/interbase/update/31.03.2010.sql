CB66FC06A78BB69D430EB7BD1AFA13FA
2D1BA9876918B7CE42515B204A6020AB

--

ALTER TABLE DRIVERS
ADD DATE_PRIORITY DATE

--

ALTER TABLE DRIVERS
ADD MIN_HOURS INTEGER

--

DROP VIEW S_DRIVERS

--

CREATE VIEW S_DRIVERS
(
    DRIVER_ID,
    CALC_ID,
    CAR_ID,
    PHONE_HOME,
    LICENSE,
    CATEGORIES,
    INSURANCE,
    HEALTH_CERT,
    ADDICT_CERT,
    PASSPORT,
    PLACE_BIRTH,
    DATE_BIRTH,
    ADDRESS_RESIDENCE,
    ADDRESS_ACTUAL,
    MIN_BALANCE,
    PRIORITY,
    METHOD_ID,
    DATE_PRIORITY,
    MIN_HOURS,
    PHONE,
    DESCRIPTION,
    USER_NAME,
    DATE_CREATE,
    LOCKED,
    SURNAME,
    NAME,
    PATRONYMIC,
    CAR_STATE_NUM,
    CAR_BRAND,
    CAR_COLOR,
    CAR_CALLSIGN,
    CAR_TYPE_ID,
    CAR_TYPE_NAME,
    CAR_TYPE_FONT_COLOR,
    CAR_TYPE_BRUSH_COLOR,
    CALC_NAME,
    METHOD_NAME)
AS
SELECT D.*,
       A.PHONE,
       A.DESCRIPTION,
       A.USER_NAME,
       A.DATE_CREATE,
       A.LOCKED,
       A.SURNAME,
       A.NAME,
       A.PATRONYMIC,
       CR.STATE_NUM AS CAR_STATE_NUM,
       CR.BRAND AS CAR_BRAND,
       CR.COLOR AS CAR_COLOR,
       CR.CALLSIGN AS CAR_CALLSIGN,
       CR.CAR_TYPE_ID,
       CT.NAME AS CAR_TYPE_NAME,
       CT.FONT_COLOR AS CAR_TYPE_FONT_COLOR,
       CT.BRUSH_COLOR AS CAR_TYPE_BRUSH_COLOR,
       CL.NAME AS CALC_NAME,
       M.NAME AS METHOD_NAME
  FROM DRIVERS D
  JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
  JOIN CARS CR ON CR.CAR_ID=D.CAR_ID
  JOIN CAR_TYPES CT ON CT.CAR_TYPE_ID=CR.CAR_TYPE_ID
  LEFT JOIN CALCS CL ON CL.CALC_ID=D.CALC_ID
  LEFT JOIN METHODS M ON M.METHOD_ID=D.METHOD_ID

--


CREATE OR ALTER PROCEDURE I_DRIVER (
  DRIVER_ID VARCHAR(32),
  CALC_ID VARCHAR(32),
  CAR_ID VARCHAR(32),
  METHOD_ID VARCHAR(32),
  PHONE VARCHAR(100),
  PHONE_HOME VARCHAR(100),
  LICENSE VARCHAR(250),
  CATEGORIES VARCHAR(100),
  INSURANCE VARCHAR(250),
  HEALTH_CERT VARCHAR(250),
  DESCRIPTION VARCHAR(250),
  ADDICT_CERT VARCHAR(250),
  PASSPORT VARCHAR(250),
  PLACE_BIRTH VARCHAR(250),
  DATE_BIRTH DATE,
  ADDRESS_RESIDENCE VARCHAR(250),
  ADDRESS_ACTUAL VARCHAR(250),
  MIN_BALANCE NUMERIC(15,2),
  PRIORITY INTEGER,
  DATE_PRIORITY DATE,
  MIN_HOURS INTEGER,
  DATE_CREATE TIMESTAMP,
  USER_NAME VARCHAR(100),
  LOCKED INTEGER,
  SURNAME VARCHAR(100),
  NAME VARCHAR(100),
  PATRONYMIC VARCHAR(100))
AS
  DECLARE ROLE_ID VARCHAR(32);
BEGIN

  INSERT INTO ACCOUNTS (ACCOUNT_ID,DATE_CREATE,USER_NAME,LOCKED,SURNAME,NAME,PATRONYMIC,IS_ROLE,PHONE,DESCRIPTION)
       VALUES (:DRIVER_ID,:DATE_CREATE,:USER_NAME,:LOCKED,:SURNAME,:NAME,:PATRONYMIC,0,:PHONE,:DESCRIPTION);

  INSERT INTO DRIVERS (DRIVER_ID,CALC_ID,CAR_ID,METHOD_ID,PHONE_HOME,LICENSE,
                       CATEGORIES,INSURANCE,HEALTH_CERT,ADDICT_CERT,
                       PASSPORT,PLACE_BIRTH,DATE_BIRTH,ADDRESS_RESIDENCE,ADDRESS_ACTUAL,
                       MIN_BALANCE,PRIORITY,DATE_PRIORITY,MIN_HOURS)
       VALUES (:DRIVER_ID,:CALC_ID,:CAR_ID,:METHOD_ID,:PHONE_HOME,:LICENSE,
               :CATEGORIES,:INSURANCE,:HEALTH_CERT,:ADDICT_CERT,
               :PASSPORT,:PLACE_BIRTH,:DATE_BIRTH,:ADDRESS_RESIDENCE,:ADDRESS_ACTUAL,
               :MIN_BALANCE,:PRIORITY,:DATE_PRIORITY,:MIN_HOURS);

  ROLE_ID='3EBE04F48C07BAB246324FBA8551FEF1'; /* Водители */
  INSERT INTO ACCOUNT_ROLES (ROLE_ID,ACCOUNT_ID)
       VALUES (:ROLE_ID,:DRIVER_ID);
END

--

CREATE OR ALTER PROCEDURE U_DRIVER (
  DRIVER_ID VARCHAR(32),
  CALC_ID VARCHAR(32),
  CAR_ID VARCHAR(32),
  METHOD_ID VARCHAR(32),
  PHONE VARCHAR(100),
  PHONE_HOME VARCHAR(100),
  LICENSE VARCHAR(250),
  CATEGORIES VARCHAR(100),
  INSURANCE VARCHAR(250),
  HEALTH_CERT VARCHAR(250),
  DESCRIPTION VARCHAR(250),
  ADDICT_CERT VARCHAR(250),
  PASSPORT VARCHAR(250),
  PLACE_BIRTH VARCHAR(250),
  DATE_BIRTH DATE,
  ADDRESS_RESIDENCE VARCHAR(250),
  ADDRESS_ACTUAL VARCHAR(250),
  MIN_BALANCE NUMERIC(15,2),
  PRIORITY INTEGER,
  DATE_PRIORITY DATE,
  MIN_HOURS INTEGER,
  USER_NAME VARCHAR(100),
  LOCKED INTEGER,
  SURNAME VARCHAR(100),
  NAME VARCHAR(100),
  PATRONYMIC VARCHAR(100),
  OLD_DRIVER_ID VARCHAR(32))
AS
BEGIN

  UPDATE ACCOUNTS
     SET ACCOUNT_ID=:DRIVER_ID,
         USER_NAME=:USER_NAME,
         LOCKED=:LOCKED,
         SURNAME=:SURNAME,
         NAME=:NAME,
         PATRONYMIC=:PATRONYMIC,
         IS_ROLE=0,
         PHONE=:PHONE,
         DESCRIPTION=:DESCRIPTION
   WHERE ACCOUNT_ID=:OLD_DRIVER_ID;

  UPDATE DRIVERS
     SET DRIVER_ID=:DRIVER_ID,
         CALC_ID=:CALC_ID,
         CAR_ID=:CAR_ID,
         METHOD_ID=:METHOD_ID,
         PHONE_HOME=:PHONE_HOME,
         LICENSE=:LICENSE,
         CATEGORIES=:CATEGORIES,
         INSURANCE=:INSURANCE,
         HEALTH_CERT=:HEALTH_CERT,
         ADDICT_CERT=:ADDICT_CERT,
         PASSPORT=:PASSPORT,
         PLACE_BIRTH=:PLACE_BIRTH,
         DATE_BIRTH=:DATE_BIRTH,
         ADDRESS_RESIDENCE=:ADDRESS_RESIDENCE,
         ADDRESS_ACTUAL=:ADDRESS_ACTUAL,
         MIN_BALANCE=:MIN_BALANCE,
         PRIORITY=:PRIORITY,
         DATE_PRIORITY=:DATE_PRIORITY,
         MIN_HOURS=:MIN_HOURS
   WHERE DRIVER_ID=:OLD_DRIVER_ID;

END

--

CREATE OR ALTER PROCEDURE D_DRIVER
(
  OLD_DRIVER_ID VARCHAR(32)
)
AS
BEGIN
  DELETE FROM DRIVER_WEEK_SCHEDULES
        WHERE DRIVER_ID=:OLD_DRIVER_ID;

  DELETE FROM DRIVERS
        WHERE DRIVER_ID=:OLD_DRIVER_ID;

  DELETE FROM ACCOUNT_ROLES
        WHERE ACCOUNT_ID=:OLD_DRIVER_ID;

  DELETE FROM /*PRFEIX*/ACCOUNTS
        WHERE ACCOUNT_ID=:OLD_DRIVER_ID;
END

--

CREATE OR ALTER PROCEDURE TASK_CHANGE_PRIORITY
(
    TASK_ID VARCHAR(32),
    ACCOUNT_ID VARCHAR(32)
)
AS
DECLARE VARIABLE DRIVER_ID VARCHAR(32);
DECLARE VARIABLE PHONE VARCHAR(100);
DECLARE VARIABLE NAME VARCHAR(100);
DECLARE VARIABLE PATRONYMIC VARCHAR(100);
DECLARE VARIABLE S VARCHAR(1000);
DECLARE VARIABLE S1 VARCHAR(1000);
DECLARE VARIABLE D TIMESTAMP;
DECLARE VARIABLE CNT INTEGER;
DECLARE VARIABLE NEW_PRIORITY INTEGER;
DECLARE VARIABLE PRIORITY INTEGER;
BEGIN

  SELECT CONST_VALUE FROM GET_CONST_VALUE('6C5F5E35B4F0B54A470F466044C8EB3F') INTO :S;

  IF (S IS NOT NULL) THEN BEGIN

    D=CURRENT_TIMESTAMP;

    FOR SELECT D.DRIVER_ID, D.PRIORITY,
               A.PHONE, A.NAME, A.PATRONYMIC
          FROM DRIVERS D
          JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
         WHERE A.LOCKED<>1
           AND A.DATE_CREATE<(CURRENT_TIMESTAMP-7*24*60*60*(1e0/24/60/60))
           AND D.DATE_PRIORITY IS NOT NULL
           AND D.DATE_PRIORITY>=CURRENT_DATE
           AND D.PRIORITY<>0
          INTO :DRIVER_ID, :PRIORITY,
               :PHONE, :NAME, :PATRONYMIC DO BEGIN

      SELECT COUNT(*)
        FROM ORDERS
       WHERE DRIVER_ID=:DRIVER_ID
         AND FINISHED=1
         AND PARENT_ID IS NULL
         AND RESULT_ID IN ('6DD8DFDC671DB9A742E418FD268E7DC4','E03D43E2E5B4AEEE4416B997D888FC71','B01126058AE48A354BBF0472888819A3')
         AND DATE_ACCEPT>=(CURRENT_TIMESTAMP-7*24*60*60*(1e0/24/60/60))
        INTO :CNT;

      IF ((CNT>=0) AND (CNT<=8)) THEN
        NEW_PRIORITY=4;

      IF ((CNT>8) AND (CNT<=15)) THEN
        NEW_PRIORITY=3;

      IF ((CNT>15) AND (CNT<=30)) THEN
        NEW_PRIORITY=2;

      IF (CNT>30) THEN
        NEW_PRIORITY=1;

      IF (PRIORITY<>NEW_PRIORITY) THEN BEGIN

        PRIORITY=NEW_PRIORITY;

        UPDATE DRIVERS
           SET PRIORITY=:PRIORITY
         WHERE DRIVER_ID=:DRIVER_ID;

        S1=S;
        S1=REPLACE_STRING(S1,'%PRIORITY',PRIORITY);
        S1=REPLACE_STRING(S1,'%ORDER_COUNT',CNT);

        INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                  TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                          VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                  :S1,NULL,0,:PHONE,NULL,2,NULL,:D);
        D=CURRENT_TIMESTAMP+5*(1e0/24/60/60);

      END

    END

  END

END

--

UPDATE DRIVERS
SET DATE_PRIORITY=CURRENT_DATE
WHERE PRIORITY<>0

--

update RDB$RELATION_FIELDS set
RDB$NULL_FLAG = NULL
where (RDB$FIELD_NAME = 'STREET_ID') and
(RDB$RELATION_NAME = 'ORDERS')

--

update RDB$RELATION_FIELDS set
RDB$NULL_FLAG = NULL
where (RDB$FIELD_NAME = 'HOUSE') and
(RDB$RELATION_NAME = 'ORDERS')

--

CREATE OR ALTER PROCEDURE CODE_ORDER
(
  ACCOUNT_ID VARCHAR(32),
  IN_MESSAGE_ID VARCHAR(32)
)
AS
DECLARE CONTACT VARCHAR(100);
DECLARE SENDER_ID VARCHAR(32);
DECLARE S VARCHAR(70);
DECLARE CNT INTEGER;
DECLARE CONST_VALUE VARCHAR(4000);
DECLARE ORDER_NUM VARCHAR(10);
DECLARE ACTION_ID VARCHAR(32);
DECLARE RATE_ID VARCHAR(32);
DECLARE CAR_TYPE_ID VARCHAR(32);
DECLARE CLIENT_ID VARCHAR(32);
DECLARE STREET_ID VARCHAR(32);
DECLARE HOUSE VARCHAR(10);
DECLARE FLAT VARCHAR(10);
DECLARE PORCH VARCHAR(10);
DECLARE ADDRESS_DESC VARCHAR(250);
BEGIN
  SELECT CONTACT, SENDER_ID
    FROM IN_MESSAGES
   WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID
    INTO :CONTACT, :SENDER_ID;

  IF ((CONTACT IS NOT NULL) AND (SENDER_ID IS NOT NULL)) THEN BEGIN

    SELECT CLIENT_ID, STREET_ID, HOUSE, FLAT, PORCH, ADDRESS_DESC
      FROM CLIENTS C
      JOIN ACCOUNTS A ON A.ACCOUNT_ID=C.CLIENT_ID
     WHERE C.CLIENT_ID=:SENDER_ID
       AND A.LOCKED<>1
      INTO :CLIENT_ID, :STREET_ID, :HOUSE, :FLAT, :PORCH, :ADDRESS_DESC;

    IF (CLIENT_ID IS NOT NULL) THEN BEGIN

      SELECT CONST_VALUE FROM GET_CONST_VALUE('CB66FC06A78BB69D430EB7BD1AFA13FA') INTO :S;

      IF (S IS NOT NULL) THEN BEGIN

        STREET_ID=NULL;
        HOUSE=NULL;
        FLAT=NULL;
        PORCH=NULL;
        ADDRESS_DESC=NULL;

        EXECUTE PROCEDURE GET_ORDER_NUM
         RETURNING_VALUES :ORDER_NUM;

        ACTION_ID='E019DBDE7D55BEC34D12A709EE3FEB0B'; /* Создание */

        RATE_ID=NULL;
        FOR SELECT RATE_ID
              FROM RATES
             ORDER BY PRIORITY
              INTO :RATE_ID DO BEGIN
          BREAK;
        END

        CAR_TYPE_ID=NULL;
        FOR SELECT CAR_TYPE_ID
              FROM CAR_TYPES
             ORDER BY PRIORITY
              INTO :CAR_TYPE_ID DO BEGIN
          BREAK;
        END

        IF ((RATE_ID IS NOT NULL) AND (CAR_TYPE_ID IS NOT NULL)) THEN BEGIN

          INSERT INTO ORDERS (ORDER_ID,ACTION_ID,RATE_ID,CAR_TYPE_ID,WHO_ACCEPT_ID,
                              CLIENT_ID,STREET_ID,HOUSE,FLAT,PORCH,DESCRIPTION,
                              ORDER_NUM,PHONE,DATE_ACCEPT,DATE_ARRIVAL,TYPE_ACCEPT,
                              TYPE_PROCESS,BEFORE_PERIOD,DATE_BEGIN,FINISHED)
                      VALUES (GET_UNIQUE_ID(),:ACTION_ID,:RATE_ID,:CAR_TYPE_ID,:ACCOUNT_ID,
                              :CLIENT_ID,:STREET_ID,:HOUSE,:FLAT,:PORCH,:ADDRESS_DESC,
                              :ORDER_NUM,:CONTACT,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,1,
                              1,30,CURRENT_TIMESTAMP,0);

          S=REPLACE_STRING(S,'%ORDER_NUM',ORDER_NUM);

          INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                    TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                            VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                    :S,NULL,0,:CONTACT,NULL,1,NULL,CURRENT_TIMESTAMP);
        END

      END

    END

  END
END

--

DROP VIEW S_ORDERS

--

CREATE VIEW S_ORDERS
(
    ORDER_ID,
    ACTION_ID,
    RATE_ID,
    CAR_TYPE_ID,
    WHO_ACCEPT_ID,
    STREET_ID,
    ZONE_ID,
    PARENT_ID,
    CAR_ID,
    WHO_PROCESS_ID,
    WHO_HISTORY_ID,
    RESULT_ID,
    PARK_ID,
    SOURCE_ID,
    DISCOUNT_ID,
    DRIVER_ID,
    ORDER_NUM,
    PHONE,
    HOUSE,
    FLAT,
    PORCH,
    DATE_ACCEPT,
    DATE_ARRIVAL,
    DATE_BEGIN,
    DATE_END,
    CUSTOMER,
    DESCRIPTION,
    COST_RATE,
    COST_FACT,
    TYPE_ACCEPT,
    TYPE_PROCESS,
    DATE_HISTORY,
    BEFORE_PERIOD,
    FINISHED,
    LOCKED,
    CLIENT_ID,
    COST_GROSS,
    ACTION_NAME,
    ACTION_BRUSH_COLOR,
    ACTION_FONT_COLOR,
    ACTION_PERIOD,
    RATE_NAME,
    CAR_TYPE_NAME,
    WHO_ACCEPT,
    STREET_NAME,
    STREET_PREFIX,
    LOCALITY_ID,
    LOCALITY_NAME,
    LOCALITY_PREFIX,
    ZONE_NAME,
    PARENT_ORDER_NUM,
    CLIENT_USER_NAME,
    CLIENT_SURNAME,
    CLIENT_NAME,
    CLIENT_PATRONYMIC,
    FIRM_SMALL_NAME,
    CAR_BRAND,
    CAR_STATE_NUM,
    CAR_COLOR,
    CAR_CALLSIGN,
    WHO_PROCESS,
    WHO_HISTORY,
    RESULT_NAME,
    RESULT_BRUSH_COLOR,
    RESULT_FONT_COLOR,
    PARK_NAME,
    PARK_DESCRIPTION,
    SOURCE_NAME,
    DISCOUNT_NUM,
    DISCOUNT_TYPE_NAME,
    DRIVER_NAME,
    DRIVER_PHONE,
    STATUS,
    ROUTE_STREET_ID,
    ROUTE_STREET_NAME,
    ROUTE_STREET_PREFIX,
    ROUTE_LOCALITY_ID,
    ROUTE_LOCALITY_NAME,
    ROUTE_LOCALITY_PREFIX,
    ROUTE_HOUSE,
    ROUTE_FLAT,
    ROUTE_PORCH,
    ROUTE_ZONE_ID,
    ROUTE_ZONE_NAME
)
AS
SELECT O.*,
       A.NAME AS ACTION_NAME,
       A.BRUSH_COLOR AS ACTION_BRUSH_COLOR,
       A.FONT_COLOR AS ACTION_FONT_COLOR,
       A.PERIOD AS ACTION_PERIOD,
       R.NAME AS RATE_NAME,
       CT.NAME AS CAR_TYPE_NAME,
       A1.USER_NAME AS WHO_ACCEPT,
       S1.NAME AS STREET_NAME,
       S1.PREFIX AS STREET_PREFIX,
       L1.LOCALITY_ID,
       L1.NAME AS LOCALITY_NAME,
       L1.PREFIX AS LOCALITY_PREFIX,
       Z1.NAME AS ZONE_NAME,
       OP.ORDER_NUM AS PARENT_ORDER_NUM,
       A5.USER_NAME AS CLIENT_USER_NAME,
       A5.SURNAME AS CLIENT_SURNAME,
       A5.NAME AS CLIENT_NAME,
       A5.PATRONYMIC AS CLIENT_PATRONYMIC,
       F.SMALL_NAME AS FIRM_SMALL_NAME,
       C.BRAND AS CAR_BRAND,
       C.STATE_NUM AS CAR_STATE_NUM,
       C.COLOR AS CAR_COLOR,
       C.CALLSIGN AS CAR_CALLSIGN,
       A2.USER_NAME AS WHO_PROCESS,
       A4.USER_NAME AS WHO_HISTORY,
       RT.NAME AS RESULT_NAME,
       RT.BRUSH_COLOR AS RESULT_BRUSH_COLOR,
       RT.FONT_COLOR AS RESULT_FONT_COLOR,
       P.NAME AS PARK_NAME,
       P.DESCRIPTION AS PARK_DESCRIPTION,
       S.NAME AS SOURCE_NAME,
       D.NUM AS DISCOUNT_NUM,
       DT.NAME AS DISCOUNT_TYPE_NAME,
       A3.USER_NAME AS DRIVER_NAME,
       A3.PHONE AS DRIVER_PHONE,
       (CASE WHEN (O.FINISHED=0) AND (CURRENT_TIMESTAMP>=(O.DATE_ARRIVAL-(O.BEFORE_PERIOD*(1e0/24/60)))) THEN 0
             WHEN (O.FINISHED=0) AND (CURRENT_TIMESTAMP<(O.DATE_ARRIVAL-(O.BEFORE_PERIOD*(1e0/24/60)))) THEN 1
             WHEN O.FINISHED=1 THEN 2
        ELSE 0 END) AS STATUS,
       S2.STREET_ID AS ROUTE_STREET_ID,
       S2.NAME AS ROUTE_STREET_NAME,
       S2.PREFIX AS ROUTE_STREET_PREFIX,
       L2.LOCALITY_ID AS ROUTE_LOCALITY_ID,
       L2.NAME AS ROUTE_LOCALITY_NAME,
       L2.PREFIX AS ROUTE_LOCALITY_PREFIX,
       RO.HOUSE AS ROUTE_HOUSE,
       RO.FLAT AS ROUTE_FLAT,
       RO.PORCH AS ROUTE_PORCH,
       RO.ZONE_ID AS ROUTE_ZONE_ID,
       Z2.NAME AS ROUTE_ZONE_NAME

  FROM ORDERS O
  JOIN ACTIONS A ON A.ACTION_ID=O.ACTION_ID
  JOIN RATES R ON R.RATE_ID=O.RATE_ID
  JOIN CAR_TYPES CT ON CT.CAR_TYPE_ID=O.CAR_TYPE_ID
  JOIN /*PERFIX*/ACCOUNTS A1 ON A1.ACCOUNT_ID=O.WHO_ACCEPT_ID
  LEFT JOIN STREETS S1 ON S1.STREET_ID=O.STREET_ID
  LEFT JOIN LOCALITIES L1 ON L1.LOCALITY_ID=S1.LOCALITY_ID
  LEFT JOIN ZONES Z1 ON Z1.ZONE_ID=O.ZONE_ID
  LEFT JOIN /*PERFIX*/ORDERS OP ON OP.ORDER_ID=O.PARENT_ID
  LEFT JOIN /*PERFIX*/CLIENTS CL ON CL.CLIENT_ID=O.CLIENT_ID
  LEFT JOIN ACCOUNTS A5 ON A5.ACCOUNT_ID=CL.CLIENT_ID
  LEFT JOIN FIRMS F ON F.FIRM_ID=A5.FIRM_ID
  LEFT JOIN /*PERFIX*/CARS C ON C.CAR_ID=O.CAR_ID
  LEFT JOIN /*PERFIX*/ACCOUNTS A2 ON A2.ACCOUNT_ID=O.WHO_PROCESS_ID
  LEFT JOIN /*PERFIX*/ACCOUNTS A4 ON A4.ACCOUNT_ID=O.WHO_HISTORY_ID
  LEFT JOIN /*PERFIX*/RESULTS RT ON RT.RESULT_ID=O.RESULT_ID
  LEFT JOIN /*PERFIX*/PARKS P ON P.PARK_ID=O.PARK_ID
  LEFT JOIN /*PERFIX*/SOURCES S ON S.SOURCE_ID=O.SOURCE_ID
  LEFT JOIN /*PERFIX*/DISCOUNTS D ON D.DISCOUNT_ID=O.DISCOUNT_ID
  LEFT JOIN DISCOUNT_TYPES DT ON DT.DISCOUNT_TYPE_ID=D.DISCOUNT_TYPE_ID
  LEFT JOIN /*PERFIX*/DRIVERS DR ON DR.DRIVER_ID=O.DRIVER_ID
  LEFT JOIN /*PERFIX*/ACCOUNTS A3 ON A3.ACCOUNT_ID=DR.DRIVER_ID
  LEFT JOIN ROUTES RO ON RO.ORDER_ID=O.ORDER_ID
                                AND RO.PRIORITY=(SELECT MAX(PRIORITY)
                                                   FROM ROUTES
                                                  WHERE ORDER_ID=O.ORDER_ID)
  LEFT JOIN STREETS S2 ON S2.STREET_ID=RO.STREET_ID
  LEFT JOIN LOCALITIES L2 ON L2.LOCALITY_ID=S2.LOCALITY_ID
  LEFT JOIN ZONES Z2 ON Z2.ZONE_ID=RO.ZONE_ID

--

DROP VIEW S_DRIVER_FREE

--

DROP VIEW S_DRIVER_POSITIVES

--

DROP VIEW S_DRIVER_PARK_FREE

--

DROP VIEW S_DRIVERS_EX

--

CREATE VIEW S_DRIVERS_EX
(
    DRIVER_ID,
    CALC_ID,
    CAR_ID,
    PHONE_HOME,
    LICENSE,
    CATEGORIES,
    INSURANCE,
    HEALTH_CERT,
    ADDICT_CERT,
    PASSPORT,
    PLACE_BIRTH,
    DATE_BIRTH,
    ADDRESS_RESIDENCE,
    ADDRESS_ACTUAL,
    MIN_BALANCE,
    PRIORITY,
    METHOD_ID,
    DATE_PRIORITY,
    MIN_HOURS,
    PHONE,
    DESCRIPTION,
    USER_NAME,
    DATE_CREATE,
    LOCKED,
    SURNAME,
    NAME,
    PATRONYMIC,
    CAR_STATE_NUM,
    CAR_BRAND,
    CAR_COLOR,
    CAR_CALLSIGN,
    CAR_TYPE_ID,
    CAR_TYPE_NAME,
    CAR_TYPE_FONT_COLOR,
    CAR_TYPE_BRUSH_COLOR,
    CALC_NAME,
    METHOD_NAME,
    SUM_CHARGE,
    SUM_RECEIPT,
    ACTUAL_BALANCE)
AS
SELECT D.*,
       A.PHONE,
       A.DESCRIPTION,
       A.USER_NAME,
       A.DATE_CREATE,
       A.LOCKED,
       A.SURNAME,
       A.NAME,
       A.PATRONYMIC,
       CR.STATE_NUM AS CAR_STATE_NUM,
       CR.BRAND AS CAR_BRAND,
       CR.COLOR AS CAR_COLOR,
       CR.CALLSIGN AS CAR_CALLSIGN,
       CR.CAR_TYPE_ID,
       CT.NAME AS CAR_TYPE_NAME,
       CT.FONT_COLOR AS CAR_TYPE_FONT_COLOR,
       CT.BRUSH_COLOR AS CAR_TYPE_BRUSH_COLOR,
       CL.NAME AS CALC_NAME,
       M.NAME AS METHOD_NAME,
       (CASE WHEN SAC.SUM_CHARGE IS NULL THEN 0.0 ELSE SAC.SUM_CHARGE END) SUM_CHARGE,
       (CASE WHEN SAR.SUM_RECEIPT IS NULL THEN 0.0 ELSE SAR.SUM_RECEIPT END) SUM_RECEIPT,
       ((CASE WHEN SAR.SUM_RECEIPT IS NULL THEN 0.0 ELSE SAR.SUM_RECEIPT END)-
        (CASE WHEN SAC.SUM_CHARGE IS NULL THEN 0.0 ELSE SAC.SUM_CHARGE END)) AS ACTUAL_BALANCE
  FROM DRIVERS D
  JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
  JOIN CARS CR ON CR.CAR_ID=D.CAR_ID
  JOIN CAR_TYPES CT ON CT.CAR_TYPE_ID=CR.CAR_TYPE_ID
  LEFT JOIN CALCS CL ON CL.CALC_ID=D.CALC_ID
  LEFT JOIN METHODS M ON M.METHOD_ID=D.METHOD_ID
  LEFT JOIN S_ACCOUNT_CHARGES SAC ON SAC.ACCOUNT_ID=D.DRIVER_ID
  LEFT JOIN S_ACCOUNT_RECEIPTS SAR ON SAR.ACCOUNT_ID=D.DRIVER_ID

--

CREATE VIEW S_DRIVER_PARK_FREE
(
    DRIVER_ID,
    CALC_ID,
    CAR_ID,
    PHONE_HOME,
    LICENSE,
    CATEGORIES,
    INSURANCE,
    HEALTH_CERT,
    ADDICT_CERT,
    PASSPORT,
    PLACE_BIRTH,
    DATE_BIRTH,
    ADDRESS_RESIDENCE,
    ADDRESS_ACTUAL,
    MIN_BALANCE,
    PRIORITY,
    METHOD_ID,
    DATE_PRIORITY,
    MIN_HOURS,
    PHONE,
    DESCRIPTION,
    USER_NAME,
    DATE_CREATE,
    LOCKED,
    SURNAME,
    NAME,
    PATRONYMIC,
    CAR_STATE_NUM,
    CAR_BRAND,
    CAR_COLOR,
    CAR_CALLSIGN,
    CAR_TYPE_ID,
    CAR_TYPE_NAME,
    CAR_TYPE_FONT_COLOR,
    CAR_TYPE_BRUSH_COLOR,
    CALC_NAME,
    METHOD_NAME,
    SUM_CHARGE,
    SUM_RECEIPT,
    ACTUAL_BALANCE)
AS
SELECT *
  FROM S_DRIVERS_EX
 WHERE DRIVER_ID IN (SELECT ACCOUNT_ID FROM SHIFTS
                      WHERE DATE_END IS NULL)
   AND DRIVER_ID NOT IN (SELECT DRIVER_ID FROM PARK_STATES
                          WHERE DATE_OUT IS NULL)
   AND LOCKED=0
   AND ((MIN_BALANCE IS NULL) OR (ACTUAL_BALANCE>MIN_BALANCE))

--

CREATE VIEW S_DRIVER_FREE
(
    DRIVER_ID,
    CALC_ID,
    CAR_ID,
    PHONE_HOME,
    LICENSE,
    CATEGORIES,
    INSURANCE,
    HEALTH_CERT,
    ADDICT_CERT,
    PASSPORT,
    PLACE_BIRTH,
    DATE_BIRTH,
    ADDRESS_RESIDENCE,
    ADDRESS_ACTUAL,
    MIN_BALANCE,
    PRIORITY,
    METHOD_ID,
    DATE_PRIORITY,
    MIN_HOURS,
    PHONE,
    DESCRIPTION,
    USER_NAME,
    DATE_CREATE,
    LOCKED,
    SURNAME,
    NAME,
    PATRONYMIC,
    CAR_STATE_NUM,
    CAR_BRAND,
    CAR_COLOR,
    CAR_CALLSIGN,
    CAR_TYPE_ID,
    CAR_TYPE_NAME,
    CAR_TYPE_FONT_COLOR,
    CAR_TYPE_BRUSH_COLOR,
    CALC_NAME,
    METHOD_NAME,
    SUM_CHARGE,
    SUM_RECEIPT,
    ACTUAL_BALANCE
)
AS
SELECT *
  FROM S_DRIVERS_EX
 WHERE DRIVER_ID NOT IN (SELECT ACCOUNT_ID FROM SHIFTS
                          WHERE DATE_END IS NULL)
   AND LOCKED=0
   AND ((MIN_BALANCE IS NULL) OR (ACTUAL_BALANCE>MIN_BALANCE))

--

CREATE VIEW S_DRIVER_POSITIVES
(
    DRIVER_ID,
    CALC_ID,
    CAR_ID,
    PHONE_HOME,
    LICENSE,
    CATEGORIES,
    INSURANCE,
    HEALTH_CERT,
    ADDICT_CERT,
    PASSPORT,
    PLACE_BIRTH,
    DATE_BIRTH,
    ADDRESS_RESIDENCE,
    ADDRESS_ACTUAL,
    MIN_BALANCE,
    PRIORITY,
    METHOD_ID,
    DATE_PRIORITY,
    MIN_HOURS,
    PHONE,
    DESCRIPTION,
    USER_NAME,
    DATE_CREATE,
    LOCKED,
    SURNAME,
    NAME,
    PATRONYMIC,
    CAR_STATE_NUM,
    CAR_BRAND,
    CAR_COLOR,
    CAR_CALLSIGN,
    CAR_TYPE_ID,
    CAR_TYPE_NAME,
    CAR_TYPE_FONT_COLOR,
    CAR_TYPE_BRUSH_COLOR,
    CALC_NAME,
    METHOD_NAME,
    SUM_CHARGE,
    SUM_RECEIPT,
    ACTUAL_BALANCE)
AS
SELECT *
  FROM S_DRIVERS_EX
 WHERE (MIN_BALANCE IS NULL)
    OR (ACTUAL_BALANCE>MIN_BALANCE)

--

CREATE OR ALTER PROCEDURE TASK_DRIVE_LOCK
(
  TASK_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32)
)
AS
DECLARE VARIABLE DRIVER_ID VARCHAR(32);
DECLARE VARIABLE S VARCHAR(1000);
DECLARE VARIABLE S1 VARCHAR(1000);
DECLARE VARIABLE D TIMESTAMP;
DECLARE VARIABLE DATE_END TIMESTAMP;
DECLARE PHONE VARCHAR(100);
DECLARE CNT INTEGER;
BEGIN

  SELECT CONST_VALUE FROM GET_CONST_VALUE('2D1BA9876918B7CE42515B204A6020AB') INTO :S;

  IF (S IS NOT NULL) THEN BEGIN

    D=CURRENT_TIMESTAMP;

    FOR SELECT D.DRIVER_ID, A.PHONE
          FROM DRIVERS D
          JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
         WHERE A.LOCKED<>1
          INTO :DRIVER_ID, :PHONE DO BEGIN

      SELECT MAX(DATE_END)
        FROM SHIFTS
       WHERE ACCOUNT_ID=:DRIVER_ID
        INTO :DATE_END;

      SELECT COUNT(*)
        FROM SHIFTS
       WHERE ACCOUNT_ID=:DRIVER_ID
         AND DATE_END IS NULL
        INTO :CNT;

      IF ((CNT=0) AND (DATE_END IS NOT NULL) AND
          (DATE_END<(CURRENT_TIMESTAMP-7*24*60*60*(1e0/24/60/60)))) THEN BEGIN

        UPDATE ACCOUNTS
           SET LOCKED=1
         WHERE ACCOUNT_ID=:DRIVER_ID;

        S1=S;

        INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                  TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                          VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                  :S1,NULL,0,:PHONE,NULL,2,NULL,:D);
        D=CURRENT_TIMESTAMP+5*(1e0/24/60/60);

      END

    END

  END

END

--