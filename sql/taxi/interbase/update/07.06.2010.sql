CREATE VIEW S_ROUTE_HISTORY_EX
(
    PHONE,
    CLIENT_USER_NAME,
    CLIENT_ID,
    AMOUNT,
    DATE_FIRST,
    DATE_LAST
)
AS
SELECT RS.PHONE,
       A.USER_NAME AS CLIENT_USER_NAME,
       C.CLIENT_ID,
       SUM(RS.AMOUNT) AS AMOUNT,
       MIN(RS.DATE_FIRST) AS DATE_FIRST,
       MAX(RS.DATE_LAST) AS DATE_LAST
  FROM ROUTE_HISTORY RS
  LEFT JOIN CLIENTS C ON C.CLIENT_ID=RS.CLIENT_ID
  LEFT JOIN ACCOUNTS A ON A.ACCOUNT_ID=C.CLIENT_ID
 GROUP BY RS.PHONE, A.USER_NAME, C.CLIENT_ID

--


CREATE OR ALTER PROCEDURE CODE_GET_LOGINS 
(
  ACCOUNT_ID VARCHAR(32),
  IN_MESSAGE_ID VARCHAR(32))
AS
DECLARE CONTACT VARCHAR(100);
DECLARE USER_NAME VARCHAR(100);
DECLARE SENDER_ID VARCHAR(32);
DECLARE S VARCHAR(1000);
BEGIN
  SELECT CONTACT, SENDER_ID
    FROM IN_MESSAGES
   WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID
    INTO :CONTACT, :SENDER_ID;

  IF (CONTACT IS NOT NULL) THEN BEGIN

    S=NULL;

    FOR SELECT USER_NAME
          FROM ACCOUNTS
         WHERE PHONE=:CONTACT
          INTO :USER_NAME DO BEGIN

      IF (S IS NULL) THEN
        S=:USER_NAME;
      ELSE
        S=S||';'||:USER_NAME;

    END

    IF (S IS NOT NULL) THEN BEGIN

      S=S||' http://ataxi24.ru/files/taxi.jar';

      INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,
                                PRIORITY,LOCKED,DATE_BEGIN,ORDER_ID)
                        VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                :S,NULL,0,:CONTACT,NULL,
                                2,NULL,CURRENT_TIMESTAMP,NULL);

    END

  END

END

--

CREATE GENERATOR GEN_USER_NAME

--

CREATE OR ALTER PROCEDURE GET_DRIVER_USER_NAME
RETURNS (
  USER_NAME VARCHAR(10))
AS
BEGIN
  SELECT GEN_ID(GEN_USER_NAME,1)
    FROM RDB$DATABASE
    INTO USER_NAME;
END

--

CREATE OR ALTER PROCEDURE GET_CLIENT_USER_NAME
RETURNS (
  USER_NAME VARCHAR(10))
AS
BEGIN
  SELECT GEN_ID(GEN_USER_NAME,1)
    FROM RDB$DATABASE
    INTO USER_NAME;
END

--

DROP GENERATOR GEN_CLIENT_USER_NAME

--

CREATE OR ALTER PROCEDURE I_CLIENT
(
  CLIENT_ID VARCHAR(32),
  CLIENT_GROUP_ID VARCHAR(32),
  CALC_ID VARCHAR(32),
  SOURCE_ID VARCHAR(32),
  METHOD_ID VARCHAR(32),
  STREET_ID VARCHAR(32),
  "INDEX" VARCHAR(10),
  HOUSE VARCHAR(10),
  FLAT VARCHAR(10),
  SEX INTEGER,
  PASSPORT VARCHAR(250),
  DATE_BIRTH DATE,
  PLACE_BIRTH VARCHAR(250),
  MIN_BALANCE NUMERIC(15,2),
  PORCH VARCHAR(10),
  ADDRESS_DESC VARCHAR(250),
  PHONE VARCHAR(100),
  DESCRIPTION VARCHAR(250),
  USER_NAME VARCHAR(100),
  "PASSWORD" VARCHAR(100),
  LOCKED INTEGER,
  SURNAME VARCHAR(100),
  NAME VARCHAR(100),
  PATRONYMIC VARCHAR(100),
  FIRM_ID VARCHAR(32),
  JOB_TITLE VARCHAR(250))
AS
  DECLARE ROLE_ID VARCHAR(32);
  DECLARE CNT INTEGER;
BEGIN

  SELECT COUNT(*)
    FROM ACCOUNTS A
   WHERE UPPER(A.USER_NAME)=UPPER(:USER_NAME)
    INTO :CNT;

  IF (CNT>0) THEN
    EXCEPTION E 'Логин уже существует';


  INSERT INTO ACCOUNTS (ACCOUNT_ID,DATE_CREATE,USER_NAME,LOCKED,SURNAME,NAME,PATRONYMIC,
                                  IS_ROLE,PHONE,DESCRIPTION,FIRM_ID,JOB_TITLE,"PASSWORD")
                          VALUES (:CLIENT_ID,CURRENT_TIMESTAMP,:USER_NAME,:LOCKED,:SURNAME,:NAME,:PATRONYMIC,
                                  0,:PHONE,:DESCRIPTION,:FIRM_ID,:JOB_TITLE,:"PASSWORD");

  INSERT INTO CLIENTS (CLIENT_ID,CLIENT_GROUP_ID,CALC_ID,SOURCE_ID,METHOD_ID,STREET_ID,"INDEX",
                                 HOUSE,FLAT,SEX,PASSPORT,DATE_BIRTH,PLACE_BIRTH,MIN_BALANCE,
                                 PORCH,ADDRESS_DESC)
                         VALUES (:CLIENT_ID,:CLIENT_GROUP_ID,:CALC_ID,:SOURCE_ID,:METHOD_ID,:STREET_ID,:"INDEX",
                                 :HOUSE,:FLAT,:SEX,:PASSPORT,:DATE_BIRTH,:PLACE_BIRTH,:MIN_BALANCE,
                                 :PORCH,:ADDRESS_DESC);

  ROLE_ID='1D3BDEDD9A0B9EE84AEDC1FDED4F5A93'; /* Клиенты */
  INSERT INTO ACCOUNT_ROLES (ROLE_ID,ACCOUNT_ID)
       VALUES (:ROLE_ID,:CLIENT_ID);
END

--

CREATE OR ALTER PROCEDURE U_CLIENT
(
  CLIENT_ID VARCHAR(32),
  CLIENT_GROUP_ID VARCHAR(32),
  CALC_ID VARCHAR(32),
  SOURCE_ID VARCHAR(32),
  METHOD_ID VARCHAR(32),
  STREET_ID VARCHAR(32),
  "INDEX" VARCHAR(10),
  HOUSE VARCHAR(10),
  FLAT VARCHAR(10),
  SEX INTEGER,
  PASSPORT VARCHAR(250),
  DATE_BIRTH DATE,
  PLACE_BIRTH VARCHAR(250),
  MIN_BALANCE NUMERIC(15,2),
  PORCH VARCHAR(10),
  ADDRESS_DESC VARCHAR(250),
  PHONE VARCHAR(100),
  DESCRIPTION VARCHAR(250),
  USER_NAME VARCHAR(100),
  "PASSWORD" VARCHAR(100),
  LOCKED INTEGER,
  SURNAME VARCHAR(100),
  NAME VARCHAR(100),
  PATRONYMIC VARCHAR(100),
  FIRM_ID VARCHAR(32),
  JOB_TITLE VARCHAR(250),
  OLD_CLIENT_ID VARCHAR(32))
AS
  DECLARE CNT INTEGER;
BEGIN

  SELECT COUNT(*)
    FROM ACCOUNTS A
   WHERE UPPER(A.USER_NAME)=UPPER(:USER_NAME)
     AND A.ACCOUNT_ID<>:CLIENT_ID
    INTO :CNT;

  IF (CNT>0) THEN
    EXCEPTION E 'Логин уже существует';


  UPDATE ACCOUNTS
     SET ACCOUNT_ID=:CLIENT_ID,
         USER_NAME=:USER_NAME,
         LOCKED=:LOCKED,
         SURNAME=:SURNAME,
         NAME=:NAME,
         PATRONYMIC=:PATRONYMIC,
         IS_ROLE=0,
         PHONE=:PHONE,
         DESCRIPTION=:DESCRIPTION,
         FIRM_ID=:FIRM_ID,
         JOB_TITLE=:JOB_TITLE,
         "PASSWORD"=:"PASSWORD"
   WHERE ACCOUNT_ID=:OLD_CLIENT_ID;

  UPDATE CLIENTS
     SET CLIENT_ID=:CLIENT_ID,
         CLIENT_GROUP_ID=:CLIENT_GROUP_ID,
         CALC_ID=:CALC_ID,
         SOURCE_ID=:SOURCE_ID,
         METHOD_ID=:METHOD_ID,
         STREET_ID=:STREET_ID,
         "INDEX"=:"INDEX",
         HOUSE=:HOUSE,
         FLAT=:FLAT,
         SEX=:SEX,
         PASSPORT=:PASSPORT,
         DATE_BIRTH=:DATE_BIRTH,
         PLACE_BIRTH=:PLACE_BIRTH,
         MIN_BALANCE=:MIN_BALANCE,
         PORCH=:PORCH,
         ADDRESS_DESC=:ADDRESS_DESC
   WHERE CLIENT_ID=:OLD_CLIENT_ID;

END

--

CREATE OR ALTER PROCEDURE I_DRIVER
(
  DRIVER_ID VARCHAR(32),
  CALC_ID VARCHAR(32),
  CAR_ID VARCHAR(32),
  METHOD_ID VARCHAR(32),
  PHONE VARCHAR(100),
  PHONE_HOME VARCHAR(100),
  LICENSE VARCHAR(250),
  CATEGORIES VARCHAR(100),
  INSURANCE VARCHAR(250),
  HEALTH_CERT VARCHAR(250),
  DESCRIPTION VARCHAR(250),
  ADDICT_CERT VARCHAR(250),
  PASSPORT VARCHAR(250),
  PLACE_BIRTH VARCHAR(250),
  DATE_BIRTH DATE,
  ADDRESS_RESIDENCE VARCHAR(250),
  ADDRESS_ACTUAL VARCHAR(250),
  MIN_BALANCE NUMERIC(15,2),
  PRIORITY INTEGER,
  DATE_PRIORITY DATE,
  MIN_HOURS INTEGER,
  DATE_SCHEDULE DATE,
  DATE_CREATE TIMESTAMP,
  USER_NAME VARCHAR(100),
  LOCKED INTEGER,
  SURNAME VARCHAR(100),
  NAME VARCHAR(100),
  PATRONYMIC VARCHAR(100))
AS
  DECLARE ROLE_ID VARCHAR(32);
  DECLARE CNT INTEGER;
BEGIN

  SELECT COUNT(*)
    FROM ACCOUNTS A
   WHERE UPPER(A.USER_NAME)=UPPER(:USER_NAME)
    INTO :CNT;

  IF (CNT>0) THEN
    EXCEPTION E 'Логин уже существует';

  INSERT INTO ACCOUNTS (ACCOUNT_ID,DATE_CREATE,USER_NAME,LOCKED,SURNAME,NAME,PATRONYMIC,IS_ROLE,PHONE,DESCRIPTION)
       VALUES (:DRIVER_ID,:DATE_CREATE,:USER_NAME,:LOCKED,:SURNAME,:NAME,:PATRONYMIC,0,:PHONE,:DESCRIPTION);

  INSERT INTO DRIVERS (DRIVER_ID,CALC_ID,CAR_ID,METHOD_ID,PHONE_HOME,LICENSE,
                       CATEGORIES,INSURANCE,HEALTH_CERT,ADDICT_CERT,
                       PASSPORT,PLACE_BIRTH,DATE_BIRTH,ADDRESS_RESIDENCE,ADDRESS_ACTUAL,
                       MIN_BALANCE,PRIORITY,DATE_PRIORITY,MIN_HOURS,DATE_SCHEDULE)
       VALUES (:DRIVER_ID,:CALC_ID,:CAR_ID,:METHOD_ID,:PHONE_HOME,:LICENSE,
               :CATEGORIES,:INSURANCE,:HEALTH_CERT,:ADDICT_CERT,
               :PASSPORT,:PLACE_BIRTH,:DATE_BIRTH,:ADDRESS_RESIDENCE,:ADDRESS_ACTUAL,
               :MIN_BALANCE,:PRIORITY,:DATE_PRIORITY,:MIN_HOURS,:DATE_SCHEDULE);

  ROLE_ID='3EBE04F48C07BAB246324FBA8551FEF1'; /* Водители */
  INSERT INTO ACCOUNT_ROLES (ROLE_ID,ACCOUNT_ID)
       VALUES (:ROLE_ID,:DRIVER_ID);
END

--

CREATE OR ALTER PROCEDURE U_DRIVER 
(
  DRIVER_ID VARCHAR(32),
  CALC_ID VARCHAR(32),
  CAR_ID VARCHAR(32),
  METHOD_ID VARCHAR(32),
  PHONE VARCHAR(100),
  PHONE_HOME VARCHAR(100),
  LICENSE VARCHAR(250),
  CATEGORIES VARCHAR(100),
  INSURANCE VARCHAR(250),
  HEALTH_CERT VARCHAR(250),
  DESCRIPTION VARCHAR(250),
  ADDICT_CERT VARCHAR(250),
  PASSPORT VARCHAR(250),
  PLACE_BIRTH VARCHAR(250),
  DATE_BIRTH DATE,
  ADDRESS_RESIDENCE VARCHAR(250),
  ADDRESS_ACTUAL VARCHAR(250),
  MIN_BALANCE NUMERIC(15,2),
  PRIORITY INTEGER,
  DATE_PRIORITY DATE,
  MIN_HOURS INTEGER,
  DATE_SCHEDULE DATE,
  USER_NAME VARCHAR(100),
  LOCKED INTEGER,
  SURNAME VARCHAR(100),
  NAME VARCHAR(100),
  PATRONYMIC VARCHAR(100),
  OLD_DRIVER_ID VARCHAR(32))
AS
  DECLARE CNT INTEGER;
BEGIN

  SELECT COUNT(*)
    FROM ACCOUNTS A
   WHERE UPPER(A.USER_NAME)=UPPER(:USER_NAME)
     AND A.ACCOUNT_ID<>:DRIVER_ID
    INTO :CNT;

  IF (CNT>0) THEN
    EXCEPTION E 'Логин уже существует';

  UPDATE ACCOUNTS
     SET ACCOUNT_ID=:DRIVER_ID,
         USER_NAME=:USER_NAME,
         LOCKED=:LOCKED,
         SURNAME=:SURNAME,
         NAME=:NAME,
         PATRONYMIC=:PATRONYMIC,
         IS_ROLE=0,
         PHONE=:PHONE,
         DESCRIPTION=:DESCRIPTION
   WHERE ACCOUNT_ID=:OLD_DRIVER_ID;

  UPDATE DRIVERS
     SET DRIVER_ID=:DRIVER_ID,
         CALC_ID=:CALC_ID,
         CAR_ID=:CAR_ID,
         METHOD_ID=:METHOD_ID,
         PHONE_HOME=:PHONE_HOME,
         LICENSE=:LICENSE,
         CATEGORIES=:CATEGORIES,
         INSURANCE=:INSURANCE,
         HEALTH_CERT=:HEALTH_CERT,
         ADDICT_CERT=:ADDICT_CERT,
         PASSPORT=:PASSPORT,
         PLACE_BIRTH=:PLACE_BIRTH,
         DATE_BIRTH=:DATE_BIRTH,
         ADDRESS_RESIDENCE=:ADDRESS_RESIDENCE,
         ADDRESS_ACTUAL=:ADDRESS_ACTUAL,
         MIN_BALANCE=:MIN_BALANCE,
         PRIORITY=:PRIORITY,
         DATE_PRIORITY=:DATE_PRIORITY,
         MIN_HOURS=:MIN_HOURS,
         DATE_SCHEDULE=:DATE_SCHEDULE
   WHERE DRIVER_ID=:OLD_DRIVER_ID;

END

--

DROP VIEW S_DRIVER_PARKS

--

CREATE VIEW S_DRIVER_PARKS
(
    PARK_STATE_ID,
    DRIVER_ID,
    PARK_ID,
    DATE_IN,
    DATE_OUT,
    DRIVER_USER_NAME,
    DRIVER_SURNAME,
    DRIVER_NAME,
    DRIVER_PATRONYMIC,
    DRIVER_PHONE,
    CAR_ID,
    MIN_BALANCE,
    PRIORITY,
    CAR_COLOR,
    CAR_BRAND,
    CAR_STATE_NUM,
    CAR_CALLSIGN,
    CAR_TYPE_ID,
    CAR_TYPE_NAME,
    CAR_TYPE_FONT_COLOR,
    CAR_TYPE_BRUSH_COLOR,
    PARK_NAME)
AS
SELECT PS.*,
       A.USER_NAME AS DRIVER_USER_NAME,
       A.SURNAME AS DRIVER_SURNAME,
       A.NAME AS DRIVER_NAME,
       A.PATRONYMIC AS DRIVER_PATRONYMIC,
       A.PHONE AS DRIVER_PHONE,
       D.CAR_ID,
       D.MIN_BALANCE,
       D.PRIORITY,
       C.COLOR AS CAR_COLOR,
       C.BRAND AS CAR_BRAND,
       C.STATE_NUM AS CAR_STATE_NUM,
       C.CALLSIGN AS CAR_CALLSIGN,
       C.CAR_TYPE_ID,
       CT.NAME AS CAR_TYPE_NAME,
       CT.FONT_COLOR AS CAR_TYPE_FONT_COLOR,
       CT.BRUSH_COLOR AS CAR_TYPE_BRUSH_COLOR,
       P.NAME AS PARK_NAME
  FROM PARK_STATES PS
  JOIN PARKS P ON P.PARK_ID=PS.PARK_ID
  JOIN ACCOUNTS A ON A.ACCOUNT_ID=PS.DRIVER_ID
  JOIN DRIVERS D ON D.DRIVER_ID=PS.DRIVER_ID
  JOIN CARS C ON C.CAR_ID=D.CAR_ID
  JOIN CAR_TYPES CT ON CT.CAR_TYPE_ID=C.CAR_TYPE_ID

--

CREATE VIEW S_DRIVER_SHIFTS
(
    SHIFT_ID,
    DRIVER_ID,
    DATE_BEGIN,
    DATE_END,
    DRIVER_USER_NAME,
    DRIVER_SURNAME,
    DRIVER_NAME,
    DRIVER_PATRONYMIC,
    DRIVER_PHONE,
    CAR_ID,
    MIN_BALANCE,
    PRIORITY,
    CAR_COLOR,
    CAR_BRAND,
    CAR_STATE_NUM,
    CAR_CALLSIGN,
    CAR_TYPE_ID,
    CAR_TYPE_NAME,
    CAR_TYPE_FONT_COLOR,
    CAR_TYPE_BRUSH_COLOR,
    PARK_ID,
    PARK_NAME,
    PARK_DESCRIPTION
)
AS
SELECT S.*,
       A.USER_NAME AS DRIVER_USER_NAME,
       A.SURNAME AS DRIVER_SURNAME,
       A.NAME AS DRIVER_NAME,
       A.PATRONYMIC AS DRIVER_PATRONYMIC,
       A.PHONE AS DRIVER_PHONE,
       D.CAR_ID,
       D.MIN_BALANCE,
       D.PRIORITY,
       C.COLOR AS CAR_COLOR,
       C.BRAND AS CAR_BRAND,
       C.STATE_NUM AS CAR_STATE_NUM,
       C.CALLSIGN AS CAR_CALLSIGN,
       C.CAR_TYPE_ID,
       CT.NAME AS CAR_TYPE_NAME,
       CT.FONT_COLOR AS CAR_TYPE_FONT_COLOR,
       CT.BRUSH_COLOR AS CAR_TYPE_BRUSH_COLOR,
       P.PARK_ID,
       P.NAME AS PARK_NAME,
       P.DESCRIPTION AS PARK_DESCRIPTION
  FROM SHIFTS S
  JOIN ACCOUNTS A ON A.ACCOUNT_ID=S.ACCOUNT_ID
  JOIN DRIVERS D ON D.DRIVER_ID=S.ACCOUNT_ID
  JOIN CARS C ON C.CAR_ID=D.CAR_ID
  JOIN CAR_TYPES CT ON CT.CAR_TYPE_ID=C.CAR_TYPE_ID
  LEFT JOIN PARK_STATES PS ON PS.DRIVER_ID=D.DRIVER_ID AND PS.DATE_OUT IS NULL
  LEFT JOIN PARKS P ON P.PARK_ID=PS.PARK_ID

--

DROP VIEW S_ORDERS

--

CREATE VIEW S_ORDERS
(
    ORDER_ID,
    ACTION_ID,
    RATE_ID,
    CAR_TYPE_ID,
    WHO_ACCEPT_ID,
    STREET_ID,
    ZONE_ID,
    PARENT_ID,
    CAR_ID,
    WHO_PROCESS_ID,
    WHO_HISTORY_ID,
    RESULT_ID,
    PARK_ID,
    SOURCE_ID,
    DISCOUNT_ID,
    DRIVER_ID,
    ORDER_NUM,
    PHONE,
    HOUSE,
    FLAT,
    PORCH,
    DATE_ACCEPT,
    DATE_ARRIVAL,
    DATE_BEGIN,
    DATE_END,
    CUSTOMER,
    DESCRIPTION,
    COST_RATE,
    COST_FACT,
    TYPE_ACCEPT,
    TYPE_PROCESS,
    DATE_HISTORY,
    BEFORE_PERIOD,
    FINISHED,
    LOCKED,
    CLIENT_ID,
    COST_GROSS,
    ACTION_NAME,
    ACTION_BRUSH_COLOR,
    ACTION_FONT_COLOR,
    ACTION_PERIOD,
    RATE_NAME,
    CAR_TYPE_NAME,
    WHO_ACCEPT,
    STREET_NAME,
    STREET_PREFIX,
    LOCALITY_ID,
    LOCALITY_NAME,
    LOCALITY_PREFIX,
    ZONE_NAME,
    PARENT_ORDER_NUM,
    CLIENT_USER_NAME,
    CLIENT_SURNAME,
    CLIENT_NAME,
    CLIENT_PATRONYMIC,
    FIRM_SMALL_NAME,
    CAR_BRAND,
    CAR_STATE_NUM,
    CAR_COLOR,
    CAR_CALLSIGN,
    WHO_PROCESS,
    WHO_HISTORY,
    RESULT_NAME,
    RESULT_BRUSH_COLOR,
    RESULT_FONT_COLOR,
    PARK_NAME,
    PARK_DESCRIPTION,
    SOURCE_NAME,
    DISCOUNT_NUM,
    DISCOUNT_TYPE_NAME,
    DRIVER_USER_NAME,
    DRIVER_SURNAME,
    DRIVER_NAME,
    DRIVER_PATRONYMIC,
    DRIVER_PHONE,
    STATUS,
    ROUTE_STREET_ID,
    ROUTE_STREET_NAME,
    ROUTE_STREET_PREFIX,
    ROUTE_LOCALITY_ID,
    ROUTE_LOCALITY_NAME,
    ROUTE_LOCALITY_PREFIX,
    ROUTE_HOUSE,
    ROUTE_FLAT,
    ROUTE_PORCH,
    ROUTE_ZONE_ID,
    ROUTE_ZONE_NAME)
AS
SELECT O.*,
       A.NAME AS ACTION_NAME,
       A.BRUSH_COLOR AS ACTION_BRUSH_COLOR,
       A.FONT_COLOR AS ACTION_FONT_COLOR,
       A.PERIOD AS ACTION_PERIOD,
       R.NAME AS RATE_NAME,
       CT.NAME AS CAR_TYPE_NAME,
       A1.USER_NAME AS WHO_ACCEPT,
       S1.NAME AS STREET_NAME,
       S1.PREFIX AS STREET_PREFIX,
       L1.LOCALITY_ID,
       L1.NAME AS LOCALITY_NAME,
       L1.PREFIX AS LOCALITY_PREFIX,
       Z1.NAME AS ZONE_NAME,
       OP.ORDER_NUM AS PARENT_ORDER_NUM,
       A5.USER_NAME AS CLIENT_USER_NAME,
       A5.SURNAME AS CLIENT_SURNAME,
       A5.NAME AS CLIENT_NAME,
       A5.PATRONYMIC AS CLIENT_PATRONYMIC,
       F.SMALL_NAME AS FIRM_SMALL_NAME,
       C.BRAND AS CAR_BRAND,
       C.STATE_NUM AS CAR_STATE_NUM,
       C.COLOR AS CAR_COLOR,
       C.CALLSIGN AS CAR_CALLSIGN,
       A2.USER_NAME AS WHO_PROCESS,
       A4.USER_NAME AS WHO_HISTORY,
       RT.NAME AS RESULT_NAME,
       RT.BRUSH_COLOR AS RESULT_BRUSH_COLOR,
       RT.FONT_COLOR AS RESULT_FONT_COLOR,
       P.NAME AS PARK_NAME,
       P.DESCRIPTION AS PARK_DESCRIPTION,
       S.NAME AS SOURCE_NAME,
       D.NUM AS DISCOUNT_NUM,
       DT.NAME AS DISCOUNT_TYPE_NAME,
       A3.USER_NAME AS DRIVER_USER_NAME,
       A3.SURNAME AS DRIVER_SURNAME,
       A3.NAME AS DRIVER_NAME,
       A3.PATRONYMIC AS DRIVER_PATRONYMIC,
       A3.PHONE AS DRIVER_PHONE,
       (CASE WHEN (O.FINISHED=0) AND (CURRENT_TIMESTAMP>=(O.DATE_ARRIVAL-(O.BEFORE_PERIOD*(1e0/24/60)))) THEN 0
             WHEN (O.FINISHED=0) AND (CURRENT_TIMESTAMP<(O.DATE_ARRIVAL-(O.BEFORE_PERIOD*(1e0/24/60)))) THEN 1
             WHEN O.FINISHED=1 THEN 2
        ELSE 0 END) AS STATUS,
       S2.STREET_ID AS ROUTE_STREET_ID,
       S2.NAME AS ROUTE_STREET_NAME,
       S2.PREFIX AS ROUTE_STREET_PREFIX,
       L2.LOCALITY_ID AS ROUTE_LOCALITY_ID,
       L2.NAME AS ROUTE_LOCALITY_NAME,
       L2.PREFIX AS ROUTE_LOCALITY_PREFIX,
       RO.HOUSE AS ROUTE_HOUSE,
       RO.FLAT AS ROUTE_FLAT,
       RO.PORCH AS ROUTE_PORCH,
       RO.ZONE_ID AS ROUTE_ZONE_ID,
       Z2.NAME AS ROUTE_ZONE_NAME

  FROM ORDERS O
  JOIN ACTIONS A ON A.ACTION_ID=O.ACTION_ID
  JOIN RATES R ON R.RATE_ID=O.RATE_ID
  JOIN CAR_TYPES CT ON CT.CAR_TYPE_ID=O.CAR_TYPE_ID
  JOIN ACCOUNTS A1 ON A1.ACCOUNT_ID=O.WHO_ACCEPT_ID
  LEFT JOIN STREETS S1 ON S1.STREET_ID=O.STREET_ID
  LEFT JOIN LOCALITIES L1 ON L1.LOCALITY_ID=S1.LOCALITY_ID
  LEFT JOIN ZONES Z1 ON Z1.ZONE_ID=O.ZONE_ID
  LEFT JOIN ORDERS OP ON OP.ORDER_ID=O.PARENT_ID
  LEFT JOIN CLIENTS CL ON CL.CLIENT_ID=O.CLIENT_ID
  LEFT JOIN ACCOUNTS A5 ON A5.ACCOUNT_ID=CL.CLIENT_ID
  LEFT JOIN FIRMS F ON F.FIRM_ID=A5.FIRM_ID
  LEFT JOIN CARS C ON C.CAR_ID=O.CAR_ID
  LEFT JOIN ACCOUNTS A2 ON A2.ACCOUNT_ID=O.WHO_PROCESS_ID
  LEFT JOIN ACCOUNTS A4 ON A4.ACCOUNT_ID=O.WHO_HISTORY_ID
  LEFT JOIN RESULTS RT ON RT.RESULT_ID=O.RESULT_ID
  LEFT JOIN PARKS P ON P.PARK_ID=O.PARK_ID
  LEFT JOIN SOURCES S ON S.SOURCE_ID=O.SOURCE_ID
  LEFT JOIN DISCOUNTS D ON D.DISCOUNT_ID=O.DISCOUNT_ID
  LEFT JOIN DISCOUNT_TYPES DT ON DT.DISCOUNT_TYPE_ID=D.DISCOUNT_TYPE_ID
  LEFT JOIN DRIVERS DR ON DR.DRIVER_ID=O.DRIVER_ID
  LEFT JOIN ACCOUNTS A3 ON A3.ACCOUNT_ID=DR.DRIVER_ID
  LEFT JOIN ROUTES RO ON RO.ORDER_ID=O.ORDER_ID
                                AND RO.PRIORITY=(SELECT MAX(PRIORITY)
                                                   FROM ROUTES
                                                  WHERE ORDER_ID=O.ORDER_ID)
  LEFT JOIN STREETS S2 ON S2.STREET_ID=RO.STREET_ID
  LEFT JOIN LOCALITIES L2 ON L2.LOCALITY_ID=S2.LOCALITY_ID
  LEFT JOIN ZONES Z2 ON Z2.ZONE_ID=RO.ZONE_ID


--

DROP VIEW S_PARK_STATES

--

CREATE VIEW S_PARK_STATES
(
    PARK_STATE_ID,
    DRIVER_ID,
    PARK_ID,
    DATE_IN,
    DATE_OUT,
    PARK_NAME,
    PARK_DESCRIPTION,
    DRIVER_USER_NAME,
    DRIVER_SURNAME,
    DRIVER_NAME,
    DRIVER_PATRONYMIC,
    DRIVER_PHONE,
    CAR_ID,
    MIN_BALANCE,
    PRIORITY,
    CAR_COLOR,
    CAR_BRAND,
    CAR_STATE_NUM,
    CAR_TYPE_ID,
    CAR_CALLSIGN)
AS
SELECT PS.*,
       P.NAME AS PARK_NAME,
       P.DESCRIPTION AS PARK_DESCRIPTION,
       A.USER_NAME AS DRIVER_USER_NAME,
       A.SURNAME AS DRIVER_SURNAME,
       A.NAME AS DRIVER_NAME,
       A.PATRONYMIC AS DRIVER_PATRONYMIC,
       A.PHONE AS DRIVER_PHONE,
       D.CAR_ID,
       D.MIN_BALANCE,
       D.PRIORITY,
       C.COLOR AS CAR_COLOR,
       C.BRAND AS CAR_BRAND,
       C.STATE_NUM AS CAR_STATE_NUM,
       C.CAR_TYPE_ID,
       C.CALLSIGN AS CAR_CALLSIGN
  FROM PARK_STATES PS
  JOIN ACCOUNTS A ON A.ACCOUNT_ID=PS.DRIVER_ID
  JOIN PARKS P ON P.PARK_ID=PS.PARK_ID
  JOIN DRIVERS D ON D.DRIVER_ID=PS.DRIVER_ID
  JOIN CARS C ON C.CAR_ID=D.CAR_ID

--

DROP VIEW S_OUT_MESSAGES

--

CREATE VIEW S_OUT_MESSAGES
(
    OUT_MESSAGE_ID,
    CREATOR_ID,
    RECIPIENT_ID,
    DATE_CREATE,
    TEXT_OUT,
    DATE_OUT,
    TYPE_MESSAGE,
    CONTACT,
    DESCRIPTION,
    PRIORITY,
    LOCKED,
    DATE_BEGIN,
    DATE_END,
    ORDER_ID,
    CHANNEL,
    DELIVERY,
    DATE_DELIVERY,
    FLASH,
    CREATOR_NAME,
    RECIPIENT_USER_NAME,
    RECIPIENT_SURNAME,
    RECIPIENT_NAME,
    RECIPIENT_PATRONYMIC,
    RECIPIENT_PHONE,
    RECIPIENT_EMAIL
)
AS
SELECT OM.*,
       A1.USER_NAME AS CREATOR_NAME,
       A2.USER_NAME AS RECIPIENT_USER_NAME,
       A2.SURNAME AS RECIPIENT_SURNAME,
       A2.NAME AS RECIPIENT_NAME,
       A2.PATRONYMIC AS RECIPIENT_PATRONYMIC,
       A2.PHONE AS RECIPIENT_PHONE,
       A2.EMAIL AS RECIPIENT_EMAIL
  FROM OUT_MESSAGES OM
  JOIN ACCOUNTS A1 ON A1.ACCOUNT_ID=OM.CREATOR_ID
  LEFT JOIN ACCOUNTS A2 ON A2.ACCOUNT_ID=OM.RECIPIENT_ID

--

DROP VIEW S_DRIVER_OUT_MESSAGES

--

CREATE VIEW S_DRIVER_OUT_MESSAGES
(
    OUT_MESSAGE_ID,
    CREATOR_ID,
    RECIPIENT_ID,
    DATE_CREATE,
    TEXT_OUT,
    DATE_OUT,
    TYPE_MESSAGE,
    CONTACT,
    DESCRIPTION,
    PRIORITY,
    LOCKED,
    DATE_BEGIN,
    DATE_END,
    ORDER_ID,
    CHANNEL,
    DELIVERY,
    DATE_DELIVERY,
    FLASH,
    CREATOR_NAME,
    RECIPIENT_USER_NAME,
    RECIPIENT_SURNAME,
    RECIPIENT_NAME,
    RECIPIENT_PATRONYMIC,
    RECIPIENT_PHONE,
    RECIPIENT_EMAIL,
    CAR_STATE_NUM,
    CAR_BRAND,
    CAR_COLOR,
    CAR_CALLSIGN)
AS
SELECT OM.*,
       A1.USER_NAME AS CREATOR_NAME,
       A2.USER_NAME AS RECIPIENT_USER_NAME,
       A2.SURNAME AS RECIPIENT_SURNAME,
       A2.NAME AS RECIPIENT_NAME,
       A2.PATRONYMIC AS RECIPIENT_PATRONYMIC,
       A2.PHONE AS RECIPIENT_PHONE,
       A2.EMAIL AS RECIPIENT_EMAIL,
       CR.STATE_NUM AS CAR_STATE_NUM,
       CR.BRAND AS CAR_BRAND,
       CR.COLOR AS CAR_COLOR,
       CR.CALLSIGN AS CAR_CALLSIGN
  FROM OUT_MESSAGES OM
  JOIN DRIVERS D ON D.DRIVER_ID=OM.RECIPIENT_ID
  JOIN CARS CR ON CR.CAR_ID=D.CAR_ID
  JOIN ACCOUNTS A1 ON A1.ACCOUNT_ID=OM.CREATOR_ID
  LEFT JOIN ACCOUNTS A2 ON A2.ACCOUNT_ID=OM.RECIPIENT_ID

--

DROP VIEW S_IN_MESSAGES

--

CREATE VIEW S_IN_MESSAGES
(
    IN_MESSAGE_ID,
    SENDER_ID,
    CODE_MESSAGE_ID,
    DATE_SEND,
    TEXT_IN,
    DATE_IN,
    TYPE_MESSAGE,
    CONTACT,
    ORDER_ID,
    CHANNEL,
    DESCRIPTION,
    SENDER_USER_NAME,
    SENDER_SURNAME,
    SENDER_NAME,
    SENDER_PATRONYMIC,
    CODE
)
AS
SELECT IM.*,
       A.USER_NAME AS SENDER_USER_NAME,
       A.SURNAME AS SENDER_SURNAME,
       A.NAME AS SENDER_NAME,
       A.PATRONYMIC AS SENDER_PATRONYMIC,
       CM.CODE
  FROM IN_MESSAGES IM
  LEFT JOIN ACCOUNTS A ON A.ACCOUNT_ID=IM.SENDER_ID
  LEFT JOIN CODE_MESSAGES CM ON CM.CODE_MESSAGE_ID=IM.CODE_MESSAGE_ID

--

DROP VIEW S_DRIVER_IN_MESSAGES

--

CREATE VIEW S_DRIVER_IN_MESSAGES
(
    IN_MESSAGE_ID,
    SENDER_ID,
    CODE_MESSAGE_ID,
    DATE_SEND,
    TEXT_IN,
    DATE_IN,
    TYPE_MESSAGE,
    CONTACT,
    ORDER_ID,
    CHANNEL,
    DESCRIPTION,
    SENDER_USER_NAME,
    SENDER_SURNAME,
    SENDER_NAME,
    SENDER_PATRONYMIC,
    CODE,
    CAR_STATE_NUM,
    CAR_BRAND,
    CAR_COLOR,
    CAR_CALLSIGN
)
AS
SELECT IM.*,
       A.USER_NAME AS SENDER_USER_NAME,
       A.SURNAME AS SENDER_SURNAME,
       A.NAME AS SENDER_NAME,
       A.PATRONYMIC AS SENDER_PATRONYMIC,
       CM.CODE,
       CR.STATE_NUM AS CAR_STATE_NUM,
       CR.BRAND AS CAR_BRAND,
       CR.COLOR AS CAR_COLOR,
       CR.CALLSIGN AS CAR_CALLSIGN
  FROM IN_MESSAGES IM
  JOIN DRIVERS D ON D.DRIVER_ID=IM.SENDER_ID
  JOIN CARS CR ON CR.CAR_ID=D.CAR_ID
  LEFT JOIN ACCOUNTS A ON A.ACCOUNT_ID=IM.SENDER_ID
  LEFT JOIN CODE_MESSAGES CM ON CM.CODE_MESSAGE_ID=IM.CODE_MESSAGE_ID

--

DROP VIEW S_RECEIPTS

--

CREATE VIEW S_RECEIPTS
(
    RECEIPT_ID,
    RECEIPT_TYPE_ID,
    ACCOUNT_ID,
    WHO_CREATE_ID,
    SUM_RECEIPT,
    DATE_RECEIPT,
    DATE_CREATE,
    DESCRIPTION,
    RECEIPT_TYPE_NAME,
    USER_NAME,
    SURNAME,
    NAME,
    PATRONYMIC,
    WHO_USER_NAME
)
AS
SELECT R.*,
       RT.NAME AS RECEIPT_TYPE_NAME,
       A1.USER_NAME,
       A1.SURNAME,
       A1.NAME,
       A1.PATRONYMIC,
       A2.USER_NAME AS WHO_USER_NAME
  FROM RECEIPTS R
  JOIN RECEIPT_TYPES RT ON RT.RECEIPT_TYPE_ID=R.RECEIPT_TYPE_ID
  JOIN ACCOUNTS A1 ON A1.ACCOUNT_ID=R.ACCOUNT_ID
  JOIN ACCOUNTS A2 ON A2.ACCOUNT_ID=R.WHO_CREATE_ID

--

DROP VIEW S_CHARGES

--

CREATE VIEW S_CHARGES
(
    CHARGE_ID,
    CHARGE_TYPE_ID,
    ACCOUNT_ID,
    WHO_CREATE_ID,
    SUM_CHARGE,
    DATE_CHARGE,
    DATE_CREATE,
    DESCRIPTION,
    CHARGE_TYPE_NAME,
    USER_NAME,
    SURNAME,
    NAME,
    PATRONYMIC,
    WHO_USER_NAME
)
AS
SELECT C.*,
       CT.NAME AS CHARGE_TYPE_NAME,
       A1.USER_NAME,
       A1.SURNAME,
       A1.NAME,
       A1.PATRONYMIC,
       A2.USER_NAME AS WHO_USER_NAME
  FROM CHARGES C
  JOIN CHARGE_TYPES CT ON CT.CHARGE_TYPE_ID=C.CHARGE_TYPE_ID
  JOIN ACCOUNTS A1 ON A1.ACCOUNT_ID=C.ACCOUNT_ID
  JOIN ACCOUNTS A2 ON A2.ACCOUNT_ID=C.WHO_CREATE_ID

--

CREATE OR ALTER PROCEDURE DR_REFUSE_DRIVER
(
  ORDER_ID VARCHAR(32),
  ACTION_ID VARCHAR(32),
  RESULT_ID VARCHAR(32)) 
RETURNS (
  DETECTED INTEGER)
AS
DECLARE CNT INTEGER;
DECLARE DRIVER_ID VARCHAR(32);
DECLARE DATE_BEGIN TIMESTAMP;
DECLARE DATE_ACCEPT TIMESTAMP;
BEGIN
  DETECTED=0;

  SELECT DRIVER_ID, DATE_BEGIN, DATE_ACCEPT
    FROM ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID, :DATE_BEGIN, :DATE_ACCEPT;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    SELECT COUNT(*)
      FROM IN_MESSAGES IM
      JOIN CODE_MESSAGES CM ON CM.CODE_MESSAGE_ID=IM.CODE_MESSAGE_ID
     WHERE IM.SENDER_ID=:DRIVER_ID
       AND IM.ORDER_ID=:ORDER_ID
       AND IM.CODE_MESSAGE_ID='2D41BEAE73EE84B04F4E6210C399BB63' /* Водитель отказалася от заказа */
/*       AND IM.TYPE_MESSAGE=0
       AND IM.DATE_IN>:DATE_BEGIN */
       AND IM.DATE_IN>:DATE_ACCEPT
       AND CM.ENABLED=1
       AND IM.DESCRIPTION IS NULL
      INTO CNT;

    IF (CNT>0) THEN
      DETECTED=1;

  END

  SUSPEND;
END

--

CREATE OR ALTER PROCEDURE DR_REFUSE_CLIENT
(
  ORDER_ID VARCHAR(32),
  ACTION_ID VARCHAR(32),
  RESULT_ID VARCHAR(32)) 
RETURNS (
  DETECTED INTEGER)
AS
DECLARE CNT INTEGER;
DECLARE DRIVER_ID VARCHAR(32);
DECLARE DATE_BEGIN TIMESTAMP;
DECLARE DATE_ACCEPT TIMESTAMP;
BEGIN
  DETECTED=0;

  SELECT DRIVER_ID, DATE_BEGIN, DATE_ACCEPT
    FROM ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID, :DATE_BEGIN, :DATE_ACCEPT;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    SELECT COUNT(*)
      FROM IN_MESSAGES IM
      JOIN CODE_MESSAGES CM ON CM.CODE_MESSAGE_ID=IM.CODE_MESSAGE_ID
     WHERE IM.SENDER_ID=:DRIVER_ID
       AND IM.ORDER_ID=:ORDER_ID
       AND IM.CODE_MESSAGE_ID='9273E67428E797614B153E4C799D6F48' /* Клиент отказался от заказа */
/*       AND IM.TYPE_MESSAGE=0
       AND IM.DATE_IN>:DATE_BEGIN */
       AND IM.DATE_IN>:DATE_ACCEPT
       AND CM.ENABLED=1
       AND IM.DESCRIPTION IS NULL
      INTO CNT;

    IF (CNT>0) THEN
      DETECTED=1;

  END

  SUSPEND;
END

--

CREATE OR ALTER PROCEDURE DR_PARTLY_CALC
(
  ORDER_ID VARCHAR(32),
  ACTION_ID VARCHAR(32),
  RESULT_ID VARCHAR(32)) 
RETURNS (
  DETECTED INTEGER)
AS
DECLARE CNT INTEGER;
DECLARE DRIVER_ID VARCHAR(32);
DECLARE DATE_BEGIN TIMESTAMP;
DECLARE DATE_ACCEPT TIMESTAMP;
BEGIN
  DETECTED=0;

  SELECT DRIVER_ID, DATE_BEGIN, DATE_ACCEPT
    FROM ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID, :DATE_BEGIN, :DATE_ACCEPT;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    SELECT COUNT(*)
      FROM IN_MESSAGES IM
      JOIN CODE_MESSAGES CM ON CM.CODE_MESSAGE_ID=IM.CODE_MESSAGE_ID
     WHERE IM.SENDER_ID=:DRIVER_ID
       AND IM.ORDER_ID=:ORDER_ID
       AND IM.CODE_MESSAGE_ID='E0D06394F6BC81BA481D1F94D12B3FB4' /* Клиент отказался платить */
/*       AND IM.TYPE_MESSAGE=0
       AND IM.DATE_IN>:DATE_BEGIN */
       AND IM.DATE_IN>:DATE_ACCEPT
       AND CM.ENABLED=1
       AND IM.DESCRIPTION IS NULL
      INTO CNT;

    IF (CNT>0) THEN
      DETECTED=1;

  END

  SUSPEND;
END

--

CREATE OR ALTER PROCEDURE DR_FULL_CALC
(
  ORDER_ID VARCHAR(32),
  ACTION_ID VARCHAR(32),
  RESULT_ID VARCHAR(32)) 
RETURNS (
  DETECTED INTEGER)
AS
DECLARE CNT INTEGER;
DECLARE DRIVER_ID VARCHAR(32);
DECLARE DATE_BEGIN TIMESTAMP;
DECLARE DATE_ACCEPT TIMESTAMP;
BEGIN
  DETECTED=0;

  SELECT DRIVER_ID, DATE_BEGIN, DATE_ACCEPT
    FROM ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID, :DATE_BEGIN, :DATE_ACCEPT;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    SELECT COUNT(*)
      FROM IN_MESSAGES IM
      JOIN CODE_MESSAGES CM ON CM.CODE_MESSAGE_ID=IM.CODE_MESSAGE_ID
     WHERE IM.SENDER_ID=:DRIVER_ID
       AND IM.ORDER_ID=:ORDER_ID
       AND IM.CODE_MESSAGE_ID='0388BCC17DE1A1754B566F18AEEED771' /* Клиент рассчитался полностью */
/*       AND IM.TYPE_MESSAGE=0
       AND IM.DATE_IN>:DATE_BEGIN */
       AND IM.DATE_IN>:DATE_ACCEPT
       AND CM.ENABLED=1
       AND IM.DESCRIPTION IS NULL
      INTO CNT;

    IF (CNT>0) THEN
      DETECTED=1;

  END

  SUSPEND;
END

--

CREATE OR ALTER PROCEDURE DR_CONFIRM_ORDER
(
  ORDER_ID VARCHAR(32),
  ACTION_ID VARCHAR(32),
  RESULT_ID VARCHAR(32)) 
RETURNS (
  DETECTED INTEGER)
AS
DECLARE CNT INTEGER;
DECLARE DRIVER_ID VARCHAR(32);
DECLARE DATE_BEGIN TIMESTAMP;
DECLARE DATE_ACCEPT TIMESTAMP;
BEGIN
  DETECTED=0;

  SELECT DRIVER_ID, DATE_BEGIN, DATE_ACCEPT
    FROM ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID, :DATE_BEGIN, :DATE_ACCEPT;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    SELECT COUNT(*)
      FROM IN_MESSAGES IM
      JOIN CODE_MESSAGES CM ON CM.CODE_MESSAGE_ID=IM.CODE_MESSAGE_ID
     WHERE IM.SENDER_ID=:DRIVER_ID
       AND IM.ORDER_ID=:ORDER_ID
       AND IM.CODE_MESSAGE_ID='A87C64B41C87907A4B8C58C5F6A19E2F' /* Водитель принял заказ */
/*       AND IM.TYPE_MESSAGE=0
       AND IM.DATE_IN>:DATE_BEGIN */
       AND IM.DATE_IN>:DATE_ACCEPT
       AND CM.ENABLED=1
       AND IM.DESCRIPTION IS NULL
      INTO CNT;

    IF (CNT>0) THEN
      DETECTED=1;

  END

  SUSPEND;
END

--

CREATE OR ALTER PROCEDURE DR_CLIENT_IN_CAR
(
  ORDER_ID VARCHAR(32),
  ACTION_ID VARCHAR(32),
  RESULT_ID VARCHAR(32)) 
RETURNS (
  DETECTED INTEGER)
AS
DECLARE CNT INTEGER;
DECLARE DRIVER_ID VARCHAR(32);
DECLARE DATE_BEGIN TIMESTAMP;
DECLARE DATE_ACCEPT TIMESTAMP;
BEGIN
  DETECTED=0;

  SELECT DRIVER_ID, DATE_BEGIN, DATE_ACCEPT
    FROM ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID, :DATE_BEGIN, :DATE_ACCEPT;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    SELECT COUNT(*)
      FROM IN_MESSAGES IM
      JOIN CODE_MESSAGES CM ON CM.CODE_MESSAGE_ID=IM.CODE_MESSAGE_ID
     WHERE IM.SENDER_ID=:DRIVER_ID
       AND IM.ORDER_ID=:ORDER_ID
       AND IM.CODE_MESSAGE_ID='3FD0D3ABD5E0B697483FF8520EDDBD6D' /* Клиент сел в машину */
/*       AND IM.TYPE_MESSAGE=0
       AND IM.DATE_IN>:DATE_BEGIN */
       AND IM.DATE_IN>:DATE_ACCEPT
       AND CM.ENABLED=1
       AND IM.DESCRIPTION IS NULL
      INTO CNT;

    IF (CNT>0) THEN
      DETECTED=1;

  END

  SUSPEND;
END

--

CREATE OR ALTER PROCEDURE DR_CHANGE_ROUTE
(
  ORDER_ID VARCHAR(32),
  ACTION_ID VARCHAR(32),
  RESULT_ID VARCHAR(32)) 
RETURNS (
  DETECTED INTEGER)
AS
DECLARE CNT INTEGER;
DECLARE DRIVER_ID VARCHAR(32);
DECLARE DATE_BEGIN TIMESTAMP;
DECLARE DATE_ACCEPT TIMESTAMP;
BEGIN
  DETECTED=0;

  SELECT DRIVER_ID, DATE_BEGIN, DATE_ACCEPT
    FROM ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID, :DATE_BEGIN, :DATE_ACCEPT;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    SELECT COUNT(*)
      FROM IN_MESSAGES IM
      JOIN CODE_MESSAGES CM ON CM.CODE_MESSAGE_ID=IM.CODE_MESSAGE_ID
     WHERE IM.SENDER_ID=:DRIVER_ID
       AND IM.ORDER_ID=:ORDER_ID
       AND IM.CODE_MESSAGE_ID='F42D57842950B923481A9B2D02B925CB' /* Клиент хочет сменить маршрут */
/*       AND IM.TYPE_MESSAGE=0
       AND IM.DATE_IN>:DATE_BEGIN */
       AND IM.DATE_IN>:DATE_ACCEPT
       AND CM.ENABLED=1
       AND IM.DESCRIPTION IS NULL
      INTO CNT;

    IF (CNT>0) THEN
      DETECTED=1;

  END

  SUSPEND;
END

--

CREATE OR ALTER PROCEDURE DR_ARRIVAL_DRIVER
(
  ORDER_ID VARCHAR(32),
  ACTION_ID VARCHAR(32),
  RESULT_ID VARCHAR(32)) 
RETURNS (
  DETECTED INTEGER)
AS
DECLARE CNT INTEGER;
DECLARE DRIVER_ID VARCHAR(32);
DECLARE DATE_BEGIN TIMESTAMP;
DECLARE DATE_ACCEPT TIMESTAMP;
BEGIN
  DETECTED=0;

  SELECT DRIVER_ID, DATE_BEGIN, DATE_ACCEPT
    FROM ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID, :DATE_BEGIN, :DATE_ACCEPT;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    SELECT COUNT(*)
      FROM IN_MESSAGES IM
      JOIN CODE_MESSAGES CM ON CM.CODE_MESSAGE_ID=IM.CODE_MESSAGE_ID
     WHERE IM.SENDER_ID=:DRIVER_ID
       AND IM.ORDER_ID=:ORDER_ID
       AND IM.CODE_MESSAGE_ID='618A0B399123BEEA474944099929C541' /* Водитель прибыл */
/*       AND IM.TYPE_MESSAGE=0
       AND IM.DATE_IN>:DATE_BEGIN */
       AND IM.DATE_IN>:DATE_ACCEPT
       AND CM.ENABLED=1
       AND IM.DESCRIPTION IS NULL
      INTO CNT;

    IF (CNT>0) THEN
      DETECTED=1;

  END

  SUSPEND;
END

--

CREATE INDEX IDX_ACCOUNTS_USER_NAME
ON ACCOUNTS (USER_NAME)

--

CREATE INDEX IDX_ACCOUNTS_IS_ROLE
ON ACCOUNTS (IS_ROLE)

--

CREATE INDEX IDX_ACCOUNTS_LOCKED
ON ACCOUNTS (LOCKED)

--



