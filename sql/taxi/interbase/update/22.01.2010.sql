ALTER TABLE /*PREFIX*/OUT_MESSAGES
ADD DATE_BEGIN TIMESTAMP

--

ALTER TABLE /*PREFIX*/OUT_MESSAGES
ADD DATE_END TIMESTAMP

--

UPDATE /*PREFIX*/OUT_MESSAGES
SET DATE_BEGIN=DATE_CREATE

--

CREATE INDEX IDX_OUT_MESSAGES_DATE_BEGIN ON OUT_MESSAGES (DATE_BEGIN)

--

update RDB$RELATION_FIELDS set
RDB$NULL_FLAG = 1
where (RDB$FIELD_NAME = 'DATE_BEGIN') and
(RDB$RELATION_NAME = 'OUT_MESSAGES')

--

UPDATE /*PREFIX*/OUT_MESSAGES
SET DATE_END=DATE_CREATE+((1e0*1)/24/60/60*600)
WHERE PERIOD IS NOT NULL

--

CREATE INDEX IDX_OUT_MESSAGES_DATE_END ON OUT_MESSAGES (DATE_END)

--

DROP PROCEDURE UNLOCK_OUT_MESSAGE

--

DROP PROCEDURE U_ORDER

--

DROP PROCEDURE U_OUT_MESSAGE

--
DROP PROCEDURE PR_REFUSE_CLIENT_CONFIRM

--

DROP PROCEDURE LOCK_OUT_MESSAGES

--

DROP PROCEDURE PR_REFUSE_CLIENT_DRIVE_OUT

--

DROP PROCEDURE PR_ARRIVAL_DRIVER

--

DROP PROCEDURE PR_REFUSE_DRIVER_2

--

DROP PROCEDURE PR_REFUSE_DRIVER_COME_OUT

--

DROP PROCEDURE PR_REFUSE_DRIVER_CONFIRM

--

DROP PROCEDURE PR_REFUSE_DRIVER_DRIVE_OUT

--

DROP PROCEDURE PR_SELECT_DRIVER

--

DROP PROCEDURE I_RECEIPT

--

DROP PROCEDURE PR_CONFIRM_ORDER

--

DROP PROCEDURE PR_FULL_CALC

--

DROP PROCEDURE PR_PARTY_CALC

--

DROP PROCEDURE PR_REFUSE_CLIENT_COME_OUT

--

DROP PROCEDURE PR_CLIENT_IN_CAR

--

DROP PROCEDURE I_OUT_MESSAGE

--

DROP PROCEDURE DR_SEND_ORDER

--

DROP PROCEDURE CODE_PARK_OUT

--

DROP PROCEDURE PR_CHANGE_ROUTE

--

DROP PROCEDURE GET_OUT_MESSAGE_DETAILS

--

DROP PROCEDURE CODE_LOSE

--

DROP PROCEDURE GET_COUNT_OUT_MESSAGE_GRAPH

--

DROP PROCEDURE CODE_BALANCE

--

DROP PROCEDURE GET_COUNT_SUM_O_MESSAGE_GRAPH

--

DROP PROCEDURE CODE_PARK_IN

--

DROP PROCEDURE GET_COUNT_OUT_MES_GRAPH_HOUR

--

DROP PROCEDURE CODE_PARK_QUEUE

--

DROP PROCEDURE CODE_SHIFT_CLOSE

--

DROP PROCEDURE GET_COUNT_SUM_O_MES_GRAPH_HOUR

--

DROP PROCEDURE CODE_TEST

--

DROP PROCEDURE D_OUT_MESSAGE

--

DROP PROCEDURE EXCHANGE_AFTER

--

DROP PROCEDURE CODE_INCIDENT

--

DROP PROCEDURE CODE_PARK_STATES

--

DROP PROCEDURE QUERY_PARK_STATES

--

DROP PROCEDURE GET_COUNT_OUT_MESSAGES_REPORT

--

DROP PROCEDURE GET_COUNT_OUT_MESSAGES

--

DROP VIEW S_DRIVER_OUT_MESSAGES

--

DROP VIEW S_OUT_MESSAGES

--

ALTER TABLE /*PREFIX*/OUT_MESSAGES
DROP PERIOD

--

CREATE VIEW S_OUT_MESSAGES(
    OUT_MESSAGE_ID,
    CREATOR_ID,
    RECIPIENT_ID,
    DATE_CREATE,
    TEXT_OUT,
    DATE_OUT,
    TYPE_MESSAGE,
    CONTACT,
    DESCRIPTION,
    PRIORITY,
    LOCKED,
    DATE_BEGIN,
    DATE_END,
    CREATOR_NAME,
    RECIPIENT_NAME,
    RECIPIENT_PHONE,
    RECIPIENT_EMAIL)
AS
SELECT OM.*,
       A1.USER_NAME AS CREATOR_NAME,
       A2.USER_NAME AS RECIPIENT_NAME,
       A2.PHONE AS RECIPIENT_PHONE,
       A2.EMAIL AS RECIPIENT_EMAIL
  FROM /*PREFIX*/OUT_MESSAGES OM
  JOIN /*PREFIX*/ACCOUNTS A1 ON A1.ACCOUNT_ID=OM.CREATOR_ID
  LEFT JOIN /*PREFIX*/ACCOUNTS A2 ON A2.ACCOUNT_ID=OM.RECIPIENT_ID

--

CREATE OR ALTER PROCEDURE QUERY_PARK_STATES (
  CREATOR_ID VARCHAR(32),
  RECIPIENT_ID VARCHAR(32),
  CONTACT VARCHAR(100))
AS
  DECLARE S VARCHAR(1000);
  DECLARE F VARCHAR(1000);
  DECLARE S1 VARCHAR(1000);
  DECLARE PARK_NAME VARCHAR(100);
  DECLARE CNT INTEGER;
BEGIN
  IF ((CREATOR_ID IS NOT NULL) AND (CONTACT IS NOT NULL)) THEN BEGIN

    S='';

    SELECT CONST_VALUE FROM GET_CONST_VALUE('A3D890F68FF0BDCC4B42C3135174ABEF') INTO :F;

    IF (F IS NOT NULL) THEN BEGIN

       FOR SELECT P.NAME,
                  (SELECT COUNT(*)
                     FROM PARK_STATES PS
                    WHERE PS.DATE_OUT IS NULL
                      AND PS.PARK_ID=P.PARK_ID)
             FROM PARKS P
            ORDER BY P.PRIORITY
             INTO :PARK_NAME, :CNT DO BEGIN

         S1=F;
         S1=REPLACE_STRING(S1,'%PARK_NAME',PARK_NAME);
         S1=REPLACE_STRING(S1,'%COUNT',CAST(CNT AS VARCHAR(10)));

         S=S||S1;

       END

       INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                 TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                         VALUES (GET_UNIQUE_ID(),:CREATOR_ID,:RECIPIENT_ID,CURRENT_TIMESTAMP,
                                :S,NULL,0,:CONTACT,NULL,1,NULL,CURRENT_TIMESTAMP);
     END

  END

END

--

CREATE OR ALTER PROCEDURE PR_FULL_CALC (
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE COST_RATE NUMERIC(15,2);
DECLARE COST_FACT NUMERIC(15,2);
DECLARE PHONE VARCHAR(100);
DECLARE DRIVER_ID VARCHAR(32);
DECLARE RECIPIENT_ID VARCHAR(32);
DECLARE SUM_CHARGE NUMERIC(15,2);
DECLARE SUM_RECEIPT NUMERIC(15,2);
DECLARE BALANCE NUMERIC(15,2);
DECLARE MIN_BALANCE NUMERIC(15,2);
DECLARE CHARGE_TYPE_ID VARCHAR(32);
DECLARE S VARCHAR(1000);
BEGIN

  SELECT PHONE, DRIVER_ID, COST_RATE, COST_FACT
    FROM ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :PHONE, :DRIVER_ID, :COST_RATE, :COST_FACT;

  IF (COST_FACT IS NULL) THEN
    COST_FACT=:COST_RATE;

  UPDATE ORDERS
     SET FINISHED=1,
         DATE_END=CURRENT_TIMESTAMP,
         WHO_PROCESS_ID=:ACCOUNT_ID,
         COST_FACT=:COST_FACT
   WHERE ORDER_ID=:ORDER_ID;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    IF (PHONE IS NOT NULL) THEN BEGIN

      IF (SUBSTR(PHONE,1,3)='+79')  THEN BEGIN

        RECIPIENT_ID=NULL;

        FOR SELECT ACCOUNT_ID
              FROM ACCOUNTS
             WHERE PHONE=:PHONE
              INTO :RECIPIENT_ID DO BEGIN

          IF (RECIPIENT_ID IS NOT NULL) THEN
            BREAK;
        END

/*        S='*А Такси* Спасибо что воспользовались нашими услугами';*/

        SELECT CONST_VALUE FROM GET_CONST_VALUE('05B75340B170BF5141FC63F5CDF7FCD6') INTO :S;

        IF (S IS NOT NULL) THEN BEGIN

          INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                    TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                            VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:RECIPIENT_ID,CURRENT_TIMESTAMP,
                                    :S,NULL,0,:PHONE,NULL,2,NULL,CURRENT_TIMESTAMP);
        END

/*        S='*А Такси* Наши телефоны: 277-77-87, 271-08-91, 271-08-97';*/

        SELECT CONST_VALUE FROM GET_CONST_VALUE('E9FFA9589ABD8C174474572B72017BCC') INTO :S;

        IF (S IS NOT NULL) THEN BEGIN

          INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                    TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                            VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:RECIPIENT_ID,CURRENT_TIMESTAMP,
                                    :S,NULL,0,:PHONE,NULL,2,NULL,CURRENT_TIMESTAMP);
        END

      END

    END

    CHARGE_TYPE_ID='E1BC9789DA9DB2B041C0784EBE92BFC9'; /* Выполнение заказа */

    SELECT RET_SUM
      FROM GET_DRIVER_SUM(:DRIVER_ID,:COST_FACT)
      INTO :SUM_CHARGE;

    INSERT INTO CHARGES (CHARGE_ID,WHO_CREATE_ID,CHARGE_TYPE_ID,ACCOUNT_ID,
                                   SUM_CHARGE,DATE_CHARGE,DATE_CREATE,DESCRIPTION)
                           VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:CHARGE_TYPE_ID,:DRIVER_ID,
                                   :SUM_CHARGE,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,NULL);

    SELECT (CASE WHEN SUM(SUM_CHARGE) IS NULL THEN 0.0 ELSE SUM(SUM_CHARGE) END)
      FROM CHARGES
     WHERE ACCOUNT_ID=:DRIVER_ID
      INTO :SUM_CHARGE;

    SELECT (CASE WHEN SUM(SUM_RECEIPT) IS NULL THEN 0.0 ELSE SUM(SUM_RECEIPT) END)
      FROM RECEIPTS
     WHERE ACCOUNT_ID=:DRIVER_ID
      INTO :SUM_RECEIPT;

    BALANCE=SUM_RECEIPT-SUM_CHARGE;

    SELECT MIN_BALANCE
      FROM DRIVERS
     WHERE DRIVER_ID=:DRIVER_ID
      INTO :MIN_BALANCE;

    IF ((MIN_BALANCE IS NULL) OR ((MIN_BALANCE IS NOT NULL) AND (BALANCE>MIN_BALANCE))) THEN BEGIN

/*      S='Заказ завершен. Баланс = '||CAST(BALANCE AS VARCHAR(30))||' р.';*/

      SELECT CONST_VALUE FROM GET_CONST_VALUE('16835607B30CA79F4CE883B53AFE972D') INTO :S;

    END ELSE BEGIN

      UPDATE SHIFTS
         SET DATE_END=CURRENT_TIMESTAMP
       WHERE ACCOUNT_ID=:DRIVER_ID
         AND DATE_END IS NULL;

/*      S='Заказ завершен. Вы сняты со смены. Баланс = '||CAST(BALANCE AS VARCHAR(30))||' р.'; */

      SELECT CONST_VALUE FROM GET_CONST_VALUE('634880F305E9AA434245E3E596697001') INTO :S;

    END

    SELECT PHONE_MOBILE
      FROM DRIVERS
     WHERE DRIVER_ID=:DRIVER_ID
      INTO :PHONE;

    IF (S IS NOT NULL) THEN BEGIN

      S=REPLACE_STRING(S,'%BALANCE',CAST(BALANCE AS VARCHAR(30)));

      INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                        VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                :S,NULL,0,:PHONE,NULL,2,NULL,CURRENT_TIMESTAMP);
    END

    EXECUTE PROCEDURE QUERY_PARK_STATES (ACCOUNT_ID,DRIVER_ID,PHONE);

  END
END

--

CREATE OR ALTER PROCEDURE DR_SEND_ORDER (
  ORDER_ID VARCHAR(32),
  ACTION_ID VARCHAR(32),
  RESULT_ID VARCHAR(32)) 
RETURNS (
  DETECTED INTEGER)
AS
  DECLARE CNT INTEGER;
  DECLARE DRIVER_ID VARCHAR(32);
  DECLARE DATE_BEGIN TIMESTAMP;
BEGIN
  DETECTED=0;

  SELECT DRIVER_ID, DATE_BEGIN
    FROM /*PREFIX*/ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID, :DATE_BEGIN;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    SELECT COUNT(*)
      FROM /*PREFIX*/OUT_MESSAGES
     WHERE RECIPIENT_ID=:DRIVER_ID
       AND DESCRIPTION=:ORDER_ID||:ACTION_ID
       AND TYPE_MESSAGE=0
       AND DATE_OUT IS NOT NULL
       AND DATE_CREATE>=:DATE_BEGIN
      INTO CNT;

    IF (CNT>0) THEN
      DETECTED=1;

  END

  SUSPEND;
END

--

CREATE OR ALTER PROCEDURE CODE_PARK_QUEUE (
  ACCOUNT_ID VARCHAR(32),
  IN_MESSAGE_ID VARCHAR(32))
AS
DECLARE CONTACT VARCHAR(100);
DECLARE SENDER_ID VARCHAR(32);
DECLARE S VARCHAR(1000);
DECLARE CNT INTEGER;
DECLARE D TIMESTAMP;
DECLARE DATE_IN TIMESTAMP;
DECLARE DRIVER_ID VARCHAR(32);
DECLARE PARK_NAME VARCHAR(100);
DECLARE PARK_ID VARCHAR(32);
DECLARE SUM_CHARGE NUMERIC(15,2);
DECLARE SUM_RECEIPT NUMERIC(15,2);
DECLARE BALANCE NUMERIC(15,2);
DECLARE MIN_BALANCE NUMERIC(15,2);
DECLARE MINUTES INTEGER;
DECLARE COUNTER INTEGER;
DECLARE PRIORITY INTEGER;
BEGIN
  SELECT CONTACT, SENDER_ID
    FROM IN_MESSAGES
   WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID
    INTO :CONTACT, :SENDER_ID;

  IF ((CONTACT IS NOT NULL) AND (SENDER_ID IS NOT NULL)) THEN BEGIN

    SELECT COUNT(*)
      FROM DRIVERS D
      JOIN  ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
     WHERE D.DRIVER_ID=:SENDER_ID
       AND A.LOCKED<>1
      INTO :CNT;

    IF (CNT>0) THEN BEGIN

      SELECT (CASE WHEN SUM(SUM_CHARGE) IS NULL THEN 0.0 ELSE SUM(SUM_CHARGE) END)
        FROM CHARGES
       WHERE ACCOUNT_ID=:SENDER_ID
        INTO :SUM_CHARGE;

      SELECT (CASE WHEN SUM(SUM_RECEIPT) IS NULL THEN 0.0 ELSE SUM(SUM_RECEIPT) END)
        FROM RECEIPTS
       WHERE ACCOUNT_ID=:SENDER_ID
        INTO :SUM_RECEIPT;

      BALANCE=SUM_RECEIPT-SUM_CHARGE;

      SELECT MIN_BALANCE
        FROM DRIVERS
       WHERE DRIVER_ID=:SENDER_ID
        INTO :MIN_BALANCE;

      IF ((MIN_BALANCE IS NULL) OR ((MIN_BALANCE IS NOT NULL) AND (BALANCE>MIN_BALANCE))) THEN BEGIN

        PARK_ID=NULL;
        PARK_NAME=NULL;

        FOR SELECT PS.PARK_ID, P.NAME
              FROM PARK_STATES PS
              JOIN PARKS P ON P.PARK_ID=PS.PARK_ID
             WHERE DRIVER_ID=:SENDER_ID
               AND DATE_OUT IS NULL
              INTO :PARK_ID, :PARK_NAME DO BEGIN
          BREAK;
        END

        IF (PARK_ID IS NOT NULL) THEN BEGIN

          D=NULL;
          COUNTER=0;

          FOR SELECT DATE_IN, DRIVER_ID
                FROM PARK_STATES
               WHERE DATE_OUT IS NULL
                 AND PARK_ID=:PARK_ID
               ORDER BY DATE_IN
                INTO :DATE_IN, :DRIVER_ID DO BEGIN

            COUNTER=COUNTER+1;

            IF (DRIVER_ID=SENDER_ID) THEN BEGIN
              D=CURRENT_TIMESTAMP;
              MINUTES=CAST((D-DATE_IN)*(1e0*24*60) AS INTEGER);
              PRIORITY=COUNTER;
            END

          END

          IF (D IS NOT NULL) THEN BEGIN

/*            S='Вы '||CAST(PRIORITY AS VARCHAR(10))||' из '||CAST(COUNTER AS VARCHAR(10))||' на стоянке '||PARK_NAME||'.';
            S=S||' Длительность = '||CAST(MINUTES AS VARCHAR(10))||' мин.';*/

            SELECT CONST_VALUE FROM GET_CONST_VALUE('A92208254FCBA05643224EB1F4508300') INTO :S;

            IF (S IS NOT NULL) THEN BEGIN

              S=REPLACE_STRING(S,'%PRIORITY',CAST(PRIORITY AS VARCHAR(10)));
              S=REPLACE_STRING(S,'%COUNTER',CAST(COUNTER AS VARCHAR(10)));
              S=REPLACE_STRING(S,'%PARK_NAME',PARK_NAME);
              S=REPLACE_STRING(S,'%MINUTES',CAST(MINUTES AS VARCHAR(10)));

              INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                        TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                                VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                        :S,NULL,0,:CONTACT,NULL,1,NULL,CURRENT_TIMESTAMP);
            END

          END

        END

      END

    END

  END
END

--

CREATE OR ALTER PROCEDURE CODE_PARK_IN (
  ACCOUNT_ID VARCHAR(32),
  IN_MESSAGE_ID VARCHAR(32))
AS
DECLARE CONTACT VARCHAR(100);
DECLARE SENDER_ID VARCHAR(32);
DECLARE CODE VARCHAR(100);
DECLARE S VARCHAR(1000);
DECLARE CNT INTEGER;
DECLARE SUM_CHARGE NUMERIC(15,2);
DECLARE SUM_RECEIPT NUMERIC(15,2);
DECLARE BALANCE NUMERIC(15,2);
DECLARE MIN_BALANCE NUMERIC(15,2);
DECLARE D TIMESTAMP;
DECLARE PARK_ID VARCHAR(32);
DECLARE PARK_NAME VARCHAR(100);
DECLARE PARK_DESCRIPTION VARCHAR(250);
DECLARE PRIORITY INTEGER;
DECLARE CHARGE_TYPE_ID VARCHAR(32);
BEGIN
  SELECT IM.CONTACT, IM.SENDER_ID, CM.CODE
    FROM IN_MESSAGES IM
    LEFT JOIN CODE_MESSAGES CM ON CM.CODE_MESSAGE_ID=IM.CODE_MESSAGE_ID
   WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID
    INTO :CONTACT, :SENDER_ID, :CODE;

  IF ((CONTACT IS NOT NULL) AND (SENDER_ID IS NOT NULL) AND (CODE IS NOT NULL)) THEN BEGIN

    SELECT COUNT(*)
      FROM DRIVERS D
      JOIN  ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
     WHERE D.DRIVER_ID=:SENDER_ID
       AND A.LOCKED<>1
      INTO :CNT;

    IF (CNT>0) THEN BEGIN

      SELECT (CASE WHEN SUM(SUM_CHARGE) IS NULL THEN 0.0 ELSE SUM(SUM_CHARGE) END)
        FROM CHARGES
       WHERE ACCOUNT_ID=:SENDER_ID
        INTO :SUM_CHARGE;

      SELECT (CASE WHEN SUM(SUM_RECEIPT) IS NULL THEN 0.0 ELSE SUM(SUM_RECEIPT) END)
        FROM RECEIPTS
       WHERE ACCOUNT_ID=:SENDER_ID
        INTO :SUM_RECEIPT;

      BALANCE=SUM_RECEIPT-SUM_CHARGE;

      SELECT MIN_BALANCE
        FROM DRIVERS
       WHERE DRIVER_ID=:SENDER_ID
        INTO :MIN_BALANCE;

      IF ((MIN_BALANCE IS NULL) OR ((MIN_BALANCE IS NOT NULL) AND (BALANCE>MIN_BALANCE))) THEN BEGIN

        SELECT COUNT(*)
          FROM ORDERS
         WHERE DRIVER_ID=:SENDER_ID
           AND PARENT_ID IS NULL
           AND DATE_HISTORY IS NULL
           AND FINISHED<>1
          INTO :CNT;

        IF (CNT>0) THEN BEGIN

/*          S='Вы на заказе';*/
          SELECT CONST_VALUE FROM GET_CONST_VALUE('764B2BA8498AB18345852AA2FE39F4D9') INTO :S;

          IF (S IS NOT NULL) THEN BEGIN

            INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                      TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                              VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                      :S,NULL,0,:CONTACT,NULL,2,NULL,CURRENT_TIMESTAMP);
          END

        END ELSE BEGIN

       /*   SELECT COUNT(*)
            FROM /*PARK_STATES
           WHERE DRIVER_ID=:SENDER_ID
             AND DATE_OUT IS NULL
            INTO FLAG;       */

          UPDATE PARK_STATES
             SET DATE_OUT=CURRENT_TIMESTAMP
           WHERE DRIVER_ID=:SENDER_ID
             AND DATE_OUT IS NULL;

          SELECT COUNT(*)
            FROM SHIFTS
           WHERE ACCOUNT_ID=:SENDER_ID
             AND DATE_END IS NULL
            INTO :CNT;

          D=CURRENT_TIMESTAMP;

          IF (CNT=0) THEN BEGIN

            INSERT INTO SHIFTS (SHIFT_ID,ACCOUNT_ID,DATE_BEGIN,DATE_END)
                                  VALUES (GET_UNIQUE_ID(),:SENDER_ID,:D,NULL);

          END

          PARK_ID=NULL;
          PARK_NAME=NULL;

          FOR SELECT P.PARK_ID, P.NAME, P.DESCRIPTION
                FROM PARKS P
               WHERE (((P.MAX_COUNT IS NOT NULL) AND
                       (P.MAX_COUNT> (SELECT COUNT(*)
                                        FROM PARK_STATES
                                       WHERE DATE_OUT IS NULL
                                         AND PARK_ID=P.PARK_ID)))
                      OR (P.MAX_COUNT IS NULL))
                 AND P.NAME=:CODE
                INTO :PARK_ID, :PARK_NAME, :PARK_DESCRIPTION  DO BEGIN
            BREAK;
          END

          IF (PARK_ID IS NOT NULL) THEN BEGIN

            INSERT INTO PARK_STATES (PARK_STATE_ID,PARK_ID,DRIVER_ID,DATE_IN,DATE_OUT)
                                       VALUES (GET_UNIQUE_ID(),:PARK_ID,:SENDER_ID,:D,NULL);

            SELECT COUNT(*)
              FROM  PARK_STATES
             WHERE PARK_ID=:PARK_ID
               AND DATE_OUT IS NULL
              INTO PRIORITY;

/*            S='Вы '||CAST(PRIORITY AS VARCHAR(10))||' на стоянке '||PARK_NAME||' ('||PARK_DESCRIPTION||')';

            IF (FLAG=0) THEN BEGIN

              S=S||'. Баланс = '||CAST(BALANCE AS VARCHAR(30))||' р.';

            END*/

            SELECT CONST_VALUE FROM GET_CONST_VALUE('80627FCA459EA3574F6BA8730F32946F') INTO :S;

            IF (S IS NOT NULL) THEN BEGIN

              S=REPLACE_STRING(S,'%PRIORITY',CAST(PRIORITY AS VARCHAR(10)));
              S=REPLACE_STRING(S,'%PARK_NAME',PARK_NAME);
              S=REPLACE_STRING(S,'%PARK_DESCRIPTION',PARK_DESCRIPTION);
              S=REPLACE_STRING(S,'%BALANCE',CAST(BALANCE AS VARCHAR(30)));

              INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                        TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                                VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                        :S,NULL,0,:CONTACT,NULL,1,NULL,CURRENT_TIMESTAMP);
            END

          END ELSE BEGIN

/*            S='Нет свободных мест ';*/

            SELECT CONST_VALUE FROM GET_CONST_VALUE('18B1E217D3789DDF4BCE1EEE9C7AB7A5') INTO :S;

            IF (S IS NOT NULL) THEN BEGIN

              INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                        TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                                VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                        :S,NULL,0,:CONTACT,NULL,1,NULL,CURRENT_TIMESTAMP);
            END

          END

        END

      END ELSE BEGIN

/*        S='Ваш баланс равен или меньше минимальному'; */

        SELECT CONST_VALUE FROM GET_CONST_VALUE('0690BD9649C89DD8472558C3270F35D6') INTO :S;

        IF (S IS NOT NULL) THEN BEGIN

          INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                    TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                            VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                    :S,NULL,0,:CONTACT,NULL,1,NULL,CURRENT_TIMESTAMP);
        END

      END

    END

  END
END

--

CREATE OR ALTER PROCEDURE CODE_SHIFT_CLOSE (
  ACCOUNT_ID VARCHAR(32),
  IN_MESSAGE_ID VARCHAR(32))
AS
DECLARE CONTACT VARCHAR(100);
DECLARE SENDER_ID VARCHAR(32);
DECLARE S VARCHAR(1000);
DECLARE CNT INTEGER;
DECLARE D TIMESTAMP;
DECLARE DATE_BEGIN TIMESTAMP;
DECLARE SHIFT_ID VARCHAR(32);
DECLARE HOURS NUMERIC(10,1);
BEGIN
  SELECT CONTACT, SENDER_ID
    FROM IN_MESSAGES
   WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID
    INTO CONTACT, SENDER_ID;

  IF ((CONTACT IS NOT NULL) AND (SENDER_ID IS NOT NULL)) THEN BEGIN

    SELECT COUNT(*)
      FROM DRIVERS
     WHERE DRIVER_ID=:SENDER_ID
      INTO :CNT;

    IF (CNT>0) THEN BEGIN

      SELECT COUNT(*)
        FROM ORDERS
       WHERE DRIVER_ID=:SENDER_ID
         AND PARENT_ID IS NULL
         AND DATE_HISTORY IS NULL
         AND FINISHED<>1
        INTO :CNT;

      IF (CNT>0) THEN BEGIN

/*        S='Вы на заказе';*/

        SELECT CONST_VALUE FROM GET_CONST_VALUE('0A2F3602D3FD9A0E476E367410F37492') INTO :S;

        IF (S IS NOT NULL) THEN BEGIN

          INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                    TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                             VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                     :S,NULL,0,:CONTACT,NULL,1,NULL,CURRENT_TIMESTAMP);
        END

      END ELSE BEGIN

        FOR SELECT DATE_BEGIN, SHIFT_ID
              FROM SHIFTS
             WHERE ACCOUNT_ID=:SENDER_ID
               AND DATE_END IS NULL
              INTO :DATE_BEGIN, :SHIFT_ID DO BEGIN

          D=CURRENT_TIMESTAMP;

          UPDATE PARK_STATES
             SET DATE_OUT=:D
           WHERE DRIVER_ID=:SENDER_ID
             AND DATE_OUT IS NULL;

          UPDATE SHIFTS
             SET DATE_END=:D
           WHERE SHIFT_ID=:SHIFT_ID
             AND DATE_END IS NULL;

          HOURS=CAST((D-DATE_BEGIN)*(1e0*24) AS NUMERIC(10,1));

/*          S='Ваша смена закрыта в '||/*PERFIX*//*FORMAT_DATETIME('hh:nn:ss dd.mm.yyyy',D)||'.';
          S=S||' Длительность = '||CAST(HOURS AS VARCHAR(30))||' ч. ';*/

          SELECT CONST_VALUE FROM GET_CONST_VALUE('5D8701DF0DEDB7A6491181074CE5A88D') INTO :S;

          IF (S IS NOT NULL) THEN BEGIN

            S=REPLACE_STRING(S,'%TIME_DATE',/*PERFIX*/FORMAT_DATETIME('hh:nn:ss dd.mm.yyyy',D));
            S=REPLACE_STRING(S,'%HOURS',CAST(HOURS AS VARCHAR(30)));

            INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                      TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                              VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                      :S,NULL,0,:CONTACT,NULL,1,NULL,CURRENT_TIMESTAMP);
          END
        END

      END

    END

  END
END

--

CREATE OR ALTER PROCEDURE GET_COUNT_SUM_O_MES_GRAPH_HOUR (
  DATE_BEGIN DATE) 
RETURNS (
  DATE_ACCEPT TIMESTAMP,
  HOUR_VAL INTEGER,
  COUNT_VAL INTEGER)
AS
  declare variable D1 Date;
begin

 D1=DATE_BEGIN;
  IF (D1 IS NULL) THEN BEGIN
    SELECT MIN(DATE_ACCEPT)
      FROM ORDERS
      INTO :D1;
  END
         
FOR 
SELECT  MIN(O.DATE_OUT) AS DATE_ACCEPT,
        MIN(EXTRACT(HOUR FROM O.DATE_OUT)) AS HOUR_VAL,
        COUNT(*) AS COUNT_VAL  
         FROM OUT_MESSAGES O 
        LEFT JOIN ACCOUNTS A ON A.PHONE = O.CONTACT 
        WHERE O.DATE_OUT IS NOT NULL  AND CAST(O.DATE_OUT AS DATE) = CAST(:D1 AS DATE)              
         GROUP BY 
            EXTRACT(YEAR FROM O.DATE_OUT),
            EXTRACT(MONTH FROM O.DATE_OUT),
            EXTRACT(DAY FROM O.DATE_OUT),
            EXTRACT(HOUR FROM O.DATE_OUT)             
            ORDER BY MIN(O.DATE_OUT)
INTO
: DATE_ACCEPT,
: HOUR_VAL,
         :COUNT_VAL         
         DO BEGIN       
    SUSPEND;
    END
end

--

CREATE OR ALTER PROCEDURE CODE_TEST (
  ACCOUNT_ID VARCHAR(32),
  IN_MESSAGE_ID VARCHAR(32))
AS
DECLARE CONTACT VARCHAR(100);
DECLARE SENDER_ID VARCHAR(32);
DECLARE S VARCHAR(70);
DECLARE CNT INTEGER;
DECLARE MSEC BIGINT;
DECLARE DAYS INTEGER;
DECLARE HOURS INTEGER;
DECLARE MINUTES INTEGER;
DECLARE SECONDS INTEGER;
DECLARE D TIMESTAMP;
DECLARE UPTIME VARCHAR(100);
BEGIN
  SELECT CONTACT, SENDER_ID
    FROM IN_MESSAGES
   WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID
    INTO :CONTACT, :SENDER_ID;

  IF ((CONTACT IS NOT NULL) AND (SENDER_ID IS NOT NULL)) THEN BEGIN

    SELECT COUNT(*)
      FROM ACCOUNT_ROLES
     WHERE ROLE_ID IN ('3AC5EA48DEA3A72A4380D9CC5923471F','FF7F332564F795C8411BF28652B22BEA') /* Администраторы, Диспетчеры */
       AND ACCOUNT_ID=:SENDER_ID
      INTO CNT;

    IF (CNT>0) THEN BEGIN

/*      S='Система работает нормально'; */
      SELECT CONST_VALUE FROM GET_CONST_VALUE('DD5F7C07EB2CBC6B4CE52043B3BF395D') INTO :S;

      IF (S IS NOT NULL) THEN BEGIN

        MSEC=SYSTEM_UPTIME();
        DAYS=MSEC/(1000*60*60*24);
        MSEC=MSEC-(DAYS*1000*60*60*24);
        HOURS=MSEC/(1000*60*60);
        MSEC=MSEC-(HOURS*1000*60*60);
        MINUTES=MSEC/(1000*60);
        MSEC=MSEC-(MINUTES*1000*60);
        SECONDS=MSEC/1000;
        D=CAST((CAST(HOURS AS VARCHAR(2))||':'||CAST(MINUTES AS VARCHAR(2))||':'||CAST(SECONDS AS VARCHAR(2))) AS TIME);

        UPTIME=CAST(DAYS AS VARCHAR(10))||'-'||/*PERFIX*/FORMAT_DATETIME('hh:nn:ss',D);

        S=REPLACE_STRING(S,'%UPTIME',UPTIME);

        INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                  TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                          VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                  :S,NULL,0,:CONTACT,NULL,0,NULL,CURRENT_TIMESTAMP);
      END
    END

  END

END

--

CREATE OR ALTER PROCEDURE D_OUT_MESSAGE (
  OLD_OUT_MESSAGE_ID VARCHAR(32))
AS
BEGIN
  DELETE FROM /*PREFIX*/OUT_MESSAGES 
        WHERE OUT_MESSAGE_ID=:OLD_OUT_MESSAGE_ID;
END

--

CREATE OR ALTER PROCEDURE EXCHANGE_AFTER (
  MONTH_COUNT INTEGER)
AS
  DECLARE DATE_TO TIMESTAMP;
BEGIN

  SELECT DATE_TO
    FROM /*PREFIX*/GET_DATE_TO(:MONTH_COUNT)
    INTO :DATE_TO;

  DELETE FROM /*PREFIX*/RECEIPTS
        WHERE DATE_RECEIPT<:DATE_TO;

  DELETE FROM /*PREFIX*/CHARGES
        WHERE DATE_CHARGE<:DATE_TO;

  DELETE FROM /*PREFIX*/PARK_STATES
        WHERE DATE_IN<:DATE_TO;

  DELETE FROM /*PREFIX*/SHIFTS
        WHERE DATE_BEGIN<:DATE_TO;

  DELETE FROM /*PREFIX*/ROUTES
        WHERE ORDER_ID IN (SELECT ORDER_ID FROM /*PREFIX*/ORDERS
                            WHERE DATE_ACCEPT<:DATE_TO);

  DELETE FROM /*PREFIX*/ORDER_SERVICES
        WHERE ORDER_ID IN (SELECT ORDER_ID FROM /*PREFIX*/ORDERS
                            WHERE DATE_ACCEPT<:DATE_TO);

  DELETE FROM /*PREFIX*/ORDERS
        WHERE DATE_ACCEPT<:DATE_TO
          AND PARENT_ID IS NOT NULL;

  DELETE FROM /*PREFIX*/ORDERS
        WHERE DATE_ACCEPT<:DATE_TO
          AND PARENT_ID IS NULL;

  DELETE FROM /*PREFIX*/OUT_MESSAGES
        WHERE DATE_CREATE<:DATE_TO;

  DELETE FROM /*PREFIX*/IN_MESSAGES
        WHERE DATE_SEND<:DATE_TO;

END

--

CREATE OR ALTER PROCEDURE CODE_INCIDENT (
  ACCOUNT_ID VARCHAR(32),
  IN_MESSAGE_ID VARCHAR(32))
AS
DECLARE CONTACT VARCHAR(100);
DECLARE SENDER_ID VARCHAR(32);
DECLARE TEXT_IN VARCHAR(4000);
DECLARE CNT INTEGER;
DECLARE SUM_CHARGE NUMERIC(15,2);
DECLARE SUM_RECEIPT NUMERIC(15,2);
DECLARE BALANCE NUMERIC(15,2);
DECLARE MIN_BALANCE NUMERIC(15,2);
DECLARE USER_NAME VARCHAR(100);
DECLARE CALLSIGN VARCHAR(10);
DECLARE S VARCHAR(250);
BEGIN
  SELECT IM.CONTACT, IM.SENDER_ID, IM.TEXT_IN
    FROM IN_MESSAGES IM
    LEFT JOIN CODE_MESSAGES CM ON CM.CODE_MESSAGE_ID=IM.CODE_MESSAGE_ID
   WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID
    INTO :CONTACT, :SENDER_ID, :TEXT_IN;

  IF ((CONTACT IS NOT NULL) AND (SENDER_ID IS NOT NULL) AND (TEXT_IN IS NOT NULL)) THEN BEGIN

    SELECT COUNT(*)
      FROM DRIVERS D
      JOIN  ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
     WHERE D.DRIVER_ID=:SENDER_ID
       AND A.LOCKED<>1
      INTO :CNT;

    IF (CNT>0) THEN BEGIN

      SELECT (CASE WHEN SUM(SUM_CHARGE) IS NULL THEN 0.0 ELSE SUM(SUM_CHARGE) END)
        FROM CHARGES
       WHERE ACCOUNT_ID=:SENDER_ID
        INTO :SUM_CHARGE;

      SELECT (CASE WHEN SUM(SUM_RECEIPT) IS NULL THEN 0.0 ELSE SUM(SUM_RECEIPT) END)
        FROM RECEIPTS
       WHERE ACCOUNT_ID=:SENDER_ID
        INTO :SUM_RECEIPT;

      BALANCE=SUM_RECEIPT-SUM_CHARGE;

      SELECT D.MIN_BALANCE, A.USER_NAME, C.CALLSIGN
        FROM DRIVERS D
        JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
        JOIN CARS C ON C.CAR_ID=D.CAR_ID
       WHERE D.DRIVER_ID=:SENDER_ID
        INTO :MIN_BALANCE, :USER_NAME, :CALLSIGN;

      SELECT COUNT(*)
        FROM SHIFTS
       WHERE ACCOUNT_ID=:SENDER_ID
         AND DATE_END IS NULL
        INTO :CNT;

      IF ((CNT>0) AND ((MIN_BALANCE IS NULL) OR ((MIN_BALANCE IS NOT NULL) AND (BALANCE>MIN_BALANCE)))) THEN BEGIN

        S=:CALLSIGN||' '||:USER_NAME;
        INSERT INTO ALARMS (ALARM_ID,SENDER_ID,RECIPIENT_ID,TYPE_ALARM,DATE_BEGIN,DATE_END,
                                      CAPTION,TEXT_ALARM)
                              VALUES (GET_UNIQUE_ID(),'CA25F4C3A6DA8C334D20D3C4F2A2EF62',NULL,1,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP+5*(1e0/24/60),
                                      'Черезвычайное проишествие',:S);

        SELECT CONST_VALUE FROM GET_CONST_VALUE('7B7B35D636E1B840426877D1EB07428F') INTO :S;

        IF (S IS NOT NULL) THEN BEGIN

          S=REPLACE_STRING(S,'%CODE',TEXT_IN);

          INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                    TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                            VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                    :S,NULL,0,:CONTACT,NULL,1,NULL,CURRENT_TIMESTAMP);
        END

      END

    END

  END
END

--

CREATE OR ALTER PROCEDURE CODE_PARK_STATES (
  ACCOUNT_ID VARCHAR(32),
  IN_MESSAGE_ID VARCHAR(32))
AS
DECLARE CONTACT VARCHAR(100);
DECLARE SENDER_ID VARCHAR(32);
DECLARE S VARCHAR(1000);
DECLARE S1 VARCHAR(1000);
DECLARE F VARCHAR(1000);
DECLARE PARK_NAME VARCHAR(100);
DECLARE SUM_CHARGE NUMERIC(15,2);
DECLARE SUM_RECEIPT NUMERIC(15,2);
DECLARE BALANCE NUMERIC(15,2);
DECLARE MIN_BALANCE NUMERIC(15,2);
DECLARE CNT INTEGER;
BEGIN
  SELECT CONTACT, SENDER_ID
    FROM IN_MESSAGES
   WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID
    INTO :CONTACT, :SENDER_ID;

  IF ((CONTACT IS NOT NULL) AND (SENDER_ID IS NOT NULL)) THEN BEGIN

    SELECT COUNT(*)
      FROM DRIVERS D
      JOIN  ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
     WHERE D.DRIVER_ID=:SENDER_ID
       AND A.LOCKED<>1
      INTO :CNT;

    IF (CNT>0) THEN BEGIN

      SELECT (CASE WHEN SUM(SUM_CHARGE) IS NULL THEN 0.0 ELSE SUM(SUM_CHARGE) END)
        FROM CHARGES
       WHERE ACCOUNT_ID=:SENDER_ID
        INTO :SUM_CHARGE;

      SELECT (CASE WHEN SUM(SUM_RECEIPT) IS NULL THEN 0.0 ELSE SUM(SUM_RECEIPT) END)
        FROM RECEIPTS
       WHERE ACCOUNT_ID=:SENDER_ID
        INTO :SUM_RECEIPT;

      BALANCE=SUM_RECEIPT-SUM_CHARGE;

      SELECT MIN_BALANCE
        FROM DRIVERS
       WHERE DRIVER_ID=:SENDER_ID
        INTO :MIN_BALANCE;

      IF ((MIN_BALANCE IS NULL) OR ((MIN_BALANCE IS NOT NULL) AND (BALANCE>MIN_BALANCE))) THEN BEGIN
 
        EXECUTE PROCEDURE QUERY_PARK_STATES (ACCOUNT_ID,SENDER_ID,CONTACT);

      END

    END

  END
END

--

CREATE OR ALTER PROCEDURE GET_COUNT_OUT_MESSAGES (
  DATE_BEGIN DATE,
  DATE_END DATE,
  CONTACT VARCHAR(20)) 
RETURNS (
  DATE_OUT TIMESTAMP,
  DATE_YEAR_DAY INTEGER,
  DATE_WEEKDAY INTEGER,
  HOUR_01 INTEGER,
  HOUR_02 INTEGER,
  HOUR_03 INTEGER,
  HOUR_04 INTEGER,
  HOUR_05 INTEGER,
  HOUR_06 INTEGER,
  HOUR_07 INTEGER,
  HOUR_08 INTEGER,
  HOUR_09 INTEGER,
  HOUR_10 INTEGER,
  HOUR_11 INTEGER,
  HOUR_12 INTEGER,
  HOUR_13 INTEGER,
  HOUR_14 INTEGER,
  HOUR_15 INTEGER,
  HOUR_16 INTEGER,
  HOUR_17 INTEGER,
  HOUR_18 INTEGER,
  HOUR_19 INTEGER,
  HOUR_20 INTEGER,
  HOUR_21 INTEGER,
  HOUR_22 INTEGER,
  HOUR_23 INTEGER,
  HOUR_24 INTEGER,
  COUNT_TO_DAY INTEGER,
  DATE_MONTH INTEGER,
  DATE_YEAR INTEGER,
  CONTACT_R VARCHAR(20))
AS
  declare variable D1 TimeStamp;
  declare variable D2 TimeStamp;
begin

 D1=DATE_BEGIN;
  IF (D1 IS NULL) THEN BEGIN
    SELECT MIN(DATE_OUT)
      FROM OUT_MESSAGES
      INTO :D1;
  END


  D2=DATE_END;
  IF (D2 IS NULL) THEN BEGIN
    SELECT MAX(DATE_OUT)
      FROM OUT_MESSAGES
      INTO :D2;
  END         
IF(:CONTACT IS NULL) THEN BEGIN       
FOR  SELECT MIN(O.DATE_OUT) AS DATE_OUT,
        EXTRACT(YEARDAY FROM O.DATE_OUT) AS DATE_YEAR_DAY,
        (CASE WHEN EXTRACT(WEEKDAY FROM O.DATE_OUT) = 0 THEN 7
         ELSE EXTRACT(WEEKDAY FROM O.DATE_OUT) END) AS DATE_WEEKDAY,
        EXTRACT(MONTH FROM O.DATE_OUT) AS DATE_MONTH,
        EXTRACT(YEAR FROM O.DATE_OUT) AS DATE_YEAR,
        O.CONTACT AS CONTACT_R,                 
        (CASE WHEN EXTRACT(HOUR FROM O.DATE_OUT) = 1  THEN COUNT(*) 
        ELSE 0 END) AS HOUR_01,        
        (CASE WHEN EXTRACT(HOUR FROM O.DATE_OUT) = 2   THEN COUNT(*) 
        ELSE 0 END) AS HOUR_02,
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_OUT)) = 3 THEN COUNT(*)
        ELSE 0 END) AS HOUR_03,
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_OUT)) = 4 THEN COUNT(*)
        ELSE 0 END) AS HOUR_04,
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_OUT)) = 5 THEN COUNT(*)
        ELSE 0 END) AS HOUR_05,
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_OUT)) = 6 THEN COUNT(*)
        ELSE 0 END) AS HOUR_06,
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_OUT)) = 7 THEN COUNT(*)
        ELSE 0 END) AS HOUR_07,
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_OUT)) = 8 THEN COUNT(*)
        ELSE 0 END) AS HOUR_08,
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_OUT)) = 9 THEN COUNT(*)
        ELSE 0 END) AS HOUR_09,
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_OUT)) = 10 THEN COUNT(*)
        ELSE 0 END) AS HOUR_10,
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_OUT)) = 11 THEN COUNT(*)
        ELSE 0 END) AS HOUR_11,
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_OUT)) = 12 THEN COUNT(*)
        ELSE 0 END) AS HOUR_12,
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_OUT)) = 13 THEN COUNT(*)
        ELSE 0 END) AS HOUR_13, 
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_OUT)) = 14 THEN COUNT(*)
        ELSE 0 END) AS HOUR_14, 
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_OUT)) = 15 THEN COUNT(*)
        ELSE 0 END) AS HOUR_15, 
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_OUT)) = 16 THEN COUNT(*)
        ELSE 0 END) AS HOUR_16, 
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_OUT)) = 17 THEN COUNT(*)
        ELSE 0 END) AS HOUR_17, 
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_OUT)) = 18 THEN COUNT(*)
        ELSE 0 END) AS HOUR_18, 
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_OUT)) = 19 THEN COUNT(*)
        ELSE 0 END) AS HOUR_19, 
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_OUT)) = 20 THEN COUNT(*)
        ELSE 0 END) AS HOUR_20,         
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_OUT)) = 21 THEN COUNT(*)
        ELSE 0 END) AS HOUR_21,
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_OUT)) = 22 THEN COUNT(*)
        ELSE 0 END) AS HOUR_22,
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_OUT)) = 23 THEN COUNT(*)
        ELSE 0 END) AS HOUR_23,
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_OUT)) = 0 THEN COUNT(*)
        ELSE 0 END) AS HOUR_24,
        COUNT(EXTRACT(HOUR FROM O.DATE_OUT)) AS COUNT_TO_DAY                 
        FROM OUT_MESSAGES O        
        WHERE O.DATE_OUT IS NOT NULL 
          AND CAST(O.DATE_OUT AS DATE) >= CAST(:D1 AS DATE) AND  CAST(O.DATE_OUT AS DATE) <= CAST(:D2 AS DATE)          
        GROUP BY O.CONTACT,       
            EXTRACT(YEAR FROM O.DATE_OUT),
            EXTRACT(MONTH FROM O.DATE_OUT),
            EXTRACT(DAY FROM O.DATE_OUT),
            EXTRACT(HOUR FROM O.DATE_OUT),           
            EXTRACT(YEARDAY FROM O.DATE_OUT),
            EXTRACT(WEEKDAY FROM O.DATE_OUT)

            INTO :DATE_OUT, 
             :DATE_YEAR_DAY,
             :DATE_WEEKDAY,            
             :DATE_MONTH,
             :DATE_YEAR,
             :CONTACT_R,
             :HOUR_01,
         :HOUR_02       ,
         :HOUR_03       ,
         :HOUR_04       ,
         :HOUR_05       ,
         :HOUR_06       ,
         :HOUR_07       ,
         :HOUR_08       ,
         :HOUR_09       ,
         :HOUR_10       ,
         :HOUR_11       ,
         :HOUR_12       ,
         :HOUR_13       ,
         :HOUR_14       ,
         :HOUR_15       ,
         :HOUR_16       ,
         :HOUR_17       ,
         :HOUR_18       ,
         :HOUR_19       ,
         :HOUR_20       ,
         :HOUR_21       ,
         :HOUR_22       ,
         :HOUR_23       ,
         :HOUR_24 ,
         :COUNT_TO_DAY DO BEGIN       
    SUSPEND;
    END
    END ELSE BEGIN
    FOR SELECT MIN(O.DATE_OUT) AS DATE_OUT,
        EXTRACT(YEARDAY FROM O.DATE_OUT) AS DATE_YEAR_DAY,
        (CASE WHEN EXTRACT(WEEKDAY FROM O.DATE_OUT) = 0 THEN 7
         ELSE EXTRACT(WEEKDAY FROM O.DATE_OUT) END) AS DATE_WEEKDAY,
        EXTRACT(MONTH FROM O.DATE_OUT) AS DATE_MONTH,
        EXTRACT(YEAR FROM O.DATE_OUT) AS DATE_YEAR,
        O.CONTACT AS CONTACT_R,                
        (CASE WHEN EXTRACT(HOUR FROM O.DATE_OUT) = 1  THEN COUNT(*) 
        ELSE 0 END) AS HOUR_01,        
        (CASE WHEN EXTRACT(HOUR FROM O.DATE_OUT) = 2   THEN COUNT(*) 
        ELSE 0 END) AS HOUR_02,
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_OUT)) = 3 THEN COUNT(*)
        ELSE 0 END) AS HOUR_03,
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_OUT)) = 4 THEN COUNT(*)
        ELSE 0 END) AS HOUR_04,
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_OUT)) = 5 THEN COUNT(*)
        ELSE 0 END) AS HOUR_05,
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_OUT)) = 6 THEN COUNT(*)
        ELSE 0 END) AS HOUR_06,
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_OUT)) = 7 THEN COUNT(*)
        ELSE 0 END) AS HOUR_07,
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_OUT)) = 8 THEN COUNT(*)
        ELSE 0 END) AS HOUR_08,
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_OUT)) = 9 THEN COUNT(*)
        ELSE 0 END) AS HOUR_09,
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_OUT)) = 10 THEN COUNT(*)
        ELSE 0 END) AS HOUR_10,
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_OUT)) = 11 THEN COUNT(*)
        ELSE 0 END) AS HOUR_11,
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_OUT)) = 12 THEN COUNT(*)
        ELSE 0 END) AS HOUR_12,
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_OUT)) = 13 THEN COUNT(*)
        ELSE 0 END) AS HOUR_13, 
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_OUT)) = 14 THEN COUNT(*)
        ELSE 0 END) AS HOUR_14, 
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_OUT)) = 15 THEN COUNT(*)
        ELSE 0 END) AS HOUR_15, 
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_OUT)) = 16 THEN COUNT(*)
        ELSE 0 END) AS HOUR_16, 
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_OUT)) = 17 THEN COUNT(*)
        ELSE 0 END) AS HOUR_17, 
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_OUT)) = 18 THEN COUNT(*)
        ELSE 0 END) AS HOUR_18, 
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_OUT)) = 19 THEN COUNT(*)
        ELSE 0 END) AS HOUR_19, 
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_OUT)) = 20 THEN COUNT(*)
        ELSE 0 END) AS HOUR_20,         
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_OUT)) = 21 THEN COUNT(*)
        ELSE 0 END) AS HOUR_21,
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_OUT)) = 22 THEN COUNT(*)
        ELSE 0 END) AS HOUR_22,
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_OUT)) = 23 THEN COUNT(*)
        ELSE 0 END) AS HOUR_23,
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_OUT)) = 0 THEN COUNT(*)
        ELSE 0 END) AS HOUR_24,
        COUNT(EXTRACT(HOUR FROM O.DATE_OUT)) AS COUNT_TO_DAY                 
        FROM OUT_MESSAGES O
        LEFT JOIN ACCOUNTS A ON A.PHONE = O.CONTACT
        WHERE O.DATE_OUT IS NOT NULL 
          AND CAST(O.DATE_OUT AS DATE) >= CAST(:D1 AS DATE) AND  CAST(O.DATE_OUT AS DATE) <= CAST(:D2 AS DATE)   
          AND O.CONTACT = :CONTACT          
        GROUP BY O.CONTACT,       
            EXTRACT(YEAR FROM O.DATE_OUT),
            EXTRACT(MONTH FROM O.DATE_OUT),
            EXTRACT(DAY FROM O.DATE_OUT),
            EXTRACT(HOUR FROM O.DATE_OUT),           
            EXTRACT(YEARDAY FROM O.DATE_OUT),
            EXTRACT(WEEKDAY FROM O.DATE_OUT)

            INTO :DATE_OUT, 
             :DATE_YEAR_DAY,
             :DATE_WEEKDAY,            
             :DATE_MONTH,
             :DATE_YEAR,
             :CONTACT_R,               
             :HOUR_01,
         :HOUR_02       ,
         :HOUR_03       ,
         :HOUR_04       ,
         :HOUR_05       ,
         :HOUR_06       ,
         :HOUR_07       ,
         :HOUR_08       ,
         :HOUR_09       ,
         :HOUR_10       ,
         :HOUR_11       ,
         :HOUR_12       ,
         :HOUR_13       ,
         :HOUR_14       ,
         :HOUR_15       ,
         :HOUR_16       ,
         :HOUR_17       ,
         :HOUR_18       ,
         :HOUR_19       ,
         :HOUR_20       ,
         :HOUR_21       ,
         :HOUR_22       ,
         :HOUR_23       ,
         :HOUR_24 ,
         :COUNT_TO_DAY DO BEGIN
    SUSPEND;
    END
    
     
    END
end

--

CREATE OR ALTER PROCEDURE GET_COUNT_OUT_MESSAGES_REPORT (
  DATE_BEGIN DATE,
  DATE_END DATE,
  CONTACT VARCHAR(20)) 
RETURNS (
  DATE_OUT TIMESTAMP,
  WEEK_DAY_NAME VARCHAR(20),
  DATE_YEAR_DAY INTEGER,
  DATE_WEEKDAY INTEGER,
  HOUR_01 INTEGER,
  HOUR_02 INTEGER,
  HOUR_03 INTEGER,
  HOUR_04 INTEGER,
  HOUR_05 INTEGER,
  HOUR_06 INTEGER,
  HOUR_07 INTEGER,
  HOUR_08 INTEGER,
  HOUR_09 INTEGER,
  HOUR_10 INTEGER,
  HOUR_11 INTEGER,
  HOUR_12 INTEGER,
  HOUR_13 INTEGER,
  HOUR_14 INTEGER,
  HOUR_15 INTEGER,
  HOUR_16 INTEGER,
  HOUR_17 INTEGER,
  HOUR_18 INTEGER,
  HOUR_19 INTEGER,
  HOUR_20 INTEGER,
  HOUR_21 INTEGER,
  HOUR_22 INTEGER,
  HOUR_23 INTEGER,
  HOUR_24 INTEGER,
  COUNT_TO_DAY INTEGER,
  DATE_MONTH INTEGER,
  DATE_YEAR INTEGER,
  CONTACT_R VARCHAR(20),
  USER_NAME VARCHAR(100),
  FIRST_YEAR_DAY INTEGER)
AS
begin
FOR
 SELECT MIN(GCO.DATE_OUT) AS DATE_OUT,
        GCO.DATE_YEAR_DAY,
        GCO.DATE_WEEKDAY,
        MIN(GCO.DATE_MONTH) AS DATE_MONTH,
        MIN(GCO.DATE_YEAR) AS DATE_YEAR,          
        MIN(GCO.CONTACT_R) AS CONTACT_R,
        MIN(A.USER_NAME) AS USER_NAME,
        MIN(EXTRACT(WEEKDAY FROM CAST(('01.01.'||EXTRACT(YEAR FROM GCO.DATE_OUT)) AS DATE)) - 1) AS FIRST_YEAR_DAY,                
       (CASE 
             WHEN GCO.DATE_WEEKDAY = 1 THEN 'Пн'
             WHEN GCO.DATE_WEEKDAY = 2 THEN 'Вт'
             WHEN GCO.DATE_WEEKDAY = 3 THEN 'Ср'
             WHEN GCO.DATE_WEEKDAY = 4 THEN 'Чт'
             WHEN GCO.DATE_WEEKDAY = 5 THEN 'Пт'
             WHEN GCO.DATE_WEEKDAY = 6 THEN 'Сб'
             WHEN GCO.DATE_WEEKDAY = 7 THEN 'Вс'
       ELSE '' END) AS WEEK_DAY_NAME,
       MAX(GCO.HOUR_01) AS HOUR_01,
       MAX(GCO.HOUR_02) AS HOUR_02,
       MAX(GCO.HOUR_03) AS HOUR_03,
       MAX(GCO.HOUR_04) AS HOUR_04,
       MAX(GCO.HOUR_05) AS HOUR_05,
       MAX(GCO.HOUR_06) AS HOUR_06,
       MAX(GCO.HOUR_07) AS HOUR_07,
       MAX(GCO.HOUR_08) AS HOUR_08,
       MAX(GCO.HOUR_09) AS HOUR_09,
       MAX(GCO.HOUR_10) AS HOUR_10,
       MAX(GCO.HOUR_11) AS HOUR_11,
       MAX(GCO.HOUR_12) AS HOUR_12,
       MAX(GCO.HOUR_13) AS HOUR_13,
       MAX(GCO.HOUR_14) AS HOUR_14,
       MAX(GCO.HOUR_15) AS HOUR_15,
       MAX(GCO.HOUR_16) AS HOUR_16,
       MAX(GCO.HOUR_17) AS HOUR_17,
       MAX(GCO.HOUR_18) AS HOUR_18,
       MAX(GCO.HOUR_19) AS HOUR_19,
       MAX(GCO.HOUR_20) AS HOUR_20,
       MAX(GCO.HOUR_21) AS HOUR_21,
       MAX(GCO.HOUR_22) AS HOUR_22,
       MAX(GCO.HOUR_23) AS HOUR_23,
       MAX(GCO.HOUR_24) AS HOUR_24,
       SUM(GCO.COUNT_TO_DAY) AS COUNT_TO_DAY
               
FROM GET_COUNT_OUT_MESSAGES(:DATE_BEGIN, :DATE_END, :CONTACT) GCO
LEFT JOIN ACCOUNTS A ON A.PHONE = GCO.CONTACT_R
GROUP BY GCO.CONTACT_R , GCO.DATE_YEAR_DAY, GCO.DATE_WEEKDAY
ORDER BY MIN(A.USER_NAME), MIN(GCO.DATE_OUT)
            INTO :DATE_OUT, 
             :DATE_YEAR_DAY,
             :DATE_WEEKDAY,
             :DATE_MONTH,
             :DATE_YEAR,             
             :CONTACT_R,
             :USER_NAME,
             :FIRST_YEAR_DAY,
             :WEEK_DAY_NAME,
             :HOUR_01       ,
         :HOUR_02       ,
         :HOUR_03       ,
         :HOUR_04       ,
         :HOUR_05       ,
         :HOUR_06       ,
         :HOUR_07       ,
         :HOUR_08       ,
         :HOUR_09       ,
         :HOUR_10       ,
         :HOUR_11       ,
         :HOUR_12       ,
         :HOUR_13       ,
         :HOUR_14       ,
         :HOUR_15       ,
         :HOUR_16       ,
         :HOUR_17       ,
         :HOUR_18       ,
         :HOUR_19       ,
         :HOUR_20       ,
         :HOUR_21       ,
         :HOUR_22       ,
         :HOUR_23       ,
         :HOUR_24,
         :COUNT_TO_DAY 
         DO BEGIN
    SUSPEND;
  END
end

--

CREATE OR ALTER PROCEDURE GET_COUNT_SUM_O_MESSAGE_GRAPH (
  DATE_BEGIN DATE,
  DATE_END DATE) 
RETURNS (
  DATE_ACCEPT TIMESTAMP,
  COUNT_VAL INTEGER)
AS
  declare variable D1 TimeStamp;
  declare variable D2 TimeStamp;
begin

 D1=DATE_BEGIN;
  IF (D1 IS NULL) THEN BEGIN
    SELECT MIN(DATE_ACCEPT)
      FROM ORDERS
      INTO :D1;
  END


  D2=DATE_END;
  IF (D2 IS NULL) THEN BEGIN
    SELECT MAX(DATE_ACCEPT)
      FROM ORDERS
      INTO :D2;
  END      


FOR 
SELECT  MIN(CAST(O.DATE_OUT AS DATE )) AS DATE_ACCEPT,
        COUNT(*) AS COUNT_VAL
         FROM OUT_MESSAGES O 
        LEFT JOIN ACCOUNTS A ON A.PHONE = O.CONTACT 
        WHERE O.DATE_OUT IS NOT NULL AND CAST(O.DATE_OUT AS DATE) >= CAST(:D1 AS DATE) AND  CAST(O.DATE_OUT AS DATE) <= CAST(:D2 AS DATE) 
                           
          GROUP BY          
            EXTRACT(YEAR FROM O.DATE_OUT),
            EXTRACT(MONTH FROM O.DATE_OUT),
            EXTRACT(DAY FROM O.DATE_OUT)            
            ORDER BY 
            MIN(O.DATE_OUT)
INTO
: DATE_ACCEPT,
         :COUNT_VAL 
        DO BEGIN       
    SUSPEND;
    END
end

--

CREATE OR ALTER PROCEDURE CODE_BALANCE (
  ACCOUNT_ID VARCHAR(32),
  IN_MESSAGE_ID VARCHAR(32))
AS
DECLARE CONTACT VARCHAR(100);
DECLARE SENDER_ID VARCHAR(32);
DECLARE S VARCHAR(70);
DECLARE SUM_CHARGE NUMERIC(15,2);
DECLARE SUM_RECEIPT NUMERIC(15,2);
DECLARE BALANCE NUMERIC(15,2);
DECLARE CNT INTEGER;
DECLARE CHARGE_TYPE_ID VARCHAR(32);
DECLARE CONST_VALUE VARCHAR(4000);
BEGIN
  SELECT CONTACT, SENDER_ID
    FROM IN_MESSAGES
   WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID
    INTO :CONTACT, :SENDER_ID;

  IF ((CONTACT IS NOT NULL) AND (SENDER_ID IS NOT NULL)) THEN BEGIN


    SELECT (CASE WHEN SUM(SUM_CHARGE) IS NULL THEN 0.0 ELSE SUM(SUM_CHARGE) END)
      FROM CHARGES
     WHERE ACCOUNT_ID=:SENDER_ID
      INTO :SUM_CHARGE;

    SELECT (CASE WHEN SUM(SUM_RECEIPT) IS NULL THEN 0.0 ELSE SUM(SUM_RECEIPT) END)
      FROM RECEIPTS
     WHERE ACCOUNT_ID=:SENDER_ID
      INTO :SUM_RECEIPT;

    BALANCE=SUM_RECEIPT-SUM_CHARGE;

    SELECT COUNT(*)
      FROM DRIVERS D
      JOIN  ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
     WHERE D.DRIVER_ID=:SENDER_ID
       AND A.LOCKED<>1
      INTO :CNT;

    IF (CNT>0) THEN BEGIN

/*      S='Ваш баланс = '||CAST(BALANCE AS VARCHAR(30))||' р.';*/

      SELECT CONST_VALUE FROM GET_CONST_VALUE('2031AA8F2E4B959248967F2838DC5F19') INTO :S;

      IF (S IS NOT NULL) THEN BEGIN

        S=REPLACE_STRING(S,'%BALANCE',CAST(BALANCE AS VARCHAR(30)));

        INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                  TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                          VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                  :S,NULL,0,:CONTACT,NULL,1,NULL,CURRENT_TIMESTAMP);
      END

    END

  END
END

--

CREATE OR ALTER PROCEDURE GET_COUNT_OUT_MESSAGE_GRAPH (
  DATE_BEGIN DATE,
  DATE_END DATE,
  ZONE_ID VARCHAR(32)) 
RETURNS (
  DATE_ACCEPT TIMESTAMP,
  COUNT_VAL INTEGER,
  ZONE_ID_R VARCHAR(32),
  ZONE_NAME VARCHAR(100))
AS
declare variable D1 timestamp;
declare variable D2 timestamp;
begin

 D1=DATE_BEGIN;
  IF (D1 IS NULL) THEN BEGIN
    SELECT MIN(DATE_ACCEPT)
      FROM ORDERS
      INTO :D1;
  END


  D2=DATE_END;
  IF (D2 IS NULL) THEN BEGIN
    SELECT MAX(DATE_ACCEPT)
      FROM ORDERS
      INTO :D2;
  END      

IF(:ZONE_ID IS NULL) THEN BEGIN  
FOR 
      SELECT  MIN(CAST(O.DATE_OUT AS DATE )) AS DATE_ACCEPT,
        COUNT(*) AS COUNT_VAL,       
       MIN(O.CONTACT) AS ZONE_ID_R,
       MAX(CASE WHEN A.USER_NAME IS not NULL THEN A.USER_NAME || '(' ||O.CONTACT ||')' ELSE O.CONTACT END) AS ZONE_NAME
           FROM OUT_MESSAGES O 
        LEFT JOIN ACCOUNTS A ON A.PHONE = O.CONTACT 
        WHERE O.DATE_OUT IS NOT NULL  AND CAST(O.DATE_OUT AS DATE) >= CAST(:D1 AS DATE) AND  CAST(O.DATE_OUT AS DATE) <= CAST(:D2 AS DATE)           
    GROUP BY          O.CONTACT, 
            EXTRACT(YEAR FROM O.DATE_OUT),
            EXTRACT(MONTH FROM O.DATE_OUT),
            EXTRACT(DAY FROM O.DATE_OUT)            
            ORDER BY O.CONTACT, 
            MIN(O.DATE_OUT)
INTO
: DATE_ACCEPT,
         :COUNT_VAL, 
         :ZONE_ID_R,
         :ZONE_NAME
         DO BEGIN       
    SUSPEND;
    END
    END
    ELSE BEGIN
    
    FOR 
      SELECT  MIN(CAST(O.DATE_OUT AS DATE )) AS DATE_ACCEPT,
        COUNT(*) AS COUNT_VAL,       
       MIN(O.CONTACT) AS ZONE_ID_R,
         MAX(CASE WHEN A.USER_NAME IS not NULL THEN A.USER_NAME || '(' ||O.CONTACT ||')' ELSE O.CONTACT END) AS ZONE_NAME
           FROM OUT_MESSAGES O 
        LEFT JOIN ACCOUNTS A ON A.PHONE = O.CONTACT 
        WHERE O.DATE_OUT IS NOT NULL  AND CAST(O.DATE_OUT AS DATE) >= CAST(:D1 AS DATE) AND  CAST(O.DATE_OUT AS DATE) <= CAST(:D2 AS DATE)              
              AND O.CONTACT = :ZONE_ID               
          GROUP BY          O.CONTACT, 
            EXTRACT(YEAR FROM O.DATE_OUT),
            EXTRACT(MONTH FROM O.DATE_OUT),
            EXTRACT(DAY FROM O.DATE_OUT)            
            ORDER BY O.CONTACT, 
            MIN(O.DATE_OUT)
        
INTO
: DATE_ACCEPT,
         :COUNT_VAL, 
         :ZONE_ID_R,
         :ZONE_NAME
         DO BEGIN       
    SUSPEND;
    END
     
    END
end

--

CREATE OR ALTER PROCEDURE CODE_PARK_OUT (
  ACCOUNT_ID VARCHAR(32),
  IN_MESSAGE_ID VARCHAR(32))
AS
DECLARE CONTACT VARCHAR(100);
DECLARE SENDER_ID VARCHAR(32);
DECLARE S VARCHAR(1000);
DECLARE PARK_NAME VARCHAR(100);
DECLARE PARK_STATE_ID VARCHAR(32);
DECLARE CNT INTEGER;
DECLARE D TIMESTAMP;
BEGIN
  SELECT CONTACT, SENDER_ID
    FROM IN_MESSAGES
   WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID
    INTO :CONTACT, :SENDER_ID;

  IF ((CONTACT IS NOT NULL) AND (SENDER_ID IS NOT NULL)) THEN BEGIN

    SELECT COUNT(*)
      FROM DRIVERS D
      JOIN  ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
     WHERE D.DRIVER_ID=:SENDER_ID
       AND A.LOCKED<>1
      INTO :CNT;

    IF (CNT>0) THEN BEGIN


      SELECT COUNT(*)
        FROM ORDERS
       WHERE DRIVER_ID=:SENDER_ID
         AND PARENT_ID IS NULL
         AND DATE_HISTORY IS NULL
         AND FINISHED<>1
        INTO :CNT;

      IF (CNT>0) THEN BEGIN

/*        S='Вы на заказе';*/
        SELECT CONST_VALUE FROM GET_CONST_VALUE('7E75E7A3DA4FAB8D443F2D7384B3DF46') INTO :S;

        IF (S IS NOT NULL) THEN BEGIN

          INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                    TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                            VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                    :S,NULL,0,:CONTACT,NULL,1,NULL,CURRENT_TIMESTAMP);
        END

      END ELSE BEGIN

        FOR SELECT P.NAME, PS.PARK_STATE_ID
              FROM PARK_STATES PS
              JOIN PARKS P ON P.PARK_ID=PS.PARK_ID
             WHERE PS.DRIVER_ID=:SENDER_ID
               AND PS.DATE_OUT IS NULL
              INTO :PARK_NAME, :PARK_STATE_ID DO BEGIN

          D=CURRENT_TIMESTAMP;

          UPDATE PARK_STATES
             SET DATE_OUT=:D
           WHERE PARK_STATE_ID=:PARK_STATE_ID;

/*          S='Вы сняты со стоянки '||PARK_NAME||' в '||/*PERFIX*//*FORMAT_DATETIME('hh:nn:ss dd.mm.yyyy',D);*/
          SELECT CONST_VALUE FROM GET_CONST_VALUE('F5FAEFF5369FA2E2496554FFACF900A3') INTO :S;

          IF (S IS NOT NULL) THEN BEGIN

            S=REPLACE_STRING(S,'%PARK_NAME',PARK_NAME);
            S=REPLACE_STRING(S,'%TIME_DATE',/*PERFIX*/FORMAT_DATETIME('hh:nn:ss dd.mm.yyyy',D));

            INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                      TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                              VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                      :S,NULL,0,:CONTACT,NULL,1,NULL,CURRENT_TIMESTAMP);
          END

          BREAK;

        END

      END

    END

  END
END

--

CREATE OR ALTER PROCEDURE CODE_LOSE (
  ACCOUNT_ID VARCHAR(32),
  IN_MESSAGE_ID VARCHAR(32))
AS
DECLARE CONTACT VARCHAR(100);
DECLARE SENDER_ID VARCHAR(32);
DECLARE TEXT_IN VARCHAR(4000);
DECLARE CNT INTEGER;
DECLARE SUM_CHARGE NUMERIC(15,2);
DECLARE SUM_RECEIPT NUMERIC(15,2);
DECLARE BALANCE NUMERIC(15,2);
DECLARE MIN_BALANCE NUMERIC(15,2);
DECLARE USER_NAME VARCHAR(100);
DECLARE CALLSIGN VARCHAR(10);
DECLARE S VARCHAR(250);
BEGIN
  SELECT IM.CONTACT, IM.SENDER_ID, IM.TEXT_IN
    FROM IN_MESSAGES IM
    LEFT JOIN CODE_MESSAGES CM ON CM.CODE_MESSAGE_ID=IM.CODE_MESSAGE_ID
   WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID
    INTO :CONTACT, :SENDER_ID, :TEXT_IN;

  IF ((CONTACT IS NOT NULL) AND (SENDER_ID IS NOT NULL) AND (TEXT_IN IS NOT NULL)) THEN BEGIN

    SELECT COUNT(*)
      FROM DRIVERS D
      JOIN  ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
     WHERE D.DRIVER_ID=:SENDER_ID
       AND A.LOCKED<>1
      INTO :CNT;

    IF (CNT>0) THEN BEGIN

      SELECT (CASE WHEN SUM(SUM_CHARGE) IS NULL THEN 0.0 ELSE SUM(SUM_CHARGE) END)
        FROM CHARGES
       WHERE ACCOUNT_ID=:SENDER_ID
        INTO :SUM_CHARGE;

      SELECT (CASE WHEN SUM(SUM_RECEIPT) IS NULL THEN 0.0 ELSE SUM(SUM_RECEIPT) END)
        FROM RECEIPTS
       WHERE ACCOUNT_ID=:SENDER_ID
        INTO :SUM_RECEIPT;

      BALANCE=SUM_RECEIPT-SUM_CHARGE;

      SELECT D.MIN_BALANCE, A.USER_NAME, C.CALLSIGN
        FROM DRIVERS D
        JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
        JOIN CARS C ON C.CAR_ID=D.CAR_ID
       WHERE D.DRIVER_ID=:SENDER_ID
        INTO :MIN_BALANCE, :USER_NAME, :CALLSIGN;

      SELECT COUNT(*)
        FROM SHIFTS
       WHERE ACCOUNT_ID=:SENDER_ID
         AND DATE_END IS NULL
        INTO :CNT;

      IF ((CNT>0) AND ((MIN_BALANCE IS NULL) OR ((MIN_BALANCE IS NOT NULL) AND (BALANCE>MIN_BALANCE)))) THEN BEGIN

        S=:CALLSIGN||' '||:USER_NAME;
        INSERT INTO ALARMS (ALARM_ID,SENDER_ID,RECIPIENT_ID,TYPE_ALARM,DATE_BEGIN,DATE_END,
                                      CAPTION,TEXT_ALARM)
                              VALUES (GET_UNIQUE_ID(),'CA25F4C3A6DA8C334D20D3C4F2A2EF62',NULL,0,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP+5*(1e0/24/60),
                                      'Водитель заблудился',:S);

        SELECT CONST_VALUE FROM GET_CONST_VALUE('AB84E2116D3485A847EEE59DB47CE27B') INTO :S;

        IF (S IS NOT NULL) THEN BEGIN

          S=REPLACE_STRING(S,'%CODE',TEXT_IN);

          INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                    TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                            VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                    :S,NULL,0,:CONTACT,NULL,1,NULL,CURRENT_TIMESTAMP);
        END

      END

    END

  END
END

--

CREATE OR ALTER PROCEDURE GET_OUT_MESSAGE_DETAILS (
  CONTACT VARCHAR(20),
  DATE_BEGIN TIMESTAMP,
  DATE_END TIMESTAMP) 
RETURNS (
  TYPE_MESSAGE INTEGER,
  PRIORITY VARCHAR(20),
  USER_NAME VARCHAR(100),
  CONTACT_R VARCHAR(100),
  DATE_OUT TIMESTAMP,
  DATE_CREATE TIMESTAMP,
  DESCRIPTION VARCHAR(250),
  TEXT_OUT VARCHAR(4000))
AS
  declare variable D1 Date;
  declare variable D2 Date;
begin
  D1=CAST(DATE_BEGIN AS DATE);
  IF (D1 IS NULL) THEN BEGIN
    SELECT MIN(DATE_OUT)
      FROM OUT_MESSAGES
      INTO :D1;
  END


 D2=CAST(DATE_END AS DATE);
  IF (D2 IS NULL) THEN BEGIN
    SELECT MAX(DATE_OUT)
      FROM OUT_MESSAGES
      INTO :D2;
  END        
   
IF(:CONTACT IS NULL) THEN BEGIN       
FOR 

SELECT
IM.TYPE_MESSAGE,
(CASE
WHEN IM.PRIORITY = 0 THEN 'высокий'
WHEN IM.PRIORITY = 1 THEN 'обычный'
WHEN IM.PRIORITY = 2 THEN 'низкий'

ELSE ' ' END
) AS PRIORITY,

IM.CONTACT,
IM.DATE_OUT,
IM.TEXT_OUT,
IM.DESCRIPTION,
A.USER_NAME,
IM.DATE_CREATE   
FROM OUT_MESSAGES IM
LEFT JOIN ACCOUNTS A ON A.ACCOUNT_ID = IM.CREATOR_ID  
 WHERE DATE_OUT IS NOT NULL 
       AND CAST(IM.DATE_OUT  AS DATE) >= :D1 
       AND  CAST(IM.DATE_OUT  AS DATE) <= :D2  
ORDER BY IM.CONTACT, IM.DATE_OUT     
            INTO 
            :TYPE_MESSAGE,
            :PRIORITY,
            :CONTACT_R,
            :DATE_OUT,
            :TEXT_OUT,
            :DESCRIPTION,
            :USER_NAME,
            :DATE_CREATE                
          DO BEGIN       
    SUSPEND;
    END END ELSE BEGIN
    
    FOR 
    
    
    SELECT
IM.TYPE_MESSAGE,
(CASE
WHEN IM.PRIORITY = 0 THEN 'высокий'
WHEN IM.PRIORITY = 1 THEN 'обычный'
WHEN IM.PRIORITY = 2 THEN 'низкий'

ELSE ' ' END
) AS PRIORITY,
IM.CONTACT,
IM.DATE_OUT,
IM.TEXT_OUT,
IM.DESCRIPTION,
A.USER_NAME,
IM.DATE_CREATE   
FROM OUT_MESSAGES IM
LEFT JOIN ACCOUNTS A ON A.ACCOUNT_ID = IM.CREATOR_ID  
 WHERE DATE_OUT IS NOT NULL 
       AND CAST(IM.DATE_OUT  AS DATE) >= :D1 
       AND  CAST(IM.DATE_OUT  AS DATE) <= :D2
       AND IM.CONTACT = :CONTACT  
ORDER BY IM.CONTACT, IM.DATE_OUT     
            INTO 
            :TYPE_MESSAGE,
            :PRIORITY,
            :CONTACT_R,
            :DATE_OUT,
            :TEXT_OUT,
            :DESCRIPTION,
            :USER_NAME,
            :DATE_CREATE             
          DO BEGIN       
    SUSPEND;  
     
    END 
    END
end

--

CREATE OR ALTER PROCEDURE PR_CHANGE_ROUTE (
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE PHONE VARCHAR(100);
DECLARE DRIVER_ID VARCHAR(32);
DECLARE S VARCHAR(1000);
BEGIN

  SELECT DRIVER_ID
    FROM ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID;

  UPDATE ORDERS
     SET TYPE_PROCESS=1,
         DATE_END=CURRENT_TIMESTAMP,
         WHO_PROCESS_ID=:ACCOUNT_ID
   WHERE ORDER_ID=:ORDER_ID;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    SELECT PHONE_MOBILE
      FROM DRIVERS
     WHERE DRIVER_ID=:DRIVER_ID
      INTO :PHONE;

    SELECT CONST_VALUE FROM GET_CONST_VALUE('2A7354AFB1FDB1D041F8FB2D06FFBC70') INTO :S;

    IF (S IS NOT NULL) THEN BEGIN

      INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                        VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                :S,NULL,0,:PHONE,NULL,2,NULL,CURRENT_TIMESTAMP);
    END

  END

END

--

CREATE OR ALTER PROCEDURE I_OUT_MESSAGE (
  OUT_MESSAGE_ID VARCHAR(32),
  CREATOR_ID VARCHAR(32),
  RECIPIENT_ID VARCHAR(32),
  DATE_CREATE TIMESTAMP,
  TEXT_OUT VARCHAR(4000),
  DATE_OUT TIMESTAMP,
  TYPE_MESSAGE INTEGER,
  CONTACT VARCHAR(100),
  DESCRIPTION VARCHAR(250),
  PRIORITY INTEGER,
  LOCKED VARCHAR(32),
  DATE_BEGIN TIMESTAMP,
  DATE_END TIMESTAMP)
AS
BEGIN
  INSERT INTO /*PREFIX*/OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                      TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,
                                      PRIORITY,DATE_BEGIN,DATE_END)
       VALUES (:OUT_MESSAGE_ID,:CREATOR_ID,:RECIPIENT_ID,:DATE_CREATE,
               :TEXT_OUT,:DATE_OUT,:TYPE_MESSAGE,:CONTACT,:DESCRIPTION,
               :PRIORITY,:DATE_BEGIN,:DATE_END);
END

--

CREATE OR ALTER PROCEDURE PR_CLIENT_IN_CAR (
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE PHONE VARCHAR(100);
DECLARE DRIVER_ID VARCHAR(32);
DECLARE S VARCHAR(1000);
BEGIN

  SELECT DRIVER_ID
    FROM ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID;

  UPDATE ORDERS
     SET DATE_BEGIN=CURRENT_TIMESTAMP
   WHERE ORDER_ID=:ORDER_ID;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    SELECT PHONE_MOBILE
      FROM DRIVERS
     WHERE DRIVER_ID=:DRIVER_ID
      INTO :PHONE;

    SELECT CONST_VALUE FROM GET_CONST_VALUE('620D357394B89B18454EB58DD5CE9F19') INTO :S;

    IF (S IS NOT NULL) THEN BEGIN

      INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                        VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                :S,NULL,0,:PHONE,NULL,2,NULL,CURRENT_TIMESTAMP);
    END

  END

END

--

CREATE OR ALTER PROCEDURE PR_REFUSE_CLIENT_COME_OUT (
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE DRIVER_ID VARCHAR(32);
DECLARE PARK_ID VARCHAR(32);
DECLARE PARK_NAME VARCHAR(100);
DECLARE PHONE VARCHAR(100);
DECLARE PARK_STATE_ID VARCHAR(32);
DECLARE DATE_IN TIMESTAMP;
DECLARE S VARCHAR(1000);
BEGIN

  SELECT DRIVER_ID, PARK_ID
    FROM /*PREFIX*/ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID, :PARK_ID;

  UPDATE /*PREFIX*/ORDERS
     SET DATE_END=CURRENT_TIMESTAMP,
         WHO_PROCESS_ID=:ACCOUNT_ID,
         FINISHED=1
   WHERE ORDER_ID=:ORDER_ID;

  IF ((DRIVER_ID IS NOT NULL) AND (PARK_ID IS NOT NULL)) THEN BEGIN

    FOR SELECT PS.PARK_STATE_ID, P.NAME, PS.DATE_IN
          FROM /*PREFIX*/PARK_STATES PS
          JOIN /*PREFIX*/PARKS P ON P.PARK_ID=PS.PARK_ID
         WHERE PS.PARK_ID=:PARK_ID
         ORDER BY PS.DATE_IN
          INTO :PARK_STATE_ID, :PARK_NAME, :DATE_IN DO BEGIN

      DATE_IN=DATE_IN-2*(1e0/24/60/60);

      INSERT INTO /*PREFIX*/PARK_STATES (PARK_STATE_ID,DRIVER_ID,PARK_ID,DATE_IN,DATE_OUT)
                                 VALUES (/*PREFIX*/GET_UNIQUE_ID(),:DRIVER_ID,:PARK_ID,:DATE_IN,NULL);

      BREAK;
    END

    IF (PARK_NAME IS NULL) THEN BEGIN

      INSERT INTO /*PREFIX*/PARK_STATES (PARK_STATE_ID,DRIVER_ID,PARK_ID,DATE_IN,DATE_OUT)
                                 VALUES (/*PREFIX*/GET_UNIQUE_ID(),:DRIVER_ID,:PARK_ID,CURRENT_TIMESTAMP,NULL);

      SELECT NAME
        FROM /*PREFIX*/PARKS
       WHERE PARK_ID=:PARK_ID
        INTO :PARK_NAME;

    END

    SELECT PHONE_MOBILE
      FROM /*PREFIX*/DRIVERS
     WHERE DRIVER_ID=:DRIVER_ID
      INTO :PHONE;

    SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('13D70B96F52BBE8D4E115CCC194F3B10') INTO :S;

    IF (S IS NOT NULL) THEN BEGIN

      S=/*PREFIX*/REPLACE_STRING(S,'%PARK_NAME',PARK_NAME);

      INSERT INTO /*PREFIX*/OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                          TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                                  VALUES (/*PREFIX*/GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                          :S,NULL,0,:PHONE,NULL,2,NULL,CURRENT_TIMESTAMP);
    END

  END

END

--

CREATE OR ALTER PROCEDURE PR_PARTY_CALC (
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE PHONE VARCHAR(100);
DECLARE DRIVER_ID VARCHAR(32);
DECLARE S VARCHAR(1000);
BEGIN

  SELECT DRIVER_ID
    FROM ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID;

  UPDATE ORDERS
     SET TYPE_PROCESS=1,
         DATE_END=CURRENT_TIMESTAMP,
         WHO_PROCESS_ID=:ACCOUNT_ID
   WHERE ORDER_ID=:ORDER_ID;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    SELECT PHONE_MOBILE
      FROM DRIVERS
     WHERE DRIVER_ID=:DRIVER_ID
      INTO :PHONE;

    SELECT CONST_VALUE FROM GET_CONST_VALUE('8B477D56F777966345EBC1130AF01C55') INTO :S;

    IF (S IS NOT NULL) THEN BEGIN

      INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                        VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                :S,NULL,0,:PHONE,NULL,2,NULL,CURRENT_TIMESTAMP);
    END

  END

END

--

CREATE OR ALTER PROCEDURE GET_COUNT_OUT_MES_GRAPH_HOUR (
  DATE_BEGIN DATE,
  ZONE_ID VARCHAR(32)) 
RETURNS (
  DATE_ACCEPT TIMESTAMP,
  HOUR_VAL INTEGER,
  COUNT_VAL INTEGER,
  ZONE_ID_R VARCHAR(32),
  ZONE_NAME VARCHAR(100))
AS
declare variable D1 date;
begin

 D1=DATE_BEGIN;
  IF (D1 IS NULL) THEN BEGIN
    SELECT MIN(DATE_ACCEPT)
      FROM ORDERS
      INTO :D1;
  END

IF(:ZONE_ID IS NULL) THEN BEGIN  
FOR 
SELECT  MIN(O.DATE_OUT) AS DATE_ACCEPT,
        MIN(EXTRACT(HOUR FROM O.DATE_OUT)) AS HOUR_VAL,
        COUNT(*) AS COUNT_VAL,       
        MIN(O.CONTACT) AS ZONE_ID_R,         
       MAX(CASE WHEN A.USER_NAME IS not NULL THEN A.USER_NAME || '(' ||O.CONTACT ||')' ELSE O.CONTACT END) AS ZONE_NAME
           FROM OUT_MESSAGES O 
        LEFT JOIN ACCOUNTS A ON A.PHONE = O.CONTACT 
        WHERE O.DATE_OUT IS NOT NULL AND CAST(O.DATE_OUT AS DATE) = CAST(:D1 AS DATE)             
             GROUP BY          O.CONTACT , 
            EXTRACT(YEAR FROM O.DATE_OUT),
            EXTRACT(MONTH FROM O.DATE_OUT),
            EXTRACT(DAY FROM O.DATE_OUT),
            EXTRACT(HOUR FROM O.DATE_OUT)              
            ORDER BY O.CONTACT , 
            MIN(O.DATE_OUT)
INTO
: DATE_ACCEPT,
: HOUR_VAL,
         :COUNT_VAL, 
         :ZONE_ID_R,
         :ZONE_NAME
         DO BEGIN      
    SUSPEND;
    END
    END
    ELSE BEGIN
    
    FOR 
SELECT  MIN(O.DATE_OUT) AS DATE_ACCEPT,
        MIN(EXTRACT(HOUR FROM O.DATE_OUT)) AS HOUR_VAL,
        COUNT(*) AS COUNT_VAL,       
        MIN(O.CONTACT) AS ZONE_ID_R,         
        MAX(CASE WHEN A.USER_NAME IS not NULL THEN A.USER_NAME || '(' ||O.CONTACT ||')' ELSE O.CONTACT END) AS ZONE_NAME
           FROM OUT_MESSAGES O 
        LEFT JOIN ACCOUNTS A ON A.PHONE = O.CONTACT 
        WHERE O.DATE_OUT IS NOT NULL AND CAST(O.DATE_OUT AS DATE) >= CAST(:D1 AS DATE) AND CAST(O.DATE_OUT AS DATE) <= (CAST(:D1 AS DATE) + 1)                        
              AND O.CONTACT = :ZONE_ID                  
             GROUP BY          O.CONTACT , 
            EXTRACT(YEAR FROM O.DATE_OUT),
            EXTRACT(MONTH FROM O.DATE_OUT),
            EXTRACT(DAY FROM O.DATE_OUT),
            EXTRACT(HOUR FROM O.DATE_OUT)              
            ORDER BY O.CONTACT , 
            MIN(O.DATE_OUT)
        
INTO
: DATE_ACCEPT,
: HOUR_VAL,
         :COUNT_VAL, 
         :ZONE_ID_R,
         :ZONE_NAME
         DO BEGIN       
    SUSPEND;
    END
     
    END
end

--

CREATE OR ALTER PROCEDURE PR_CONFIRM_ORDER (
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE PHONE VARCHAR(100);
DECLARE DRIVER_ID VARCHAR(32);
DECLARE PARK_ID VARCHAR(32);
DECLARE RECIPIENT_ID VARCHAR(32);
DECLARE S VARCHAR(1000);
BEGIN

  SELECT PHONE, DRIVER_ID, PARK_ID
    FROM ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :PHONE, :DRIVER_ID, :PARK_ID;

  UPDATE ORDERS
     SET DATE_BEGIN=CURRENT_TIMESTAMP
   WHERE ORDER_ID=:ORDER_ID;

  IF ((PHONE IS NOT NULL) AND (DRIVER_ID IS NOT NULL)) THEN BEGIN

    UPDATE PARK_STATES
       SET DATE_OUT=CURRENT_TIMESTAMP
     WHERE DRIVER_ID=:DRIVER_ID
       AND PARK_ID=:PARK_ID
       AND DATE_OUT IS NULL;

    IF (SUBSTR(PHONE,1,3)='+79')  THEN BEGIN

      RECIPIENT_ID=NULL;

      FOR SELECT ACCOUNT_ID
            FROM ACCOUNTS
           WHERE PHONE=:PHONE
            INTO :RECIPIENT_ID DO BEGIN

        IF (RECIPIENT_ID IS NOT NULL) THEN
          BREAK;
      END

/*      S='*А Такси* 277-77-87. Машина в пути.Ожидайте СМС-уведомление о прибытии';*/

      SELECT CONST_VALUE FROM GET_CONST_VALUE('1C12AF5D5D57ACD045A724F8E3FF90ED') INTO :S;

      IF (S IS NOT NULL) THEN BEGIN

        INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                  TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                          VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:RECIPIENT_ID,CURRENT_TIMESTAMP,
                                  :S,NULL,0,:PHONE,NULL,2,NULL,CURRENT_TIMESTAMP);
      END
    END

    SELECT PHONE_MOBILE
      FROM DRIVERS
     WHERE DRIVER_ID=:DRIVER_ID
      INTO :PHONE;

    SELECT CONST_VALUE FROM GET_CONST_VALUE('723E98B898F89A8941B6CAAB092221AE') INTO :S;

    IF (S IS NOT NULL) THEN BEGIN

      RECIPIENT_ID=DRIVER_ID;

      INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                        VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:RECIPIENT_ID,CURRENT_TIMESTAMP,
                                :S,NULL,0,:PHONE,NULL,2,NULL,CURRENT_TIMESTAMP);
    END

  END

END

--

CREATE OR ALTER PROCEDURE I_RECEIPT (
  RECEIPT_ID VARCHAR(32),
  RECEIPT_TYPE_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32),
  WHO_CREATE_ID VARCHAR(32),
  SUM_RECEIPT NUMERIC(15,2),
  DATE_RECEIPT TIMESTAMP,
  DATE_CREATE TIMESTAMP,
  DESCRIPTION VARCHAR(250))
AS
DECLARE S VARCHAR(70);
DECLARE ASUM_CHARGE NUMERIC(15,2);
DECLARE ASUM_RECEIPT NUMERIC(15,2);
DECLARE BALANCE NUMERIC(15,2);
DECLARE PHONE VARCHAR(100);
BEGIN
  INSERT INTO RECEIPTS (RECEIPT_ID,RECEIPT_TYPE_ID,ACCOUNT_ID,WHO_CREATE_ID,
                                  SUM_RECEIPT,DATE_RECEIPT,DATE_CREATE,DESCRIPTION)
       VALUES (:RECEIPT_ID,:RECEIPT_TYPE_ID,:ACCOUNT_ID,:WHO_CREATE_ID,
               :SUM_RECEIPT,:DATE_RECEIPT,:DATE_CREATE,:DESCRIPTION);


  SELECT (CASE WHEN SUM(SUM_CHARGE) IS NULL THEN 0.0 ELSE SUM(SUM_CHARGE) END)
    FROM CHARGES
   WHERE ACCOUNT_ID=:ACCOUNT_ID
    INTO :ASUM_CHARGE;

  SELECT (CASE WHEN SUM(SUM_RECEIPT) IS NULL THEN 0.0 ELSE SUM(SUM_RECEIPT) END)
    FROM RECEIPTS
   WHERE ACCOUNT_ID=:ACCOUNT_ID
    INTO :ASUM_RECEIPT;

  BALANCE=ASUM_RECEIPT-ASUM_CHARGE;

  SELECT PHONE
    FROM ACCOUNTS
   WHERE ACCOUNT_ID=:ACCOUNT_ID
    INTO :PHONE;

/*  S='Ваш баланс = '||CAST(BALANCE AS VARCHAR(30))||' р.';*/

  SELECT CONST_VALUE FROM GET_CONST_VALUE('2031AA8F2E4B959248967F2838DC5F19') INTO :S;

  IF (S IS NOT NULL) THEN BEGIN

    S=REPLACE_STRING(S,'%BALANCE',CAST(BALANCE AS VARCHAR(30)));

    INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                              TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                      VALUES (GET_UNIQUE_ID(),:WHO_CREATE_ID,:ACCOUNT_ID,CURRENT_TIMESTAMP,
                              :S,NULL,0,:PHONE,NULL,2,NULL,CURRENT_TIMESTAMP);
  END

END

--

CREATE OR ALTER PROCEDURE PR_REFUSE_CLIENT_DRIVE_OUT (
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE DRIVER_ID VARCHAR(32);
DECLARE PARK_ID VARCHAR(32);
DECLARE PARK_NAME VARCHAR(100);
DECLARE PHONE VARCHAR(100);
DECLARE PARK_STATE_ID VARCHAR(32);
DECLARE DATE_IN TIMESTAMP;
DECLARE S VARCHAR(1000);
BEGIN

  SELECT DRIVER_ID, PARK_ID
    FROM ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID, :PARK_ID;

  UPDATE ORDERS
     SET DATE_END=CURRENT_TIMESTAMP,
         WHO_PROCESS_ID=:ACCOUNT_ID,
         FINISHED=1
   WHERE ORDER_ID=:ORDER_ID;


  IF ((DRIVER_ID IS NOT NULL) AND (PARK_ID IS NOT NULL)) THEN BEGIN

    FOR SELECT PS.PARK_STATE_ID, P.NAME, PS.DATE_IN
          FROM PARK_STATES PS
          JOIN PARKS P ON P.PARK_ID=PS.PARK_ID
         WHERE PS.PARK_ID=:PARK_ID
           AND PS.DATE_OUT IS NULL
         ORDER BY PS.DATE_IN
          INTO :PARK_STATE_ID, :PARK_NAME, :DATE_IN DO BEGIN

      DATE_IN=DATE_IN-2*(1e0/24/60/60);

      INSERT INTO PARK_STATES (PARK_STATE_ID,DRIVER_ID,PARK_ID,DATE_IN,DATE_OUT)
                                 VALUES (GET_UNIQUE_ID(),:DRIVER_ID,:PARK_ID,:DATE_IN,NULL);

      BREAK;
    END

    IF (PARK_NAME IS NULL) THEN BEGIN

      INSERT INTO PARK_STATES (PARK_STATE_ID,DRIVER_ID,PARK_ID,DATE_IN,DATE_OUT)
                                 VALUES (GET_UNIQUE_ID(),:DRIVER_ID,:PARK_ID,CURRENT_TIMESTAMP,NULL);

      SELECT NAME
        FROM PARKS
       WHERE PARK_ID=:PARK_ID
        INTO :PARK_NAME;

    END

    SELECT PHONE_MOBILE
      FROM DRIVERS
     WHERE DRIVER_ID=:DRIVER_ID
      INTO :PHONE;

/*    S='Отказ по заказу. Вы поставлены 1 на стоянку '||PARK_NAME;*/

    SELECT CONST_VALUE FROM GET_CONST_VALUE('7604B1762FDB97EC406174FB54FA13EA') INTO :S;

    IF (S IS NOT NULL) THEN BEGIN

      S=REPLACE_STRING(S,'%PARK_NAME',PARK_NAME);

      INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                        VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                :S,NULL,0,:PHONE,NULL,0,NULL,CURRENT_TIMESTAMP);
    END

  END

END

--

CREATE OR ALTER PROCEDURE PR_SELECT_DRIVER (
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE DRIVER_ID VARCHAR(32);
DECLARE CAR_ID VARCHAR(32);
DECLARE CNT INTEGER;
DECLARE S VARCHAR(1000);
DECLARE ADDRESS VARCHAR(1000);
DECLARE PREFIX VARCHAR(10);
DECLARE STREET VARCHAR(100);
DECLARE HOUSE VARCHAR(10);
DECLARE FLAT VARCHAR(10);
DECLARE PORCH VARCHAR(10);
DECLARE LOCALITY VARCHAR(100);
DECLARE PHONE VARCHAR(100);
DECLARE DATE_ACCEPT TIMESTAMP;
DECLARE DATE_ARRIVAL TIMESTAMP;
DECLARE DATE_BEGIN TIMESTAMP;
DECLARE BEFORE_PERIOD INTEGER;
DECLARE ACTION_ID VARCHAR(32);
DECLARE D TIMESTAMP;
DECLARE DESCRIPTION VARCHAR(250);
BEGIN

  SELECT O.DRIVER_ID,
         S.PREFIX, S.NAME, O.HOUSE, O.FLAT, O.PORCH, L.NAME,
         O.DATE_ACCEPT, O.DATE_ARRIVAL, O.BEFORE_PERIOD,
         O.ACTION_ID, O.DATE_BEGIN, O.DESCRIPTION
    FROM ORDERS O
    JOIN STREETS S ON S.STREET_ID=O.STREET_ID
    JOIN LOCALITIES L ON L.LOCALITY_ID=S.LOCALITY_ID
   WHERE O.ORDER_ID=:ORDER_ID
     INTO :DRIVER_ID,
          :PREFIX, :STREET, :HOUSE, :FLAT, :PORCH, :LOCALITY,
          :DATE_ACCEPT, :DATE_ARRIVAL, :BEFORE_PERIOD,
          :ACTION_ID, :DATE_BEGIN, :DESCRIPTION;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    CNT=0;

    SELECT COUNT(*)
      FROM OUT_MESSAGES
     WHERE RECIPIENT_ID=:DRIVER_ID
       AND DESCRIPTION=:ORDER_ID||:ACTION_ID
       AND TYPE_MESSAGE=0
       AND DATE_OUT IS NULL
       AND DATE_CREATE>=:DATE_BEGIN
      INTO CNT;

    IF (CNT=0) THEN BEGIN

      SELECT CAR_ID, PHONE_MOBILE
        FROM DRIVERS
       WHERE DRIVER_ID=:DRIVER_ID
        INTO :CAR_ID, :PHONE;

      D=CURRENT_TIMESTAMP;

      UPDATE ORDERS
         SET DRIVER_ID=:DRIVER_ID,
             CAR_ID=:CAR_ID,
             DATE_END=:D,
             WHO_PROCESS_ID=:ACCOUNT_ID
       WHERE ORDER_ID=:ORDER_ID;

      ADDRESS='';

      IF (PREFIX IS NOT NULL) THEN
        ADDRESS=PREFIX||' ';

      ADDRESS=ADDRESS||STREET||' '||HOUSE;

      IF (FLAT IS NOT NULL) THEN
        ADDRESS=ADDRESS||'-'||FLAT;

      IF (PORCH IS NOT NULL) THEN
        ADDRESS=ADDRESS||' п.'||PORCH;

      ADDRESS=ADDRESS||', '||LOCALITY;

      IF (DATE_ACCEPT<DATE_ARRIVAL) THEN BEGIN

        IF ((DATE_ACCEPT+(BEFORE_PERIOD*(1e0/24/60)))<DATE_ARRIVAL) THEN BEGIN

/*          S='Предв. на '||/*PERFIX*//*FORMAT_DATETIME('hh:nn',DATE_ARRIVAL)||', '||ADDRESS;*/

          SELECT CONST_VALUE FROM GET_CONST_VALUE('2A773F389AD895B94010252F1DC6D3CC') INTO :S;

        END ELSE BEGIN

/*          S='Заказ на '||/*PERFIX*//*FORMAT_DATETIME('hh:nn',DATE_ARRIVAL)||', '||ADDRESS;*/

          SELECT CONST_VALUE FROM GET_CONST_VALUE('051BE1C8C28F9DB34EAA8DD46E0DA3B4') INTO :S;

        END

      END ELSE BEGIN

/*        S=/*PERFIX*//*FORMAT_DATETIME('hh:nn',DATE_ARRIVAL)||', '||ADDRESS;*/

        SELECT CONST_VALUE FROM GET_CONST_VALUE('CD5055A23D04B51641F3211814253430') INTO :S;

      END

      IF (S IS NOT NULL) THEN BEGIN

        S=REPLACE_STRING(S,'%TIME',/*PERFIX*/FORMAT_DATETIME('hh:nn',DATE_ARRIVAL));
        S=REPLACE_STRING(S,'%ADDRESS',ADDRESS);

        INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                  TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                          VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,:D,
                                  :S,NULL,0,:PHONE,:ORDER_ID||:ACTION_ID,0,NULL,:D);

        IF ((DESCRIPTION IS NOT NULL) AND (TRIM(DESCRIPTION)<>'')) THEN BEGIN

          S=DESCRIPTION;

          INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                    TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                            VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,:D,
                                    :S,NULL,0,:PHONE,NULL,0,NULL,:D);
        END

      END

    END

  END

END

--

CREATE OR ALTER PROCEDURE PR_REFUSE_DRIVER_DRIVE_OUT (
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE DRIVER_ID VARCHAR(32);
DECLARE PHONE VARCHAR(100);
DECLARE S VARCHAR(1000);
BEGIN

  SELECT DRIVER_ID
    FROM ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID;

  UPDATE ORDERS
     SET DATE_BEGIN=CURRENT_TIMESTAMP,
         DRIVER_ID=NULL,
         CAR_ID=NULL
   WHERE ORDER_ID=:ORDER_ID;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    SELECT PHONE_MOBILE
      FROM DRIVERS
     WHERE DRIVER_ID=:DRIVER_ID
      INTO :PHONE;

/*    S='Отказ от заказа. По освобождению встаньте на стоянку';*/

    SELECT CONST_VALUE FROM GET_CONST_VALUE('7D5B6BED096187764ECE40FC7D5CB943') INTO :S;

    IF (S IS NOT NULL) THEN BEGIN

      INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                        VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                :S,NULL,0,:PHONE,NULL,2,NULL,CURRENT_TIMESTAMP);
    END

  END

END

--

CREATE OR ALTER PROCEDURE PR_REFUSE_DRIVER_CONFIRM (
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE DRIVER_ID VARCHAR(32);
DECLARE PHONE VARCHAR(100);
DECLARE S VARCHAR(1000);
BEGIN

  SELECT DRIVER_ID
    FROM ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID;

  UPDATE ORDERS
     SET DATE_BEGIN=CURRENT_TIMESTAMP,
         DRIVER_ID=NULL,
         CAR_ID=NULL
   WHERE ORDER_ID=:ORDER_ID;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    UPDATE PARK_STATES
       SET DATE_OUT=CURRENT_TIMESTAMP
     WHERE DATE_OUT IS NULL
       AND DRIVER_ID=:DRIVER_ID;

    SELECT PHONE_MOBILE
      FROM DRIVERS
     WHERE DRIVER_ID=:DRIVER_ID
      INTO :PHONE;

/*    S='Отказ от заказа. Вы сняты со стоянки';*/

    SELECT CONST_VALUE FROM GET_CONST_VALUE('14AB0F225BEFBBB14E0A5296BEB471A3') INTO :S;

    IF (S IS NOT NULL) THEN BEGIN

      INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                        VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                :S,NULL,0,:PHONE,NULL,2,NULL,CURRENT_TIMESTAMP);
    END

  END

END

--

CREATE OR ALTER PROCEDURE PR_REFUSE_DRIVER_COME_OUT (
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE DRIVER_ID VARCHAR(32);
DECLARE PHONE VARCHAR(100);
DECLARE S VARCHAR(1000);
BEGIN

  SELECT DRIVER_ID
    FROM ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID;

  UPDATE ORDERS
     SET TYPE_PROCESS=1,
         DATE_END=CURRENT_TIMESTAMP,
         WHO_PROCESS_ID=:ACCOUNT_ID
   WHERE ORDER_ID=:ORDER_ID;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    SELECT PHONE_MOBILE
      FROM DRIVERS
     WHERE DRIVER_ID=:DRIVER_ID
      INTO :PHONE;

    SELECT CONST_VALUE FROM GET_CONST_VALUE('2C0BBC7EF7418D934C32D8969D7F2D8C') INTO :S;

    IF (S IS NOT NULL) THEN BEGIN

      INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                        VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                :S,NULL,0,:PHONE,NULL,2,NULL,CURRENT_TIMESTAMP);
    END

  END

END

--

CREATE OR ALTER PROCEDURE PR_REFUSE_DRIVER_2 (
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
declare variable DRIVER_ID varchar(32);
declare variable PHONE varchar(100);
declare variable S varchar(1000);
BEGIN

  SELECT DRIVER_ID
    FROM /*PREFIX*/ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID;

  UPDATE /*PREFIX*/ORDERS
     SET DATE_BEGIN=CURRENT_TIMESTAMP,
         DRIVER_ID=NULL,
         CAR_ID=NULL
   WHERE ORDER_ID=:ORDER_ID;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    SELECT PHONE
      FROM /*PREFIX*/ACCOUNTS
     WHERE ACCOUNT_ID=:DRIVER_ID
      INTO :PHONE;

    S='Отказ от заказа. По освобождению встаньте на стоянку';

    INSERT INTO /*PREFIX*/OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                        TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                                VALUES (/*PREFIX*/GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                        :S,NULL,0,:PHONE,NULL,2,NULL,CURRENT_TIMESTAMP);

  END

END

--

CREATE OR ALTER PROCEDURE PR_ARRIVAL_DRIVER (
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE PHONE VARCHAR(100);
DECLARE DRIVER_ID VARCHAR(32);
DECLARE COST_RATE NUMERIC(15,2);
DECLARE COLOR VARCHAR(100);
DECLARE BRAND VARCHAR(100);
DECLARE STATE_NUM VARCHAR(50);
DECLARE PREFIX VARCHAR(10);
DECLARE STREET VARCHAR(100);
DECLARE HOUSE VARCHAR(10);
DECLARE FLAT VARCHAR(10);
DECLARE PORCH VARCHAR(10);
DECLARE LOCALITY VARCHAR(100);
DECLARE RECIPIENT_ID VARCHAR(32);
DECLARE S VARCHAR(1000);
DECLARE ADDRESS VARCHAR(1000);
DECLARE CNT INTEGER;
BEGIN

  SELECT O.PHONE, O.DRIVER_ID, O.COST_RATE,
         C.COLOR, C.BRAND, C.STATE_NUM
    FROM /*PREFIX*/ORDERS O
    LEFT JOIN /*PREFIX*/DRIVERS D ON D.DRIVER_ID=O.DRIVER_ID
    LEFT JOIN /*PREFIX*/CARS C ON C.CAR_ID=D.CAR_ID
   WHERE ORDER_ID=:ORDER_ID
    INTO :PHONE, :DRIVER_ID, :COST_RATE,
         :COLOR, :BRAND, :STATE_NUM;

  UPDATE /*PREFIX*/ORDERS
     SET DATE_BEGIN=CURRENT_TIMESTAMP
   WHERE ORDER_ID=:ORDER_ID;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    IF (PHONE IS NOT NULL) THEN BEGIN

      IF (/*PREFIX*/SUBSTR(PHONE,1,3)='+79')  THEN BEGIN

        RECIPIENT_ID=NULL;

        FOR SELECT ACCOUNT_ID
              FROM /*PREFIX*/ACCOUNTS
             WHERE PHONE=:PHONE
              INTO :RECIPIENT_ID DO BEGIN

          IF (RECIPIENT_ID IS NOT NULL) THEN
            BREAK;
        END

/*        S='Выходите, такси '||COLOR||', '||BRAND||', '||STATE_NUM||'.';*/

        IF (COST_RATE>0.0) THEN BEGIN

/*          S=S||' Стоимость = '||CAST(CAST(COST_RATE AS NUMERIC(15,0)) AS VARCHAR(30))||' р.';*/

          SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('8D9E6C9F4852AD8142205F027B2A5288') INTO :S;

        END ELSE BEGIN

/*          S=S||' Стоимость не определена';*/

          SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('93EBB0171E37A0884313759C0DA1EB3D') INTO :S;

        END

        IF (S IS NOT NULL) THEN BEGIN

          S=/*PREFIX*/REPLACE_STRING(S,'%COLOR',COLOR);
          S=/*PREFIX*/REPLACE_STRING(S,'%BRAND',BRAND);
          S=/*PREFIX*/REPLACE_STRING(S,'%STATE_NUM',STATE_NUM);
          S=/*PREFIX*/REPLACE_STRING(S,'%COST_RATE',CAST(CAST(COST_RATE AS NUMERIC(15,0)) AS VARCHAR(30)));

          INSERT INTO /*PREFIX*/OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                              TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                                      VALUES (/*PREFIX*/GET_UNIQUE_ID(),:ACCOUNT_ID,:RECIPIENT_ID,CURRENT_TIMESTAMP,
                                              :S,NULL,0,:PHONE,NULL,0,NULL,CURRENT_TIMESTAMP);

        END

        SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('F4384929079999BB47A895BFCA5BB382') INTO :S;

        IF (S IS NOT NULL) THEN BEGIN

          INSERT INTO /*PREFIX*/OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                              TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                                      VALUES (/*PREFIX*/GET_UNIQUE_ID(),:ACCOUNT_ID,:RECIPIENT_ID,CURRENT_TIMESTAMP,
                                              :S,NULL,0,:PHONE,NULL,0,NULL,CURRENT_TIMESTAMP);

        END

      END

    END

    SELECT PHONE_MOBILE
      FROM /*PREFIX*/DRIVERS
     WHERE DRIVER_ID=:DRIVER_ID
      INTO :PHONE;

    SELECT COUNT(*)
      FROM /*PREFIX*/ROUTES
     WHERE ORDER_ID=:ORDER_ID
      INTO CNT;

    ADDRESS='';

    IF (CNT=1) THEN BEGIN

      FOR SELECT S.PREFIX, S.NAME, R.HOUSE, R.FLAT, R.PORCH, L.NAME
            FROM /*PREFIX*/ROUTES R
            LEFT JOIN /*PREFIX*/STREETS S ON S.STREET_ID=R.STREET_ID
            LEFT JOIN /*PREFIX*/LOCALITIES L ON L.LOCALITY_ID=S.LOCALITY_ID
           WHERE R.ORDER_ID=:ORDER_ID
           ORDER BY R.PRIORITY DESC
            INTO :PREFIX, :STREET, :HOUSE, :FLAT, :PORCH, :LOCALITY DO BEGIN
        BREAK;
      END

      IF ((STREET IS NOT NULL) AND (HOUSE IS NOT NULL)) THEN BEGIN

        IF (PREFIX IS NOT NULL) THEN
          ADDRESS=PREFIX||' ';

        IF (STREET IS NOT NULL) THEN
          ADDRESS=ADDRESS||STREET;

        IF (HOUSE IS NOT NULL) THEN
          ADDRESS=ADDRESS||' '||HOUSE;

        IF (FLAT IS NOT NULL) THEN
          ADDRESS=ADDRESS||'-'||FLAT;

        IF (PORCH IS NOT NULL) THEN
          ADDRESS=ADDRESS||' п.'||PORCH;

        IF (LOCALITY IS NOT NULL) THEN
          ADDRESS=ADDRESS||', '||LOCALITY;

      END ELSE BEGIN

        SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('7ED5E8A8BBD9870A411517B54D9EB973') INTO :ADDRESS;

      END

    END ELSE BEGIN

/*      ADDRESS='Уточните маршрут.';*/

      SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('7ED5E8A8BBD9870A411517B54D9EB973') INTO :ADDRESS;
    END

    IF (COST_RATE>0.0) THEN BEGIN

/*      S=ADDRESS||' Стоимость = '||CAST(CAST(COST_RATE AS NUMERIC(15,0)) AS VARCHAR(30))||' р.';*/

      SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('9C8BC7D14DAEAE5C4DC8C1C91B20BCC2') INTO :S;

    END ELSE BEGIN

/*      S=ADDRESS||' Стоимость не определена';*/

      SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('92009DB6C3EAA9E74B80D333538FE40D') INTO :S;

    END

    IF (S IS NOT NULL) THEN BEGIN

      S=/*PREFIX*/REPLACE_STRING(S,'%ADDRESS',ADDRESS);
      S=/*PREFIX*/REPLACE_STRING(S,'%COST_RATE',CAST(CAST(COST_RATE AS NUMERIC(15,0)) AS VARCHAR(30)));

      RECIPIENT_ID=DRIVER_ID;

      INSERT INTO /*PREFIX*/OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                          TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                                  VALUES (/*PREFIX*/GET_UNIQUE_ID(),:ACCOUNT_ID,:RECIPIENT_ID,CURRENT_TIMESTAMP,
                                          :S,NULL,0,:PHONE,NULL,2,NULL,CURRENT_TIMESTAMP);
    END

  END

END

--

CREATE OR ALTER PROCEDURE PR_REFUSE_CLIENT_CONFIRM (
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE DRIVER_ID VARCHAR(32);
DECLARE PHONE VARCHAR(100);
DECLARE S VARCHAR(1000);
BEGIN

  SELECT DRIVER_ID
    FROM ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID;

  UPDATE ORDERS
     SET DATE_END=CURRENT_TIMESTAMP,
         WHO_PROCESS_ID=:ACCOUNT_ID,
         FINISHED=1
   WHERE ORDER_ID=:ORDER_ID;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    SELECT PHONE_MOBILE
      FROM DRIVERS
     WHERE DRIVER_ID=:DRIVER_ID
      INTO :PHONE;

    SELECT CONST_VALUE FROM GET_CONST_VALUE('C40297F408B0AF3A45776489F11FC512') INTO :S;

    IF (S IS NOT NULL) THEN BEGIN

      INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                        VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                :S,NULL,0,:PHONE,NULL,0,NULL,CURRENT_TIMESTAMP);
    END

  END

END

--

CREATE OR ALTER PROCEDURE U_OUT_MESSAGE (
  OUT_MESSAGE_ID VARCHAR(32),
  CREATOR_ID VARCHAR(32),
  RECIPIENT_ID VARCHAR(32),
  DATE_CREATE TIMESTAMP,
  TEXT_OUT VARCHAR(4000),
  DATE_OUT TIMESTAMP,
  TYPE_MESSAGE INTEGER,
  CONTACT VARCHAR(100),
  DESCRIPTION VARCHAR(250),
  PRIORITY INTEGER,
  LOCKED VARCHAR(32),
  DATE_BEGIN TIMESTAMP,
  DATE_END TIMESTAMP,
  OLD_OUT_MESSAGE_ID VARCHAR(32))
AS
BEGIN
  UPDATE /*PREFIX*/OUT_MESSAGES
     SET OUT_MESSAGE_ID=:OUT_MESSAGE_ID,
         CREATOR_ID=:CREATOR_ID,
         RECIPIENT_ID=:RECIPIENT_ID,
         DATE_CREATE=:DATE_CREATE,
         TEXT_OUT=:TEXT_OUT,
         DATE_OUT=:DATE_OUT,
         TYPE_MESSAGE=:TYPE_MESSAGE,
         CONTACT=:CONTACT,
         DESCRIPTION=:DESCRIPTION,
         PRIORITY=:PRIORITY,
         LOCKED=:LOCKED,
         DATE_BEGIN=:DATE_BEGIN,
         DATE_END=:DATE_END
   WHERE OUT_MESSAGE_ID=:OLD_OUT_MESSAGE_ID;
END

--

CREATE OR ALTER PROCEDURE U_ORDER (
  ORDER_ID VARCHAR(32),
  ACTION_ID VARCHAR(32),
  RATE_ID VARCHAR(32),
  CAR_TYPE_ID VARCHAR(32),
  WHO_ACCEPT_ID VARCHAR(32),
  STREET_ID VARCHAR(32),
  ZONE_ID VARCHAR(32),
  PARENT_ID VARCHAR(32),
  FIRM_ID VARCHAR(32),
  CAR_ID VARCHAR(32),
  WHO_PROCESS_ID VARCHAR(32),
  RESULT_ID VARCHAR(32),
  PARK_ID VARCHAR(32),
  SOURCE_ID VARCHAR(32),
  DISCOUNT_ID VARCHAR(32),
  DRIVER_ID VARCHAR(32),
  ORDER_NUM VARCHAR(10),
  PHONE VARCHAR(100),
  HOUSE VARCHAR(10),
  FLAT VARCHAR(10),
  PORCH VARCHAR(10),
  DATE_ACCEPT TIMESTAMP,
  DATE_ARRIVAL TIMESTAMP,
  DATE_BEGIN TIMESTAMP,
  DATE_END TIMESTAMP,
  CUSTOMER VARCHAR(250),
  DESCRIPTION VARCHAR(250),
  COST_RATE NUMERIC(15,2),
  COST_FACT NUMERIC(15,2),
  TYPE_ACCEPT INTEGER,
  TYPE_PROCESS INTEGER,
  DATE_HISTORY TIMESTAMP,
  WHO_HISTORY_ID VARCHAR(32),
  BEFORE_PERIOD INTEGER,
  FINISHED INTEGER,
  LOCKED VARCHAR(32),
  OLD_ORDER_ID VARCHAR(32))
AS
  DECLARE RECIPIENT_ID VARCHAR(32);
  DECLARE OLD_COST_RATE NUMERIC(15,2);
  DECLARE S VARCHAR(70);
BEGIN
  UPDATE /*PREFIX*/ORDERS
     SET ORDER_ID=:ORDER_ID,
         ACTION_ID=:ACTION_ID,
         RATE_ID=:RATE_ID,
         CAR_TYPE_ID=:CAR_TYPE_ID,
         WHO_ACCEPT_ID=:WHO_ACCEPT_ID,
         STREET_ID=:STREET_ID,
         ZONE_ID=:ZONE_ID,
         PARENT_ID=:PARENT_ID,
         FIRM_ID=:FIRM_ID,
         CAR_ID=:CAR_ID,
         WHO_PROCESS_ID=:WHO_PROCESS_ID,
         RESULT_ID=:RESULT_ID,
         PARK_ID=:PARK_ID,
         SOURCE_ID=:SOURCE_ID,
         DISCOUNT_ID=:DISCOUNT_ID,
         DRIVER_ID=:DRIVER_ID,
         ORDER_NUM=:ORDER_NUM,
         PHONE=:PHONE,
         HOUSE=:HOUSE,
         FLAT=:FLAT,
         PORCH=:PORCH,
         DATE_ACCEPT=:DATE_ACCEPT,
         DATE_ARRIVAL=:DATE_ARRIVAL,
         DATE_BEGIN=:DATE_BEGIN,
         DATE_END=:DATE_END,
         CUSTOMER=:CUSTOMER,
         DESCRIPTION=:DESCRIPTION,
         COST_RATE=:COST_RATE,
         COST_FACT=:COST_FACT,
         TYPE_ACCEPT=:TYPE_ACCEPT,
         TYPE_PROCESS=:TYPE_PROCESS,
         DATE_HISTORY=:DATE_HISTORY,
         WHO_HISTORY_ID=:WHO_HISTORY_ID,
         BEFORE_PERIOD=:BEFORE_PERIOD,
         FINISHED=:FINISHED,
         LOCKED=:LOCKED
   WHERE ORDER_ID=:OLD_ORDER_ID;

  OLD_COST_RATE=NULL;

  FOR SELECT COST_RATE
        FROM ORDERS
       WHERE PARENT_ID=:OLD_ORDER_ID
         AND DATE_HISTORY IS NOT NULL
       ORDER BY DATE_HISTORY DESC
        INTO :OLD_COST_RATE DO BEGIN

    IF (OLD_COST_RATE IS NOT NULL) THEN
      BREAK;

  END

  IF ((COST_RATE IS NOT NULL) AND (OLD_COST_RATE<>COST_RATE) AND (WHO_PROCESS_ID IS NOT NULL)) THEN BEGIN

    IF (SUBSTR(PHONE,1,3)='+79')  THEN BEGIN

      RECIPIENT_ID=NULL;

      FOR SELECT ACCOUNT_ID
            FROM ACCOUNTS
           WHERE PHONE=:PHONE
            INTO :RECIPIENT_ID DO BEGIN

        IF (RECIPIENT_ID IS NOT NULL) THEN
          BREAK;
      END

      SELECT CONST_VALUE FROM GET_CONST_VALUE('6F6E5F38806C896B43AC16E69914EFFA') INTO :S;

      IF (S IS NOT NULL) THEN BEGIN

        S=REPLACE_STRING(S,'%COST_RATE',CAST(COST_RATE AS VARCHAR(30)));

        INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                  TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                          VALUES (GET_UNIQUE_ID(),:WHO_PROCESS_ID,:RECIPIENT_ID,CURRENT_TIMESTAMP,
                                  :S,NULL,0,:PHONE,NULL,1,NULL,CURRENT_TIMESTAMP);
      END

    END

  END

END

--

CREATE OR ALTER PROCEDURE LOCK_OUT_MESSAGES (
  MAX_COUNT INTEGER,
  LOCKED VARCHAR(32),
  TYPE_MESSAGE INTEGER,
  PERIOD INTEGER) 
RETURNS (
  LOCK_COUNT INTEGER)
AS
declare variable FLAG integer;
declare variable OUT_MESSAGE_ID varchar(32);
declare variable DATE_BEGIN TIMESTAMP;
declare variable DATE_END TIMESTAMP;
declare variable COMMON_PERIOD INTEGER;
BEGIN
  LOCK_COUNT=0;

  FLAG=GEN_ID(GEN_LOCK_OUT_MESSAGES,0);

  IF (FLAG=0) THEN BEGIN

    FLAG=GEN_ID(GEN_LOCK_OUT_MESSAGES,-1);

    FOR SELECT OUT_MESSAGE_ID, DATE_BEGIN, DATE_END
          FROM /*PREFIX*/OUT_MESSAGES
         WHERE DATE_OUT IS NULL
           AND LOCKED IS NULL
           AND TYPE_MESSAGE=:TYPE_MESSAGE
         ORDER BY PRIORITY, DATE_BEGIN
          INTO :OUT_MESSAGE_ID, :DATE_BEGIN, :DATE_END DO BEGIN

      IF (DATE_END IS NOT NULL) THEN
        COMMON_PERIOD=(DATE_END-DATE_BEGIN)*1e0*1*24*60*60;
      ELSE
        COMMON_PERIOD=PERIOD;

      IF ((DATE_BEGIN+(COMMON_PERIOD*(1e0/24/60/60)))>=CURRENT_TIMESTAMP) THEN BEGIN

        IF (LOCK_COUNT<=MAX_COUNT) THEN BEGIN

          UPDATE /*PREFIX*/OUT_MESSAGES
             SET LOCKED=:LOCKED
           WHERE OUT_MESSAGE_ID=:OUT_MESSAGE_ID;

          LOCK_COUNT=LOCK_COUNT+1;

        END ELSE BEGIN
          BREAK;
        END

      END

    END

    FLAG=GEN_ID(GEN_LOCK_OUT_MESSAGES,1);

  END

END

--

CREATE OR ALTER PROCEDURE UNLOCK_OUT_MESSAGE (
  OUT_MESSAGE_ID VARCHAR(32),
  SENDED INTEGER,
  DATE_OUT TIMESTAMP)
AS
BEGIN
  IF (SENDED<>0) THEN BEGIN

    IF (DATE_OUT IS NULL) THEN
      DATE_OUT=CURRENT_TIMESTAMP;

    UPDATE /*PREFIX*/OUT_MESSAGES
       SET DATE_OUT=:DATE_OUT,
           LOCKED=NULL
     WHERE OUT_MESSAGE_ID=:OUT_MESSAGE_ID;

  END ELSE BEGIN

    UPDATE /*PREFIX*/OUT_MESSAGES
       SET LOCKED=NULL
     WHERE OUT_MESSAGE_ID=:OUT_MESSAGE_ID;

  END

END

--

DECLARE EXTERNAL FUNCTION STRING_LENGTH
   CSTRING(32767)
RETURNS INT BY VALUE
ENTRY_POINT 'STRING_LENGTH' MODULE_NAME 'udfibase.dll';

--


CREATE OR ALTER PROCEDURE LOCK_OUT_MESSAGES (
  MAX_COUNT INTEGER,
  LOCKED VARCHAR(32),
  TYPE_MESSAGE INTEGER,
  PERIOD INTEGER) 
RETURNS (
  LOCK_COUNT INTEGER)
AS
declare variable FLAG integer;
declare variable OUT_MESSAGE_ID varchar(32);
declare variable DATE_BEGIN TIMESTAMP;
declare variable DATE_END TIMESTAMP;
declare variable COMMON_PERIOD INTEGER;
DECLARE D TIMESTAMP;
DECLARE H INTEGER;
BEGIN
  LOCK_COUNT=0;

  FLAG=GEN_ID(GEN_LOCK_OUT_MESSAGES,0);

  IF (FLAG=0) THEN BEGIN

    FLAG=GEN_ID(GEN_LOCK_OUT_MESSAGES,-1);

    FOR SELECT OUT_MESSAGE_ID, DATE_BEGIN, DATE_END
          FROM /*PREFIX*/OUT_MESSAGES
         WHERE DATE_OUT IS NULL
           AND LOCKED IS NULL
           AND TYPE_MESSAGE=:TYPE_MESSAGE
         ORDER BY PRIORITY, DATE_BEGIN
          INTO :OUT_MESSAGE_ID, :DATE_BEGIN, :DATE_END DO BEGIN

      IF (DATE_END IS NOT NULL) THEN
        COMMON_PERIOD=(DATE_END-DATE_BEGIN)*1e0*1*24*60*60;
      ELSE
        COMMON_PERIOD=PERIOD;

      D=CURRENT_TIMESTAMP;
      H=EXTRACT(HOUR FROM D);
      IF (DATE_BEGIN<=D AND
          (DATE_BEGIN+(COMMON_PERIOD*(1e0/24/60/60)))>=D AND
          H>=8 AND H<20) THEN BEGIN

        IF (LOCK_COUNT<=MAX_COUNT) THEN BEGIN

          UPDATE /*PREFIX*/OUT_MESSAGES
             SET LOCKED=:LOCKED
           WHERE OUT_MESSAGE_ID=:OUT_MESSAGE_ID;

          LOCK_COUNT=LOCK_COUNT+1;

        END ELSE BEGIN
          BREAK;
        END

      END

    END

    FLAG=GEN_ID(GEN_LOCK_OUT_MESSAGES,1);

  END

END

--

CREATE TABLE /*PREFIX*/CLIENT_GROUPS
(
  CLIENT_GROUP_ID VARCHAR(32) NOT NULL,
  PARENT_ID VARCHAR(32),
  NAME VARCHAR(100) NOT NULL,
  DESCRIPTION VARCHAR(250),
  PRIORITY INTEGER NOT NULL,
  "LEVEL" INTEGER NOT NULL,
  PRIMARY KEY (CLIENT_GROUP_ID),
  FOREIGN KEY (PARENT_ID) REFERENCES /*PREFIX*/CLIENT_GROUPS (CLIENT_GROUP_ID)
)

--

CREATE VIEW /*PREFIX*/S_CLIENT_GROUPS
(
  CLIENT_GROUP_ID,
  PARENT_ID,
  NAME,
  DESCRIPTION,
  PRIORITY,
  "LEVEL",
  PARENT_NAME
)
AS
   SELECT CG.*,
          CG1.NAME AS PARENT_NAME
     FROM /*PREFIX*/CLIENT_GROUPS CG
     LEFT JOIN /*PREFIX*/CLIENT_GROUPS CG1 ON CG1.CLIENT_GROUP_ID=CG.PARENT_ID

--

CREATE PROCEDURE /*PREFIX*/I_CLIENT_GROUP
(
  CLIENT_GROUP_ID VARCHAR(32),
  PARENT_ID VARCHAR(32),
  NAME VARCHAR(100),
  DESCRIPTION VARCHAR(250),
  PRIORITY INTEGER
)
AS
  DECLARE VARIABLE LV INTEGER;
BEGIN
  IF (:PARENT_ID IS NULL) THEN BEGIN
    LV=1;
  END ELSE BEGIN
    SELECT CG."LEVEL"+1
      FROM /*PREFIX*/CLIENT_GROUPS CG
     WHERE CG.CLIENT_GROUP_ID=:PARENT_ID
      INTO :LV;
  END
  INSERT INTO /*PREFIX*/CLIENT_GROUPS (CLIENT_GROUP_ID,PARENT_ID,NAME,DESCRIPTION,PRIORITY,"LEVEL")
       VALUES (:CLIENT_GROUP_ID,:PARENT_ID,:NAME,:DESCRIPTION,:PRIORITY,:LV);
END;

--

CREATE PROCEDURE /*PREFIX*/R_CLIENT_GROUP_LEVELS
(
  PARENT_ID VARCHAR(32),
  "LEVEL" INTEGER
)
AS
  DECLARE VARIABLE CLIENT_GROUP_ID VARCHAR(32);
  DECLARE VARIABLE L INTEGER;
BEGIN
  FOR SELECT CG.CLIENT_GROUP_ID
        FROM /*PREFIX*/CLIENT_GROUPS CG
       WHERE CG.PARENT_ID=:PARENT_ID
        INTO :CLIENT_GROUP_ID DO BEGIN

    L=:"LEVEL"+1;

    UPDATE /*PREFIX*/CLIENT_GROUPS
       SET "LEVEL"=:L
     WHERE CLIENT_GROUP_ID=:CLIENT_GROUP_ID;

    EXECUTE PROCEDURE R_CLIENT_GROUP_LEVELS(:CLIENT_GROUP_ID,:L);

  END
END;

--

CREATE PROCEDURE /*PREFIX*/U_CLIENT_GROUP
(
  CLIENT_GROUP_ID VARCHAR(32),
  PARENT_ID VARCHAR(32),
  NAME VARCHAR(100),
  DESCRIPTION VARCHAR(250),
  PRIORITY INTEGER,
  OLD_CLIENT_GROUP_ID VARCHAR(32)
)
AS
  DECLARE VARIABLE LV INTEGER;
BEGIN
  IF (:PARENT_ID IS NULL) THEN BEGIN
    LV=1;
  END ELSE BEGIN
    SELECT CG."LEVEL"+1
      FROM /*PREFIX*/CLIENT_GROUPS CG
     WHERE CG.CLIENT_GROUP_ID=:PARENT_ID
      INTO :LV;
  END

  UPDATE /*PREFIX*/CLIENT_GROUPS
     SET CLIENT_GROUP_ID=:CLIENT_GROUP_ID,
         PARENT_ID=:PARENT_ID,
         NAME=:NAME,
         DESCRIPTION=:DESCRIPTION,
         PRIORITY=:PRIORITY,
         "LEVEL"=:LV
   WHERE CLIENT_GROUP_ID=:OLD_CLIENT_GROUP_ID;
    
  EXECUTE PROCEDURE /*PREFIX*/R_CLIENT_GROUP_LEVELS(:CLIENT_GROUP_ID,:LV);
END;

--

CREATE PROCEDURE /*PREFIX*/D_CLIENT_GROUP
(
  OLD_CLIENT_GROUP_ID VARCHAR(32)
)
AS
BEGIN
  DELETE FROM /*PREFIX*/CLIENT_GROUPS
        WHERE CLIENT_GROUP_ID=:OLD_CLIENT_GROUP_ID;
END;

--

ALTER TABLE ACCOUNTS
ADD JOB_TITLE VARCHAR(250)

--

DROP VIEW S_ACCOUNTS

--

CREATE VIEW /*PREFIX*/S_ACCOUNTS
(
  ACCOUNT_ID,
  FIRM_ID,
  DATE_CREATE,
  USER_NAME,
  "PASSWORD",
  DESCRIPTION,
  DB_USER_NAME,
  DB_PASSWORD,
  IS_ROLE,
  LOCKED,
  AUTO_CREATED,
  SURNAME,
  NAME,
  PATRONYMIC,
  PHONE,
  EMAIL,
  PHOTO,
  JOB_TITLE,
  FIRM_SMALL_NAME
)
AS
  SELECT A.*, 
         F.SMALL_NAME AS FIRM_SMALL_NAME
    FROM /*PREFIX*/ACCOUNTS A
    LEFT JOIN /*PREFIX*/FIRMS F ON F.FIRM_ID=A.FIRM_ID

--

CREATE OR ALTER PROCEDURE /*PREFIX*/I_ACCOUNT
(
  ACCOUNT_ID VARCHAR(32),
  FIRM_ID VARCHAR(32),
  DATE_CREATE TIMESTAMP,
  USER_NAME VARCHAR(100),
  "PASSWORD" VARCHAR(100),
  DESCRIPTION VARCHAR(250),
  DB_USER_NAME VARCHAR(100),
  DB_PASSWORD VARCHAR(100),
  IS_ROLE INTEGER,
  LOCKED INTEGER,
  AUTO_CREATED INTEGER,
  SURNAME VARCHAR(100),
  NAME VARCHAR(100),
  PATRONYMIC VARCHAR(100),
  PHONE VARCHAR(100),
  EMAIL VARCHAR(100),
  PHOTO BLOB,
  JOB_TITLE VARCHAR(250)
)
AS
BEGIN
  INSERT INTO /*PREFIX*/ACCOUNTS (ACCOUNT_ID,FIRM_ID,DATE_CREATE,USER_NAME,"PASSWORD",DESCRIPTION,DB_USER_NAME,DB_PASSWORD,
                                  IS_ROLE,LOCKED,AUTO_CREATED,SURNAME,NAME,PATRONYMIC,PHONE,EMAIL,PHOTO,JOB_TITLE)
       VALUES (:ACCOUNT_ID,:FIRM_ID,:DATE_CREATE,:USER_NAME,:"PASSWORD",:DESCRIPTION,:DB_USER_NAME,:DB_PASSWORD,
               :IS_ROLE,:LOCKED,:AUTO_CREATED,:SURNAME,:NAME,:PATRONYMIC,:PHONE,:EMAIL,:PHOTO,:JOB_TITLE);
END;

--

CREATE OR ALTER PROCEDURE /*PREFIX*/U_ACCOUNT
(
  ACCOUNT_ID VARCHAR(32),
  FIRM_ID VARCHAR(32),
  DATE_CREATE TIMESTAMP,
  USER_NAME VARCHAR(100),
  "PASSWORD" VARCHAR(100),
  DESCRIPTION VARCHAR(250),
  DB_USER_NAME VARCHAR(100),
  DB_PASSWORD VARCHAR(100),
  IS_ROLE INTEGER,
  LOCKED INTEGER,
  AUTO_CREATED INTEGER,
  SURNAME VARCHAR(100),
  NAME VARCHAR(100),
  PATRONYMIC VARCHAR(100),
  PHONE VARCHAR(100),
  EMAIL VARCHAR(100),
  PHOTO BLOB,
  JOB_TITLE VARCHAR(250),
  OLD_ACCOUNT_ID VARCHAR(32)
)
AS
BEGIN
  UPDATE /*PREFIX*/ACCOUNTS
     SET ACCOUNT_ID=:ACCOUNT_ID,
         FIRM_ID=:FIRM_ID,
         DATE_CREATE=:DATE_CREATE,
         USER_NAME=:USER_NAME,
         "PASSWORD"=:"PASSWORD",
         DESCRIPTION=:DESCRIPTION,
         DB_USER_NAME=:DB_USER_NAME,
         DB_PASSWORD=:DB_PASSWORD,
         IS_ROLE=:IS_ROLE,
         LOCKED=:LOCKED,
         AUTO_CREATED=:AUTO_CREATED,
         SURNAME=:SURNAME,
         NAME=:NAME,
         PATRONYMIC=:PATRONYMIC,
         PHONE=:PHONE,
         EMAIL=:EMAIL,
         PHOTO=:PHOTO,
         JOB_TITLE=:JOB_TITLE
   WHERE ACCOUNT_ID=:OLD_ACCOUNT_ID;
END;

--

CREATE OR ALTER PROCEDURE D_ACCOUNT (
  OLD_ACCOUNT_ID VARCHAR(32))
AS
BEGIN
  DELETE FROM PROFILES
        WHERE ACCOUNT_ID=:OLD_ACCOUNT_ID;

  DELETE FROM ACCOUNTS
        WHERE ACCOUNT_ID=:OLD_ACCOUNT_ID;
END

--

UPDATE ACCOUNTS A
  SET PHONE=(SELECT PHONE_MOBILE FROM DRIVERS D WHERE D.DRIVER_ID=A.ACCOUNT_ID)
WHERE ACCOUNT_ID IN (SELECT DRIVER_ID FROM DRIVERS)

--

UPDATE ACCOUNTS A
  SET PHONE=(SELECT PHONE_MOBILE FROM DISPATCHERS D WHERE D.DISPATCHER_ID=A.ACCOUNT_ID)
WHERE ACCOUNT_ID IN (SELECT DISPATCHER_ID FROM DISPATCHERS)

--

UPDATE ACCOUNTS A
  SET DESCRIPTION=(SELECT DESCRIPTION FROM DRIVERS D WHERE D.DRIVER_ID=A.ACCOUNT_ID)
WHERE ACCOUNT_ID IN (SELECT DRIVER_ID FROM DRIVERS)

--

UPDATE ACCOUNTS A
  SET DESCRIPTION=(SELECT DESCRIPTION FROM DISPATCHERS D WHERE D.DISPATCHER_ID=A.ACCOUNT_ID)
WHERE ACCOUNT_ID IN (SELECT DISPATCHER_ID FROM DISPATCHERS)

--

DROP VIEW S_DISPATCHERS

--

DROP PROCEDURE I_DISPATCHER

--

DROP PROCEDURE U_DISPATCHER

--

ALTER TABLE DISPATCHERS
DROP DESCRIPTION

--

ALTER TABLE DISPATCHERS
DROP PHONE_MOBILE

--

update RDB$RELATION_FIELDS set
RDB$NULL_FLAG = NULL
where (RDB$FIELD_NAME = 'CALC_ID') and
(RDB$RELATION_NAME = 'DISPATCHERS')

--

CREATE VIEW /*PREFIX*/S_DISPATCHERS
(
    DISPATCHER_ID,
    CALC_ID,
    PHONE_HOME,
    PASSPORT,
    PLACE_BIRTH,
    DATE_BIRTH,
    ADDRESS_RESIDENCE,
    ADDRESS_ACTUAL,
    PHONE,
    DESCRIPTION,
    USER_NAME,
    DATE_CREATE,
    LOCKED,
    SURNAME,
    NAME,
    PATRONYMIC,
    CALC_NAME)
AS
SELECT D.*,
       A.PHONE,
       A.DESCRIPTION,
       A.USER_NAME,
       A.DATE_CREATE,
       A.LOCKED,
       A.SURNAME,
       A.NAME,
       A.PATRONYMIC,
       CL.NAME AS CALC_NAME
  FROM /*PREFIX*/DISPATCHERS D
  JOIN /*PREFIX*/ACCOUNTS A ON A.ACCOUNT_ID=D.DISPATCHER_ID
  LEFT JOIN /*PREFIX*/CALCS CL ON CL.CALC_ID=D.CALC_ID

--

CREATE OR ALTER PROCEDURE I_DISPATCHER (
  DISPATCHER_ID VARCHAR(32),
  CALC_ID VARCHAR(32),
  PHONE VARCHAR(100),
  PHONE_HOME VARCHAR(100),
  DESCRIPTION VARCHAR(250),
  PASSPORT VARCHAR(250),
  PLACE_BIRTH VARCHAR(250),
  DATE_BIRTH DATE,
  ADDRESS_RESIDENCE VARCHAR(250),
  ADDRESS_ACTUAL VARCHAR(250),
  USER_NAME VARCHAR(100),
  LOCKED INTEGER,
  SURNAME VARCHAR(100),
  NAME VARCHAR(100),
  PATRONYMIC VARCHAR(100))
AS
  DECLARE ROLE_ID VARCHAR(32);
BEGIN

  INSERT INTO ACCOUNTS(ACCOUNT_ID,DATE_CREATE,USER_NAME,LOCKED,SURNAME,NAME,PATRONYMIC,IS_ROLE,PHONE,DESCRIPTION)
       VALUES (:DISPATCHER_ID,CURRENT_TIMESTAMP,:USER_NAME,:LOCKED,:SURNAME,:NAME,:PATRONYMIC,0,:PHONE,:DESCRIPTION);

  INSERT INTO DISPATCHERS (DISPATCHER_ID,CALC_ID,PHONE_HOME,
                           PASSPORT,PLACE_BIRTH,DATE_BIRTH,
                           ADDRESS_RESIDENCE,ADDRESS_ACTUAL)
       VALUES (:DISPATCHER_ID,:CALC_ID,:PHONE_HOME,
               :PASSPORT,:PLACE_BIRTH,:DATE_BIRTH,
               :ADDRESS_RESIDENCE,:ADDRESS_ACTUAL);

  ROLE_ID='FF7F332564F795C8411BF28652B22BEA'; /* Диспетчеры */
  INSERT INTO ACCOUNT_ROLES (ROLE_ID,ACCOUNT_ID)
       VALUES (:ROLE_ID,:DISPATCHER_ID);

END

--

CREATE OR ALTER PROCEDURE U_DISPATCHER (
  DISPATCHER_ID VARCHAR(32),
  CALC_ID VARCHAR(32),
  PHONE VARCHAR(100),
  PHONE_HOME VARCHAR(100),
  DESCRIPTION VARCHAR(250),
  PASSPORT VARCHAR(250),
  PLACE_BIRTH VARCHAR(250),
  DATE_BIRTH DATE,
  ADDRESS_RESIDENCE VARCHAR(250),
  ADDRESS_ACTUAL VARCHAR(250),
  USER_NAME VARCHAR(100),
  LOCKED INTEGER,
  SURNAME VARCHAR(100),
  NAME VARCHAR(100),
  PATRONYMIC VARCHAR(100),
  OLD_DISPATCHER_ID VARCHAR(32))
AS
BEGIN

  UPDATE /*PREFIX*/ACCOUNTS
     SET ACCOUNT_ID=:DISPATCHER_ID,
         USER_NAME=:USER_NAME,
         LOCKED=:LOCKED,
         SURNAME=:SURNAME,
         NAME=:NAME,
         PATRONYMIC=:PATRONYMIC,
         IS_ROLE=0,
         PHONE=:PHONE,
         DESCRIPTION=:DESCRIPTION
   WHERE ACCOUNT_ID=:OLD_DISPATCHER_ID;

  UPDATE /*PREFIX*/DISPATCHERS
     SET DISPATCHER_ID=:DISPATCHER_ID,
         CALC_ID=:CALC_ID,
         PHONE_HOME=:PHONE_HOME,
         PASSPORT=:PASSPORT,
         PLACE_BIRTH=:PLACE_BIRTH,
         DATE_BIRTH=:DATE_BIRTH,
         ADDRESS_RESIDENCE=:ADDRESS_RESIDENCE,
         ADDRESS_ACTUAL=:ADDRESS_ACTUAL
   WHERE DISPATCHER_ID=:OLD_DISPATCHER_ID;

END

--

CREATE TABLE /*PREFIX*/METHODS
(
  METHOD_ID VARCHAR(32) NOT NULL,
  NAME VARCHAR(100) NOT NULL,
  DESCRIPTION VARCHAR(250),
  OUTGOING INTEGER NOT NULL,
  INCOMING INTEGER NOT NULL,
  PRIORITY INTEGER,
  PRIMARY KEY (METHOD_ID)
)

--

CREATE VIEW /*PREFIX*/S_METHODS
AS
SELECT * FROM /*PREFIX*/METHODS

--

CREATE PROCEDURE /*PREFIX*/I_METHOD
(
  METHOD_ID VARCHAR(32),
  NAME VARCHAR(100),
  DESCRIPTION VARCHAR(250),
  OUTGOING INTEGER,
  INCOMING INTEGER,
  PRIORITY INTEGER
)
AS
BEGIN
  INSERT INTO /*PREFIX*/METHODS (METHOD_ID,NAME,DESCRIPTION,OUTGOING,INCOMING,PRIORITY)
       VALUES (:METHOD_ID,:NAME,:DESCRIPTION,:OUTGOING,:INCOMING,:PRIORITY);
END;

--

CREATE PROCEDURE /*PREFIX*/U_METHOD
(
  METHOD_ID VARCHAR(32),
  NAME VARCHAR(100),
  DESCRIPTION VARCHAR(250),
  OUTGOING INTEGER,
  INCOMING INTEGER,
  PRIORITY INTEGER,
  OLD_METHOD_ID VARCHAR(32)
)
AS
BEGIN
  UPDATE /*PREFIX*/METHODS
     SET METHOD_ID=:METHOD_ID,
         NAME=:NAME,
         DESCRIPTION=:DESCRIPTION,
         OUTGOING=:OUTGOING,
         INCOMING=:INCOMING,
         PRIORITY=:PRIORITY
   WHERE METHOD_ID=:OLD_METHOD_ID;
END;

--

CREATE PROCEDURE /*PREFIX*/D_METHOD
(
  OLD_METHOD_ID VARCHAR(32)
)
AS
BEGIN
  DELETE FROM /*PREFIX*/METHODS 
        WHERE METHOD_ID=:OLD_METHOD_ID;
END;

--

DROP VIEW S_DRIVERS

--

DROP PROCEDURE CODE_BALANCE

--

DROP PROCEDURE PR_REFUSE_CLIENT_DRIVE_OUT

--

DROP PROCEDURE PR_REFUSE_DRIVER_COME_OUT

--

DROP PROCEDURE PR_CHANGE_ROUTE 

--

DROP PROCEDURE D_DRIVER

--

DROP PROCEDURE CODE_INCIDENT

--

DROP PROCEDURE PR_REFUSE_DRIVER_CONFIRM

--

DROP PROCEDURE PR_CLIENT_IN_CAR

--

DROP PROCEDURE GET_COUNT_DRIVER_GRAPH

--

DROP PROCEDURE PR_CONFIRM_ORDER

--

DROP PROCEDURE GET_COUNT_DRIVER_GRAPH_HOUR

--

DROP PROCEDURE PR_REFUSE_DRIVER_DRIVE_OUT

--

DROP PROCEDURE PR_FULL_CALC

--

DROP PROCEDURE CODE_LOSE

--

DROP PROCEDURE PR_SELECT_DRIVER


--

DROP PROCEDURE PR_NO_DRIVER

--

DROP PROCEDURE GET_DRIVERS_REPORT

--

DROP PROCEDURE CODE_PARK_IN

--

DROP PROCEDURE U_DRIVER

--

DROP PROCEDURE PR_PARTY_CALC

--

DROP PROCEDURE U_DRIVER_DESC

--

DROP PROCEDURE PR_REFUSE_CLIENT_COME_OUT

--

DROP PROCEDURE PR_REFUSE_CLIENT_CONFIRM

--

DROP PROCEDURE GET_DRIVER_SUM

--

DROP PROCEDURE CODE_PARK_OUT

--

DROP PROCEDURE CODE_PARK_QUEUE

--

DROP PROCEDURE I_DRIVER

--

DROP PROCEDURE CODE_PARK_STATES

--

DROP PROCEDURE PR_ARRIVAL_DRIVER

--

DROP PROCEDURE CODE_SHIFT_CLOSE

--

DROP PROCEDURE GET_DRIVER_COUNT_ORDERS_REPORT

--

DROP PROCEDURE GET_DRIVER_COUNT_ORDERS

--

DROP VIEW S_DRIVER_POSITIVES

--

DROP VIEW S_DRIVER_PARK_FREE

--

DROP VIEW S_DRIVER_FREE

--

DROP VIEW S_DRIVERS_EX

--

ALTER TABLE DRIVERS
DROP DESCRIPTION

--

ALTER TABLE DRIVERS
DROP PHONE_MOBILE

--

ALTER TABLE DRIVERS
ADD METHOD_ID VARCHAR(32)

--

ALTER TABLE DRIVERS
ADD FOREIGN KEY (METHOD_ID) REFERENCES METHODS (METHOD_ID)

--

update RDB$RELATION_FIELDS set
RDB$NULL_FLAG = NULL
where (RDB$FIELD_NAME = 'CALC_ID') and
(RDB$RELATION_NAME = 'DRIVERS')

--

CREATE VIEW /*PREFIX*/S_DRIVERS(
    DRIVER_ID,
    CALC_ID,
    CAR_ID,
    PHONE_HOME,
    LICENSE,
    CATEGORIES,
    INSURANCE,
    HEALTH_CERT,
    ADDICT_CERT,
    PASSPORT,
    PLACE_BIRTH,
    DATE_BIRTH,
    ADDRESS_RESIDENCE,
    ADDRESS_ACTUAL,
    MIN_BALANCE,
    PRIORITY,
    METHOD_ID,
    PHONE,
    DESCRIPTION,
    USER_NAME,
    DATE_CREATE,
    LOCKED,
    SURNAME,
    NAME,
    PATRONYMIC,
    CAR_STATE_NUM,
    CAR_BRAND,
    CAR_COLOR,
    CAR_CALLSIGN,
    CAR_TYPE_ID,
    CAR_TYPE_NAME,
    CAR_TYPE_FONT_COLOR,
    CAR_TYPE_BRUSH_COLOR,
    CALC_NAME,
    METHOD_NAME)
AS
SELECT D.*,
       A.PHONE,
       A.DESCRIPTION,
       A.USER_NAME,
       A.DATE_CREATE,
       A.LOCKED,
       A.SURNAME,
       A.NAME,
       A.PATRONYMIC,
       CR.STATE_NUM AS CAR_STATE_NUM,
       CR.BRAND AS CAR_BRAND,
       CR.COLOR AS CAR_COLOR,
       CR.CALLSIGN AS CAR_CALLSIGN,
       CR.CAR_TYPE_ID,
       CT.NAME AS CAR_TYPE_NAME,
       CT.FONT_COLOR AS CAR_TYPE_FONT_COLOR,
       CT.BRUSH_COLOR AS CAR_TYPE_BRUSH_COLOR,
       CL.NAME AS CALC_NAME,
       M.NAME AS METHOD_NAME
  FROM /*PREFIX*/DRIVERS D
  JOIN /*PREFIX*/ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
  JOIN /*PREFIX*/CARS CR ON CR.CAR_ID=D.CAR_ID
  JOIN /*PREFIX*/CAR_TYPES CT ON CT.CAR_TYPE_ID=CR.CAR_TYPE_ID
  LEFT JOIN /*PREFIX*/CALCS CL ON CL.CALC_ID=D.CALC_ID
  LEFT JOIN /*PREFIX*/METHODS M ON M.METHOD_ID=D.METHOD_ID

--

CREATE OR ALTER PROCEDURE D_DRIVER (
  OLD_DRIVER_ID VARCHAR(32))
AS
BEGIN
  DELETE FROM DRIVERS
        WHERE DRIVER_ID=:OLD_DRIVER_ID;

  DELETE FROM ACCOUNT_ROLES
        WHERE ACCOUNT_ID=:OLD_DRIVER_ID;

  DELETE FROM /*PRFEIX*/ACCOUNTS
        WHERE ACCOUNT_ID=:OLD_DRIVER_ID;
END

--

CREATE OR ALTER PROCEDURE I_DRIVER (
  DRIVER_ID VARCHAR(32),
  CALC_ID VARCHAR(32),
  CAR_ID VARCHAR(32),
  METHOD_ID VARCHAR(32),
  PHONE VARCHAR(100),
  PHONE_HOME VARCHAR(100),
  LICENSE VARCHAR(250),
  CATEGORIES VARCHAR(100),
  INSURANCE VARCHAR(250),
  HEALTH_CERT VARCHAR(250),
  DESCRIPTION VARCHAR(250),
  ADDICT_CERT VARCHAR(250),
  PASSPORT VARCHAR(250),
  PLACE_BIRTH VARCHAR(250),
  DATE_BIRTH DATE,
  ADDRESS_RESIDENCE VARCHAR(250),
  ADDRESS_ACTUAL VARCHAR(250),
  MIN_BALANCE NUMERIC(15,2),
  PRIORITY INTEGER,
  USER_NAME VARCHAR(100),
  LOCKED INTEGER,
  SURNAME VARCHAR(100),
  NAME VARCHAR(100),
  PATRONYMIC VARCHAR(100))
AS
  DECLARE ROLE_ID VARCHAR(32);
BEGIN

  INSERT INTO ACCOUNTS (ACCOUNT_ID,DATE_CREATE,USER_NAME,LOCKED,SURNAME,NAME,PATRONYMIC,IS_ROLE,PHONE,DESCRIPTION)
       VALUES (:DRIVER_ID,CURRENT_TIMESTAMP,:USER_NAME,:LOCKED,:SURNAME,:NAME,:PATRONYMIC,0,:PHONE,:DESCRIPTION);

  INSERT INTO DRIVERS (DRIVER_ID,CALC_ID,CAR_ID,METHOD_ID,PHONE_HOME,LICENSE,
                       CATEGORIES,INSURANCE,HEALTH_CERT,ADDICT_CERT,
                       PASSPORT,PLACE_BIRTH,DATE_BIRTH,ADDRESS_RESIDENCE,ADDRESS_ACTUAL,
                       MIN_BALANCE,PRIORITY)
       VALUES (:DRIVER_ID,:CALC_ID,:CAR_ID,:METHOD_ID,:PHONE_HOME,:LICENSE,
               :CATEGORIES,:INSURANCE,:HEALTH_CERT,:ADDICT_CERT,
               :PASSPORT,:PLACE_BIRTH,:DATE_BIRTH,:ADDRESS_RESIDENCE,:ADDRESS_ACTUAL,
               :MIN_BALANCE,:PRIORITY);

  ROLE_ID='3EBE04F48C07BAB246324FBA8551FEF1'; /* Водители */
  INSERT INTO ACCOUNT_ROLES (ROLE_ID,ACCOUNT_ID)
       VALUES (:ROLE_ID,:DRIVER_ID);
END

--

CREATE OR ALTER PROCEDURE U_DRIVER (
  DRIVER_ID VARCHAR(32),
  CALC_ID VARCHAR(32),
  CAR_ID VARCHAR(32),
  METHOD_ID VARCHAR(32),
  PHONE VARCHAR(100),
  PHONE_HOME VARCHAR(100),
  LICENSE VARCHAR(250),
  CATEGORIES VARCHAR(100),
  INSURANCE VARCHAR(250),
  HEALTH_CERT VARCHAR(250),
  DESCRIPTION VARCHAR(250),
  ADDICT_CERT VARCHAR(250),
  PASSPORT VARCHAR(250),
  PLACE_BIRTH VARCHAR(250),
  DATE_BIRTH DATE,
  ADDRESS_RESIDENCE VARCHAR(250),
  ADDRESS_ACTUAL VARCHAR(250),
  MIN_BALANCE NUMERIC(15,2),
  PRIORITY INTEGER,
  USER_NAME VARCHAR(100),
  LOCKED INTEGER,
  SURNAME VARCHAR(100),
  NAME VARCHAR(100),
  PATRONYMIC VARCHAR(100),
  OLD_DRIVER_ID VARCHAR(32))
AS
BEGIN

  UPDATE ACCOUNTS
     SET ACCOUNT_ID=:DRIVER_ID,
         USER_NAME=:USER_NAME,
         LOCKED=:LOCKED,
         SURNAME=:SURNAME,
         NAME=:NAME,
         PATRONYMIC=:PATRONYMIC,
         IS_ROLE=0,
         PHONE=:PHONE,
         DESCRIPTION=:DESCRIPTION
   WHERE ACCOUNT_ID=:OLD_DRIVER_ID;

  UPDATE DRIVERS
     SET DRIVER_ID=:DRIVER_ID,
         CALC_ID=:CALC_ID,
         CAR_ID=:CAR_ID,
         METHOD_ID=:METHOD_ID,
         PHONE_HOME=:PHONE_HOME,
         LICENSE=:LICENSE,
         CATEGORIES=:CATEGORIES,
         INSURANCE=:INSURANCE,
         HEALTH_CERT=:HEALTH_CERT,
         ADDICT_CERT=:ADDICT_CERT,
         PASSPORT=:PASSPORT,
         PLACE_BIRTH=:PLACE_BIRTH,
         DATE_BIRTH=:DATE_BIRTH,
         ADDRESS_RESIDENCE=:ADDRESS_RESIDENCE,
         ADDRESS_ACTUAL=:ADDRESS_ACTUAL,
         MIN_BALANCE=:MIN_BALANCE,
         PRIORITY=:PRIORITY
   WHERE DRIVER_ID=:OLD_DRIVER_ID;

END

--

CREATE OR ALTER PROCEDURE U_DRIVER_DESC (
  DRIVER_ID VARCHAR(32),
  DESCRIPTION VARCHAR(250))
AS
BEGIN
  UPDATE /*PREFIX*/ACCOUNTS
     SET DESCRIPTION=:DESCRIPTION
   WHERE ACCOUNT_ID=:DRIVER_ID;
END

--

CREATE OR ALTER PROCEDURE CODE_BALANCE (
  ACCOUNT_ID VARCHAR(32),
  IN_MESSAGE_ID VARCHAR(32))
AS
DECLARE CONTACT VARCHAR(100);
DECLARE SENDER_ID VARCHAR(32);
DECLARE S VARCHAR(70);
DECLARE SUM_CHARGE NUMERIC(15,2);
DECLARE SUM_RECEIPT NUMERIC(15,2);
DECLARE BALANCE NUMERIC(15,2);
DECLARE CNT INTEGER;
DECLARE CHARGE_TYPE_ID VARCHAR(32);
DECLARE CONST_VALUE VARCHAR(4000);
BEGIN
  SELECT CONTACT, SENDER_ID
    FROM IN_MESSAGES
   WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID
    INTO :CONTACT, :SENDER_ID;

  IF ((CONTACT IS NOT NULL) AND (SENDER_ID IS NOT NULL)) THEN BEGIN


    SELECT (CASE WHEN SUM(SUM_CHARGE) IS NULL THEN 0.0 ELSE SUM(SUM_CHARGE) END)
      FROM CHARGES
     WHERE ACCOUNT_ID=:SENDER_ID
      INTO :SUM_CHARGE;

    SELECT (CASE WHEN SUM(SUM_RECEIPT) IS NULL THEN 0.0 ELSE SUM(SUM_RECEIPT) END)
      FROM RECEIPTS
     WHERE ACCOUNT_ID=:SENDER_ID
      INTO :SUM_RECEIPT;

    BALANCE=SUM_RECEIPT-SUM_CHARGE;

    SELECT COUNT(*)
      FROM DRIVERS D
      JOIN  ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
     WHERE D.DRIVER_ID=:SENDER_ID
       AND A.LOCKED<>1
      INTO :CNT;

    IF (CNT>0) THEN BEGIN

      SELECT CONST_VALUE FROM GET_CONST_VALUE('2031AA8F2E4B959248967F2838DC5F19') INTO :S;

      IF (S IS NOT NULL) THEN BEGIN

        S=REPLACE_STRING(S,'%BALANCE',CAST(BALANCE AS VARCHAR(30)));

        INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                  TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                          VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                  :S,NULL,0,:CONTACT,NULL,1,NULL,CURRENT_TIMESTAMP);
      END

    END

  END
END

--

CREATE OR ALTER PROCEDURE CODE_INCIDENT (
  ACCOUNT_ID VARCHAR(32),
  IN_MESSAGE_ID VARCHAR(32))
AS
DECLARE CONTACT VARCHAR(100);
DECLARE SENDER_ID VARCHAR(32);
DECLARE TEXT_IN VARCHAR(4000);
DECLARE CNT INTEGER;
DECLARE SUM_CHARGE NUMERIC(15,2);
DECLARE SUM_RECEIPT NUMERIC(15,2);
DECLARE BALANCE NUMERIC(15,2);
DECLARE MIN_BALANCE NUMERIC(15,2);
DECLARE USER_NAME VARCHAR(100);
DECLARE CALLSIGN VARCHAR(10);
DECLARE S VARCHAR(250);
BEGIN
  SELECT IM.CONTACT, IM.SENDER_ID, IM.TEXT_IN
    FROM IN_MESSAGES IM
    LEFT JOIN CODE_MESSAGES CM ON CM.CODE_MESSAGE_ID=IM.CODE_MESSAGE_ID
   WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID
    INTO :CONTACT, :SENDER_ID, :TEXT_IN;

  IF ((CONTACT IS NOT NULL) AND (SENDER_ID IS NOT NULL) AND (TEXT_IN IS NOT NULL)) THEN BEGIN

    SELECT COUNT(*)
      FROM DRIVERS D
      JOIN  ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
     WHERE D.DRIVER_ID=:SENDER_ID
       AND A.LOCKED<>1
      INTO :CNT;

    IF (CNT>0) THEN BEGIN

      SELECT (CASE WHEN SUM(SUM_CHARGE) IS NULL THEN 0.0 ELSE SUM(SUM_CHARGE) END)
        FROM CHARGES
       WHERE ACCOUNT_ID=:SENDER_ID
        INTO :SUM_CHARGE;

      SELECT (CASE WHEN SUM(SUM_RECEIPT) IS NULL THEN 0.0 ELSE SUM(SUM_RECEIPT) END)
        FROM RECEIPTS
       WHERE ACCOUNT_ID=:SENDER_ID
        INTO :SUM_RECEIPT;

      BALANCE=SUM_RECEIPT-SUM_CHARGE;

      SELECT D.MIN_BALANCE, A.USER_NAME, C.CALLSIGN
        FROM DRIVERS D
        JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
        JOIN CARS C ON C.CAR_ID=D.CAR_ID
       WHERE D.DRIVER_ID=:SENDER_ID
        INTO :MIN_BALANCE, :USER_NAME, :CALLSIGN;

      SELECT COUNT(*)
        FROM SHIFTS
       WHERE ACCOUNT_ID=:SENDER_ID
         AND DATE_END IS NULL
        INTO :CNT;

      IF ((CNT>0) AND ((MIN_BALANCE IS NULL) OR ((MIN_BALANCE IS NOT NULL) AND (BALANCE>MIN_BALANCE)))) THEN BEGIN

        S=:CALLSIGN||' '||:USER_NAME;
        INSERT INTO ALARMS (ALARM_ID,SENDER_ID,RECIPIENT_ID,TYPE_ALARM,
                            DATE_BEGIN,DATE_END,CAPTION,TEXT_ALARM)
                    VALUES (GET_UNIQUE_ID(),'CA25F4C3A6DA8C334D20D3C4F2A2EF62',NULL,1,
                            CURRENT_TIMESTAMP,CURRENT_TIMESTAMP+5*(1e0/24/60),'Черезвычайное проишествие',:S);

        SELECT CONST_VALUE FROM GET_CONST_VALUE('7B7B35D636E1B840426877D1EB07428F') INTO :S;

        IF (S IS NOT NULL) THEN BEGIN

          S=REPLACE_STRING(S,'%CODE',TEXT_IN);

          INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                    TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                            VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                    :S,NULL,0,:CONTACT,NULL,1,NULL,CURRENT_TIMESTAMP);
        END

      END

    END

  END
END

--

CREATE OR ALTER PROCEDURE CODE_LOSE (
  ACCOUNT_ID VARCHAR(32),
  IN_MESSAGE_ID VARCHAR(32))
AS
DECLARE CONTACT VARCHAR(100);
DECLARE SENDER_ID VARCHAR(32);
DECLARE TEXT_IN VARCHAR(4000);
DECLARE CNT INTEGER;
DECLARE SUM_CHARGE NUMERIC(15,2);
DECLARE SUM_RECEIPT NUMERIC(15,2);
DECLARE BALANCE NUMERIC(15,2);
DECLARE MIN_BALANCE NUMERIC(15,2);
DECLARE USER_NAME VARCHAR(100);
DECLARE CALLSIGN VARCHAR(10);
DECLARE S VARCHAR(250);
BEGIN
  SELECT IM.CONTACT, IM.SENDER_ID, IM.TEXT_IN
    FROM IN_MESSAGES IM
    LEFT JOIN CODE_MESSAGES CM ON CM.CODE_MESSAGE_ID=IM.CODE_MESSAGE_ID
   WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID
    INTO :CONTACT, :SENDER_ID, :TEXT_IN;

  IF ((CONTACT IS NOT NULL) AND (SENDER_ID IS NOT NULL) AND (TEXT_IN IS NOT NULL)) THEN BEGIN

    SELECT COUNT(*)
      FROM DRIVERS D
      JOIN  ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
     WHERE D.DRIVER_ID=:SENDER_ID
       AND A.LOCKED<>1
      INTO :CNT;

    IF (CNT>0) THEN BEGIN

      SELECT (CASE WHEN SUM(SUM_CHARGE) IS NULL THEN 0.0 ELSE SUM(SUM_CHARGE) END)
        FROM CHARGES
       WHERE ACCOUNT_ID=:SENDER_ID
        INTO :SUM_CHARGE;

      SELECT (CASE WHEN SUM(SUM_RECEIPT) IS NULL THEN 0.0 ELSE SUM(SUM_RECEIPT) END)
        FROM RECEIPTS
       WHERE ACCOUNT_ID=:SENDER_ID
        INTO :SUM_RECEIPT;

      BALANCE=SUM_RECEIPT-SUM_CHARGE;

      SELECT D.MIN_BALANCE, A.USER_NAME, C.CALLSIGN
        FROM DRIVERS D
        JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
        JOIN CARS C ON C.CAR_ID=D.CAR_ID
       WHERE D.DRIVER_ID=:SENDER_ID
        INTO :MIN_BALANCE, :USER_NAME, :CALLSIGN;

      SELECT COUNT(*)
        FROM SHIFTS
       WHERE ACCOUNT_ID=:SENDER_ID
         AND DATE_END IS NULL
        INTO :CNT;

      IF ((CNT>0) AND ((MIN_BALANCE IS NULL) OR ((MIN_BALANCE IS NOT NULL) AND (BALANCE>MIN_BALANCE)))) THEN BEGIN

        S=:CALLSIGN||' '||:USER_NAME;
        INSERT INTO ALARMS (ALARM_ID,SENDER_ID,RECIPIENT_ID,TYPE_ALARM,
                            DATE_BEGIN,DATE_END,CAPTION,TEXT_ALARM)
                    VALUES (GET_UNIQUE_ID(),'CA25F4C3A6DA8C334D20D3C4F2A2EF62',NULL,0,
                            CURRENT_TIMESTAMP,CURRENT_TIMESTAMP+5*(1e0/24/60),'Водитель заблудился',:S);

        SELECT CONST_VALUE FROM GET_CONST_VALUE('AB84E2116D3485A847EEE59DB47CE27B') INTO :S;

        IF (S IS NOT NULL) THEN BEGIN

          S=REPLACE_STRING(S,'%CODE',TEXT_IN);

          INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                    TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                            VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                    :S,NULL,0,:CONTACT,NULL,1,NULL,CURRENT_TIMESTAMP);
        END

      END

    END

  END
END

--

CREATE OR ALTER PROCEDURE CODE_PARK_IN (
  ACCOUNT_ID VARCHAR(32),
  IN_MESSAGE_ID VARCHAR(32))
AS
DECLARE CONTACT VARCHAR(100);
DECLARE SENDER_ID VARCHAR(32);
DECLARE CODE VARCHAR(100);
DECLARE S VARCHAR(1000);
DECLARE CNT INTEGER;
DECLARE SUM_CHARGE NUMERIC(15,2);
DECLARE SUM_RECEIPT NUMERIC(15,2);
DECLARE BALANCE NUMERIC(15,2);
DECLARE MIN_BALANCE NUMERIC(15,2);
DECLARE D TIMESTAMP;
DECLARE PARK_ID VARCHAR(32);
DECLARE PARK_NAME VARCHAR(100);
DECLARE PARK_DESCRIPTION VARCHAR(250);
DECLARE PRIORITY INTEGER;
DECLARE CHARGE_TYPE_ID VARCHAR(32);
BEGIN
  SELECT IM.CONTACT, IM.SENDER_ID, CM.CODE
    FROM IN_MESSAGES IM
    LEFT JOIN CODE_MESSAGES CM ON CM.CODE_MESSAGE_ID=IM.CODE_MESSAGE_ID
   WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID
    INTO :CONTACT, :SENDER_ID, :CODE;

  IF ((CONTACT IS NOT NULL) AND (SENDER_ID IS NOT NULL) AND (CODE IS NOT NULL)) THEN BEGIN

    SELECT COUNT(*)
      FROM DRIVERS D
      JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
     WHERE D.DRIVER_ID=:SENDER_ID
       AND A.LOCKED<>1
      INTO :CNT;

    IF (CNT>0) THEN BEGIN

      SELECT (CASE WHEN SUM(SUM_CHARGE) IS NULL THEN 0.0 ELSE SUM(SUM_CHARGE) END)
        FROM CHARGES
       WHERE ACCOUNT_ID=:SENDER_ID
        INTO :SUM_CHARGE;

      SELECT (CASE WHEN SUM(SUM_RECEIPT) IS NULL THEN 0.0 ELSE SUM(SUM_RECEIPT) END)
        FROM RECEIPTS
       WHERE ACCOUNT_ID=:SENDER_ID
        INTO :SUM_RECEIPT;

      BALANCE=SUM_RECEIPT-SUM_CHARGE;

      SELECT MIN_BALANCE
        FROM DRIVERS
       WHERE DRIVER_ID=:SENDER_ID
        INTO :MIN_BALANCE;

      IF ((MIN_BALANCE IS NULL) OR ((MIN_BALANCE IS NOT NULL) AND (BALANCE>MIN_BALANCE))) THEN BEGIN

        SELECT COUNT(*)
          FROM ORDERS
         WHERE DRIVER_ID=:SENDER_ID
           AND PARENT_ID IS NULL
           AND DATE_HISTORY IS NULL
           AND FINISHED<>1
          INTO :CNT;

        IF (CNT>0) THEN BEGIN

          SELECT CONST_VALUE FROM GET_CONST_VALUE('764B2BA8498AB18345852AA2FE39F4D9') INTO :S;

          IF (S IS NOT NULL) THEN BEGIN

            INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                      TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                              VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                      :S,NULL,0,:CONTACT,NULL,2,NULL,CURRENT_TIMESTAMP);
          END

        END ELSE BEGIN

          UPDATE PARK_STATES
             SET DATE_OUT=CURRENT_TIMESTAMP
           WHERE DRIVER_ID=:SENDER_ID
             AND DATE_OUT IS NULL;

          SELECT COUNT(*)
            FROM SHIFTS
           WHERE ACCOUNT_ID=:SENDER_ID
             AND DATE_END IS NULL
            INTO :CNT;

          D=CURRENT_TIMESTAMP;

          IF (CNT=0) THEN BEGIN

            INSERT INTO SHIFTS (SHIFT_ID,ACCOUNT_ID,DATE_BEGIN,DATE_END)
                                  VALUES (GET_UNIQUE_ID(),:SENDER_ID,:D,NULL);

          END

          PARK_ID=NULL;
          PARK_NAME=NULL;

          FOR SELECT P.PARK_ID, P.NAME, P.DESCRIPTION
                FROM PARKS P
               WHERE (((P.MAX_COUNT IS NOT NULL) AND
                       (P.MAX_COUNT> (SELECT COUNT(*)
                                        FROM PARK_STATES
                                       WHERE DATE_OUT IS NULL
                                         AND PARK_ID=P.PARK_ID)))
                      OR (P.MAX_COUNT IS NULL))
                 AND P.NAME=:CODE
                INTO :PARK_ID, :PARK_NAME, :PARK_DESCRIPTION  DO BEGIN
            BREAK;
          END

          IF (PARK_ID IS NOT NULL) THEN BEGIN

            INSERT INTO PARK_STATES (PARK_STATE_ID,PARK_ID,DRIVER_ID,DATE_IN,DATE_OUT)
                                       VALUES (GET_UNIQUE_ID(),:PARK_ID,:SENDER_ID,:D,NULL);

            SELECT COUNT(*)
              FROM  PARK_STATES
             WHERE PARK_ID=:PARK_ID
               AND DATE_OUT IS NULL
              INTO PRIORITY;

            SELECT CONST_VALUE FROM GET_CONST_VALUE('80627FCA459EA3574F6BA8730F32946F') INTO :S;

            IF (S IS NOT NULL) THEN BEGIN

              S=REPLACE_STRING(S,'%PRIORITY',CAST(PRIORITY AS VARCHAR(10)));
              S=REPLACE_STRING(S,'%PARK_NAME',PARK_NAME);
              S=REPLACE_STRING(S,'%PARK_DESCRIPTION',PARK_DESCRIPTION);
              S=REPLACE_STRING(S,'%BALANCE',CAST(BALANCE AS VARCHAR(30)));

              INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                        TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                                VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                        :S,NULL,0,:CONTACT,NULL,1,NULL,CURRENT_TIMESTAMP);
            END

          END ELSE BEGIN

            SELECT CONST_VALUE FROM GET_CONST_VALUE('18B1E217D3789DDF4BCE1EEE9C7AB7A5') INTO :S;

            IF (S IS NOT NULL) THEN BEGIN

              INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                        TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                                VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                        :S,NULL,0,:CONTACT,NULL,1,NULL,CURRENT_TIMESTAMP);
            END

          END

        END

      END ELSE BEGIN

        SELECT CONST_VALUE FROM GET_CONST_VALUE('0690BD9649C89DD8472558C3270F35D6') INTO :S;

        IF (S IS NOT NULL) THEN BEGIN

          INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                    TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                            VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                    :S,NULL,0,:CONTACT,NULL,1,NULL,CURRENT_TIMESTAMP);
        END

      END

    END

  END
END

--

CREATE OR ALTER PROCEDURE CODE_PARK_OUT (
  ACCOUNT_ID VARCHAR(32),
  IN_MESSAGE_ID VARCHAR(32))
AS
DECLARE CONTACT VARCHAR(100);
DECLARE SENDER_ID VARCHAR(32);
DECLARE S VARCHAR(1000);
DECLARE PARK_NAME VARCHAR(100);
DECLARE PARK_STATE_ID VARCHAR(32);
DECLARE CNT INTEGER;
DECLARE D TIMESTAMP;
BEGIN
  SELECT CONTACT, SENDER_ID
    FROM IN_MESSAGES
   WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID
    INTO :CONTACT, :SENDER_ID;

  IF ((CONTACT IS NOT NULL) AND (SENDER_ID IS NOT NULL)) THEN BEGIN

    SELECT COUNT(*)
      FROM DRIVERS D
      JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
     WHERE D.DRIVER_ID=:SENDER_ID
       AND A.LOCKED<>1
      INTO :CNT;

    IF (CNT>0) THEN BEGIN


      SELECT COUNT(*)
        FROM ORDERS
       WHERE DRIVER_ID=:SENDER_ID
         AND PARENT_ID IS NULL
         AND DATE_HISTORY IS NULL
         AND FINISHED<>1
        INTO :CNT;

      IF (CNT>0) THEN BEGIN

        SELECT CONST_VALUE FROM GET_CONST_VALUE('7E75E7A3DA4FAB8D443F2D7384B3DF46') INTO :S;

        IF (S IS NOT NULL) THEN BEGIN

          INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                    TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                            VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                    :S,NULL,0,:CONTACT,NULL,1,NULL,CURRENT_TIMESTAMP);
        END

      END ELSE BEGIN

        FOR SELECT P.NAME, PS.PARK_STATE_ID
              FROM PARK_STATES PS
              JOIN PARKS P ON P.PARK_ID=PS.PARK_ID
             WHERE PS.DRIVER_ID=:SENDER_ID
               AND PS.DATE_OUT IS NULL
              INTO :PARK_NAME, :PARK_STATE_ID DO BEGIN

          D=CURRENT_TIMESTAMP;

          UPDATE PARK_STATES
             SET DATE_OUT=:D
           WHERE PARK_STATE_ID=:PARK_STATE_ID;

          SELECT CONST_VALUE FROM GET_CONST_VALUE('F5FAEFF5369FA2E2496554FFACF900A3') INTO :S;

          IF (S IS NOT NULL) THEN BEGIN

            S=REPLACE_STRING(S,'%PARK_NAME',PARK_NAME);
            S=REPLACE_STRING(S,'%TIME_DATE',FORMAT_DATETIME('hh:nn:ss dd.mm.yyyy',D));

            INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                      TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                              VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                      :S,NULL,0,:CONTACT,NULL,1,NULL,CURRENT_TIMESTAMP);
          END

          BREAK;

        END

      END

    END

  END
END

--

CREATE OR ALTER PROCEDURE CODE_PARK_QUEUE (
  ACCOUNT_ID VARCHAR(32),
  IN_MESSAGE_ID VARCHAR(32))
AS
DECLARE CONTACT VARCHAR(100);
DECLARE SENDER_ID VARCHAR(32);
DECLARE S VARCHAR(1000);
DECLARE CNT INTEGER;
DECLARE D TIMESTAMP;
DECLARE DATE_IN TIMESTAMP;
DECLARE DRIVER_ID VARCHAR(32);
DECLARE PARK_NAME VARCHAR(100);
DECLARE PARK_ID VARCHAR(32);
DECLARE SUM_CHARGE NUMERIC(15,2);
DECLARE SUM_RECEIPT NUMERIC(15,2);
DECLARE BALANCE NUMERIC(15,2);
DECLARE MIN_BALANCE NUMERIC(15,2);
DECLARE MINUTES INTEGER;
DECLARE COUNTER INTEGER;
DECLARE PRIORITY INTEGER;
BEGIN
  SELECT CONTACT, SENDER_ID
    FROM IN_MESSAGES
   WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID
    INTO :CONTACT, :SENDER_ID;

  IF ((CONTACT IS NOT NULL) AND (SENDER_ID IS NOT NULL)) THEN BEGIN

    SELECT COUNT(*)
      FROM DRIVERS D
      JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
     WHERE D.DRIVER_ID=:SENDER_ID
       AND A.LOCKED<>1
      INTO :CNT;

    IF (CNT>0) THEN BEGIN

      SELECT (CASE WHEN SUM(SUM_CHARGE) IS NULL THEN 0.0 ELSE SUM(SUM_CHARGE) END)
        FROM CHARGES
       WHERE ACCOUNT_ID=:SENDER_ID
        INTO :SUM_CHARGE;

      SELECT (CASE WHEN SUM(SUM_RECEIPT) IS NULL THEN 0.0 ELSE SUM(SUM_RECEIPT) END)
        FROM RECEIPTS
       WHERE ACCOUNT_ID=:SENDER_ID
        INTO :SUM_RECEIPT;

      BALANCE=SUM_RECEIPT-SUM_CHARGE;

      SELECT MIN_BALANCE
        FROM DRIVERS
       WHERE DRIVER_ID=:SENDER_ID
        INTO :MIN_BALANCE;

      IF ((MIN_BALANCE IS NULL) OR ((MIN_BALANCE IS NOT NULL) AND (BALANCE>MIN_BALANCE))) THEN BEGIN

        PARK_ID=NULL;
        PARK_NAME=NULL;

        FOR SELECT PS.PARK_ID, P.NAME
              FROM PARK_STATES PS
              JOIN PARKS P ON P.PARK_ID=PS.PARK_ID
             WHERE DRIVER_ID=:SENDER_ID
               AND DATE_OUT IS NULL
              INTO :PARK_ID, :PARK_NAME DO BEGIN
          BREAK;
        END

        IF (PARK_ID IS NOT NULL) THEN BEGIN

          D=NULL;
          COUNTER=0;

          FOR SELECT DATE_IN, DRIVER_ID
                FROM PARK_STATES
               WHERE DATE_OUT IS NULL
                 AND PARK_ID=:PARK_ID
               ORDER BY DATE_IN
                INTO :DATE_IN, :DRIVER_ID DO BEGIN

            COUNTER=COUNTER+1;

            IF (DRIVER_ID=SENDER_ID) THEN BEGIN
              D=CURRENT_TIMESTAMP;
              MINUTES=CAST((D-DATE_IN)*(1e0*24*60) AS INTEGER);
              PRIORITY=COUNTER;
            END

          END

          IF (D IS NOT NULL) THEN BEGIN

            SELECT CONST_VALUE FROM GET_CONST_VALUE('A92208254FCBA05643224EB1F4508300') INTO :S;

            IF (S IS NOT NULL) THEN BEGIN

              S=REPLACE_STRING(S,'%PRIORITY',CAST(PRIORITY AS VARCHAR(10)));
              S=REPLACE_STRING(S,'%COUNTER',CAST(COUNTER AS VARCHAR(10)));
              S=REPLACE_STRING(S,'%PARK_NAME',PARK_NAME);
              S=REPLACE_STRING(S,'%MINUTES',CAST(MINUTES AS VARCHAR(10)));

              INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                        TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                                VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                        :S,NULL,0,:CONTACT,NULL,1,NULL,CURRENT_TIMESTAMP);
            END

          END

        END

      END

    END

  END
END

--

CREATE OR ALTER PROCEDURE CODE_PARK_STATES (
  ACCOUNT_ID VARCHAR(32),
  IN_MESSAGE_ID VARCHAR(32))
AS
DECLARE CONTACT VARCHAR(100);
DECLARE SENDER_ID VARCHAR(32);
DECLARE S VARCHAR(1000);
DECLARE S1 VARCHAR(1000);
DECLARE F VARCHAR(1000);
DECLARE PARK_NAME VARCHAR(100);
DECLARE SUM_CHARGE NUMERIC(15,2);
DECLARE SUM_RECEIPT NUMERIC(15,2);
DECLARE BALANCE NUMERIC(15,2);
DECLARE MIN_BALANCE NUMERIC(15,2);
DECLARE CNT INTEGER;
BEGIN
  SELECT CONTACT, SENDER_ID
    FROM IN_MESSAGES
   WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID
    INTO :CONTACT, :SENDER_ID;

  IF ((CONTACT IS NOT NULL) AND (SENDER_ID IS NOT NULL)) THEN BEGIN

    SELECT COUNT(*)
      FROM DRIVERS D
      JOIN  ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
     WHERE D.DRIVER_ID=:SENDER_ID
       AND A.LOCKED<>1
      INTO :CNT;

    IF (CNT>0) THEN BEGIN

      SELECT (CASE WHEN SUM(SUM_CHARGE) IS NULL THEN 0.0 ELSE SUM(SUM_CHARGE) END)
        FROM CHARGES
       WHERE ACCOUNT_ID=:SENDER_ID
        INTO :SUM_CHARGE;

      SELECT (CASE WHEN SUM(SUM_RECEIPT) IS NULL THEN 0.0 ELSE SUM(SUM_RECEIPT) END)
        FROM RECEIPTS
       WHERE ACCOUNT_ID=:SENDER_ID
        INTO :SUM_RECEIPT;

      BALANCE=SUM_RECEIPT-SUM_CHARGE;

      SELECT MIN_BALANCE
        FROM DRIVERS
       WHERE DRIVER_ID=:SENDER_ID
        INTO :MIN_BALANCE;

      IF ((MIN_BALANCE IS NULL) OR ((MIN_BALANCE IS NOT NULL) AND (BALANCE>MIN_BALANCE))) THEN BEGIN
 
        EXECUTE PROCEDURE QUERY_PARK_STATES (ACCOUNT_ID,SENDER_ID,CONTACT);

      END

    END

  END
END

--

CREATE OR ALTER PROCEDURE CODE_SHIFT_CLOSE (
  ACCOUNT_ID VARCHAR(32),
  IN_MESSAGE_ID VARCHAR(32))
AS
DECLARE CONTACT VARCHAR(100);
DECLARE SENDER_ID VARCHAR(32);
DECLARE S VARCHAR(1000);
DECLARE CNT INTEGER;
DECLARE D TIMESTAMP;
DECLARE DATE_BEGIN TIMESTAMP;
DECLARE SHIFT_ID VARCHAR(32);
DECLARE HOURS NUMERIC(10,1);
BEGIN
  SELECT CONTACT, SENDER_ID
    FROM IN_MESSAGES
   WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID
    INTO CONTACT, SENDER_ID;

  IF ((CONTACT IS NOT NULL) AND (SENDER_ID IS NOT NULL)) THEN BEGIN

    SELECT COUNT(*)
      FROM DRIVERS
     WHERE DRIVER_ID=:SENDER_ID
      INTO :CNT;

    IF (CNT>0) THEN BEGIN

      SELECT COUNT(*)
        FROM ORDERS
       WHERE DRIVER_ID=:SENDER_ID
         AND PARENT_ID IS NULL
         AND DATE_HISTORY IS NULL
         AND FINISHED<>1
        INTO :CNT;

      IF (CNT>0) THEN BEGIN

        SELECT CONST_VALUE FROM GET_CONST_VALUE('0A2F3602D3FD9A0E476E367410F37492') INTO :S;

        IF (S IS NOT NULL) THEN BEGIN

          INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                    TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                             VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                     :S,NULL,0,:CONTACT,NULL,1,NULL,CURRENT_TIMESTAMP);
        END

      END ELSE BEGIN

        FOR SELECT DATE_BEGIN, SHIFT_ID
              FROM SHIFTS
             WHERE ACCOUNT_ID=:SENDER_ID
               AND DATE_END IS NULL
              INTO :DATE_BEGIN, :SHIFT_ID DO BEGIN

          D=CURRENT_TIMESTAMP;

          UPDATE PARK_STATES
             SET DATE_OUT=:D
           WHERE DRIVER_ID=:SENDER_ID
             AND DATE_OUT IS NULL;

          UPDATE SHIFTS
             SET DATE_END=:D
           WHERE SHIFT_ID=:SHIFT_ID
             AND DATE_END IS NULL;

          HOURS=CAST((D-DATE_BEGIN)*(1e0*24) AS NUMERIC(10,1));

          SELECT CONST_VALUE FROM GET_CONST_VALUE('5D8701DF0DEDB7A6491181074CE5A88D') INTO :S;

          IF (S IS NOT NULL) THEN BEGIN

            S=REPLACE_STRING(S,'%TIME_DATE',FORMAT_DATETIME('hh:nn:ss dd.mm.yyyy',D));
            S=REPLACE_STRING(S,'%HOURS',CAST(HOURS AS VARCHAR(30)));

            INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                      TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                              VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                      :S,NULL,0,:CONTACT,NULL,1,NULL,CURRENT_TIMESTAMP);
          END
        END

      END

    END

  END
END

--

CREATE OR ALTER PROCEDURE PR_REFUSE_CLIENT_DRIVE_OUT (
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE DRIVER_ID VARCHAR(32);
DECLARE PARK_ID VARCHAR(32);
DECLARE PARK_NAME VARCHAR(100);
DECLARE PHONE VARCHAR(100);
DECLARE PARK_STATE_ID VARCHAR(32);
DECLARE DATE_IN TIMESTAMP;
DECLARE S VARCHAR(1000);
BEGIN

  SELECT DRIVER_ID, PARK_ID
    FROM ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID, :PARK_ID;

  UPDATE ORDERS
     SET DATE_END=CURRENT_TIMESTAMP,
         WHO_PROCESS_ID=:ACCOUNT_ID,
         FINISHED=1
   WHERE ORDER_ID=:ORDER_ID;


  IF ((DRIVER_ID IS NOT NULL) AND (PARK_ID IS NOT NULL)) THEN BEGIN

    FOR SELECT PS.PARK_STATE_ID, P.NAME, PS.DATE_IN
          FROM PARK_STATES PS
          JOIN PARKS P ON P.PARK_ID=PS.PARK_ID
         WHERE PS.PARK_ID=:PARK_ID
           AND PS.DATE_OUT IS NULL
         ORDER BY PS.DATE_IN
          INTO :PARK_STATE_ID, :PARK_NAME, :DATE_IN DO BEGIN

      DATE_IN=DATE_IN-2*(1e0/24/60/60);

      INSERT INTO PARK_STATES (PARK_STATE_ID,DRIVER_ID,PARK_ID,DATE_IN,DATE_OUT)
                                 VALUES (GET_UNIQUE_ID(),:DRIVER_ID,:PARK_ID,:DATE_IN,NULL);

      BREAK;
    END

    IF (PARK_NAME IS NULL) THEN BEGIN

      INSERT INTO PARK_STATES (PARK_STATE_ID,DRIVER_ID,PARK_ID,DATE_IN,DATE_OUT)
                       VALUES (GET_UNIQUE_ID(),:DRIVER_ID,:PARK_ID,CURRENT_TIMESTAMP,NULL);

      SELECT NAME
        FROM PARKS
       WHERE PARK_ID=:PARK_ID
        INTO :PARK_NAME;

    END

    SELECT PHONE
      FROM ACCOUNTS
     WHERE ACCOUNT_ID=:DRIVER_ID
      INTO :PHONE;

    SELECT CONST_VALUE FROM GET_CONST_VALUE('7604B1762FDB97EC406174FB54FA13EA') INTO :S;

    IF (S IS NOT NULL) THEN BEGIN

      S=REPLACE_STRING(S,'%PARK_NAME',PARK_NAME);

      INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                        VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                :S,NULL,0,:PHONE,NULL,0,NULL,CURRENT_TIMESTAMP);
    END

  END

END

--

CREATE OR ALTER PROCEDURE PR_REFUSE_DRIVER_COME_OUT (
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE DRIVER_ID VARCHAR(32);
DECLARE PHONE VARCHAR(100);
DECLARE S VARCHAR(1000);
BEGIN

  SELECT DRIVER_ID
    FROM ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID;

  UPDATE ORDERS
     SET TYPE_PROCESS=1,
         DATE_END=CURRENT_TIMESTAMP,
         WHO_PROCESS_ID=:ACCOUNT_ID
   WHERE ORDER_ID=:ORDER_ID;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    SELECT PHONE
      FROM ACCOUNTS
     WHERE ACCOUNT_ID=:DRIVER_ID
      INTO :PHONE;

    SELECT CONST_VALUE FROM GET_CONST_VALUE('2C0BBC7EF7418D934C32D8969D7F2D8C') INTO :S;

    IF (S IS NOT NULL) THEN BEGIN

      INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                        VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                :S,NULL,0,:PHONE,NULL,2,NULL,CURRENT_TIMESTAMP);
    END

  END

END

--

CREATE OR ALTER PROCEDURE PR_CHANGE_ROUTE (
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE PHONE VARCHAR(100);
DECLARE DRIVER_ID VARCHAR(32);
DECLARE S VARCHAR(1000);
BEGIN

  SELECT DRIVER_ID
    FROM ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID;

  UPDATE ORDERS
     SET TYPE_PROCESS=1,
         DATE_END=CURRENT_TIMESTAMP,
         WHO_PROCESS_ID=:ACCOUNT_ID
   WHERE ORDER_ID=:ORDER_ID;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    SELECT PHONE
      FROM ACCOUNTS
     WHERE ACCOUNT_ID=:DRIVER_ID
      INTO :PHONE;

    SELECT CONST_VALUE FROM GET_CONST_VALUE('2A7354AFB1FDB1D041F8FB2D06FFBC70') INTO :S;

    IF (S IS NOT NULL) THEN BEGIN

      INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                        VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                :S,NULL,0,:PHONE,NULL,2,NULL,CURRENT_TIMESTAMP);
    END

  END

END

--

CREATE OR ALTER PROCEDURE PR_REFUSE_DRIVER_CONFIRM (
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE DRIVER_ID VARCHAR(32);
DECLARE PHONE VARCHAR(100);
DECLARE S VARCHAR(1000);
BEGIN

  SELECT DRIVER_ID
    FROM ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID;

  UPDATE ORDERS
     SET DATE_BEGIN=CURRENT_TIMESTAMP,
         DRIVER_ID=NULL,
         CAR_ID=NULL
   WHERE ORDER_ID=:ORDER_ID;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    UPDATE PARK_STATES
       SET DATE_OUT=CURRENT_TIMESTAMP
     WHERE DATE_OUT IS NULL
       AND DRIVER_ID=:DRIVER_ID;

    SELECT PHONE
      FROM ACCOUNTS
     WHERE ACCOUNT_ID=:DRIVER_ID
      INTO :PHONE;

    SELECT CONST_VALUE FROM GET_CONST_VALUE('14AB0F225BEFBBB14E0A5296BEB471A3') INTO :S;

    IF (S IS NOT NULL) THEN BEGIN

      INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                        VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                :S,NULL,0,:PHONE,NULL,2,NULL,CURRENT_TIMESTAMP);
    END

  END

END

--

CREATE OR ALTER PROCEDURE PR_CLIENT_IN_CAR (
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE PHONE VARCHAR(100);
DECLARE DRIVER_ID VARCHAR(32);
DECLARE S VARCHAR(1000);
BEGIN

  SELECT DRIVER_ID
    FROM ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID;

  UPDATE ORDERS
     SET DATE_BEGIN=CURRENT_TIMESTAMP
   WHERE ORDER_ID=:ORDER_ID;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    SELECT PHONE
      FROM ACCOUNTS
     WHERE ACCOUNT_ID=:DRIVER_ID
      INTO :PHONE;

    SELECT CONST_VALUE FROM GET_CONST_VALUE('620D357394B89B18454EB58DD5CE9F19') INTO :S;

    IF (S IS NOT NULL) THEN BEGIN

      INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                        VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                :S,NULL,0,:PHONE,NULL,2,NULL,CURRENT_TIMESTAMP);
    END

  END

END

--

CREATE OR ALTER PROCEDURE GET_COUNT_DRIVER_GRAPH (
  DATE_BEGIN DATE,
  DATE_END DATE,
  ZONE_ID VARCHAR(32)) 
RETURNS (
  DATE_ACCEPT TIMESTAMP,
  COUNT_VAL INTEGER,
  ZONE_ID_R VARCHAR(32),
  ZONE_NAME VARCHAR(100))
AS
  declare variable D1 TimeStamp;
  declare variable D2 TimeStamp;
begin

 D1=DATE_BEGIN;
  IF (D1 IS NULL) THEN BEGIN
    SELECT MIN(DATE_ACCEPT)
      FROM ORDERS
      INTO :D1;
  END


  D2=DATE_END;
  IF (D2 IS NULL) THEN BEGIN
    SELECT MAX(DATE_ACCEPT)
      FROM ORDERS
      INTO :D2;
  END      

IF(:ZONE_ID IS NULL) THEN BEGIN  
FOR 
SELECT  MIN(CAST(O.DATE_ACCEPT AS DATE )) AS DATE_ACCEPT,
        COUNT(*) AS COUNT_VAL,       
        MIN(D.DRIVER_ID) AS ZONE_ID_R,
        MIN(A.USER_NAME) AS ZONE_NAME                              
         FROM DRIVERS  D
        INNER JOIN ACCOUNTS A ON A.ACCOUNT_ID = D.DRIVER_ID 
        INNER JOIN ORDERS O ON O.DRIVER_ID = D.DRIVER_ID 
        WHERE CAST(O.DATE_ACCEPT AS DATE) >= CAST(:D1 AS DATE) AND  CAST(O.DATE_ACCEPT AS DATE) <= CAST(:D2 AS DATE) 
              AND O.FINISHED > 0
       GROUP BY          D.DRIVER_ID, 
            EXTRACT(YEAR FROM O.DATE_ACCEPT),
            EXTRACT(MONTH FROM O.DATE_ACCEPT),
            EXTRACT(DAY FROM O.DATE_ACCEPT)            
            ORDER BY D.DRIVER_ID, 
            MIN(O.DATE_ACCEPT)
INTO
: DATE_ACCEPT,
         :COUNT_VAL, 
         :ZONE_ID_R,
         :ZONE_NAME
         DO BEGIN       
    SUSPEND;
    END
    END
    ELSE BEGIN
    
    FOR 
SELECT  MIN(CAST(O.DATE_ACCEPT AS DATE )) AS DATE_ACCEPT,
        COUNT(*) AS COUNT_VAL,       
        MIN(D.DRIVER_ID) AS ZONE_ID_R,
        MIN(A.USER_NAME) AS ZONE_NAME                              
         FROM DRIVERS  D
        INNER JOIN ACCOUNTS A ON A.ACCOUNT_ID = D.DRIVER_ID 
        INNER JOIN ORDERS O ON O.DRIVER_ID = D.DRIVER_ID 
        WHERE CAST(O.DATE_ACCEPT AS DATE) >= CAST(:D1 AS DATE) AND  CAST(O.DATE_ACCEPT AS DATE) <= CAST(:D2 AS DATE) 
              AND O.FINISHED > 0
              AND D.DRIVER_ID = :ZONE_ID
               
         GROUP BY          D.DRIVER_ID, 
            EXTRACT(YEAR FROM O.DATE_ACCEPT),
            EXTRACT(MONTH FROM O.DATE_ACCEPT),
            EXTRACT(DAY FROM O.DATE_ACCEPT)            
            ORDER BY D.DRIVER_ID, 
            MIN(O.DATE_ACCEPT)
        
INTO
: DATE_ACCEPT,
         :COUNT_VAL, 
         :ZONE_ID_R,
         :ZONE_NAME
         DO BEGIN       
    SUSPEND;
    END
     
    END
end

--

CREATE OR ALTER PROCEDURE PR_CONFIRM_ORDER (
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE PHONE VARCHAR(100);
DECLARE DRIVER_ID VARCHAR(32);
DECLARE PARK_ID VARCHAR(32);
DECLARE RECIPIENT_ID VARCHAR(32);
DECLARE S VARCHAR(1000);
BEGIN

  SELECT PHONE, DRIVER_ID, PARK_ID
    FROM ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :PHONE, :DRIVER_ID, :PARK_ID;

  UPDATE ORDERS
     SET DATE_BEGIN=CURRENT_TIMESTAMP
   WHERE ORDER_ID=:ORDER_ID;

  IF ((PHONE IS NOT NULL) AND (DRIVER_ID IS NOT NULL)) THEN BEGIN

    UPDATE PARK_STATES
       SET DATE_OUT=CURRENT_TIMESTAMP
     WHERE DRIVER_ID=:DRIVER_ID
       AND PARK_ID=:PARK_ID
       AND DATE_OUT IS NULL;

    IF (SUBSTR(PHONE,1,3)='+79')  THEN BEGIN

      RECIPIENT_ID=NULL;

      FOR SELECT ACCOUNT_ID
            FROM ACCOUNTS
           WHERE PHONE=:PHONE
            INTO :RECIPIENT_ID DO BEGIN

        IF (RECIPIENT_ID IS NOT NULL) THEN
          BREAK;
      END

      SELECT CONST_VALUE FROM GET_CONST_VALUE('1C12AF5D5D57ACD045A724F8E3FF90ED') INTO :S;

      IF (S IS NOT NULL) THEN BEGIN

        INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                  TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                          VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:RECIPIENT_ID,CURRENT_TIMESTAMP,
                                  :S,NULL,0,:PHONE,NULL,2,NULL,CURRENT_TIMESTAMP);
      END
    END

    SELECT PHONE
      FROM ACCOUNTS
     WHERE ACCOUNT_ID=:DRIVER_ID
      INTO :PHONE;

    SELECT CONST_VALUE FROM GET_CONST_VALUE('723E98B898F89A8941B6CAAB092221AE') INTO :S;

    IF (S IS NOT NULL) THEN BEGIN

      RECIPIENT_ID=DRIVER_ID;

      INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                        VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:RECIPIENT_ID,CURRENT_TIMESTAMP,
                                :S,NULL,0,:PHONE,NULL,2,NULL,CURRENT_TIMESTAMP);
    END

  END

END

--

CREATE OR ALTER PROCEDURE GET_COUNT_DRIVER_GRAPH_HOUR (
  DATE_BEGIN DATE,
  ZONE_ID VARCHAR(32)) 
RETURNS (
  DATE_ACCEPT TIMESTAMP,
  HOUR_VAL INTEGER,
  COUNT_VAL INTEGER,
  ZONE_ID_R VARCHAR(32),
  ZONE_NAME VARCHAR(100))
AS
  declare variable D1 Date;
begin

 D1=DATE_BEGIN;
  IF (D1 IS NULL) THEN BEGIN
    SELECT MIN(DATE_ACCEPT)
      FROM ORDERS
      INTO :D1;
  END

IF(:ZONE_ID IS NULL) THEN BEGIN  
FOR 
SELECT  MIN(O.DATE_ACCEPT) AS DATE_ACCEPT,
        MIN(EXTRACT(HOUR FROM O.DATE_ACCEPT)) AS HOUR_VAL,
        COUNT(*) AS COUNT_VAL,       
        MIN(D.DRIVER_ID) AS ZONE_ID_R,
        MAX(A.USER_NAME) AS ZONE_NAME          
         FROM DRIVERS  D
        INNER JOIN ACCOUNTS A ON A.ACCOUNT_ID = D.DRIVER_ID 
        INNER JOIN ORDERS O ON O.DRIVER_ID = D.DRIVER_ID 
        WHERE CAST(O.DATE_ACCEPT AS DATE) = CAST(:D1 AS DATE)  
              AND O.FINISHED > 0
       GROUP BY D.DRIVER_ID, 
            EXTRACT(YEAR FROM O.DATE_ACCEPT),
            EXTRACT(MONTH FROM O.DATE_ACCEPT),
            EXTRACT(DAY FROM O.DATE_ACCEPT),
            EXTRACT(HOUR FROM O.DATE_ACCEPT)             
            ORDER BY D.DRIVER_ID,
            EXTRACT(HOUR FROM O.DATE_ACCEPT)
INTO
: DATE_ACCEPT,
: HOUR_VAL,
         :COUNT_VAL, 
         :ZONE_ID_R,
         :ZONE_NAME
         DO BEGIN      
    SUSPEND;
    END
    END
    ELSE BEGIN
    
    FOR 
SELECT  MIN(O.DATE_ACCEPT) AS DATE_ACCEPT,
        MIN(EXTRACT(HOUR FROM O.DATE_ACCEPT)) AS HOUR_VAL,
        COUNT(*) AS COUNT_VAL,       
        MIN(D.DRIVER_ID) AS ZONE_ID_R,
        MAX(A.USER_NAME) AS ZONE_NAME          
         FROM DRIVERS  D
        INNER JOIN ACCOUNTS A ON A.ACCOUNT_ID = D.DRIVER_ID 
        INNER JOIN ORDERS O ON O.DRIVER_ID = D.DRIVER_ID 
         WHERE CAST(O.DATE_ACCEPT AS DATE) >= CAST(:D1 AS DATE) AND CAST(O.DATE_ACCEPT AS DATE) <= (CAST(:D1 AS DATE) + 1) 
              AND O.FINISHED > 0             
              AND D.DRIVER_ID = :ZONE_ID
               
       GROUP BY D.DRIVER_ID, 
            EXTRACT(YEAR FROM O.DATE_ACCEPT),
            EXTRACT(MONTH FROM O.DATE_ACCEPT),
            EXTRACT(DAY FROM O.DATE_ACCEPT),
            EXTRACT(HOUR FROM O.DATE_ACCEPT)             
            ORDER BY D.DRIVER_ID,
            EXTRACT(HOUR FROM O.DATE_ACCEPT)
        
INTO
: DATE_ACCEPT,
: HOUR_VAL,
         :COUNT_VAL, 
         :ZONE_ID_R,
         :ZONE_NAME
         DO BEGIN       
    SUSPEND;
    END
     
    END
end

--

CREATE OR ALTER PROCEDURE PR_REFUSE_DRIVER_DRIVE_OUT (
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE DRIVER_ID VARCHAR(32);
DECLARE PHONE VARCHAR(100);
DECLARE S VARCHAR(1000);
BEGIN

  SELECT DRIVER_ID
    FROM ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID;

  UPDATE ORDERS
     SET DATE_BEGIN=CURRENT_TIMESTAMP,
         DRIVER_ID=NULL,
         CAR_ID=NULL
   WHERE ORDER_ID=:ORDER_ID;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    SELECT PHONE
      FROM ACCOUNTS
     WHERE ACCOUNT_ID=:DRIVER_ID
      INTO :PHONE;

    SELECT CONST_VALUE FROM GET_CONST_VALUE('7D5B6BED096187764ECE40FC7D5CB943') INTO :S;

    IF (S IS NOT NULL) THEN BEGIN

      INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                        VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                :S,NULL,0,:PHONE,NULL,2,NULL,CURRENT_TIMESTAMP);
    END

  END

END

--

CREATE OR ALTER PROCEDURE GET_DRIVER_SUM (
  DRIVER_ID VARCHAR(32),
  COST NUMERIC(15,2)) 
RETURNS (
  RET_SUM NUMERIC(15,2))
AS
declare variable TYPE_CALC integer;
declare variable PERCENT numeric(4,2);
declare variable CALC_SUM numeric(15,2);
declare variable PROC_NAME varchar(100);
BEGIN
  RET_SUM=COST;

  IF ((DRIVER_ID IS NOT NULL) AND (COST IS NOT NULL)) THEN BEGIN

    SELECT C.TYPE_CALC, C.PERCENT, C.CALC_SUM, C.PROC_NAME
      FROM DRIVERS D
      LEFT JOIN CALCS C ON C.CALC_ID=D.CALC_ID
     WHERE D.DRIVER_ID=:DRIVER_ID
      INTO :TYPE_CALC, :PERCENT, :CALC_SUM, :PROC_NAME;

    IF (TYPE_CALC=0) THEN
      RET_SUM=COST;

    IF (TYPE_CALC=1) THEN
      RET_SUM=COST;

    IF ((TYPE_CALC=2) AND (PERCENT IS NOT NULL)) THEN BEGIN

      RET_SUM=(COST*PERCENT)/100;
      if (RET_SUM>60.0) then RET_SUM=60.0;

    END

    IF ((TYPE_CALC=3) AND (CALC_SUM IS NOT NULL)) THEN BEGIN

      RET_SUM=COST-CALC_SUM;

    END

  END

  SUSPEND;

END

--

CREATE OR ALTER PROCEDURE PR_FULL_CALC (
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE COST_RATE NUMERIC(15,2);
DECLARE COST_FACT NUMERIC(15,2);
DECLARE PHONE VARCHAR(100);
DECLARE DRIVER_ID VARCHAR(32);
DECLARE RECIPIENT_ID VARCHAR(32);
DECLARE SUM_CHARGE NUMERIC(15,2);
DECLARE SUM_RECEIPT NUMERIC(15,2);
DECLARE BALANCE NUMERIC(15,2);
DECLARE MIN_BALANCE NUMERIC(15,2);
DECLARE CHARGE_TYPE_ID VARCHAR(32);
DECLARE S VARCHAR(1000);
BEGIN

  SELECT PHONE, DRIVER_ID, COST_RATE, COST_FACT
    FROM ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :PHONE, :DRIVER_ID, :COST_RATE, :COST_FACT;

  IF (COST_FACT IS NULL) THEN
    COST_FACT=:COST_RATE;

  UPDATE ORDERS
     SET FINISHED=1,
         DATE_END=CURRENT_TIMESTAMP,
         WHO_PROCESS_ID=:ACCOUNT_ID,
         COST_FACT=:COST_FACT
   WHERE ORDER_ID=:ORDER_ID;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    IF (PHONE IS NOT NULL) THEN BEGIN

      IF (SUBSTR(PHONE,1,3)='+79')  THEN BEGIN

        RECIPIENT_ID=NULL;

        FOR SELECT ACCOUNT_ID
              FROM ACCOUNTS
             WHERE PHONE=:PHONE
              INTO :RECIPIENT_ID DO BEGIN

          IF (RECIPIENT_ID IS NOT NULL) THEN
            BREAK;
        END

        SELECT CONST_VALUE FROM GET_CONST_VALUE('05B75340B170BF5141FC63F5CDF7FCD6') INTO :S;

        IF (S IS NOT NULL) THEN BEGIN

          INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                    TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                            VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:RECIPIENT_ID,CURRENT_TIMESTAMP,
                                    :S,NULL,0,:PHONE,NULL,2,NULL,CURRENT_TIMESTAMP);
        END

        SELECT CONST_VALUE FROM GET_CONST_VALUE('E9FFA9589ABD8C174474572B72017BCC') INTO :S;

        IF (S IS NOT NULL) THEN BEGIN

          INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                    TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                            VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:RECIPIENT_ID,CURRENT_TIMESTAMP,
                                    :S,NULL,0,:PHONE,NULL,2,NULL,CURRENT_TIMESTAMP);
        END

      END

    END

    CHARGE_TYPE_ID='E1BC9789DA9DB2B041C0784EBE92BFC9'; /* Выполнение заказа */

    SELECT RET_SUM
      FROM GET_DRIVER_SUM(:DRIVER_ID,:COST_FACT)
      INTO :SUM_CHARGE;

    INSERT INTO CHARGES (CHARGE_ID,WHO_CREATE_ID,CHARGE_TYPE_ID,ACCOUNT_ID,
                                   SUM_CHARGE,DATE_CHARGE,DATE_CREATE,DESCRIPTION)
                           VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:CHARGE_TYPE_ID,:DRIVER_ID,
                                   :SUM_CHARGE,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,NULL);

    SELECT (CASE WHEN SUM(SUM_CHARGE) IS NULL THEN 0.0 ELSE SUM(SUM_CHARGE) END)
      FROM CHARGES
     WHERE ACCOUNT_ID=:DRIVER_ID
      INTO :SUM_CHARGE;

    SELECT (CASE WHEN SUM(SUM_RECEIPT) IS NULL THEN 0.0 ELSE SUM(SUM_RECEIPT) END)
      FROM RECEIPTS
     WHERE ACCOUNT_ID=:DRIVER_ID
      INTO :SUM_RECEIPT;

    BALANCE=SUM_RECEIPT-SUM_CHARGE;

    SELECT MIN_BALANCE
      FROM DRIVERS
     WHERE DRIVER_ID=:DRIVER_ID
      INTO :MIN_BALANCE;

    IF ((MIN_BALANCE IS NULL) OR ((MIN_BALANCE IS NOT NULL) AND (BALANCE>MIN_BALANCE))) THEN BEGIN

      SELECT CONST_VALUE FROM GET_CONST_VALUE('16835607B30CA79F4CE883B53AFE972D') INTO :S;

    END ELSE BEGIN

      UPDATE SHIFTS
         SET DATE_END=CURRENT_TIMESTAMP
       WHERE ACCOUNT_ID=:DRIVER_ID
         AND DATE_END IS NULL;

      SELECT CONST_VALUE FROM GET_CONST_VALUE('634880F305E9AA434245E3E596697001') INTO :S;

    END

    SELECT PHONE
      FROM ACCOUNTS
     WHERE ACCOUNT_ID=:DRIVER_ID
      INTO :PHONE;

    IF (S IS NOT NULL) THEN BEGIN

      S=REPLACE_STRING(S,'%BALANCE',CAST(BALANCE AS VARCHAR(30)));

      INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                        VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                :S,NULL,0,:PHONE,NULL,2,NULL,CURRENT_TIMESTAMP);
    END

    EXECUTE PROCEDURE QUERY_PARK_STATES (ACCOUNT_ID,DRIVER_ID,PHONE);

  END
END

--

CREATE OR ALTER PROCEDURE PR_SELECT_DRIVER (
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE DRIVER_ID VARCHAR(32);
DECLARE CAR_ID VARCHAR(32);
DECLARE CNT INTEGER;
DECLARE S VARCHAR(1000);
DECLARE ADDRESS VARCHAR(1000);
DECLARE PREFIX VARCHAR(10);
DECLARE STREET VARCHAR(100);
DECLARE HOUSE VARCHAR(10);
DECLARE FLAT VARCHAR(10);
DECLARE PORCH VARCHAR(10);
DECLARE LOCALITY VARCHAR(100);
DECLARE PHONE VARCHAR(100);
DECLARE DATE_ACCEPT TIMESTAMP;
DECLARE DATE_ARRIVAL TIMESTAMP;
DECLARE DATE_BEGIN TIMESTAMP;
DECLARE BEFORE_PERIOD INTEGER;
DECLARE ACTION_ID VARCHAR(32);
DECLARE D TIMESTAMP;
DECLARE DESCRIPTION VARCHAR(250);
BEGIN

  SELECT O.DRIVER_ID,
         S.PREFIX, S.NAME, O.HOUSE, O.FLAT, O.PORCH, L.NAME,
         O.DATE_ACCEPT, O.DATE_ARRIVAL, O.BEFORE_PERIOD,
         O.ACTION_ID, O.DATE_BEGIN, O.DESCRIPTION
    FROM ORDERS O
    JOIN STREETS S ON S.STREET_ID=O.STREET_ID
    JOIN LOCALITIES L ON L.LOCALITY_ID=S.LOCALITY_ID
   WHERE O.ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID,
         :PREFIX, :STREET, :HOUSE, :FLAT, :PORCH, :LOCALITY,
         :DATE_ACCEPT, :DATE_ARRIVAL, :BEFORE_PERIOD,
         :ACTION_ID, :DATE_BEGIN, :DESCRIPTION;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    CNT=0;

    SELECT COUNT(*)
      FROM OUT_MESSAGES
     WHERE RECIPIENT_ID=:DRIVER_ID
       AND DESCRIPTION=:ORDER_ID||:ACTION_ID
       AND TYPE_MESSAGE=0
       AND DATE_OUT IS NULL
       AND DATE_CREATE>=:DATE_BEGIN
      INTO CNT;

    IF (CNT=0) THEN BEGIN

      SELECT D.CAR_ID, A.PHONE
        FROM DRIVERS D
        JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
       WHERE D.DRIVER_ID=:DRIVER_ID
        INTO :CAR_ID, :PHONE;

      D=CURRENT_TIMESTAMP;

      UPDATE ORDERS
         SET DRIVER_ID=:DRIVER_ID,
             CAR_ID=:CAR_ID,
             DATE_END=:D,
             WHO_PROCESS_ID=:ACCOUNT_ID
       WHERE ORDER_ID=:ORDER_ID;

      ADDRESS='';

      IF (PREFIX IS NOT NULL) THEN
        ADDRESS=PREFIX||' ';

      ADDRESS=ADDRESS||STREET||' '||HOUSE;

      IF (FLAT IS NOT NULL) THEN
        ADDRESS=ADDRESS||'-'||FLAT;

      IF (PORCH IS NOT NULL) THEN
        ADDRESS=ADDRESS||' п.'||PORCH;

      ADDRESS=ADDRESS||', '||LOCALITY;

      IF (DATE_ACCEPT<DATE_ARRIVAL) THEN BEGIN

        IF ((DATE_ACCEPT+(BEFORE_PERIOD*(1e0/24/60)))<DATE_ARRIVAL) THEN BEGIN

          SELECT CONST_VALUE FROM GET_CONST_VALUE('2A773F389AD895B94010252F1DC6D3CC') INTO :S;

        END ELSE BEGIN

          SELECT CONST_VALUE FROM GET_CONST_VALUE('051BE1C8C28F9DB34EAA8DD46E0DA3B4') INTO :S;

        END

      END ELSE BEGIN

        SELECT CONST_VALUE FROM GET_CONST_VALUE('CD5055A23D04B51641F3211814253430') INTO :S;

      END

      IF (S IS NOT NULL) THEN BEGIN

        S=REPLACE_STRING(S,'%TIME',FORMAT_DATETIME('hh:nn',DATE_ARRIVAL));
        S=REPLACE_STRING(S,'%ADDRESS',ADDRESS);

        INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                  TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                          VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,:D,
                                  :S,NULL,0,:PHONE,:ORDER_ID||:ACTION_ID,0,NULL,:D);

        IF ((DESCRIPTION IS NOT NULL) AND (TRIM(DESCRIPTION)<>'')) THEN BEGIN

          S=DESCRIPTION;

          INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                    TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                            VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,:D,
                                    :S,NULL,0,:PHONE,NULL,0,NULL,:D);
        END

      END

    END

  END

END

--

CREATE OR ALTER PROCEDURE PR_NO_DRIVER (
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE PARK_ID VARCHAR(32);
DECLARE DRIVER_ID VARCHAR(32);
DECLARE RESULT_ID VARCHAR(32);
DECLARE CAR_ID VARCHAR(32);
DECLARE CNT INTEGER;
BEGIN

  SELECT PARK_ID, DRIVER_ID
    FROM ORDERS
   WHERE ORDER_ID=:ORDER_ID
     INTO :PARK_ID, :DRIVER_ID;

  IF (DRIVER_ID IS NULL) THEN BEGIN

    IF (PARK_ID IS NOT NULL) THEN BEGIN

      RESULT_ID=NULL;

      FOR SELECT PS.DRIVER_ID
            FROM PARK_STATES PS
            JOIN DRIVERS D ON D.DRIVER_ID=PS.DRIVER_ID
           WHERE PS.PARK_ID=:PARK_ID
             AND PS.DATE_OUT IS NULL
           ORDER BY D.PRIORITY, PS.DATE_IN
            INTO :DRIVER_ID DO BEGIN

        SELECT COUNT(*)
          FROM ORDERS
         WHERE DRIVER_ID=:DRIVER_ID
           AND PARENT_ID IS NULL
           AND DATE_HISTORY IS NULL
           AND FINISHED<>1
          INTO :CNT;

        IF (CNT=0) THEN BEGIN
          RESULT_ID=:DRIVER_ID;
          BREAK;
        END

      END

      IF (RESULT_ID IS NOT NULL) THEN BEGIN

        SELECT CAR_ID
          FROM DRIVERS
         WHERE DRIVER_ID=:RESULT_ID
          INTO :CAR_ID;

        UPDATE ORDERS
           SET DRIVER_ID=:RESULT_ID,
               CAR_ID=:CAR_ID,
               DATE_END=CURRENT_TIMESTAMP,
               WHO_PROCESS_ID=:ACCOUNT_ID
         WHERE ORDER_ID=:ORDER_ID;

      END ELSE BEGIN

        EXECUTE PROCEDURE PR_MANUAL(ORDER_ID,ACCOUNT_ID);

      END

    END ELSE BEGIN

      EXECUTE PROCEDURE PR_MANUAL(ORDER_ID,ACCOUNT_ID);

    END

  END

END

--

CREATE OR ALTER PROCEDURE GET_DRIVERS_REPORT 
RETURNS (
  DRIVER_ID VARCHAR(32),
  DRIVER_NAME VARCHAR(100))
AS
begin
FOR SELECT D.DRIVER_ID,
           A.USER_NAME AS DRIVER_NAME       
        FROM DRIVERS  D
        INNER JOIN ACCOUNTS A ON A.ACCOUNT_ID = D.DRIVER_ID 
            INTO :DRIVER_ID,
             :DRIVER_NAME DO BEGIN       
    SUSPEND;
    END
end

--

CREATE OR ALTER PROCEDURE PR_PARTY_CALC (
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE PHONE VARCHAR(100);
DECLARE DRIVER_ID VARCHAR(32);
DECLARE S VARCHAR(1000);
BEGIN

  SELECT DRIVER_ID
    FROM ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID;

  UPDATE ORDERS
     SET TYPE_PROCESS=1,
         DATE_END=CURRENT_TIMESTAMP,
         WHO_PROCESS_ID=:ACCOUNT_ID
   WHERE ORDER_ID=:ORDER_ID;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    SELECT PHONE
      FROM ACCOUNTS
     WHERE ACCOUNT_ID=:DRIVER_ID
      INTO :PHONE;

    SELECT CONST_VALUE FROM GET_CONST_VALUE('8B477D56F777966345EBC1130AF01C55') INTO :S;

    IF (S IS NOT NULL) THEN BEGIN

      INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                        VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                :S,NULL,0,:PHONE,NULL,2,NULL,CURRENT_TIMESTAMP);
    END

  END

END

--

CREATE OR ALTER PROCEDURE PR_REFUSE_CLIENT_COME_OUT (
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE DRIVER_ID VARCHAR(32);
DECLARE PARK_ID VARCHAR(32);
DECLARE PARK_NAME VARCHAR(100);
DECLARE PHONE VARCHAR(100);
DECLARE PARK_STATE_ID VARCHAR(32);
DECLARE DATE_IN TIMESTAMP;
DECLARE S VARCHAR(1000);
BEGIN

  SELECT DRIVER_ID, PARK_ID
    FROM ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID, :PARK_ID;

  UPDATE ORDERS
     SET DATE_END=CURRENT_TIMESTAMP,
         WHO_PROCESS_ID=:ACCOUNT_ID,
         FINISHED=1
   WHERE ORDER_ID=:ORDER_ID;

  IF ((DRIVER_ID IS NOT NULL) AND (PARK_ID IS NOT NULL)) THEN BEGIN

    FOR SELECT PS.PARK_STATE_ID, P.NAME, PS.DATE_IN
          FROM PARK_STATES PS
          JOIN PARKS P ON P.PARK_ID=PS.PARK_ID
         WHERE PS.PARK_ID=:PARK_ID
         ORDER BY PS.DATE_IN
          INTO :PARK_STATE_ID, :PARK_NAME, :DATE_IN DO BEGIN

      DATE_IN=DATE_IN-2*(1e0/24/60/60);

      INSERT INTO PARK_STATES (PARK_STATE_ID,DRIVER_ID,PARK_ID,DATE_IN,DATE_OUT)
                       VALUES (GET_UNIQUE_ID(),:DRIVER_ID,:PARK_ID,:DATE_IN,NULL);

      BREAK;
    END

    IF (PARK_NAME IS NULL) THEN BEGIN

      INSERT INTO PARK_STATES (PARK_STATE_ID,DRIVER_ID,PARK_ID,DATE_IN,DATE_OUT)
                       VALUES (GET_UNIQUE_ID(),:DRIVER_ID,:PARK_ID,CURRENT_TIMESTAMP,NULL);

      SELECT NAME
        FROM PARKS
       WHERE PARK_ID=:PARK_ID
        INTO :PARK_NAME;

    END

    SELECT PHONE
      FROM ACCOUNTS
     WHERE ACCOUNT_ID=:DRIVER_ID
      INTO :PHONE;

    SELECT CONST_VALUE FROM GET_CONST_VALUE('13D70B96F52BBE8D4E115CCC194F3B10') INTO :S;

    IF (S IS NOT NULL) THEN BEGIN

      S=REPLACE_STRING(S,'%PARK_NAME',PARK_NAME);

      INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                        VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                :S,NULL,0,:PHONE,NULL,2,NULL,CURRENT_TIMESTAMP);
    END

  END

END

--

CREATE OR ALTER PROCEDURE PR_REFUSE_CLIENT_CONFIRM (
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE DRIVER_ID VARCHAR(32);
DECLARE PHONE VARCHAR(100);
DECLARE S VARCHAR(1000);
BEGIN

  SELECT DRIVER_ID
    FROM ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID;

  UPDATE ORDERS
     SET DATE_END=CURRENT_TIMESTAMP,
         WHO_PROCESS_ID=:ACCOUNT_ID,
         FINISHED=1
   WHERE ORDER_ID=:ORDER_ID;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    SELECT PHONE
      FROM ACCOUNTS
     WHERE ACCOUNT_ID=:DRIVER_ID
      INTO :PHONE;

    SELECT CONST_VALUE FROM GET_CONST_VALUE('C40297F408B0AF3A45776489F11FC512') INTO :S;

    IF (S IS NOT NULL) THEN BEGIN

      INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                        VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                :S,NULL,0,:PHONE,NULL,0,NULL,CURRENT_TIMESTAMP);
    END

  END

END

--

CREATE OR ALTER PROCEDURE PR_ARRIVAL_DRIVER (
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE PHONE VARCHAR(100);
DECLARE DRIVER_ID VARCHAR(32);
DECLARE COST_RATE NUMERIC(15,2);
DECLARE COLOR VARCHAR(100);
DECLARE BRAND VARCHAR(100);
DECLARE STATE_NUM VARCHAR(50);
DECLARE PREFIX VARCHAR(10);
DECLARE STREET VARCHAR(100);
DECLARE HOUSE VARCHAR(10);
DECLARE FLAT VARCHAR(10);
DECLARE PORCH VARCHAR(10);
DECLARE LOCALITY VARCHAR(100);
DECLARE RECIPIENT_ID VARCHAR(32);
DECLARE S VARCHAR(1000);
DECLARE ADDRESS VARCHAR(1000);
DECLARE CNT INTEGER;
BEGIN

  SELECT O.PHONE, O.DRIVER_ID, O.COST_RATE,
         C.COLOR, C.BRAND, C.STATE_NUM
    FROM ORDERS O
    LEFT JOIN DRIVERS D ON D.DRIVER_ID=O.DRIVER_ID
    LEFT JOIN CARS C ON C.CAR_ID=D.CAR_ID
   WHERE ORDER_ID=:ORDER_ID
    INTO :PHONE, :DRIVER_ID, :COST_RATE,
         :COLOR, :BRAND, :STATE_NUM;

  UPDATE ORDERS
     SET DATE_BEGIN=CURRENT_TIMESTAMP
   WHERE ORDER_ID=:ORDER_ID;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    IF (PHONE IS NOT NULL) THEN BEGIN

      IF (SUBSTR(PHONE,1,3)='+79')  THEN BEGIN

        RECIPIENT_ID=NULL;

        FOR SELECT ACCOUNT_ID
              FROM ACCOUNTS
             WHERE PHONE=:PHONE
              INTO :RECIPIENT_ID DO BEGIN

          IF (RECIPIENT_ID IS NOT NULL) THEN
            BREAK;
        END

        IF (COST_RATE>0.0) THEN BEGIN

          SELECT CONST_VALUE FROM GET_CONST_VALUE('8D9E6C9F4852AD8142205F027B2A5288') INTO :S;

        END ELSE BEGIN

          SELECT CONST_VALUE FROM GET_CONST_VALUE('93EBB0171E37A0884313759C0DA1EB3D') INTO :S;

        END

        IF (S IS NOT NULL) THEN BEGIN

          S=REPLACE_STRING(S,'%COLOR',COLOR);
          S=REPLACE_STRING(S,'%BRAND',BRAND);
          S=REPLACE_STRING(S,'%STATE_NUM',STATE_NUM);
          S=REPLACE_STRING(S,'%COST_RATE',CAST(CAST(COST_RATE AS NUMERIC(15,0)) AS VARCHAR(30)));

          INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                    TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                            VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:RECIPIENT_ID,CURRENT_TIMESTAMP,
                                    :S,NULL,0,:PHONE,NULL,0,NULL,CURRENT_TIMESTAMP);

        END

        SELECT CONST_VALUE FROM GET_CONST_VALUE('F4384929079999BB47A895BFCA5BB382') INTO :S;

        IF (S IS NOT NULL) THEN BEGIN

          INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                    TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                            VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:RECIPIENT_ID,CURRENT_TIMESTAMP,
                                    :S,NULL,0,:PHONE,NULL,0,NULL,CURRENT_TIMESTAMP);

        END

      END

    END

    SELECT PHONE
      FROM ACCOUNTS
     WHERE ACCOUNT_ID=:DRIVER_ID
      INTO :PHONE;

    SELECT COUNT(*)
      FROM ROUTES
     WHERE ORDER_ID=:ORDER_ID
      INTO CNT;

    ADDRESS='';

    IF (CNT=1) THEN BEGIN

      FOR SELECT S.PREFIX, S.NAME, R.HOUSE, R.FLAT, R.PORCH, L.NAME
            FROM ROUTES R
            LEFT JOIN STREETS S ON S.STREET_ID=R.STREET_ID
            LEFT JOIN LOCALITIES L ON L.LOCALITY_ID=S.LOCALITY_ID
           WHERE R.ORDER_ID=:ORDER_ID
           ORDER BY R.PRIORITY DESC
            INTO :PREFIX, :STREET, :HOUSE, :FLAT, :PORCH, :LOCALITY DO BEGIN
        BREAK;
      END

      IF ((STREET IS NOT NULL) AND (HOUSE IS NOT NULL)) THEN BEGIN

        IF (PREFIX IS NOT NULL) THEN
          ADDRESS=PREFIX||' ';

        IF (STREET IS NOT NULL) THEN
          ADDRESS=ADDRESS||STREET;

        IF (HOUSE IS NOT NULL) THEN
          ADDRESS=ADDRESS||' '||HOUSE;

        IF (FLAT IS NOT NULL) THEN
          ADDRESS=ADDRESS||'-'||FLAT;

        IF (PORCH IS NOT NULL) THEN
          ADDRESS=ADDRESS||' п.'||PORCH;

        IF (LOCALITY IS NOT NULL) THEN
          ADDRESS=ADDRESS||', '||LOCALITY;

      END ELSE BEGIN

        SELECT CONST_VALUE FROM GET_CONST_VALUE('7ED5E8A8BBD9870A411517B54D9EB973') INTO :ADDRESS;

      END

    END ELSE BEGIN

      SELECT CONST_VALUE FROM GET_CONST_VALUE('7ED5E8A8BBD9870A411517B54D9EB973') INTO :ADDRESS;
    END

    IF (COST_RATE>0.0) THEN BEGIN

      SELECT CONST_VALUE FROM GET_CONST_VALUE('9C8BC7D14DAEAE5C4DC8C1C91B20BCC2') INTO :S;

    END ELSE BEGIN

      SELECT CONST_VALUE FROM GET_CONST_VALUE('92009DB6C3EAA9E74B80D333538FE40D') INTO :S;

    END

    IF (S IS NOT NULL) THEN BEGIN

      S=REPLACE_STRING(S,'%ADDRESS',ADDRESS);
      S=REPLACE_STRING(S,'%COST_RATE',CAST(CAST(COST_RATE AS NUMERIC(15,0)) AS VARCHAR(30)));

      RECIPIENT_ID=DRIVER_ID;

      INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                        VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:RECIPIENT_ID,CURRENT_TIMESTAMP,
                                :S,NULL,0,:PHONE,NULL,2,NULL,CURRENT_TIMESTAMP);
    END

  END

END

--

CREATE OR ALTER PROCEDURE GET_DRIVER_COUNT_ORDERS (
  DATE_BEGIN DATE,
  DATE_END DATE,
  DRIVER_ID VARCHAR(32)) 
RETURNS (
  DATE_BEGIN_R TIMESTAMP,
  DATE_YEAR_DAY INTEGER,
  DATE_WEEKDAY INTEGER,
  HOUR_01 INTEGER,
  HOUR_02 INTEGER,
  HOUR_03 INTEGER,
  HOUR_04 INTEGER,
  HOUR_05 INTEGER,
  HOUR_06 INTEGER,
  HOUR_07 INTEGER,
  HOUR_08 INTEGER,
  HOUR_09 INTEGER,
  HOUR_10 INTEGER,
  HOUR_11 INTEGER,
  HOUR_12 INTEGER,
  HOUR_13 INTEGER,
  HOUR_14 INTEGER,
  HOUR_15 INTEGER,
  HOUR_16 INTEGER,
  HOUR_17 INTEGER,
  HOUR_18 INTEGER,
  HOUR_19 INTEGER,
  HOUR_20 INTEGER,
  HOUR_21 INTEGER,
  HOUR_22 INTEGER,
  HOUR_23 INTEGER,
  HOUR_24 INTEGER,
  COUNT_TO_DAY INTEGER,
  DATE_MONTH INTEGER,
  DATE_YEAR INTEGER,
  DRIVER_ID_R VARCHAR(32),
  DRIVER_NAME VARCHAR(100),
  SHIFT_BEGIN TIMESTAMP)
AS
  declare variable D1 Date;
  declare variable D2 Date;
begin

 D1=CAST(DATE_BEGIN AS DATE);
  IF (D1 IS NULL) THEN BEGIN
    SELECT MIN(DATE_END)
      FROM ORDERS
      INTO :D1;
  END


 D2=CAST(DATE_END AS DATE);
  IF (D2 IS NULL) THEN BEGIN
    SELECT MAX(DATE_END)
      FROM ORDERS
      INTO :D2;
  END         
IF(:DRIVER_ID IS NULL) THEN BEGIN       
FOR SELECT  MIN(O.DATE_END) AS DATE_BEGIN,        
        EXTRACT(YEARDAY FROM O.DATE_END) AS DATE_YEAR_DAY,
        (CASE WHEN EXTRACT(WEEKDAY FROM O.DATE_END) = 0 THEN 7
         ELSE EXTRACT(WEEKDAY FROM O.DATE_END) END) AS DATE_WEEKDAY,
        EXTRACT(MONTH FROM O.DATE_END) AS DATE_MONTH,
        EXTRACT(YEAR FROM O.DATE_END) AS DATE_YEAR,
        MIN(D.DRIVER_ID) AS DRIVER_ID_R,
        MAX(A.USER_NAME) AS DRIVER_NAME,            
        (CASE WHEN EXTRACT(HOUR FROM O.DATE_END) = 1  THEN COUNT(*) 
        ELSE 0 END) AS HOUR_01,        
        (CASE WHEN EXTRACT(HOUR FROM O.DATE_END) = 2   THEN COUNT(*) 
        ELSE 0 END) AS HOUR_02,
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_END)) = 3 THEN COUNT(*)
        ELSE 0 END) AS HOUR_03,
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_END)) = 4 THEN COUNT(*)
        ELSE 0 END) AS HOUR_04,
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_END)) = 5 THEN COUNT(*)
        ELSE 0 END) AS HOUR_05,
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_END)) = 6 THEN COUNT(*)
        ELSE 0 END) AS HOUR_06,
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_END)) = 7 THEN COUNT(*)
        ELSE 0 END) AS HOUR_07,
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_END)) = 8 THEN COUNT(*)
        ELSE 0 END) AS HOUR_08,
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_END)) = 9 THEN COUNT(*)
        ELSE 0 END) AS HOUR_09,
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_END)) = 10 THEN COUNT(*)
        ELSE 0 END) AS HOUR_10,
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_END)) = 11 THEN COUNT(*)
        ELSE 0 END) AS HOUR_11,
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_END)) = 12 THEN COUNT(*)
        ELSE 0 END) AS HOUR_12,
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_END)) = 13 THEN COUNT(*)
        ELSE 0 END) AS HOUR_13, 
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_END)) = 14 THEN COUNT(*)
        ELSE 0 END) AS HOUR_14, 
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_END)) = 15 THEN COUNT(*)
        ELSE 0 END) AS HOUR_15, 
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_END)) = 16 THEN COUNT(*)
        ELSE 0 END) AS HOUR_16, 
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_END)) = 17 THEN COUNT(*)
        ELSE 0 END) AS HOUR_17, 
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_END)) = 18 THEN COUNT(*)
        ELSE 0 END) AS HOUR_18, 
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_END)) = 19 THEN COUNT(*)
        ELSE 0 END) AS HOUR_19, 
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_END)) = 20 THEN COUNT(*)
        ELSE 0 END) AS HOUR_20,         
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_END)) = 21 THEN COUNT(*)
        ELSE 0 END) AS HOUR_21,
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_END)) = 22 THEN COUNT(*)
        ELSE 0 END) AS HOUR_22,
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_END)) = 23 THEN COUNT(*)
        ELSE 0 END) AS HOUR_23,
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_END)) = 0 THEN COUNT(*)
        ELSE 0 END) AS HOUR_24,
        COUNT(EXTRACT(HOUR FROM O.DATE_END)) AS COUNT_TO_DAY       
      
        FROM DRIVERS  D
        INNER JOIN ACCOUNTS A ON A.ACCOUNT_ID = D.DRIVER_ID 
        INNER JOIN ORDERS O ON O.DRIVER_ID = D.DRIVER_ID
        
         
        WHERE CAST(O.DATE_END AS DATE) >=  CAST(:D1 AS DATE) AND  CAST(O.DATE_END AS DATE) <= CAST(:D2 AS DATE)
                AND O.FINISHED > 0
        GROUP BY D.DRIVER_ID,         
            EXTRACT(YEAR FROM O.DATE_END),
            EXTRACT(MONTH FROM O.DATE_END),
            EXTRACT(DAY FROM O.DATE_END),
            EXTRACT(HOUR FROM O.DATE_END),           
            EXTRACT(YEARDAY FROM O.DATE_END),
            EXTRACT(WEEKDAY FROM O.DATE_END)
            ORDER BY D.DRIVER_ID  
            INTO :DATE_BEGIN_R, 
             :DATE_YEAR_DAY,
             :DATE_WEEKDAY,            
             :DATE_MONTH,
             :DATE_YEAR,
             :DRIVER_ID_R,
             :DRIVER_NAME,  
             :HOUR_01,
         :HOUR_02       ,
         :HOUR_03       ,
         :HOUR_04       ,
         :HOUR_05       ,
         :HOUR_06       ,
         :HOUR_07       ,
         :HOUR_08       ,
         :HOUR_09       ,
         :HOUR_10       ,
         :HOUR_11       ,
         :HOUR_12       ,
         :HOUR_13       ,
         :HOUR_14       ,
         :HOUR_15       ,
         :HOUR_16       ,
         :HOUR_17       ,
         :HOUR_18       ,
         :HOUR_19       ,
         :HOUR_20       ,
         :HOUR_21       ,
         :HOUR_22       ,
         :HOUR_23       ,
         :HOUR_24 ,
         :COUNT_TO_DAY
          DO BEGIN       
    SUSPEND;
    END
    END ELSE BEGIN
    FOR SELECT  MIN(O.DATE_END) AS DATE_BEGIN,        
        EXTRACT(YEARDAY FROM O.DATE_END) AS DATE_YEAR_DAY,
        (CASE WHEN EXTRACT(WEEKDAY FROM O.DATE_END) = 0 THEN 7
         ELSE EXTRACT(WEEKDAY FROM O.DATE_END) END) AS DATE_WEEKDAY,
        EXTRACT(MONTH FROM O.DATE_END) AS DATE_MONTH,
        EXTRACT(YEAR FROM O.DATE_END) AS DATE_YEAR,
        MIN(D.DRIVER_ID) AS DRIVER_ID_R,
        MAX(A.USER_NAME) AS DRIVER_NAME,         
        (CASE WHEN EXTRACT(HOUR FROM O.DATE_END) = 1  THEN COUNT(*) 
        ELSE 0 END) AS HOUR_01,        
        (CASE WHEN EXTRACT(HOUR FROM O.DATE_END) = 2   THEN COUNT(*) 
        ELSE 0 END) AS HOUR_02,
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_END)) = 3 THEN COUNT(*)
        ELSE 0 END) AS HOUR_03,
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_END)) = 4 THEN COUNT(*)
        ELSE 0 END) AS HOUR_04,
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_END)) = 5 THEN COUNT(*)
        ELSE 0 END) AS HOUR_05,
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_END)) = 6 THEN COUNT(*)
        ELSE 0 END) AS HOUR_06,
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_END)) = 7 THEN COUNT(*)
        ELSE 0 END) AS HOUR_07,
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_END)) = 8 THEN COUNT(*)
        ELSE 0 END) AS HOUR_08,
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_END)) = 9 THEN COUNT(*)
        ELSE 0 END) AS HOUR_09,
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_END)) = 10 THEN COUNT(*)
        ELSE 0 END) AS HOUR_10,
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_END)) = 11 THEN COUNT(*)
        ELSE 0 END) AS HOUR_11,
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_END)) = 12 THEN COUNT(*)
        ELSE 0 END) AS HOUR_12,
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_END)) = 13 THEN COUNT(*)
        ELSE 0 END) AS HOUR_13, 
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_END)) = 14 THEN COUNT(*)
        ELSE 0 END) AS HOUR_14, 
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_END)) = 15 THEN COUNT(*)
        ELSE 0 END) AS HOUR_15, 
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_END)) = 16 THEN COUNT(*)
        ELSE 0 END) AS HOUR_16, 
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_END)) = 17 THEN COUNT(*)
        ELSE 0 END) AS HOUR_17, 
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_END)) = 18 THEN COUNT(*)
        ELSE 0 END) AS HOUR_18, 
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_END)) = 19 THEN COUNT(*)
        ELSE 0 END) AS HOUR_19, 
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_END)) = 20 THEN COUNT(*)
        ELSE 0 END) AS HOUR_20,         
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_END)) = 21 THEN COUNT(*)
        ELSE 0 END) AS HOUR_21,
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_END)) = 22 THEN COUNT(*)
        ELSE 0 END) AS HOUR_22,
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_END)) = 23 THEN COUNT(*)
        ELSE 0 END) AS HOUR_23,
        (CASE WHEN (EXTRACT(HOUR FROM O.DATE_END)) = 0 THEN COUNT(*)
        ELSE 0 END) AS HOUR_24,
        COUNT(EXTRACT(HOUR FROM O.DATE_END)) AS COUNT_TO_DAY          
                 
        FROM DRIVERS  D
        INNER JOIN ACCOUNTS A ON A.ACCOUNT_ID = D.DRIVER_ID 
        INNER JOIN ORDERS O ON O.DRIVER_ID = D.DRIVER_ID
      
         
        WHERE CAST(O.DATE_END AS DATE) >=  CAST(:D1 AS DATE) AND  CAST(O.DATE_END AS DATE) <= CAST(:D2 AS DATE)
        AND D.DRIVER_ID = :DRIVER_ID
                AND O.FINISHED > 0 
        GROUP BY D.DRIVER_ID,         
            EXTRACT(YEAR FROM O.DATE_END),
            EXTRACT(MONTH FROM O.DATE_END),
            EXTRACT(DAY FROM O.DATE_END),
            EXTRACT(HOUR FROM O.DATE_END),           
            EXTRACT(YEARDAY FROM O.DATE_END),
            EXTRACT(WEEKDAY FROM O.DATE_END)
            ORDER BY D.DRIVER_ID
            INTO :DATE_BEGIN_R, 
             :DATE_YEAR_DAY,
             :DATE_WEEKDAY,            
             :DATE_MONTH,
             :DATE_YEAR,
             :DRIVER_ID_R,
             :DRIVER_NAME,  
             :HOUR_01,
         :HOUR_02       ,
         :HOUR_03       ,
         :HOUR_04       ,
         :HOUR_05       ,
         :HOUR_06       ,
         :HOUR_07       ,
         :HOUR_08       ,
         :HOUR_09       ,
         :HOUR_10       ,
         :HOUR_11       ,
         :HOUR_12       ,
         :HOUR_13       ,
         :HOUR_14       ,
         :HOUR_15       ,
         :HOUR_16       ,
         :HOUR_17       ,
         :HOUR_18       ,
         :HOUR_19       ,
         :HOUR_20       ,
         :HOUR_21       ,
         :HOUR_22       ,
         :HOUR_23       ,
         :HOUR_24 ,
         :COUNT_TO_DAY 
          DO BEGIN
    SUSPEND;
    END
    
     
    END
end

--

CREATE OR ALTER PROCEDURE GET_DRIVER_COUNT_ORDERS_REPORT (
  DATE_BEGIN DATE,
  DATE_END DATE,
  DRIVER_ID VARCHAR(32)) 
RETURNS (
  DATE_BEGIN_R TIMESTAMP,
  WEEK_DAY_NAME VARCHAR(20),
  DATE_YEAR_DAY INTEGER,
  DATE_WEEKDAY INTEGER,
  HOUR_01 INTEGER,
  HOUR_02 INTEGER,
  HOUR_03 INTEGER,
  HOUR_04 INTEGER,
  HOUR_05 INTEGER,
  HOUR_06 INTEGER,
  HOUR_07 INTEGER,
  HOUR_08 INTEGER,
  HOUR_09 INTEGER,
  HOUR_10 INTEGER,
  HOUR_11 INTEGER,
  HOUR_12 INTEGER,
  HOUR_13 INTEGER,
  HOUR_14 INTEGER,
  HOUR_15 INTEGER,
  HOUR_16 INTEGER,
  HOUR_17 INTEGER,
  HOUR_18 INTEGER,
  HOUR_19 INTEGER,
  HOUR_20 INTEGER,
  HOUR_21 INTEGER,
  HOUR_22 INTEGER,
  HOUR_23 INTEGER,
  HOUR_24 INTEGER,
  COUNT_TO_DAY INTEGER,
  DATE_MONTH INTEGER,
  DATE_YEAR INTEGER,
  DRIVER_ID_R VARCHAR(32),
  DRIVER_NAME VARCHAR(100),
  FIRST_YEAR_DAY INTEGER,
  SHIFT_BEGIN TIMESTAMP)
AS
begin
FOR
 SELECT MIN(GCO.DATE_BEGIN_R) AS DATE_BEGIN,
        GCO.DATE_YEAR_DAY,
        GCO.DATE_WEEKDAY,
        MIN(GCO.DATE_MONTH) AS DATE_MONTH,
        MIN(GCO.DATE_YEAR) AS DATE_YEAR,          
        MIN(GCO.DRIVER_ID_R) AS DRIVER_ID_R,
        MIN(GCO.DRIVER_NAME) AS DRIVER_NAME,
        MIN(EXTRACT(WEEKDAY FROM CAST(('01.01.'||EXTRACT(YEAR FROM GCO.DATE_BEGIN_R)) AS DATE)) - 1) AS FIRST_YEAR_DAY,                
       (CASE 
             WHEN GCO.DATE_WEEKDAY = 1 THEN 'Пн'
             WHEN GCO.DATE_WEEKDAY = 2 THEN 'Вт'
             WHEN GCO.DATE_WEEKDAY = 3 THEN 'Ср'
             WHEN GCO.DATE_WEEKDAY = 4 THEN 'Чт'
             WHEN GCO.DATE_WEEKDAY = 5 THEN 'Пт'
             WHEN GCO.DATE_WEEKDAY = 6 THEN 'Сб'
             WHEN GCO.DATE_WEEKDAY = 7 THEN 'Вс'
       ELSE '' END) AS WEEK_DAY_NAME,
       MAX(GCO.HOUR_01) AS HOUR_01,
       MAX(GCO.HOUR_02) AS HOUR_02,
       MAX(GCO.HOUR_03) AS HOUR_03,
       MAX(GCO.HOUR_04) AS HOUR_04,
       MAX(GCO.HOUR_05) AS HOUR_05,
       MAX(GCO.HOUR_06) AS HOUR_06,
       MAX(GCO.HOUR_07) AS HOUR_07,
       MAX(GCO.HOUR_08) AS HOUR_08,
       MAX(GCO.HOUR_09) AS HOUR_09,
       MAX(GCO.HOUR_10) AS HOUR_10,
       MAX(GCO.HOUR_11) AS HOUR_11,
       MAX(GCO.HOUR_12) AS HOUR_12,
       MAX(GCO.HOUR_13) AS HOUR_13,
       MAX(GCO.HOUR_14) AS HOUR_14,
       MAX(GCO.HOUR_15) AS HOUR_15,
       MAX(GCO.HOUR_16) AS HOUR_16,
       MAX(GCO.HOUR_17) AS HOUR_17,
       MAX(GCO.HOUR_18) AS HOUR_18,
       MAX(GCO.HOUR_19) AS HOUR_19,
       MAX(GCO.HOUR_20) AS HOUR_20,
       MAX(GCO.HOUR_21) AS HOUR_21,
       MAX(GCO.HOUR_22) AS HOUR_22,
       MAX(GCO.HOUR_23) AS HOUR_23,
       MAX(GCO.HOUR_24) AS HOUR_24,
       SUM(GCO.COUNT_TO_DAY) AS COUNT_TO_DAY,
       MAX((SELECT MAX(S.DATE_BEGIN)
        FROM SHIFTS S
        WHERE CAST(S.DATE_BEGIN AS DATE) = CAST(GCO.DATE_BEGIN_R AS DATE) 
              AND S.ACCOUNT_ID = GCO.DRIVER_ID_R   
       )) AS SHIFT_BEGIN
               
FROM GET_DRIVER_COUNT_ORDERS(:DATE_BEGIN, :DATE_END, :DRIVER_ID) GCO
                                                                                                                        

GROUP BY GCO.DRIVER_ID_R, GCO.DATE_YEAR_DAY, GCO.DATE_WEEKDAY
ORDER BY GCO.DRIVER_ID_R, MIN(GCO.DATE_BEGIN_R)
            INTO :DATE_BEGIN_R, 
             :DATE_YEAR_DAY,
             :DATE_WEEKDAY,
             :DATE_MONTH,
             :DATE_YEAR,             
             :DRIVER_ID_R,
             :DRIVER_NAME,
             :FIRST_YEAR_DAY,
             :WEEK_DAY_NAME,
             :HOUR_01       ,
         :HOUR_02       ,
         :HOUR_03       ,
         :HOUR_04       ,
         :HOUR_05       ,
         :HOUR_06       ,
         :HOUR_07       ,
         :HOUR_08       ,
         :HOUR_09       ,
         :HOUR_10       ,
         :HOUR_11       ,
         :HOUR_12       ,
         :HOUR_13       ,
         :HOUR_14       ,
         :HOUR_15       ,
         :HOUR_16       ,
         :HOUR_17       ,
         :HOUR_18       ,
         :HOUR_19       ,
         :HOUR_20       ,
         :HOUR_21       ,
         :HOUR_22       ,
         :HOUR_23       ,
         :HOUR_24,
         :COUNT_TO_DAY,
         :SHIFT_BEGIN 
         DO BEGIN
    SUSPEND;
  END
end

--

CREATE VIEW S_DRIVERS_EX(
    DRIVER_ID,
    CALC_ID,
    CAR_ID,
    PHONE_HOME,
    LICENSE,
    CATEGORIES,
    INSURANCE,
    HEALTH_CERT,
    ADDICT_CERT,
    PASSPORT,
    PLACE_BIRTH,
    DATE_BIRTH,
    ADDRESS_RESIDENCE,
    ADDRESS_ACTUAL,
    MIN_BALANCE,
    PRIORITY,
    METHOD_ID,
    PHONE,
    DESCRIPTION,
    USER_NAME,
    DATE_CREATE,
    LOCKED,
    SURNAME,
    NAME,
    PATRONYMIC,
    CAR_STATE_NUM,
    CAR_BRAND,
    CAR_COLOR,
    CAR_CALLSIGN,
    CAR_TYPE_ID,
    CAR_TYPE_NAME,
    CAR_TYPE_FONT_COLOR,
    CAR_TYPE_BRUSH_COLOR,
    CALC_NAME,
    METHOD_NAME,
    SUM_CHARGE,
    SUM_RECEIPT,
    ACTUAL_BALANCE)
AS
SELECT D.*,
       A.PHONE,
       A.DESCRIPTION,
       A.USER_NAME,
       A.DATE_CREATE,
       A.LOCKED,
       A.SURNAME,
       A.NAME,
       A.PATRONYMIC,
       CR.STATE_NUM AS CAR_STATE_NUM,
       CR.BRAND AS CAR_BRAND,
       CR.COLOR AS CAR_COLOR,
       CR.CALLSIGN AS CAR_CALLSIGN,
       CR.CAR_TYPE_ID,
       CT.NAME AS CAR_TYPE_NAME,
       CT.FONT_COLOR AS CAR_TYPE_FONT_COLOR,
       CT.BRUSH_COLOR AS CAR_TYPE_BRUSH_COLOR,
       CL.NAME AS CALC_NAME,
       M.NAME AS METHOD_NAME,
       (CASE WHEN SAC.SUM_CHARGE IS NULL THEN 0.0 ELSE SAC.SUM_CHARGE END) SUM_CHARGE,
       (CASE WHEN SAR.SUM_RECEIPT IS NULL THEN 0.0 ELSE SAR.SUM_RECEIPT END) SUM_RECEIPT,
       ((CASE WHEN SAR.SUM_RECEIPT IS NULL THEN 0.0 ELSE SAR.SUM_RECEIPT END)-
        (CASE WHEN SAC.SUM_CHARGE IS NULL THEN 0.0 ELSE SAC.SUM_CHARGE END)) AS ACTUAL_BALANCE
  FROM DRIVERS D
  JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
  JOIN CARS CR ON CR.CAR_ID=D.CAR_ID
  JOIN CAR_TYPES CT ON CT.CAR_TYPE_ID=CR.CAR_TYPE_ID
  LEFT JOIN CALCS CL ON CL.CALC_ID=D.CALC_ID
  LEFT JOIN METHODS M ON M.METHOD_ID=D.METHOD_ID
  LEFT JOIN S_ACCOUNT_CHARGES SAC ON SAC.ACCOUNT_ID=D.DRIVER_ID
  LEFT JOIN S_ACCOUNT_RECEIPTS SAR ON SAR.ACCOUNT_ID=D.DRIVER_ID

--

CREATE VIEW S_DRIVER_FREE
AS
SELECT *
  FROM S_DRIVERS_EX
 WHERE DRIVER_ID NOT IN (SELECT ACCOUNT_ID FROM SHIFTS
                          WHERE DATE_END IS NULL)
   AND LOCKED=0
   AND ((MIN_BALANCE IS NULL) OR (ACTUAL_BALANCE>MIN_BALANCE))

--

CREATE VIEW S_DRIVER_POSITIVES
AS
SELECT *
  FROM S_DRIVERS_EX
 WHERE (MIN_BALANCE IS NULL)
    OR (ACTUAL_BALANCE>MIN_BALANCE)

--

CREATE VIEW S_DRIVER_PARK_FREE
AS
SELECT *
  FROM S_DRIVERS_EX
 WHERE DRIVER_ID IN (SELECT ACCOUNT_ID FROM SHIFTS
                      WHERE DATE_END IS NULL)
   AND DRIVER_ID NOT IN (SELECT DRIVER_ID FROM PARK_STATES
                          WHERE DATE_OUT IS NULL)
   AND LOCKED=0
   AND ((MIN_BALANCE IS NULL) OR (ACTUAL_BALANCE>MIN_BALANCE))

--

CREATE TABLE /*PREFIX*/CLIENTS
(
  CLIENT_ID VARCHAR(32) NOT NULL,
  CLIENT_GROUP_ID VARCHAR(32),
  CALC_ID VARCHAR(32),
  SOURCE_ID VARCHAR(32),
  METHOD_ID VARCHAR(32),
  STREET_ID VARCHAR(32),
  HOUSE VARCHAR(10),
  FLAT VARCHAR(10),
  PORCH VARCHAR(10),
  "INDEX" VARCHAR(10),
  ADDRESS_DESC VARCHAR(250),
  SEX INTEGER,
  PASSPORT VARCHAR(250),
  DATE_BIRTH DATE,
  PLACE_BIRTH VARCHAR(250),
  MIN_BALANCE NUMERIC(15,2),
  PRIMARY KEY (CLIENT_ID),
  FOREIGN KEY (CLIENT_ID) REFERENCES /*PREFIX*/ACCOUNTS (ACCOUNT_ID),
  FOREIGN KEY (CLIENT_GROUP_ID) REFERENCES /*PREFIX*/CLIENT_GROUPS (CLIENT_GROUP_ID),
  FOREIGN KEY (CALC_ID) REFERENCES /*PREFIX*/CALCS (CALC_ID),
  FOREIGN KEY (SOURCE_ID) REFERENCES /*PREFIX*/SOURCES (SOURCE_ID),
  FOREIGN KEY (METHOD_ID) REFERENCES /*PREFIX*/METHODS (METHOD_ID),
  FOREIGN KEY (STREET_ID) REFERENCES /*PREFIX*/STREETS (STREET_ID)
)

--

CREATE VIEW /*PREFIX*/S_CLIENTS
(
    CLIENT_ID,
    CLIENT_GROUP_ID,
    CALC_ID,
    SOURCE_ID,
    METHOD_ID,
    STREET_ID,
    HOUSE,
    FLAT,
    PORCH,
    "INDEX",
    ADDRESS_DESC,
    SEX,
    PASSPORT,
    DATE_BIRTH,
    PLACE_BIRTH,
    MIN_BALANCE,
    PHONE,
    DESCRIPTION,
    USER_NAME,
    "PASSWORD",
    DATE_CREATE,
    LOCKED,
    SURNAME,
    NAME,
    PATRONYMIC,
    FIRM_ID,
    JOB_TITLE,
    CLIENT_GROUP_NAME,
    CALC_NAME,
    SOURCE_NAME,
    METHOD_NAME,
    FIRM_SMALL_NAME,
    STREET_NAME,
    STREET_PREFIX,
    LOCALITY_ID,
    LOCALITY_NAME,
    LOCALITY_PREFIX)
AS
SELECT C.*,
       A.PHONE,
       A.DESCRIPTION,
       A.USER_NAME,
       A."PASSWORD",
       A.DATE_CREATE,
       A.LOCKED,
       A.SURNAME,
       A.NAME,
       A.PATRONYMIC,
       A.FIRM_ID,
       A.JOB_TITLE,
       CG.NAME AS CLIENT_GROUP_NAME,
       CL.NAME AS CALC_NAME,
       S.NAME AS SOURCE_NAME,
       M.NAME AS METHOD_NAME,
       F.SMALL_NAME AS FIRM_SMALL_NAME,
       S1.NAME AS STREET_NAME,
       S1.PREFIX AS STREET_PREFIX,
       L1.LOCALITY_ID AS LOCALITY_ID,
       L1.NAME AS LOCALITY_NAME,
       L1.PREFIX AS LOCALITY_PREFIX
  FROM /*PREFIX*/CLIENTS C
  JOIN /*PREFIX*/ACCOUNTS A ON A.ACCOUNT_ID=C.CLIENT_ID
  LEFT JOIN /*PREFIX*/CLIENT_GROUPS CG ON CG.CLIENT_GROUP_ID=C.CLIENT_GROUP_ID
  LEFT JOIN /*PREFIX*/CALCS CL ON CL.CALC_ID=C.CALC_ID
  LEFT JOIN /*PREFIX*/SOURCES S ON S.SOURCE_ID=C.SOURCE_ID
  LEFT JOIN /*PREFIX*/METHODS M ON M.METHOD_ID=C.METHOD_ID
  LEFT JOIN /*PREFIX*/FIRMS F ON F.FIRM_ID=A.FIRM_ID
  LEFT JOIN /*PREFIX*/STREETS S1 ON S1.STREET_ID=C.STREET_ID
  LEFT JOIN /*PREFIX*/LOCALITIES L1 ON L1.LOCALITY_ID=S1.LOCALITY_ID

--

CREATE OR ALTER PROCEDURE /*PREFIX*/I_CLIENT
(
  CLIENT_ID VARCHAR(32),
  CLIENT_GROUP_ID VARCHAR(32),
  CALC_ID VARCHAR(32),
  SOURCE_ID VARCHAR(32),
  METHOD_ID VARCHAR(32),
  STREET_ID VARCHAR(32),
  "INDEX" VARCHAR(10),
  HOUSE VARCHAR(10),
  FLAT VARCHAR(10),
  SEX INTEGER,
  PASSPORT VARCHAR(250),
  DATE_BIRTH DATE,
  PLACE_BIRTH VARCHAR(250),
  MIN_BALANCE NUMERIC(15,2),
  PORCH VARCHAR(10),
  ADDRESS_DESC VARCHAR(250),
  PHONE VARCHAR(100),
  DESCRIPTION VARCHAR(250),
  USER_NAME VARCHAR(100),
  "PASSWORD" VARCHAR(100),
  LOCKED INTEGER,
  SURNAME VARCHAR(100),
  NAME VARCHAR(100),
  PATRONYMIC VARCHAR(100),
  FIRM_ID VARCHAR(32),
  JOB_TITLE VARCHAR(250))
AS
  DECLARE ROLE_ID VARCHAR(32);
BEGIN

  INSERT INTO /*PREFIX*/ACCOUNTS (ACCOUNT_ID,DATE_CREATE,USER_NAME,LOCKED,SURNAME,NAME,PATRONYMIC,
                                  IS_ROLE,PHONE,DESCRIPTION,FIRM_ID,JOB_TITLE,"PASSWORD")
                          VALUES (:CLIENT_ID,CURRENT_TIMESTAMP,:USER_NAME,:LOCKED,:SURNAME,:NAME,:PATRONYMIC,
                                  0,:PHONE,:DESCRIPTION,:FIRM_ID,:JOB_TITLE,:"PASSWORD");

  INSERT INTO /*PREFIX*/CLIENTS (CLIENT_ID,CLIENT_GROUP_ID,CALC_ID,SOURCE_ID,METHOD_ID,STREET_ID,"INDEX",
                                 HOUSE,FLAT,SEX,PASSPORT,DATE_BIRTH,PLACE_BIRTH,MIN_BALANCE,
                                 PORCH,ADDRESS_DESC)
                         VALUES (:CLIENT_ID,:CLIENT_GROUP_ID,:CALC_ID,:SOURCE_ID,:METHOD_ID,:STREET_ID,:"INDEX",
                                 :HOUSE,:FLAT,:SEX,:PASSPORT,:DATE_BIRTH,:PLACE_BIRTH,:MIN_BALANCE,
                                 :PORCH,:ADDRESS_DESC);

  ROLE_ID='1D3BDEDD9A0B9EE84AEDC1FDED4F5A93'; /* Клиенты */
  INSERT INTO /*PREFIX*/ACCOUNT_ROLES (ROLE_ID,ACCOUNT_ID)
       VALUES (:ROLE_ID,:CLIENT_ID);
END;

--

CREATE OR ALTER PROCEDURE /*PREFIX*/U_CLIENT
(
  CLIENT_ID VARCHAR(32),
  CLIENT_GROUP_ID VARCHAR(32),
  CALC_ID VARCHAR(32),
  SOURCE_ID VARCHAR(32),
  METHOD_ID VARCHAR(32),
  STREET_ID VARCHAR(32),
  "INDEX" VARCHAR(10),
  HOUSE VARCHAR(10),
  FLAT VARCHAR(10),
  SEX INTEGER,
  PASSPORT VARCHAR(250),
  DATE_BIRTH DATE,
  PLACE_BIRTH VARCHAR(250),
  MIN_BALANCE NUMERIC(15,2),
  PORCH VARCHAR(10),
  ADDRESS_DESC VARCHAR(250),
  PHONE VARCHAR(100),
  DESCRIPTION VARCHAR(250),
  USER_NAME VARCHAR(100),
  "PASSWORD" VARCHAR(100),
  LOCKED INTEGER,
  SURNAME VARCHAR(100),
  NAME VARCHAR(100),
  PATRONYMIC VARCHAR(100),
  FIRM_ID VARCHAR(32),
  JOB_TITLE VARCHAR(250),
  OLD_CLIENT_ID VARCHAR(32))
AS
BEGIN

  UPDATE /*PREFIX*/ACCOUNTS
     SET ACCOUNT_ID=:CLIENT_ID,
         USER_NAME=:USER_NAME,
         LOCKED=:LOCKED,
         SURNAME=:SURNAME,
         NAME=:NAME,
         PATRONYMIC=:PATRONYMIC,
         IS_ROLE=0,
         PHONE=:PHONE,
         DESCRIPTION=:DESCRIPTION,
         FIRM_ID=:FIRM_ID,
         JOB_TITLE=:JOB_TITLE,
         "PASSWORD"=:"PASSWORD"
   WHERE ACCOUNT_ID=:OLD_CLIENT_ID;

  UPDATE /*PREFIX*/CLIENTS
     SET CLIENT_ID=:CLIENT_ID,
         CLIENT_GROUP_ID=:CLIENT_GROUP_ID,
         CALC_ID=:CALC_ID,
         SOURCE_ID=:SOURCE_ID,
         METHOD_ID=:METHOD_ID,
         STREET_ID=:STREET_ID,
         "INDEX"=:"INDEX",
         HOUSE=:HOUSE,
         FLAT=:FLAT,
         SEX=:SEX,
         PASSPORT=:PASSPORT,
         DATE_BIRTH=:DATE_BIRTH,
         PLACE_BIRTH=:PLACE_BIRTH,
         MIN_BALANCE=:MIN_BALANCE,
         PORCH=:PORCH,
         ADDRESS_DESC=:ADDRESS_DESC
   WHERE CLIENT_ID=:OLD_CLIENT_ID;

END;

--

CREATE OR ALTER PROCEDURE /*PREFIX*/D_CLIENT (
  OLD_CLIENT_ID VARCHAR(32))
AS
BEGIN
  DELETE FROM /*PREFIX*/CLIENTS
        WHERE CLIENT_ID=:OLD_CLIENT_ID;

  DELETE FROM /*PREFIX*/ACCOUNT_ROLES
        WHERE ACCOUNT_ID=:OLD_CLIENT_ID;

  DELETE FROM /*PRFEIX*/ACCOUNTS
        WHERE ACCOUNT_ID=:OLD_CLIENT_ID;
END;

--

DROP VIEW S_FIRM_DISCOUNTS

--

DROP PROCEDURE I_FIRM_DISCOUNT

--

DROP PROCEDURE U_FIRM_DISCOUNT

--

DROP PROCEDURE D_FIRM_DISCOUNT

--

DROP TABLE FIRM_DISCOUNTS

--

DROP VIEW S_ORDERS

--

DROP VIEW S_DISCOUNTS

--

DROP PROCEDURE I_DISCOUNT

--

DROP PROCEDURE U_DISCOUNT

--

DROP PROCEDURE D_DISCOUNT

--

CREATE TABLE /*PREFIX*/DISCOUNT_TYPES
(
  DISCOUNT_TYPE_ID VARCHAR(32) NOT NULL,
  NAME VARCHAR(100) NOT NULL,
  DESCRIPTION VARCHAR(250),
  TYPE_CALC INTEGER NOT NULL,
  PERCENT NUMERIC(4,2),
  DISCOUNT_SUM NUMERIC(15,2),
  PROC_NAME VARCHAR(100),
  PRIORITY INTEGER,
  PRIMARY KEY (DISCOUNT_TYPE_ID)
)

--

CREATE VIEW /*PREFIX*/S_DISCOUNT_TYPES
AS
SELECT * FROM /*PREFIX*/DISCOUNT_TYPES

--

CREATE PROCEDURE /*PREFIX*/I_DISCOUNT_TYPE
(
  DISCOUNT_TYPE_ID VARCHAR(32),
  NAME VARCHAR(100),
  DESCRIPTION VARCHAR(250),
  TYPE_CALC INTEGER,
  PERCENT NUMERIC(4,2),
  DISCOUNT_SUM NUMERIC(15,2),
  PROC_NAME VARCHAR(100),
  PRIORITY INTEGER
)
AS
BEGIN
  INSERT INTO /*PREFIX*/DISCOUNT_TYPES (DISCOUNT_TYPE_ID,NAME,DESCRIPTION,TYPE_CALC,
                                        PERCENT,DISCOUNT_SUM,PROC_NAME,PRIORITY)
       VALUES (:DISCOUNT_TYPE_ID,:NAME,:DESCRIPTION,:TYPE_CALC,
               :PERCENT,:DISCOUNT_SUM,:PROC_NAME,:PRIORITY);
END;

--

CREATE PROCEDURE /*PREFIX*/U_DISCOUNT_TYPE
(
  DISCOUNT_TYPE_ID VARCHAR(32),
  NAME VARCHAR(100),
  DESCRIPTION VARCHAR(250),
  TYPE_CALC INTEGER,
  PERCENT NUMERIC(4,2),
  DISCOUNT_SUM NUMERIC(15,2),
  PROC_NAME VARCHAR(100),
  PRIORITY INTEGER,
  OLD_DISCOUNT_TYPE_ID VARCHAR(32)
)
AS
BEGIN
  UPDATE /*PREFIX*/DISCOUNT_TYPES
     SET DISCOUNT_TYPE_ID=:DISCOUNT_TYPE_ID,
         NAME=:NAME,
         DESCRIPTION=:DESCRIPTION,
         TYPE_CALC=:TYPE_CALC,
         PERCENT=:PERCENT,
         DISCOUNT_SUM=:DISCOUNT_SUM,
         PROC_NAME=:PROC_NAME,
         PRIORITY=:PRIORITY
   WHERE DISCOUNT_TYPE_ID=:OLD_DISCOUNT_TYPE_ID;
END;

--

CREATE PROCEDURE /*PREFIX*/D_DISCOUNT_TYPE
(
  OLD_DISCOUNT_TYPE_ID VARCHAR(32)
)
AS
BEGIN
  DELETE FROM /*PREFIX*/DISCOUNT_TYPES
        WHERE DISCOUNT_TYPE_ID=:OLD_DISCOUNT_TYPE_ID;
END;

--

UPDATE ORDERS
SET DISCOUNT_ID=NULL

--

DELETE FROM DISCOUNTS

--

ALTER TABLE DISCOUNTS
DROP PRIORITY

--

ALTER TABLE DISCOUNTS
DROP PROC_NAME

--

ALTER TABLE DISCOUNTS
DROP DISCOUNT_SUM

--

ALTER TABLE DISCOUNTS
DROP PERCENT

--

ALTER TABLE DISCOUNTS
DROP TYPE_DISCOUNT

--

ALTER TABLE DISCOUNTS
DROP DESCRIPTION

--

ALTER TABLE DISCOUNTS
DROP NAME

--

ALTER TABLE DISCOUNTS
ADD DISCOUNT_TYPE_ID VARCHAR(32) NOT NULL

--

ALTER TABLE DISCOUNTS
ADD CLIENT_ID VARCHAR(32) NOT NULL

--

ALTER TABLE DISCOUNTS
ADD NUM VARCHAR(100) NOT NULL

--

ALTER TABLE DISCOUNTS
ADD DATE_BEGIN DATE NOT NULL

--

ALTER TABLE DISCOUNTS
ADD DATE_END DATE

--

ALTER TABLE DISCOUNTS
ADD PRIORITY INTEGER

--

ALTER TABLE DISCOUNTS
ADD FOREIGN KEY (DISCOUNT_TYPE_ID) REFERENCES DISCOUNT_TYPES (DISCOUNT_TYPE_ID)

--

ALTER TABLE DISCOUNTS
ADD FOREIGN KEY (CLIENT_ID) REFERENCES CLIENTS (CLIENT_ID)

--

CREATE VIEW /*PREFIX*/S_DISCOUNTS
(
  DISCOUNT_ID,
  DISCOUNT_TYPE_ID,
  CLIENT_ID,
  NUM,
  DATE_BEGIN,
  DATE_END,
  PRIORITY,
  DISCOUNT_TYPE_NAME,
  TYPE_CALC,
  PERCENT,
  DISCOUNT_SUM,
  PROC_NAME,
  USER_NAME
)
AS
SELECT D.*,
       DT.NAME AS DISCOUNT_TYPE_NAME,
       DT.TYPE_CALC,
       DT.PERCENT,
       DT.DISCOUNT_SUM,
       DT.PROC_NAME,
       A.USER_NAME
  FROM /*PREFIX*/DISCOUNTS D
  JOIN /*PREFIX*/DISCOUNT_TYPES DT ON DT.DISCOUNT_TYPE_ID=D.DISCOUNT_TYPE_ID
  JOIN /*PREFIX*/CLIENTS C ON C.CLIENT_ID=D.CLIENT_ID
  JOIN /*PREFIX*/ACCOUNTS A ON A.ACCOUNT_ID=C.CLIENT_ID

--

CREATE PROCEDURE /*PREFIX*/I_DISCOUNT
(
  DISCOUNT_ID VARCHAR(32),
  DISCOUNT_TYPE_ID VARCHAR(32),
  CLIENT_ID VARCHAR(32),
  NUM VARCHAR(100),
  DATE_BEGIN DATE,
  DATE_END DATE,
  PRIORITY INTEGER
)
AS
BEGIN
  INSERT INTO /*PREFIX*/DISCOUNTS (DISCOUNT_ID,DISCOUNT_TYPE_ID,CLIENT_ID,NUM,
                                   DATE_BEGIN,DATE_END,PRIORITY)
       VALUES (:DISCOUNT_ID,:DISCOUNT_TYPE_ID,:CLIENT_ID,:NUM,
               :DATE_BEGIN,:DATE_END,:PRIORITY);
END;

--

CREATE PROCEDURE /*PREFIX*/U_DISCOUNT
(
  DISCOUNT_ID VARCHAR(32),
  DISCOUNT_TYPE_ID VARCHAR(32),
  CLIENT_ID VARCHAR(32),
  NUM VARCHAR(100),
  DATE_BEGIN DATE,
  DATE_END DATE,
  PRIORITY INTEGER,
  OLD_DISCOUNT_ID VARCHAR(32)
)
AS
BEGIN
  UPDATE /*PREFIX*/DISCOUNTS
     SET DISCOUNT_ID=:DISCOUNT_ID,
         DISCOUNT_TYPE_ID=:DISCOUNT_TYPE_ID,
         CLIENT_ID=:CLIENT_ID,
         NUM=:NUM,
         DATE_BEGIN=:DATE_BEGIN,
         DATE_END=:DATE_END,
         PRIORITY=:PRIORITY
   WHERE DISCOUNT_ID=:OLD_DISCOUNT_ID;
END;

--

CREATE PROCEDURE /*PREFIX*/D_DISCOUNT
(
  OLD_DISCOUNT_ID VARCHAR(32)
)
AS
BEGIN
  DELETE FROM /*PREFIX*/DISCOUNTS 
        WHERE DISCOUNT_ID=:OLD_DISCOUNT_ID;
END;

--

UPDATE ORDERS
SET FIRM_ID=NULL

--

DROP PROCEDURE D_ORDER

--

DROP PROCEDURE I_ORDER

--

DROP PROCEDURE U_ORDER

--

DROP PROCEDURE PROCESS_RESULT

--

DROP PROCEDURE CREATE_ORDER_HISTORY

--

ALTER TABLE ORDERS
DROP FIRM_ID

--

ALTER TABLE ORDERS
ADD CLIENT_ID VARCHAR(32)

--

ALTER TABLE ORDERS
ADD FOREIGN KEY (CLIENT_ID) REFERENCES CLIENTS (CLIENT_ID)

--

ALTER TABLE ORDERS
ADD COST_GROSS NUMERIC (15,2)

--

UPDATE ORDERS
   SET COST_GROSS=COST_RATE

--

CREATE VIEW S_ORDERS
(
    ORDER_ID,
    ACTION_ID,
    RATE_ID,
    CAR_TYPE_ID,
    WHO_ACCEPT_ID,
    STREET_ID,
    ZONE_ID,
    PARENT_ID,
    CAR_ID,
    WHO_PROCESS_ID,
    WHO_HISTORY_ID,
    RESULT_ID,
    PARK_ID,
    SOURCE_ID,
    DISCOUNT_ID,
    DRIVER_ID,
    ORDER_NUM,
    PHONE,
    HOUSE,
    FLAT,
    PORCH,
    DATE_ACCEPT,
    DATE_ARRIVAL,
    DATE_BEGIN,
    DATE_END,
    CUSTOMER,
    DESCRIPTION,
    COST_RATE,
    COST_FACT,
    TYPE_ACCEPT,
    TYPE_PROCESS,
    DATE_HISTORY,
    BEFORE_PERIOD,
    FINISHED,
    LOCKED,
    CLIENT_ID,
    COST_GROSS,
    ACTION_NAME,
    ACTION_BRUSH_COLOR,
    ACTION_FONT_COLOR,
    ACTION_PERIOD,
    RATE_NAME,
    CAR_TYPE_NAME,
    WHO_ACCEPT,
    STREET_NAME,
    STREET_PREFIX,
    LOCALITY_ID,
    LOCALITY_NAME,
    LOCALITY_PREFIX,
    ZONE_NAME,
    PARENT_ORDER_NUM,
    CLIENT_USER_NAME,
    CLIENT_SURNAME,
    CLIENT_NAME,
    CLIENT_PATRONYMIC,
    FIRM_SMALL_NAME,
    CAR_BRAND,
    CAR_STATE_NUM,
    CAR_COLOR,
    CAR_CALLSIGN,
    WHO_PROCESS,
    WHO_HISTORY,
    RESULT_NAME,
    RESULT_BRUSH_COLOR,
    RESULT_FONT_COLOR,
    PARK_NAME,
    PARK_DESCRIPTION,
    SOURCE_NAME,
    DISCOUNT_NUM,
    DISCOUNT_TYPE_NAME,
    DRIVER_NAME,
    DRIVER_PHONE,
    STATUS,
    ROUTE_STREET_ID,
    ROUTE_STREET_NAME,
    ROUTE_STREET_PREFIX,
    ROUTE_LOCALITY_ID,
    ROUTE_LOCALITY_NAME,
    ROUTE_LOCALITY_PREFIX,
    ROUTE_HOUSE,
    ROUTE_FLAT,
    ROUTE_PORCH,
    ROUTE_ZONE_ID,
    ROUTE_ZONE_NAME)
AS
SELECT O.*,
       A.NAME AS ACTION_NAME,
       A.BRUSH_COLOR AS ACTION_BRUSH_COLOR,
       A.FONT_COLOR AS ACTION_FONT_COLOR,
       A.PERIOD AS ACTION_PERIOD,
       R.NAME AS RATE_NAME,
       CT.NAME AS CAR_TYPE_NAME,
       A1.USER_NAME AS WHO_ACCEPT,
       S1.NAME AS STREET_NAME,
       S1.PREFIX AS STREET_PREFIX,
       L1.LOCALITY_ID,
       L1.NAME AS LOCALITY_NAME,
       L1.PREFIX AS LOCALITY_PREFIX,
       Z1.NAME AS ZONE_NAME,
       OP.ORDER_NUM AS PARENT_ORDER_NUM,
       A5.USER_NAME AS CLIENT_USER_NAME,
       A5.SURNAME AS CLIENT_SURNAME,
       A5.NAME AS CLIENT_NAME,
       A5.PATRONYMIC AS CLIENT_PATRONYMIC,
       F.SMALL_NAME AS FIRM_SMALL_NAME,
       C.BRAND AS CAR_BRAND,
       C.STATE_NUM AS CAR_STATE_NUM,
       C.COLOR AS CAR_COLOR,
       C.CALLSIGN AS CAR_CALLSIGN,
       A2.USER_NAME AS WHO_PROCESS,
       A4.USER_NAME AS WHO_HISTORY,
       RT.NAME AS RESULT_NAME,
       RT.BRUSH_COLOR AS RESULT_BRUSH_COLOR,
       RT.FONT_COLOR AS RESULT_FONT_COLOR,
       P.NAME AS PARK_NAME,
       P.DESCRIPTION AS PARK_DESCRIPTION,
       S.NAME AS SOURCE_NAME,
       D.NUM AS DISCOUNT_NUM,
       DT.NAME AS DISCOUNT_TYPE_NAME,
       A3.USER_NAME AS DRIVER_NAME,
       A3.PHONE AS DRIVER_PHONE,
       (CASE WHEN (O.FINISHED=0) AND (CURRENT_TIMESTAMP>=(O.DATE_ARRIVAL-(O.BEFORE_PERIOD*(1e0/24/60)))) THEN 0
             WHEN (O.FINISHED=0) AND (CURRENT_TIMESTAMP<(O.DATE_ARRIVAL-(O.BEFORE_PERIOD*(1e0/24/60)))) THEN 1
             WHEN O.FINISHED=1 THEN 2
        ELSE 0 END) AS STATUS,
       S2.STREET_ID AS ROUTE_STREET_ID,
       S2.NAME AS ROUTE_STREET_NAME,
       S2.PREFIX AS ROUTE_STREET_PREFIX,
       L2.LOCALITY_ID AS ROUTE_LOCALITY_ID,
       L2.NAME AS ROUTE_LOCALITY_NAME,
       L2.PREFIX AS ROUTE_LOCALITY_PREFIX,
       RO.HOUSE AS ROUTE_HOUSE,
       RO.FLAT AS ROUTE_FLAT,
       RO.PORCH AS ROUTE_PORCH,
       RO.ZONE_ID AS ROUTE_ZONE_ID,
       Z2.NAME AS ROUTE_ZONE_NAME

  FROM /*PREFIX*/ORDERS O
  JOIN /*PREFIX*/ACTIONS A ON A.ACTION_ID=O.ACTION_ID
  JOIN /*PREFIX*/RATES R ON R.RATE_ID=O.RATE_ID
  JOIN /*PREFIX*/CAR_TYPES CT ON CT.CAR_TYPE_ID=O.CAR_TYPE_ID
  JOIN /*PERFIX*/ACCOUNTS A1 ON A1.ACCOUNT_ID=O.WHO_ACCEPT_ID
  JOIN /*PREFIX*/STREETS S1 ON S1.STREET_ID=O.STREET_ID
  JOIN /*PREFIX*/LOCALITIES L1 ON L1.LOCALITY_ID=S1.LOCALITY_ID
  LEFT JOIN /*PREFIX*/ZONES Z1 ON Z1.ZONE_ID=O.ZONE_ID
  LEFT JOIN /*PERFIX*/ORDERS OP ON OP.ORDER_ID=O.PARENT_ID
  LEFT JOIN /*PERFIX*/CLIENTS CL ON CL.CLIENT_ID=O.CLIENT_ID
  LEFT JOIN /*PREFIX*/ACCOUNTS A5 ON A5.ACCOUNT_ID=CL.CLIENT_ID
  LEFT JOIN /*PREFIX*/FIRMS F ON F.FIRM_ID=A5.FIRM_ID
  LEFT JOIN /*PERFIX*/CARS C ON C.CAR_ID=O.CAR_ID
  LEFT JOIN /*PERFIX*/ACCOUNTS A2 ON A2.ACCOUNT_ID=O.WHO_PROCESS_ID
  LEFT JOIN /*PERFIX*/ACCOUNTS A4 ON A4.ACCOUNT_ID=O.WHO_HISTORY_ID
  LEFT JOIN /*PERFIX*/RESULTS RT ON RT.RESULT_ID=O.RESULT_ID
  LEFT JOIN /*PERFIX*/PARKS P ON P.PARK_ID=O.PARK_ID
  LEFT JOIN /*PERFIX*/SOURCES S ON S.SOURCE_ID=O.SOURCE_ID
  LEFT JOIN /*PERFIX*/DISCOUNTS D ON D.DISCOUNT_ID=O.DISCOUNT_ID
  LEFT JOIN /*PREFIX*/DISCOUNT_TYPES DT ON DT.DISCOUNT_TYPE_ID=D.DISCOUNT_TYPE_ID
  LEFT JOIN /*PERFIX*/DRIVERS DR ON DR.DRIVER_ID=O.DRIVER_ID
  LEFT JOIN /*PERFIX*/ACCOUNTS A3 ON A3.ACCOUNT_ID=DR.DRIVER_ID
  LEFT JOIN /*PREFIX*/ROUTES RO ON RO.ORDER_ID=O.ORDER_ID
                                AND RO.PRIORITY=(SELECT MAX(PRIORITY)
                                                   FROM /*PREFIX*/ROUTES
                                                  WHERE ORDER_ID=O.ORDER_ID)
  LEFT JOIN /*PREFIX*/STREETS S2 ON S2.STREET_ID=RO.STREET_ID
  LEFT JOIN /*PREFIX*/LOCALITIES L2 ON L2.LOCALITY_ID=S2.LOCALITY_ID
  LEFT JOIN /*PREFIX*/ZONES Z2 ON Z2.ZONE_ID=RO.ZONE_ID

--

CREATE OR ALTER PROCEDURE D_ORDER (
  OLD_ORDER_ID VARCHAR(32))
AS
BEGIN
  DELETE FROM /*PREFIX*/ROUTES
   WHERE ORDER_ID IN (SELECT ORDER_ID FROM /*PREFIX*/ORDERS
                       WHERE PARENT_ID=:OLD_ORDER_ID);

  DELETE FROM /*PREFIX*/ORDER_SERVICES
   WHERE ORDER_ID IN (SELECT ORDER_ID FROM /*PREFIX*/ORDERS
                       WHERE PARENT_ID=:OLD_ORDER_ID);

  DELETE FROM /*PREFIX*/ORDERS
        WHERE PARENT_ID=:OLD_ORDER_ID;

  DELETE FROM /*PREFIX*/ROUTES
   WHERE ORDER_ID=:OLD_ORDER_ID;

  DELETE FROM /*PREFIX*/ORDER_SERVICES
   WHERE ORDER_ID=:OLD_ORDER_ID;

  DELETE FROM /*PREFIX*/ORDERS
        WHERE ORDER_ID=:OLD_ORDER_ID;
END

--

CREATE OR ALTER PROCEDURE I_ORDER (
  ORDER_ID VARCHAR(32),
  ACTION_ID VARCHAR(32),
  RATE_ID VARCHAR(32),
  CAR_TYPE_ID VARCHAR(32),
  WHO_ACCEPT_ID VARCHAR(32),
  STREET_ID VARCHAR(32),
  ZONE_ID VARCHAR(32),
  PARENT_ID VARCHAR(32),
  CAR_ID VARCHAR(32),
  WHO_PROCESS_ID VARCHAR(32),
  RESULT_ID VARCHAR(32),
  PARK_ID VARCHAR(32),
  SOURCE_ID VARCHAR(32),
  DISCOUNT_ID VARCHAR(32),
  DRIVER_ID VARCHAR(32),
  ORDER_NUM VARCHAR(10),
  PHONE VARCHAR(100),
  HOUSE VARCHAR(10),
  FLAT VARCHAR(10),
  PORCH VARCHAR(10),
  DATE_ACCEPT TIMESTAMP,
  DATE_ARRIVAL TIMESTAMP,
  DATE_BEGIN TIMESTAMP,
  DATE_END TIMESTAMP,
  CUSTOMER VARCHAR(250),
  DESCRIPTION VARCHAR(250),
  COST_RATE NUMERIC(15,2),
  COST_FACT NUMERIC(15,2),
  TYPE_ACCEPT INTEGER,
  TYPE_PROCESS INTEGER,
  DATE_HISTORY TIMESTAMP,
  WHO_HISTORY_ID VARCHAR(32),
  BEFORE_PERIOD INTEGER,
  FINISHED INTEGER,
  LOCKED VARCHAR(32),
  CLIENT_ID VARCHAR(32),
  COST_GROSS NUMERIC(15,2)
)
AS
  DECLARE CNT INTEGER;
  DECLARE ACCOUNT_ID VARCHAR(32);
  DECLARE USER_NAME VARCHAR(100);
BEGIN

  IF (CLIENT_ID IS NULL) THEN BEGIN

    SELECT COUNT(*)
      FROM /*PREFIX*/CLIENTS C
      JOIN /*PREFIX*/ACCOUNTS A ON A.ACCOUNT_ID=C.CLIENT_ID
     WHERE A.PHONE=:PHONE
      INTO :CNT;

    IF (CNT=0) THEN BEGIN

      ACCOUNT_ID=/*PREFIX*/GET_UNIQUE_ID();
      IF (CUSTOMER IS NOT NULL) THEN
        USER_NAME=/*PREFIX*/SUB_STRING(CUSTOMER,1,100);
      IF (USER_NAME IS NULL) THEN
        USER_NAME=PHONE;

      INSERT INTO /*PREFIX*/ACCOUNTS (ACCOUNT_ID,DATE_CREATE,USER_NAME,PHONE,IS_ROLE,LOCKED)
                              VALUES (:ACCOUNT_ID,CURRENT_TIMESTAMP,:USER_NAME,:PHONE,0,0);

      CLIENT_ID=ACCOUNT_ID;

      INSERT INTO /*PREFIX*/CLIENTS (CLIENT_ID,SOURCE_ID,STREET_ID,HOUSE,FLAT,PORCH,ADDRESS_DESC)
                             VALUES (:CLIENT_ID,:SOURCE_ID,:STREET_ID,:HOUSE,:FLAT,:PORCH,:DESCRIPTION);

    END

  END

  INSERT INTO /*PREFIX*/ORDERS (ORDER_ID,ACTION_ID,RATE_ID,CAR_TYPE_ID,WHO_ACCEPT_ID,
                                STREET_ID,ZONE_ID,PARENT_ID,
                                CAR_ID,WHO_PROCESS_ID,RESULT_ID,PARK_ID,
                                SOURCE_ID,DISCOUNT_ID,DRIVER_ID,ORDER_NUM,PHONE,
                                HOUSE,FLAT,PORCH,
                                DATE_ACCEPT,DATE_ARRIVAL,DATE_BEGIN,DATE_END,CUSTOMER,
                                DESCRIPTION,COST_RATE,COST_FACT,TYPE_ACCEPT,
                                TYPE_PROCESS,DATE_HISTORY,WHO_HISTORY_ID,BEFORE_PERIOD,
                                FINISHED,LOCKED,CLIENT_ID,COST_GROSS)
       VALUES (:ORDER_ID,:ACTION_ID,:RATE_ID,:CAR_TYPE_ID,:WHO_ACCEPT_ID,
               :STREET_ID,:ZONE_ID,:PARENT_ID,
               :CAR_ID,:WHO_PROCESS_ID,:RESULT_ID,:PARK_ID,
               :SOURCE_ID,:DISCOUNT_ID,:DRIVER_ID,:ORDER_NUM,:PHONE,
               :HOUSE,:FLAT,:PORCH,
               :DATE_ACCEPT,:DATE_ARRIVAL,:DATE_BEGIN,:DATE_END,:CUSTOMER,
               :DESCRIPTION,:COST_RATE,:COST_FACT,:TYPE_ACCEPT,
               :TYPE_PROCESS,:DATE_HISTORY,:WHO_HISTORY_ID,:BEFORE_PERIOD,
               :FINISHED,:LOCKED,:CLIENT_ID,:COST_GROSS);
END

--

CREATE OR ALTER PROCEDURE U_ORDER (
  ORDER_ID VARCHAR(32),
  ACTION_ID VARCHAR(32),
  RATE_ID VARCHAR(32),
  CAR_TYPE_ID VARCHAR(32),
  WHO_ACCEPT_ID VARCHAR(32),
  STREET_ID VARCHAR(32),
  ZONE_ID VARCHAR(32),
  PARENT_ID VARCHAR(32),
  CAR_ID VARCHAR(32),
  WHO_PROCESS_ID VARCHAR(32),
  RESULT_ID VARCHAR(32),
  PARK_ID VARCHAR(32),
  SOURCE_ID VARCHAR(32),
  DISCOUNT_ID VARCHAR(32),
  DRIVER_ID VARCHAR(32),
  ORDER_NUM VARCHAR(10),
  PHONE VARCHAR(100),
  HOUSE VARCHAR(10),
  FLAT VARCHAR(10),
  PORCH VARCHAR(10),
  DATE_ACCEPT TIMESTAMP,
  DATE_ARRIVAL TIMESTAMP,
  DATE_BEGIN TIMESTAMP,
  DATE_END TIMESTAMP,
  CUSTOMER VARCHAR(250),
  DESCRIPTION VARCHAR(250),
  COST_RATE NUMERIC(15,2),
  COST_FACT NUMERIC(15,2),
  TYPE_ACCEPT INTEGER,
  TYPE_PROCESS INTEGER,
  DATE_HISTORY TIMESTAMP,
  WHO_HISTORY_ID VARCHAR(32),
  BEFORE_PERIOD INTEGER,
  FINISHED INTEGER,
  LOCKED VARCHAR(32),
  CLIENT_ID VARCHAR(32),
  COST_GROSS NUMERIC(15,2),
  OLD_ORDER_ID VARCHAR(32))
AS
  DECLARE RECIPIENT_ID VARCHAR(32);
  DECLARE OLD_COST_RATE NUMERIC(15,2);
  DECLARE S VARCHAR(70);
BEGIN
  UPDATE /*PREFIX*/ORDERS
     SET ORDER_ID=:ORDER_ID,
         ACTION_ID=:ACTION_ID,
         RATE_ID=:RATE_ID,
         CAR_TYPE_ID=:CAR_TYPE_ID,
         WHO_ACCEPT_ID=:WHO_ACCEPT_ID,
         STREET_ID=:STREET_ID,
         ZONE_ID=:ZONE_ID,
         PARENT_ID=:PARENT_ID,
         CAR_ID=:CAR_ID,
         WHO_PROCESS_ID=:WHO_PROCESS_ID,
         RESULT_ID=:RESULT_ID,
         PARK_ID=:PARK_ID,
         SOURCE_ID=:SOURCE_ID,
         DISCOUNT_ID=:DISCOUNT_ID,
         DRIVER_ID=:DRIVER_ID,
         ORDER_NUM=:ORDER_NUM,
         PHONE=:PHONE,
         HOUSE=:HOUSE,
         FLAT=:FLAT,
         PORCH=:PORCH,
         DATE_ACCEPT=:DATE_ACCEPT,
         DATE_ARRIVAL=:DATE_ARRIVAL,
         DATE_BEGIN=:DATE_BEGIN,
         DATE_END=:DATE_END,
         CUSTOMER=:CUSTOMER,
         DESCRIPTION=:DESCRIPTION,
         COST_RATE=:COST_RATE,
         COST_FACT=:COST_FACT,
         TYPE_ACCEPT=:TYPE_ACCEPT,
         TYPE_PROCESS=:TYPE_PROCESS,
         DATE_HISTORY=:DATE_HISTORY,
         WHO_HISTORY_ID=:WHO_HISTORY_ID,
         BEFORE_PERIOD=:BEFORE_PERIOD,
         FINISHED=:FINISHED,
         LOCKED=:LOCKED,
         CLIENT_ID=:CLIENT_ID,
         COST_GROSS=:COST_GROSS
   WHERE ORDER_ID=:OLD_ORDER_ID;

  OLD_COST_RATE=NULL;

  FOR SELECT COST_RATE
        FROM ORDERS
       WHERE PARENT_ID=:OLD_ORDER_ID
         AND DATE_HISTORY IS NOT NULL
       ORDER BY DATE_HISTORY DESC
        INTO :OLD_COST_RATE DO BEGIN

    IF (OLD_COST_RATE IS NOT NULL) THEN
      BREAK;

  END

  IF ((COST_RATE IS NOT NULL) AND (OLD_COST_RATE<>COST_RATE) AND (WHO_PROCESS_ID IS NOT NULL)) THEN BEGIN

    IF (SUBSTR(PHONE,1,3)='+79')  THEN BEGIN

      RECIPIENT_ID=NULL;

      FOR SELECT ACCOUNT_ID
            FROM ACCOUNTS
           WHERE PHONE=:PHONE
            INTO :RECIPIENT_ID DO BEGIN

        IF (RECIPIENT_ID IS NOT NULL) THEN
          BREAK;
      END

      SELECT CONST_VALUE FROM GET_CONST_VALUE('6F6E5F38806C896B43AC16E69914EFFA') INTO :S;

      IF (S IS NOT NULL) THEN BEGIN

        S=REPLACE_STRING(S,'%COST_RATE',CAST(COST_RATE AS VARCHAR(30)));

        INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                  TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                          VALUES (GET_UNIQUE_ID(),:WHO_PROCESS_ID,:RECIPIENT_ID,CURRENT_TIMESTAMP,
                                  :S,NULL,0,:PHONE,NULL,1,NULL,CURRENT_TIMESTAMP);
      END

    END

  END

END

--

CREATE OR ALTER PROCEDURE CREATE_ORDER_HISTORY (
  OLD_ORDER_ID VARCHAR(32),
  NEW_ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32),
  ACTION_ID VARCHAR(32),
  RESULT_ID VARCHAR(32),
  TYPE_PROCESS INTEGER,
  DATE_BEGIN TIMESTAMP,
  WITH_DEPENDS INTEGER)
AS
BEGIN

  INSERT INTO /*PREFIX*/ORDERS (ORDER_ID,PARENT_ID,ACTION_ID,RATE_ID,CAR_TYPE_ID,
                                WHO_ACCEPT_ID,STREET_ID,ZONE_ID,CAR_ID,
                                WHO_PROCESS_ID,RESULT_ID,PARK_ID,SOURCE_ID,DISCOUNT_ID,
                                DRIVER_ID,ORDER_NUM,PHONE,HOUSE,FLAT,PORCH,
                                DATE_ACCEPT,DATE_ARRIVAL,DATE_BEGIN,DATE_END,CUSTOMER,
                                DESCRIPTION,COST_RATE,COST_FACT,TYPE_ACCEPT,
                                TYPE_PROCESS,DATE_HISTORY,WHO_HISTORY_ID,BEFORE_PERIOD,
                                FINISHED,LOCKED,CLIENT_ID,COST_GROSS)
  SELECT :NEW_ORDER_ID,NULL,:ACTION_ID,RATE_ID,CAR_TYPE_ID,
         WHO_ACCEPT_ID,STREET_ID,ZONE_ID,CAR_ID,
         NULL,:RESULT_ID,PARK_ID,SOURCE_ID,DISCOUNT_ID,
         DRIVER_ID,ORDER_NUM,PHONE,HOUSE,FLAT,PORCH,
         DATE_ACCEPT,DATE_ARRIVAL,:DATE_BEGIN,NULL,CUSTOMER,
         DESCRIPTION,COST_RATE,COST_FACT,TYPE_ACCEPT,
         :TYPE_PROCESS,NULL,NULL,BEFORE_PERIOD,FINISHED,LOCKED,CLIENT_ID,COST_GROSS
    FROM /*PREFIX*/ORDERS
   WHERE ORDER_ID=:OLD_ORDER_ID;

  IF (WITH_DEPENDS IS NOT NULL) THEN BEGIN

    INSERT INTO /*PREFIX*/ROUTES (ROUTE_ID,ORDER_ID,ZONE_ID,STREET_ID,HOUSE,
                                  FLAT,PORCH,DISTANCE,COST,PERIOD,AMOUNT,PRIORITY)
    SELECT GET_UNIQUE_ID(),:NEW_ORDER_ID,ZONE_ID,STREET_ID,HOUSE,
           FLAT,PORCH,DISTANCE,COST,PERIOD,AMOUNT,PRIORITY
      FROM /*PREFIX*/ROUTES
     WHERE ORDER_ID=:OLD_ORDER_ID;


    INSERT INTO /*PREFIX*/ORDER_SERVICES (ORDER_ID,SERVICE_ID,COST,
                                          DESCRIPTION,AMOUNT,PRIORITY)
    SELECT :NEW_ORDER_ID,SERVICE_ID,COST,
           DESCRIPTION,AMOUNT,PRIORITY
      FROM /*PREFIX*/ORDER_SERVICES
     WHERE ORDER_ID=:OLD_ORDER_ID;

  END

  UPDATE /*PREFIX*/ORDERS
     SET PARENT_ID=:NEW_ORDER_ID,
         DATE_HISTORY=CURRENT_TIMESTAMP,
         WHO_HISTORY_ID=:ACCOUNT_ID
   WHERE ORDER_ID=:OLD_ORDER_ID;

  UPDATE /*PREFIX*/ORDERS
     SET PARENT_ID=:NEW_ORDER_ID
   WHERE PARENT_ID=:OLD_ORDER_ID;

END

--

CREATE OR ALTER PROCEDURE PROCESS_RESULT (
  OLD_ORDER_ID VARCHAR(32),
  NEW_ORDER_ID VARCHAR(32),
  RESULT_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32),
  TYPE_PROCESS INTEGER)
RETURNS (
  ORDER_ID VARCHAR(32))
AS
declare variable PROC_PROCESS varchar(100);
declare variable NEXT_ID varchar(100);
declare variable SQL varchar(1000);
declare variable AORDER_ID varchar(32);
BEGIN
  ORDER_ID=OLD_ORDER_ID;

  SELECT PROC_PROCESS, NEXT_ID
    FROM /*PREFIX*/RESULTS
   WHERE RESULT_ID=:RESULT_ID
    INTO :PROC_PROCESS, :NEXT_ID;

  UPDATE /*PREFIX*/ORDERS
     SET RESULT_ID=:RESULT_ID,
         DATE_END=CURRENT_TIMESTAMP
   WHERE ORDER_ID=:OLD_ORDER_ID;

  IF (NEXT_ID IS NOT NULL) THEN BEGIN

    EXECUTE PROCEDURE /*PREFIX*/CREATE_ORDER_HISTORY(OLD_ORDER_ID,NEW_ORDER_ID,ACCOUNT_ID,
                                                     NEXT_ID,NULL,TYPE_PROCESS,CURRENT_TIMESTAMP,1);
    ORDER_ID=NEW_ORDER_ID;
  END


  IF (TRIM(PROC_PROCESS)<>'') THEN BEGIN

    SQL='EXECUTE PROCEDURE '||PROC_PROCESS||'('''||ORDER_ID||''','''||ACCOUNT_ID||''');';
    EXECUTE STATEMENT SQL;

  END
END

--

CREATE GENERATOR GEN_CLIENT_USER_NAME

--

CREATE PROCEDURE /*PREFIX*/GET_CLIENT_USER_NAME
RETURNS
(
  USER_NAME VARCHAR(10)
)
AS
BEGIN
  SELECT GEN_ID(/*PREFIX*/GEN_CLIENT_USER_NAME,1)
    FROM RDB$DATABASE
    INTO USER_NAME;
END

--

ALTER TABLE IN_MESSAGES
ADD ORDER_ID VARCHAR(32)

--

ALTER TABLE IN_MESSAGES
ADD FOREIGN KEY(ORDER_ID) REFERENCES ORDERS(ORDER_ID)

--

ALTER TABLE IN_MESSAGES
ADD CHANNEL VARCHAR(100)

--

DROP VIEW /*PREFIX*/S_IN_MESSAGES

--

CREATE VIEW /*PREFIX*/S_IN_MESSAGES
(
  IN_MESSAGE_ID,
  SENDER_ID,
  CODE_MESSAGE_ID,
  DATE_SEND,
  TEXT_IN,
  DATE_IN,
  TYPE_MESSAGE,
  CONTACT,
  ORDER_ID,
  CHANNEL,
  SENDER_NAME,
  CODE
)
AS
SELECT IM.*,
       A.USER_NAME AS SENDER_NAME,
       CM.CODE
  FROM /*PREFIX*/IN_MESSAGES IM
  LEFT JOIN /*PREFIX*/ACCOUNTS A ON A.ACCOUNT_ID=IM.SENDER_ID
  LEFT JOIN /*PREFIX*/CODE_MESSAGES CM ON CM.CODE_MESSAGE_ID=IM.CODE_MESSAGE_ID

--

CREATE OR ALTER PROCEDURE /*PREFIX*/I_IN_MESSAGE
(
  IN_MESSAGE_ID VARCHAR(32),
  SENDER_ID VARCHAR(32),
  CODE_MESSAGE_ID VARCHAR(32),
  DATE_SEND TIMESTAMP,
  TEXT_IN VARCHAR(4000),
  DATE_IN TIMESTAMP,
  TYPE_MESSAGE INTEGER,
  CONTACT VARCHAR(100),
  ORDER_ID VARCHAR(32),
  CHANNEL VARCHAR(100)
)
AS
BEGIN
  IF (DATE_IN IS NULL) THEN BEGIN
    DATE_IN=CURRENT_TIMESTAMP;
  END

  INSERT INTO /*PREFIX*/IN_MESSAGES (IN_MESSAGE_ID,SENDER_ID,CODE_MESSAGE_ID,DATE_SEND,
                                     TEXT_IN,DATE_IN,TYPE_MESSAGE,CONTACT,ORDER_ID,CHANNEL)
       VALUES (:IN_MESSAGE_ID,:SENDER_ID,:CODE_MESSAGE_ID,:DATE_SEND,
               :TEXT_IN,:DATE_IN,:TYPE_MESSAGE,:CONTACT,:ORDER_ID,:CHANNEL);
END;

--

CREATE OR ALTER PROCEDURE /*PREFIX*/U_IN_MESSAGE
(
  IN_MESSAGE_ID VARCHAR(32),
  SENDER_ID VARCHAR(32),
  CODE_MESSAGE_ID VARCHAR(32),
  DATE_SEND TIMESTAMP,
  TEXT_IN VARCHAR(4000),
  DATE_IN TIMESTAMP,
  TYPE_MESSAGE INTEGER,
  CONTACT VARCHAR(100),
  ORDER_ID VARCHAR(32),
  CHANNEL VARCHAR(100),
  OLD_IN_MESSAGE_ID VARCHAR(32)
)
AS
BEGIN
  UPDATE /*PREFIX*/IN_MESSAGES
     SET IN_MESSAGE_ID=:IN_MESSAGE_ID,
         SENDER_ID=:SENDER_ID,
         CODE_MESSAGE_ID=:CODE_MESSAGE_ID,
         DATE_SEND=:DATE_SEND,
         TEXT_IN=:TEXT_IN,
         DATE_IN=:DATE_IN,
         TYPE_MESSAGE=:TYPE_MESSAGE,
         CONTACT=:CONTACT,
         ORDER_ID=:ORDER_ID,
         CHANNEL=:CHANNEL
   WHERE IN_MESSAGE_ID=:OLD_IN_MESSAGE_ID;
END;

--

ALTER TABLE OUT_MESSAGES
ADD ORDER_ID VARCHAR(32)

--

ALTER TABLE OUT_MESSAGES
ADD FOREIGN KEY (ORDER_ID) REFERENCES ORDERS(ORDER_ID)

--

ALTER TABLE OUT_MESSAGES
ADD CHANNEL VARCHAR(100)

--

ALTER TABLE OUT_MESSAGES
ADD DELIVERY INTEGER

--

UPDATE OUT_MESSAGES
SET DELIVERY=0

--


ALTER TABLE OUT_MESSAGES
ADD DATE_DELIVERY TIMESTAMP

--

ALTER TABLE OUT_MESSAGES
ADD FLASH INTEGER

--

UPDATE OUT_MESSAGES
SET FLASH=0

--

DROP VIEW /*PREFIX*/S_OUT_MESSAGES

--

CREATE VIEW /*PREFIX*/S_OUT_MESSAGES
(
  OUT_MESSAGE_ID,
  CREATOR_ID,
  RECIPIENT_ID,
  DATE_CREATE,
  TEXT_OUT,
  DATE_OUT,
  TYPE_MESSAGE,
  CONTACT,
  DESCRIPTION,
  PRIORITY,
  LOCKED,
  DATE_BEGIN,
  DATE_END,
  ORDER_ID,
  CHANNEL,
  DELIVERY,
  DATE_DELIVERY,
  FLASH,
  CREATOR_NAME,
  RECIPIENT_NAME,
  RECIPIENT_PHONE,
  RECIPIENT_EMAIL
)
AS
SELECT OM.*,
       A1.USER_NAME AS CREATOR_NAME,
       A2.USER_NAME AS RECIPIENT_NAME,
       A2.PHONE AS RECIPIENT_PHONE,
       A2.EMAIL AS RECIPIENT_EMAIL
  FROM /*PREFIX*/OUT_MESSAGES OM
  JOIN /*PREFIX*/ACCOUNTS A1 ON A1.ACCOUNT_ID=OM.CREATOR_ID
  LEFT JOIN /*PREFIX*/ACCOUNTS A2 ON A2.ACCOUNT_ID=OM.RECIPIENT_ID

--

CREATE OR ALTER PROCEDURE /*PREFIX*/I_OUT_MESSAGE
(
  OUT_MESSAGE_ID VARCHAR(32),
  CREATOR_ID VARCHAR(32),
  RECIPIENT_ID VARCHAR(32),
  DATE_CREATE TIMESTAMP,
  TEXT_OUT VARCHAR(4000),
  DATE_OUT TIMESTAMP,
  TYPE_MESSAGE INTEGER,
  CONTACT VARCHAR(100),
  DESCRIPTION VARCHAR(250),
  PRIORITY INTEGER,
  LOCKED VARCHAR(32),
  DATE_BEGIN TIMESTAMP,
  DATE_END TIMESTAMP,
  ORDER_ID VARCHAR(32),
  CHANNEL VARCHAR(100),
  DELIVERY INTEGER,
  DATE_DELIVERY TIMESTAMP,
  FLASH INTEGER
)
AS
BEGIN
  INSERT INTO /*PREFIX*/OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                      TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,
                                      PRIORITY,DATE_BEGIN,DATE_END,ORDER_ID,CHANNEL,
                                      DELIVERY,DATE_DELIVERY,FLASH)
       VALUES (:OUT_MESSAGE_ID,:CREATOR_ID,:RECIPIENT_ID,:DATE_CREATE,
               :TEXT_OUT,:DATE_OUT,:TYPE_MESSAGE,:CONTACT,:DESCRIPTION,
               :PRIORITY,:DATE_BEGIN,:DATE_END,:ORDER_ID,:CHANNEL,
               :DELIVERY,:DATE_DELIVERY,:FLASH);
END;

--

CREATE OR ALTER PROCEDURE /*PREFIX*/U_OUT_MESSAGE
(
  OUT_MESSAGE_ID VARCHAR(32),
  CREATOR_ID VARCHAR(32),
  RECIPIENT_ID VARCHAR(32),
  DATE_CREATE TIMESTAMP,
  TEXT_OUT VARCHAR(4000),
  DATE_OUT TIMESTAMP,
  TYPE_MESSAGE INTEGER,
  CONTACT VARCHAR(100),
  DESCRIPTION VARCHAR(250),
  PRIORITY INTEGER,
  LOCKED VARCHAR(32),
  DATE_BEGIN TIMESTAMP,
  DATE_END TIMESTAMP,
  ORDER_ID VARCHAR(32),
  CHANNEL VARCHAR(100),
  DELIVERY INTEGER,
  DATE_DELIVERY TIMESTAMP,
  FLASH INTEGER,
  OLD_OUT_MESSAGE_ID VARCHAR(32)
)
AS
BEGIN
  UPDATE /*PREFIX*/OUT_MESSAGES
     SET OUT_MESSAGE_ID=:OUT_MESSAGE_ID,
         CREATOR_ID=:CREATOR_ID,
         RECIPIENT_ID=:RECIPIENT_ID,
         DATE_CREATE=:DATE_CREATE,
         TEXT_OUT=:TEXT_OUT,
         DATE_OUT=:DATE_OUT,
         TYPE_MESSAGE=:TYPE_MESSAGE,
         CONTACT=:CONTACT,
         DESCRIPTION=:DESCRIPTION,
         PRIORITY=:PRIORITY,
         LOCKED=:LOCKED,
         DATE_BEGIN=:DATE_BEGIN,
         DATE_END=:DATE_END,
         ORDER_ID=:ORDER_ID,
         CHANNEL=:CHANNEL,
         DELIVERY=:DELIVERY,
         DATE_DELIVERY=:DATE_DELIVERY,
         FLASH=:FLASH
   WHERE OUT_MESSAGE_ID=:OLD_OUT_MESSAGE_ID;
END;

--

CREATE OR ALTER PROCEDURE /*PREFIX*/D_OUT_MESSAGE
(
  OLD_OUT_MESSAGE_ID VARCHAR(32)
)
AS
BEGIN
  DELETE FROM /*PREFIX*/OUT_MESSAGES
        WHERE OUT_MESSAGE_ID=:OLD_OUT_MESSAGE_ID;
END;

--

CREATE OR ALTER PROCEDURE /*PREFIX*/D_ORDER
(
  OLD_ORDER_ID VARCHAR(32)
)
AS
BEGIN
  DELETE FROM /*PREFIX*/IN_MESSAGES
        WHERE ORDER_ID IN (SELECT ORDER_ID FROM /*PREFIX*/ORDERS
                            WHERE PARENT_ID=:OLD_ORDER_ID);

  DELETE FROM /*PREFIX*/OUT_MESSAGES
        WHERE ORDER_ID IN (SELECT ORDER_ID FROM /*PREFIX*/ORDERS
                            WHERE PARENT_ID=:OLD_ORDER_ID);

  DELETE FROM /*PREFIX*/ROUTES
        WHERE ORDER_ID IN (SELECT ORDER_ID FROM /*PREFIX*/ORDERS
                            WHERE PARENT_ID=:OLD_ORDER_ID);

  DELETE FROM /*PREFIX*/ORDER_SERVICES
        WHERE ORDER_ID IN (SELECT ORDER_ID FROM /*PREFIX*/ORDERS
                            WHERE PARENT_ID=:OLD_ORDER_ID);

  DELETE FROM /*PREFIX*/ORDERS
        WHERE PARENT_ID=:OLD_ORDER_ID;

  DELETE FROM /*PREFIX*/IN_MESSAGES
        WHERE ORDER_ID=:OLD_ORDER_ID;

  DELETE FROM /*PREFIX*/OUT_MESSAGES
        WHERE ORDER_ID=:OLD_ORDER_ID;

  DELETE FROM /*PREFIX*/ROUTES
        WHERE ORDER_ID=:OLD_ORDER_ID;

  DELETE FROM /*PREFIX*/ORDER_SERVICES
        WHERE ORDER_ID=:OLD_ORDER_ID;

  DELETE FROM /*PREFIX*/ORDERS
        WHERE ORDER_ID=:OLD_ORDER_ID;
END;

--

CREATE OR ALTER PROCEDURE LOCK_OUT_MESSAGES
(
  MAX_COUNT INTEGER,
  LOCKED VARCHAR(32),
  TYPE_MESSAGE INTEGER,
  PERIOD INTEGER,
  CHANNEL VARCHAR(100)
)
RETURNS (
  LOCK_COUNT INTEGER)
AS
DECLARE FLAG INTEGER;
DECLARE OUT_MESSAGE_ID VARCHAR(32);
DECLARE DATE_BEGIN TIMESTAMP;
DECLARE DATE_END TIMESTAMP;
DECLARE COMMON_PERIOD INTEGER;
DECLARE D TIMESTAMP;
DECLARE H INTEGER;
BEGIN
  LOCK_COUNT=0;

  FLAG=GEN_ID(GEN_LOCK_OUT_MESSAGES,0);

  IF (FLAG=0) THEN BEGIN

    FLAG=GEN_ID(GEN_LOCK_OUT_MESSAGES,-1);

    FOR SELECT OUT_MESSAGE_ID, DATE_BEGIN, DATE_END
          FROM /*PREFIX*/OUT_MESSAGES
         WHERE DATE_OUT IS NULL
           AND LOCKED IS NULL
           AND TYPE_MESSAGE=:TYPE_MESSAGE
         ORDER BY PRIORITY, DATE_BEGIN
          INTO :OUT_MESSAGE_ID, :DATE_BEGIN, :DATE_END DO BEGIN

      IF (DATE_END IS NOT NULL) THEN
        COMMON_PERIOD=(DATE_END-DATE_BEGIN)*1e0*1*24*60*60;
      ELSE
        COMMON_PERIOD=PERIOD;

      D=CURRENT_TIMESTAMP;
      H=EXTRACT(HOUR FROM D);
      IF (DATE_BEGIN<=D AND
          (DATE_BEGIN+(COMMON_PERIOD*(1e0/24/60/60)))>=D/* AND
          H>=8 AND H<20*/) THEN BEGIN

        IF (LOCK_COUNT<=MAX_COUNT) THEN BEGIN

          UPDATE /*PREFIX*/OUT_MESSAGES
             SET LOCKED=:LOCKED,
                 CHANNEL=:CHANNEL
           WHERE OUT_MESSAGE_ID=:OUT_MESSAGE_ID;

          LOCK_COUNT=LOCK_COUNT+1;

        END ELSE BEGIN
          BREAK;
        END

      END

    END

    FLAG=GEN_ID(GEN_LOCK_OUT_MESSAGES,1);

  END

END

--

CREATE OR ALTER PROCEDURE UNLOCK_OUT_MESSAGE (
  OUT_MESSAGE_ID VARCHAR(32),
  SENDED INTEGER,
  DATE_OUT TIMESTAMP)
AS
BEGIN
  IF (SENDED IS NULL) THEN
    SENDED=0;
  IF (SENDED<>0) THEN BEGIN

    IF (DATE_OUT IS NULL) THEN
      DATE_OUT=CURRENT_TIMESTAMP;

    UPDATE /*PREFIX*/OUT_MESSAGES
       SET DATE_OUT=:DATE_OUT,
           LOCKED=NULL
     WHERE OUT_MESSAGE_ID=:OUT_MESSAGE_ID;

  END ELSE BEGIN

    UPDATE /*PREFIX*/OUT_MESSAGES
       SET LOCKED=NULL,
           CHANNEL=NULL
     WHERE OUT_MESSAGE_ID=:OUT_MESSAGE_ID;

  END

END

--

DROP VIEW /*PREFIX*/S_DRIVER_SHIFTS

--

CREATE VIEW /*PREFIX*/S_DRIVER_SHIFTS(
    SHIFT_ID,
    DRIVER_ID,
    DATE_BEGIN,
    DATE_END,
    DRIVER_NAME,
    DRIVER_PHONE,
    CAR_ID,
    MIN_BALANCE,
    PRIORITY,
    CAR_COLOR,
    CAR_BRAND,
    CAR_STATE_NUM,
    CAR_CALLSIGN,
    CAR_TYPE_ID,
    CAR_TYPE_NAME,
    CAR_TYPE_FONT_COLOR,
    CAR_TYPE_BRUSH_COLOR,
    PARK_ID,
    PARK_NAME,
    PARK_DESCRIPTION)
AS
SELECT S.*,
       A.USER_NAME AS DRIVER_NAME,
       A.PHONE AS DRIVER_PHONE,
       D.CAR_ID,
       D.MIN_BALANCE,
       D.PRIORITY,
       C.COLOR AS CAR_COLOR,
       C.BRAND AS CAR_BRAND,
       C.STATE_NUM AS CAR_STATE_NUM,
       C.CALLSIGN AS CAR_CALLSIGN,
       C.CAR_TYPE_ID,
       CT.NAME AS CAR_TYPE_NAME,
       CT.FONT_COLOR AS CAR_TYPE_FONT_COLOR,
       CT.BRUSH_COLOR AS CAR_TYPE_BRUSH_COLOR,
       P.PARK_ID,
       P.NAME AS PARK_NAME,
       P.DESCRIPTION AS PARK_DESCRIPTION
  FROM /*PREFIX*/SHIFTS S
  JOIN /*PREFIX*/ACCOUNTS A ON A.ACCOUNT_ID=S.ACCOUNT_ID
  JOIN /*PREFIX*/DRIVERS D ON D.DRIVER_ID=S.ACCOUNT_ID
  JOIN /*PREFIX*/CARS C ON C.CAR_ID=D.CAR_ID
  JOIN /*PREFIX*/CAR_TYPES CT ON CT.CAR_TYPE_ID=C.CAR_TYPE_ID
  LEFT JOIN /*PREFIX*/PARK_STATES PS ON PS.DRIVER_ID=D.DRIVER_ID AND PS.DATE_OUT IS NULL
  LEFT JOIN /*PREFIX*/PARKS P ON P.PARK_ID=PS.PARK_ID

--

DROP VIEW /*PREFIX*/S_PARK_STATES

--

CREATE VIEW /*PREFIX*/S_PARK_STATES(
    PARK_STATE_ID,
    DRIVER_ID,
    PARK_ID,
    DATE_IN,
    DATE_OUT,
    PARK_NAME,
    PARK_DESCRIPTION,
    DRIVER_NAME,
    DRIVER_PHONE,
    CAR_ID,
    MIN_BALANCE,
    PRIORITY,
    CAR_COLOR,
    CAR_BRAND,
    CAR_STATE_NUM,
    CAR_TYPE_ID,
    CAR_CALLSIGN)
AS
SELECT PS.*,
       P.NAME AS PARK_NAME,
       P.DESCRIPTION AS PARK_DESCRIPTION,
       A.USER_NAME AS DRIVER_NAME,
       A.PHONE AS DRIVER_PHONE,
       D.CAR_ID,
       D.MIN_BALANCE,
       D.PRIORITY,
       C.COLOR AS CAR_COLOR,
       C.BRAND AS CAR_BRAND,
       C.STATE_NUM AS CAR_STATE_NUM,
       C.CAR_TYPE_ID,
       C.CALLSIGN AS CAR_CALLSIGN
  FROM /*PREFIX*/PARK_STATES PS
  JOIN /*PREFIX*/ACCOUNTS A ON A.ACCOUNT_ID=PS.DRIVER_ID
  JOIN /*PREFIX*/PARKS P ON P.PARK_ID=PS.PARK_ID
  JOIN /*PREFIX*/DRIVERS D ON D.DRIVER_ID=PS.DRIVER_ID
  JOIN /*PREFIX*/CARS C ON C.CAR_ID=D.CAR_ID

--

CREATE VIEW S_DRIVER_OUT_MESSAGES
(
    OUT_MESSAGE_ID,
    CREATOR_ID,
    RECIPIENT_ID,
    DATE_CREATE,
    TEXT_OUT,
    DATE_OUT,
    TYPE_MESSAGE,
    CONTACT,
    DESCRIPTION,
    PRIORITY,
    LOCKED,
    DATE_BEGIN,
    DATE_END,
    ORDER_ID,
    CHANNEL,
    DELIVERY,
    DATE_DELIVERY,
    FLASH,
    CREATOR_NAME,
    RECIPIENT_NAME,
    RECIPIENT_PHONE,
    RECIPIENT_EMAIL,
    CAR_STATE_NUM,
    CAR_BRAND,
    CAR_COLOR,
    CAR_CALLSIGN)
AS
SELECT OM.*,
       A1.USER_NAME AS CREATOR_NAME,
       A2.USER_NAME AS RECIPIENT_NAME,
       A2.PHONE AS RECIPIENT_PHONE,
       A2.EMAIL AS RECIPIENT_EMAIL,
       CR.STATE_NUM AS CAR_STATE_NUM,
       CR.BRAND AS CAR_BRAND,
       CR.COLOR AS CAR_COLOR,
       CR.CALLSIGN AS CAR_CALLSIGN
  FROM /*PREFIX*/OUT_MESSAGES OM
  JOIN /*PREFIX*/DRIVERS D ON D.DRIVER_ID=OM.RECIPIENT_ID
  JOIN /*PREFIX*/CARS CR ON CR.CAR_ID=D.CAR_ID
  JOIN /*PREFIX*/ACCOUNTS A1 ON A1.ACCOUNT_ID=OM.CREATOR_ID
  LEFT JOIN /*PREFIX*/ACCOUNTS A2 ON A2.ACCOUNT_ID=OM.RECIPIENT_ID

--

DROP VIEW S_DRIVER_IN_MESSAGES

--

CREATE VIEW S_DRIVER_IN_MESSAGES
(
    IN_MESSAGE_ID,
    SENDER_ID,
    CODE_MESSAGE_ID,
    DATE_SEND,
    TEXT_IN,
    DATE_IN,
    TYPE_MESSAGE,
    CONTACT,
    ORDER_ID,
    CHANNEL,
    SENDER_NAME,
    CODE,
    CAR_STATE_NUM,
    CAR_BRAND,
    CAR_COLOR,
    CAR_CALLSIGN)
AS
SELECT IM.*,
       A.USER_NAME AS SENDER_NAME,
       CM.CODE,
       CR.STATE_NUM AS CAR_STATE_NUM,
       CR.BRAND AS CAR_BRAND,
       CR.COLOR AS CAR_COLOR,
       CR.CALLSIGN AS CAR_CALLSIGN
  FROM /*PREFIX*/IN_MESSAGES IM
  JOIN /*PREFIX*/DRIVERS D ON D.DRIVER_ID=IM.SENDER_ID
  JOIN /*PREFIX*/CARS CR ON CR.CAR_ID=D.CAR_ID
  LEFT JOIN /*PREFIX*/ACCOUNTS A ON A.ACCOUNT_ID=IM.SENDER_ID
  LEFT JOIN /*PREFIX*/CODE_MESSAGES CM ON CM.CODE_MESSAGE_ID=IM.CODE_MESSAGE_ID

--

CREATE TABLE /*PREFIX*/CLIENT_PHONES
(
  CLIENT_ID VARCHAR(32) NOT NULL,
  PHONE VARCHAR(100) NOT NULL,
  METHOD_ID VARCHAR(32),
  DESCRIPTION VARCHAR(250),
  PRIMARY KEY (CLIENT_ID,PHONE),
  FOREIGN KEY (CLIENT_ID) REFERENCES /*PREFIX*/CLIENTS (CLIENT_ID),
  FOREIGN KEY (METHOD_ID) REFERENCES /*PREFIX*/METHODS (METHOD_ID)
)

--

CREATE VIEW /*PREFIX*/S_CLIENT_PHONES
(
  CLIENT_ID,
  PHONE,
  METHOD_ID,
  DESCRIPTION,
  LOCALITY_ID,
  STREET_ID,
  HOUSE,
  FLAT,
  PORCH,
  ADDRESS_DESC,
  USER_NAME,
  SURNAME,
  NAME,
  PATRONYMIC,
  LOCKED,
  FIRM_SMALL_NAME,
  METHOD_NAME
)
AS
SELECT CP.*,
       S.LOCALITY_ID,
       C.STREET_ID,
       C.HOUSE,
       C.FLAT,
       C.PORCH,
       C.ADDRESS_DESC,
       A.USER_NAME,
       A.SURNAME,
       A.NAME,
       A.PATRONYMIC,
       A.LOCKED,
       F.SMALL_NAME AS FIRM_SMALL_NAME,
       M.NAME AS METHOD_NAME
  FROM /*PREFIX*/CLIENT_PHONES CP
  JOIN /*PREFIX*/CLIENTS C ON C.CLIENT_ID=CP.CLIENT_ID
  JOIN /*PREFIX*/ACCOUNTS A ON A.ACCOUNT_ID=C.CLIENT_ID
  LEFT JOIN /*PREFIX*/STREETS S ON S.STREET_ID=C.STREET_ID
  LEFT JOIN /*PREFIX*/FIRMS F ON F.FIRM_ID=A.FIRM_ID
  LEFT JOIN /*PREFIX*/METHODS M ON M.METHOD_ID=CP.METHOD_ID


--

CREATE PROCEDURE /*PREFIX*/U_CLIENT_PHONE
(
  CLIENT_ID VARCHAR(32),
  PHONE VARCHAR(100),
  METHOD_ID VARCHAR(32),
  DESCRIPTION VARCHAR(250),
  OLD_CLIENT_ID VARCHAR(32),
  OLD_PHONE VARCHAR(100)
)
AS
BEGIN
  UPDATE /*PREFIX*/CLIENT_PHONES
     SET CLIENT_ID=:CLIENT_ID,
         PHONE=:PHONE,
         METHOD_ID=:METHOD_ID,
         DESCRIPTION=:DESCRIPTION
   WHERE CLIENT_ID=:OLD_CLIENT_ID
     AND PHONE=:OLD_PHONE;
END;

--

CREATE PROCEDURE /*PREFIX*/D_CLIENT_PHONE
(
  OLD_CLIENT_ID VARCHAR(32),
  OLD_PHONE VARCHAR(100)
)
AS
BEGIN
  DELETE FROM /*PREFIX*/CLIENT_PHONES
        WHERE CLIENT_ID=:OLD_CLIENT_ID
          AND PHONE=:OLD_PHONE;
END;

--

CREATE OR ALTER PROCEDURE /*PREFIX*/D_CLIENT (
  OLD_CLIENT_ID VARCHAR(32))
AS
BEGIN
  DELETE FROM /*PREFIX*/CLIENTS
        WHERE CLIENT_ID=:OLD_CLIENT_ID;

  DELETE FROM /*PREFIX*/ACCOUNT_ROLES
        WHERE ACCOUNT_ID=:OLD_CLIENT_ID;

  DELETE FROM /*PRFEIX*/ACCOUNTS
        WHERE ACCOUNT_ID=:OLD_CLIENT_ID;
END;

--

CREATE OR ALTER PROCEDURE DEL
AS
DECLARE PHONE VARCHAR(100);
DECLARE ACCOUNT_ID VARCHAR(32);
DECLARE SOURCE_ID VARCHAR(32);
BEGIN

  FOR SELECT DISTINCT(O.PHONE), MIN(O.SOURCE_ID)
        FROM ORDERS O
       GROUP BY O.PHONE
        INTO :PHONE, :SOURCE_ID  DO BEGIN

    ACCOUNT_ID=GET_UNIQUE_ID();

    INSERT INTO ACCOUNTS (ACCOUNT_ID,DATE_CREATE,USER_NAME,PHONE,IS_ROLE,LOCKED)
                  VALUES (:ACCOUNT_ID,CURRENT_TIMESTAMP,:PHONE,:PHONE,0,0);

    INSERT INTO CLIENTS (CLIENT_ID,SOURCE_ID)
                 VALUES (:ACCOUNT_ID,:SOURCE_ID);

    UPDATE ORDERS
       SET CLIENT_ID=:ACCOUNT_ID
     WHERE PHONE=:PHONE;


  END

END;

--

CREATE OR ALTER PROCEDURE /*PREFIX*/GET_DISCOUNT_TEST
(
  ORDER_ID VARCHAR(32),
  STREET_ID VARCHAR(32),
  ZONE_ID VARCHAR(32),
  CAR_ID VARCHAR(32),
  RATE_ID VARCHAR(32),
  CAR_TYPE_ID VARCHAR(32),
  CLIENT_ID VARCHAR(32),
  PARK_ID VARCHAR(32),
  DRIVER_ID VARCHAR(32),
  SOURCE_ID VARCHAR(32),
  DISCOUNT_ID VARCHAR(32),
  HOUSE VARCHAR(10),
  FLAT VARCHAR(10),
  PORCH VARCHAR(10),
  PHONE VARCHAR(100),
  CUSTOMER VARCHAR(250),
  ORDER_NUM VARCHAR(10),
  BASE_COST NUMERIC(15,2),
  BASE_DISTANCE NUMERIC(15,2),
  BASE_PERIOD INTEGER
)
RETURNS
(
  DISCOUNT NUMERIC(15,2)
)
AS
BEGIN
  DISCOUNT=30;
END

--

CREATE PROCEDURE /*PREFIX*/I_CLIENT_PHONE
(
  CLIENT_ID VARCHAR(32),
  PHONE VARCHAR(100),
  METHOD_ID VARCHAR(32),
  DESCRIPTION VARCHAR(250)
)
AS
BEGIN
  INSERT INTO /*PREFIX*/CLIENT_PHONES (CLIENT_ID,PHONE,METHOD_ID,DESCRIPTION)
       VALUES (:CLIENT_ID,:PHONE,:METHOD_ID,:DESCRIPTION);
END;

--
