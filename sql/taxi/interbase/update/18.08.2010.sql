CREATE OR ALTER PROCEDURE CREATE_PAYMENT
(
    RECEIPT_ID VARCHAR(32),
    ACCOUNT_ID VARCHAR(32),
    WHO_CREATE_ID VARCHAR(32),
    SUM_RECEIPT NUMERIC(15,2),
    DATE_RECEIPT TIMESTAMP,
    DESCRIPTION VARCHAR(250)
)
RETURNS (
    PAYMENT_EXISTS INTEGER) 
AS
DECLARE S VARCHAR(70);
DECLARE RECEIPT_TYPE_ID VARCHAR(32);
DECLARE CHARGE_TYPE_ID VARCHAR(32);
DECLARE DATE_CREATE TIMESTAMP;
DECLARE ASUM_CHARGE NUMERIC(15,2);
DECLARE ASUM_RECEIPT NUMERIC(15,2);
DECLARE BALANCE NUMERIC(15,2);
DECLARE PHONE VARCHAR(100);
DECLARE CNT INTEGER;
DECLARE TYPE_MESSAGE INTEGER;
DECLARE DEST_PORT INTEGER;
DECLARE SUM_CHARGE NUMERIC(15,2);
BEGIN
  PAYMENT_EXISTS=0;

  RECEIPT_TYPE_ID='2E0EEFF564858A6F48C8BE486202114A'; /* Наличными через платежку */

  SELECT COUNT(*)
    FROM RECEIPTS
   WHERE ACCOUNT_ID=:ACCOUNT_ID
     AND WHO_CREATE_ID=:WHO_CREATE_ID
     AND RECEIPT_TYPE_ID=:RECEIPT_TYPE_ID
     AND DESCRIPTION=:DESCRIPTION
    INTO :CNT;

  IF (CNT=0) THEN BEGIN

    DATE_CREATE=CURRENT_TIMESTAMP;
    DATE_RECEIPT=DATE_RECEIPT+8*60*60*(1e0/24/60/60);  /* Stupid difference between krasplat and our server */

    INSERT INTO RECEIPTS (RECEIPT_ID,RECEIPT_TYPE_ID,ACCOUNT_ID,WHO_CREATE_ID,
                          SUM_RECEIPT,DATE_RECEIPT,DATE_CREATE,DESCRIPTION)
         VALUES (:RECEIPT_ID,:RECEIPT_TYPE_ID,:ACCOUNT_ID,:WHO_CREATE_ID,
                 :SUM_RECEIPT,:DATE_RECEIPT,:DATE_CREATE,:DESCRIPTION);

    CHARGE_TYPE_ID='E49F54CE241196A946067CD38FCB502B'; /* Удержание за Платежку */

    SUM_CHARGE=SUM_RECEIPT*0.15;

    INSERT INTO CHARGES (CHARGE_ID,CHARGE_TYPE_ID,ACCOUNT_ID,WHO_CREATE_ID,
                         SUM_CHARGE,DATE_CHARGE,DATE_CREATE,DESCRIPTION)
       VALUES (GET_UNIQUE_ID(),:CHARGE_TYPE_ID,:ACCOUNT_ID,:WHO_CREATE_ID,
               :SUM_CHARGE,:DATE_RECEIPT,:DATE_CREATE,NULL);

    EXECUTE PROCEDURE GET_ACCOUNT_BALANCE(:ACCOUNT_ID)
     RETURNING_VALUES :ASUM_CHARGE, :ASUM_RECEIPT, :BALANCE;

    BALANCE=ASUM_RECEIPT-ASUM_CHARGE;

    SELECT PHONE
      FROM ACCOUNTS
     WHERE ACCOUNT_ID=:ACCOUNT_ID
      INTO :PHONE;

    SELECT CONST_VALUE FROM GET_CONST_VALUE('2031AA8F2E4B959248967F2838DC5F19') INTO :S;

    EXECUTE PROCEDURE GET_TYPE_MESSAGE(ACCOUNT_ID,NULL)
     RETURNING_VALUES TYPE_MESSAGE, DEST_PORT;

    IF ((S IS NOT NULL) AND (TYPE_MESSAGE IS NOT NULL)) THEN BEGIN

      S=REPLACE_STRING(S,'%BALANCE',CAST(BALANCE AS VARCHAR(30)));

      INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,
                                LOCKED,DATE_BEGIN,DEST_PORT)
                        VALUES (GET_UNIQUE_ID(),:WHO_CREATE_ID,:ACCOUNT_ID,CURRENT_TIMESTAMP,
                                :S,NULL,:TYPE_MESSAGE,:PHONE,NULL,2,
                                NULL,CURRENT_TIMESTAMP,:DEST_PORT);
    END

  END ELSE BEGIN

    PAYMENT_EXISTS=1;

  END

END

--

CREATE OR ALTER PROCEDURE GET_ROUTE_HISTORY
(
  PHONE VARCHAR(100)
)
RETURNS (
  DATE_FIRST TIMESTAMP,
  DATE_LAST TIMESTAMP,
  AMOUNT INTEGER
  )
AS
BEGIN
  FOR SELECT MIN(DATE_FIRST), MAX(DATE_LAST), SUM(AMOUNT)
        FROM ROUTE_HISTORY
       WHERE PHONE=:PHONE
        INTO :DATE_FIRST, :DATE_LAST, :AMOUNT DO BEGIN
    SUSPEND;
  END
END

--

CREATE VIEW S_NEW_CLIENTS
(
  PHONE,
  SOURCE_NAME,
  DATE_ACCEPT,
  USER_NAME,
  COST_FACT
)
AS
SELECT O.PHONE, S.NAME, O.DATE_ACCEPT, A.USER_NAME, SUM(O.COST_FACT)
  FROM ORDERS O
  JOIN SOURCES S ON S.SOURCE_ID=O.SOURCE_ID
  JOIN ACCOUNTS A ON A.ACCOUNT_ID=O.WHO_ACCEPT_ID
 WHERE O.PARENT_ID IS NULL
   AND O.FINISHED=1
   AND ((SELECT COUNT(*) FROM GET_ROUTE_HISTORY(O.PHONE) WHERE DATE_FIRST<>DATE_LAST)=0)
   AND O.CLIENT_ID IS NULL
 GROUP BY O.PHONE, S.NAME, O.DATE_ACCEPT, A.USER_NAME

--

CREATE OR ALTER PROCEDURE PR_CONFIRM_ORDER
(
    ORDER_ID VARCHAR(32),
    ACCOUNT_ID VARCHAR(32)
)
AS
DECLARE PHONE VARCHAR(100);
DECLARE DRIVER_ID VARCHAR(32);
DECLARE PARK_ID VARCHAR(32);
DECLARE RECIPIENT_ID VARCHAR(32);
DECLARE S VARCHAR(1000);
DECLARE CLIENT_TYPE_MESSAGE INTEGER;
DECLARE DRIVER_TYPE_MESSAGE INTEGER;
DECLARE DRIVER_DEST_PORT INTEGER;
DECLARE CLIENT_DEST_PORT INTEGER;
DECLARE IN_MESSAGE_ID VARCHAR(32);
BEGIN

  SELECT PHONE, DRIVER_ID, PARK_ID
    FROM ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :PHONE, :DRIVER_ID, :PARK_ID;

  UPDATE ORDERS
     SET DATE_BEGIN=CURRENT_TIMESTAMP
   WHERE ORDER_ID=:ORDER_ID;

  IF ((PHONE IS NOT NULL) AND (DRIVER_ID IS NOT NULL)) THEN BEGIN

    FOR SELECT IN_MESSAGE_ID, TYPE_MESSAGE
          FROM IN_MESSAGES
         WHERE ORDER_ID=:ORDER_ID
           AND CODE_MESSAGE_ID='A87C64B41C87907A4B8C58C5F6A19E2F' /* Водитель принял заказ */
           AND SENDER_ID=:DRIVER_ID
           AND DESCRIPTION IS NULL
          INTO :IN_MESSAGE_ID, :DRIVER_TYPE_MESSAGE DO BEGIN

      UPDATE IN_MESSAGES
         SET DESCRIPTION=:ORDER_ID
       WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID;

      BREAK;
    END

    UPDATE PARK_STATES
       SET DATE_OUT=CURRENT_TIMESTAMP
     WHERE DRIVER_ID=:DRIVER_ID
       AND PARK_ID=:PARK_ID
       AND DATE_OUT IS NULL;

    IF (SUBSTR(PHONE,1,3)='+79')  THEN BEGIN

      RECIPIENT_ID=NULL;

      FOR SELECT ACCOUNT_ID
            FROM ACCOUNTS
           WHERE PHONE=:PHONE
            INTO :RECIPIENT_ID DO BEGIN

        IF (RECIPIENT_ID IS NOT NULL) THEN
          BREAK;
      END

      SELECT CONST_VALUE FROM GET_CONST_VALUE('1C12AF5D5D57ACD045A724F8E3FF90ED') INTO :S;

      EXECUTE PROCEDURE GET_TYPE_MESSAGE(RECIPIENT_ID,NULL)
       RETURNING_VALUES CLIENT_TYPE_MESSAGE, CLIENT_DEST_PORT;

      IF ((S IS NOT NULL) AND (CLIENT_TYPE_MESSAGE IS NOT NULL)) THEN BEGIN

        INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                  TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,
                                  PRIORITY,LOCKED,DATE_BEGIN,ORDER_ID,DEST_PORT)
                          VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:RECIPIENT_ID,CURRENT_TIMESTAMP,
                                  :S,NULL,:CLIENT_TYPE_MESSAGE,:PHONE,NULL,
                                  2,NULL,CURRENT_TIMESTAMP,:ORDER_ID,:CLIENT_DEST_PORT);
      END
    END

    SELECT PHONE
      FROM ACCOUNTS
     WHERE ACCOUNT_ID=:DRIVER_ID
      INTO :PHONE;

    RECIPIENT_ID=DRIVER_ID;

    SELECT CONST_VALUE FROM GET_CONST_VALUE('723E98B898F89A8941B6CAAB092221AE') INTO :S;

    EXECUTE PROCEDURE GET_TYPE_MESSAGE(RECIPIENT_ID,DRIVER_TYPE_MESSAGE)
     RETURNING_VALUES DRIVER_TYPE_MESSAGE, DRIVER_DEST_PORT;

    IF ((S IS NOT NULL) AND (DRIVER_TYPE_MESSAGE IS NOT NULL)) THEN BEGIN

      INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,
                                PRIORITY,LOCKED,DATE_BEGIN,ORDER_ID,DEST_PORT)
                        VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:RECIPIENT_ID,CURRENT_TIMESTAMP,
                                :S,NULL,:DRIVER_TYPE_MESSAGE,:PHONE,NULL,
                                2,NULL,CURRENT_TIMESTAMP,:ORDER_ID,:DRIVER_DEST_PORT);
    END

  END

END

--