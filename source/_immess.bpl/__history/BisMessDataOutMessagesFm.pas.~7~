unit BisMessDataOutMessagesFm;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, ExtCtrls, ComCtrls, ActnList, DB,
  VirtualTrees, VirtualDBTreeEx,
  BisFm, BisDataFrm, BisDataGridFrm, BisDataGridFm, BisFieldNames, BisDBTree;

type
  TBisMessDataOutMessagesFrame=class(TBisDataGridFrame)
  private
    FSToday: String;
    FSArchive: String;
    FTodayMenuItem: TBisDataFrameFilterMenuItem;
    FArchiveMenuItem: TBisDataFrameFilterMenuItem;
    procedure GridPaintText(Sender: TBaseVirtualTree; const TargetCanvas: TCanvas;
                            Node: PVirtualNode; Column: TColumnIndex; TextType: TVSTTextType);
  public
    constructor Create(AOwner: TComponent); override;
    procedure Init; override;
  published
    property SToday: String read FSToday write FSToday;
    property SArchive: String read FSArchive write FSArchive;
  end;

  TBisMessDataOutMessagesForm = class(TBisDataGridForm)
  protected
    class function GetDataFrameClass: TBisDataFrameClass; override;
  end;

  TBisMessDataOutMessagesFormIface=class(TBisDataGridFormIface)
  public
    constructor Create(AOwner: TComponent); override;
  end;

var
  BisMessDataOutMessagesForm: TBisMessDataOutMessagesForm;

implementation

{$R *.dfm}

uses DateUtils,
     BisUtils, BisConsts, BisVariants, BisOrders, BisFilterGroups, BisValues, BisCore,
     BisMessDataOutMessageEditFm, BisMessDataOutMessageFilterFm, BisMessDataOutMessageInsertExFm;

{ TBisMessDataOutMessagesFrame }

constructor TBisMessDataOutMessagesFrame.Create(AOwner: TComponent);
var
  D: TDateTime;
begin
  inherited Create(AOwner);

  FilterClass:=TBisMessDataOutMessageFilterFormIface;
  InsertClasses.Add(TBisMessDataOutMessageInsertFormIface);
  InsertClasses.Add(TBisMessDataOutMessageInsertExFormIface);
  UpdateClass:=TBisMessDataOutMessageUpdateFormIface;
  DeleteClass:=TBisMessDataOutMessageDeleteFormIface;
  with Provider do begin
    ProviderName:='S_OUT_MESSAGES';
    with FieldNames do begin
      AddKey('OUT_MESSAGE_ID');
      AddInvisible('CREATOR_ID');
      AddInvisible('CREATOR_NAME');
      AddInvisible('RECIPIENT_ID');
      AddInvisible('RECIPIENT_NAME');
      AddInvisible('RECIPIENT_PHONE');
      AddInvisible('TYPE_MESSAGE');
      AddInvisible('DESCRIPTION');
      AddInvisible('PRIORITY');
      AddInvisible('DATE_CREATE');
      AddInvisible('DATE_END');
      Add('DATE_BEGIN','Дата начала',110);
      Add('TEXT_OUT','Текст сообщения',210);
      Add('DATE_OUT','Дата отправки',110);
      Add('CONTACT','Контакт',100);
      Add('LOCKED','Блокировка',50).Visible:=false;
    end;
    Orders.Add('DATE_CREATE',otDesc);
  end;

  D:=Core.ServerDate;

  FSToday:='Сегодня';
  FSArchive:='Архив';

  FTodayMenuItem:=CreateFilterMenuItem(FSToday);
  with FTodayMenuItem do begin
    with FilterGroups.AddVisible do begin
      Filters.Add('DATE_CREATE',fcEqualGreater,DateOf(D));
      Filters.Add('DATE_CREATE',fcLess,IncDay(DateOf(D)));
    end;
    Checked:=true;
  end;

  FArchiveMenuItem:=CreateFilterMenuItem(FSArchive);
  with FArchiveMenuItem do begin
    FilterGroups.AddVisible.Filters.Add('DATE_CREATE',fcLess,DateOf(D));
  end;

  Grid.OnPaintText:=GridPaintText;

end;

procedure TBisMessDataOutMessagesFrame.Init;
begin
  inherited Init;
  FTodayMenuItem.Caption:=FSToday;
  FArchiveMenuItem.Caption:=FSArchive;
end;

procedure TBisMessDataOutMessagesFrame.GridPaintText(Sender: TBaseVirtualTree; const TargetCanvas: TCanvas;
                                                 Node: PVirtualNode; Column: TColumnIndex; TextType: TVSTTextType);
var
  Data: PBisDBTreeNode;
  DataKey: PDBVTData;
  DateKeyFocused: PDBVTData;
  Item: TBisValue;
  Flag: Boolean;
begin
  Data:=Grid.GetDBNodeData(Node);
  DataKey:=Grid.GetNodeData(Node);
  DateKeyFocused:=Grid.GetNodeData(Grid.FocusedNode);
  if Assigned(Data) and Assigned(DataKey) and Assigned(DateKeyFocused) then begin
    Flag:=((DataKey.Hash=DateKeyFocused.Hash) and (Column<>Grid.FocusedColumn)) or (DataKey.Hash<>DateKeyFocused.Hash);
    if Assigned(Data.Values) and Flag then begin
      Item:=Data.Values.Find('LOCKED');
      if Assigned(Item) and not VarIsNull(Item.Value) then begin
        TargetCanvas.Font.Color:=clRed;
      end;
    end;
  end;
end;


{ TBisMessDataOutMessagesFormIface }

constructor TBisMessDataOutMessagesFormIface.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  FormClass:=TBisMessDataOutMessagesForm;
  Permissions.Enabled:=true;
//  Available:=true;
  ChangeFrameProperties:=false;
end;

{ TBisMessDataOutMessagesForm }

class function TBisMessDataOutMessagesForm.GetDataFrameClass: TBisDataFrameClass;
begin
  Result:=TBisMessDataOutMessagesFrame;
end;



end.
