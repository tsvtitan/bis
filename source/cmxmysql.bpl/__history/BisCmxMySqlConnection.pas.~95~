unit BisCmxMySqlConnection;

interface

uses Classes,
     BisCmxConnection;

type
  TBisCmxMySqlSession=class(TBisCmxSession)
  public
    constructor Create(ASessions: TBisCmxSessions); override;
  end;

  TBisCmxMySqlSessions=class(TBisCmxSessions)
  protected
    function GetSessionClass: TBisCmxSessionClass; override;
  public
    constructor Create(AConnection: TBisCmxConnection); override;
  end;

  TBisCmxMySqlConnection=class(TBisCmxConnection)
  protected
    function GetSessionsClass: TBisCmxSessionsClass; override;
  public
    constructor Create(AOwner: TComponent); override;
  end;

implementation

{ TBisCmxMySqlSession }

constructor TBisCmxMySqlSession.Create(ASessions: TBisCmxSessions);
begin
  inherited Create(ASessions);
  SCheckPermissions:='NAME=%s';
  SFormatDateTime:='yyyy-mm-dd hh:nn:ss';  // English
  SSqlInsert:='INSERT INTO /*PREFIX*/SESSIONS (SESSION_ID,APPLICATION_ID,ACCOUNT_ID,DATE_CREATE,DATE_CHANGE,PARAMS) '+
              'VALUES (%s,%s,%s,%s,%s,:PARAMS)';
  SSqlUpdate:='UPDATE /*PREFIX*/SESSIONS SET DATE_CHANGE=%s WHERE SESSION_ID=%s';
  SSqlUpdateParams:='UPDATE /*PREFIX*/SESSIONS SET DATE_CHANGE=%s, PARAMS=:PARAMS WHERE SESSION_ID=%s';
  SSqlDelete:='DELETE FROM /*PREFIX*/SESSIONS WHERE SESSION_ID=%s';
  SSqlLoadPermissions:='SELECT P.INTERFACE_ID, I.NAME, P.RIGHT_ACCESS, P.VALUE '+
                       'FROM /*PREFIX*/PERMISSIONS P JOIN /*PREFIX*/INTERFACES I ON I.INTERFACE_ID=P.INTERFACE_ID '+
                       'WHERE P.ACCOUNT_ID IN (%s)';
  SSqlLoadLocks:='SELECT METHOD, OBJECT, DESCRIPTION, IP_LIST FROM /*PREFIX*/LOCKS '+
                 'WHERE ((DATE_BEGIN<=%s AND DATE_END IS NULL) OR (DATE_BEGIN<=%s AND DATE_END>=%s)) '+
                 'AND APPLICATION_ID=%s AND (ACCOUNT_ID IN (%s) OR ACCOUNT_ID IS NULL) '+
                 'ORDER BY DATE_BEGIN';  
  SSqlLoadRoles:='SELECT ROLE_ID FROM /*PREFIX*/ACCOUNT_ROLES WHERE ACCOUNT_ID=%s';
  SSqlLoadProfile:='SELECT P.PROFILE FROM /*PREFIX*/PROFILES P WHERE P.APPLICATION_ID=%s AND P.ACCOUNT_ID=%s';
  SSqlSaveProfile:='UPDATE /*PREFIX*/PROFILES SET PROFILE=:PROFILE WHERE APPLICATION_ID=%s AND ACCOUNT_ID=%s';
  SSqlLoadInterfaces:='SELECT AI.INTERFACE_ID, AI.PRIORITY, AI.AUTO_RUN, I.NAME, I.DESCRIPTION, '+
                      'I.MODULE_NAME, I.MODULE_INTERFACE, I.INTERFACE_TYPE, '+
                      'S.SCRIPT_ID, S.ENGINE AS SCRIPT_ENGINE, S.PLACE AS SCRIPT_PLACE, '+
                      'R.REPORT_ID, R.ENGINE AS REPORT_ENGINE, R.PLACE AS REPORT_PLACE, '+
                      'D.DOCUMENT_ID, D.OLE_CLASS AS DOCUMENT_OLE_CLASS, D.PLACE AS DOCUMENT_PLACE '+
                      'FROM /*PREFIX*/APPLICATION_INTERFACES AI '+
                      'JOIN /*PREFIX*/INTERFACES I ON I.INTERFACE_ID=AI.INTERFACE_ID '+
                      'LEFT JOIN /*PREFIX*/SCRIPTS S ON S.SCRIPT_ID=AI.INTERFACE_ID '+
                      'LEFT JOIN /*PREFIX*/REPORTS R ON R.REPORT_ID=AI.INTERFACE_ID '+
                      'LEFT JOIN /*PREFIX*/DOCUMENTS D ON D.DOCUMENT_ID=AI.INTERFACE_ID '+
                      'WHERE AI.APPLICATION_ID=%s AND AI.ACCOUNT_ID IN (%s) '+
                      'ORDER BY AI.PRIORITY';
  SSqlGetRecords:='SELECT %s FROM %s %s %s %s %s';
  SSqlGetRecordsCount:='SELECT COUNT(*) FROM (%s)';
  SSqlLoadMenus:='SELECT M.MENU_ID, M.PARENT_ID, M.NAME, M.DESCRIPTION, M.INTERFACE_ID, '+
                 'M.SHORTCUT, M.PICTURE, M.PRIORITY '+
                 'FROM /*PREFIX*/APPLICATION_MENUS AP '+
                 'JOIN /*PREFIX*/MENUS M ON M.MENU_ID=AP.MENU_ID '+
                 'WHERE AP.APPLICATION_ID=%s '+
                  'AND (M.INTERFACE_ID IN (SELECT INTERFACE_ID FROM /*PREFIX*/APPLICATION_INTERFACES '+
                                           'WHERE APPLICATION_ID=AP.APPLICATION_ID AND ACCOUNT_ID IN (%s)) '+
                 'OR M.INTERFACE_ID IS NULL) '+
                 'ORDER BY M.LEVEL, M.PRIORITY ';
  SSqlLoadTasks:='SELECT TASK_ID, NAME, DESCRIPTION, INTERFACE_ID, '+
                 'ENABLED, DATE_BEGIN, DATE_END, SCHEDULE, PRIORITY, '+
                 'PROC_NAME, COMMAND_STRING, DAY_FREQUENCY, WEEK_FREQUENCY, '+
                 'MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY, '+
                 'MONTH_DAY, JANUARY, FEBRUARY, MARCH, APRIL, MAY, JUNE, '+
                 'JULY, AUGUST, SEPTEMBER, OCTOBER, NOVEMBER, DECEMBER, '+
                 'REPEAT_ENABLED, REPEAT_TYPE, REPEAT_VALUE, REPEAT_COUNT, '+
                 'DATE_EXECUTE, RESULT_STRING '+
                 'FROM /*PREFIX*/TASKS '+
                 'WHERE APPLICATION_ID=%s AND (ACCOUNT_ID IN (%s) OR ACCOUNT_ID IS NULL) '+
                 'ORDER BY DATE_BEGIN';
  SSqlSaveTask:='UPDATE /*PREFIX*/TASKS SET DATE_EXECUTE=%s, RESULT_STRING=%s WHERE TASK_ID=%s';
  SSqlLoadAlarms:='SELECT ALARM_ID, TYPE_ALARM, DATE_BEGIN, CAPTION, TEXT_ALARM, A1.USER_NAME '+
                  'FROM /*PREFIX*/ALARMS A '+
                  'JOIN /*PREFIX*/ACCOUNTS A1 ON A1.ACCOUNT_ID=A.SENDER_ID '+
                  'WHERE ((A.DATE_BEGIN<=CURRENT_TIMESTAMP AND A.DATE_END IS NULL) OR '+
                  '(A.DATE_BEGIN<=CURRENT_TIMESTAMP AND A.DATE_END>=CURRENT_TIMESTAMP)) '+
                  'AND (A.RECIPIENT_ID IN (%s) OR A.RECIPIENT_ID IS NULL) '+
                  'ORDER BY A.DATE_BEGIN';
  SSqlLoadScript:='SELECT SCRIPT, PLACE FROM /*PREFIX*/SCRIPTS WHERE SCRIPT_ID=%s';
  SSqlLoadReport:='SELECT REPORT, PLACE FROM /*PREFIX*/REPORTS WHERE REPORT_ID=%s';
  SSqlLoadDocument:='SELECT DOCUMENT, PLACE FROM /*PREFIX*/DOCUMENTS WHERE DOCUMENT_ID=%s';
  SParamPrefix:='';
end;

{ TBisCmxMySqlSessions }

constructor TBisCmxMySqlSessions.Create(AConnection: TBisCmxConnection);
begin
  inherited Create(AConnection);
  SSchemaOverride:='';
  SFormatSchemaName:='';
end;

function TBisCmxMySqlSessions.GetSessionClass: TBisCmxSessionClass;
begin
  Result:=TBisCmxMySqlSession;
end;

{ TBisCmxMySqlConnection }

constructor TBisCmxMySqlConnection.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
 { SSqlGetDbUserName:='SELECT ACCOUNT_ID, DB_USER_NAME, DB_PASSWORD, PASSWORD FROM /*PREFIX*/ACCOUNTS '+
                     'WHERE UPPER(USER_NAME)=%s AND LOCKED<>1';}
  SSqlGetDbUserName:='SELECT A.ACCOUNT_ID, A.FIRM_ID, F.SMALL_NAME AS FIRM_SMALL_NAME, A.DB_USER_NAME, A.DB_PASSWORD, A."PASSWORD" '+
                      'FROM /*PREFIX*/ACCOUNTS A '+
                      'LEFT JOIN /*PREFIX*/FIRMS F ON F.FIRM_ID=A.FIRM_ID '+
                      'WHERE UPPER(A.USER_NAME)=%s AND A.LOCKED<>1';

  SSqlApplicationExists:='SELECT A.LOCKED, P.PROFILE '+
                          'FROM /*PREFIX*/PROFILES P '+
                          'JOIN /*PREFIX*/APPLICATIONS A ON A.APPLICATION_ID=P.APPLICATION_ID '+
                          'WHERE P.APPLICATION_ID=%s '+
                          'AND P.ACCOUNT_ID=%s';
  SSqlSessionExists:='SELECT SESSION_ID FROM /*PREFIX*/SESSIONS WHERE SESSION_ID=%s ';
  SSqlGetServerDate:='SELECT DISTINCT(CURRENT_TIMESTAMP) FROM /*PREFIX*/APPLICATIONS';
  SFieldNameQuote:='`';
  SFormatDateTimeValue:='yyyy-mm-dd hh:nn:ss';
  SFormatDateValue:='yyyy-mm-dd';
  SSqlInsert:='INSERT INTO %s (%s) VALUES (%s)';
  SSqlUpdate:='UPDATE %s SET %s WHERE %s';
  SSQLGetKeys:='SELECT K.COLUMN_NAME '+
               'FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE K '+
               'WHERE K.CONSTRAINT_NAME=''PRIMARY'' '+
               'AND K.TABLE_NAME=%s '+
               'AND K.CONSTRAINT_SCHEMA=%s '+
               'AND K.TABLE_SCHEMA=K.CONSTRAINT_SCHEMA';
  SFormatFilterDateValue:='%s';
end;

function TBisCmxMySqlConnection.GetSessionsClass: TBisCmxSessionsClass;
begin
  Result:=TBisCmxMySqlSessions;
end;


end.
