CREATE OR ALTER PROCEDURE GET_CALL_SESSIONS 
(
  CALL_ID VARCHAR(32)
) 
RETURNS (
  SESSION_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE DIRECTION INTEGER;
DECLARE APPLICATION_ID VARCHAR(32);
DECLARE FIRM_ID VARCHAR(32);
DECLARE PARAMS BLOB;
DECLARE ENABLED INTEGER;
BEGIN

  SELECT DIRECTION, FIRM_ID
    FROM CALLS
   WHERE CALL_ID=:CALL_ID
    INTO :DIRECTION, :FIRM_ID;

  IF (DIRECTION IS NOT NULL) THEN BEGIN

    IF (DIRECTION=0) THEN BEGIN

      SESSION_ID=NULL;
      APPLICATION_ID='A35F5701A7AA920E40812A71A690910D';

      FOR SELECT GS.SESSION_ID, GS.ACCOUNT_ID, S.PARAMS
            FROM GET_EVENT_SESSIONS(1,:APPLICATION_ID,NULL,NULL) GS
            JOIN DISPATCHERS D ON D.DISPATCHER_ID=GS.ACCOUNT_ID
            JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DISPATCHER_ID
            JOIN SESSIONS S ON S.SESSION_ID=GS.SESSION_ID
           WHERE A.FIRM_ID=:FIRM_ID
           UNION ALL
          SELECT GS.SESSION_ID, GS.ACCOUNT_ID, S.PARAMS
            FROM GET_EVENT_SESSIONS(1,:APPLICATION_ID,NULL,NULL) GS
            JOIN DISPATCHERS D ON D.DISPATCHER_ID=GS.ACCOUNT_ID
            JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DISPATCHER_ID
            JOIN SESSIONS S ON S.SESSION_ID=GS.SESSION_ID
           WHERE A.FIRM_ID<>:FIRM_ID
           UNION ALL
          SELECT GS.SESSION_ID, GS.ACCOUNT_ID, S.PARAMS
            FROM GET_EVENT_SESSIONS(1,:APPLICATION_ID,NULL,NULL) GS
            JOIN DISPATCHERS D ON D.DISPATCHER_ID=GS.ACCOUNT_ID
            JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DISPATCHER_ID
            JOIN SESSIONS S ON S.SESSION_ID=GS.SESSION_ID
           WHERE A.FIRM_ID IS NULL
            INTO :SESSION_ID, :ACCOUNT_ID, :PARAMS DO BEGIN

        ENABLED=CAST(CONFIG_READ(PARAMS,'TaxiPhoneForm','Enabled','0') AS INTEGER);

        IF (ENABLED=1) THEN
          SUSPEND;
      END

    END

  END

END

--

CREATE OR ALTER PROCEDURE TRANSFORM_PHONE 
(
  IN_PHONE VARCHAR(100)
) 
RETURNS 
(
  OUT_PHONE VARCHAR(100)
)
AS
DECLARE PREFIX VARCHAR(100);
DECLARE L INTEGER;
BEGIN
  OUT_PHONE=NULL;

  IF (IN_PHONE IS NOT NULL) THEN BEGIN

    L=STRING_LENGTH(IN_PHONE);

    IF (L>7) THEN BEGIN

      IF (L<=12) THEN BEGIN

        IF (L=12) THEN BEGIN

          PREFIX=SUB_STRING(IN_PHONE,1,2);

          IF (PREFIX='+7') THEN
            OUT_PHONE=IN_PHONE;

        END ELSE BEGIN

          IF (L>=10) THEN BEGIN

            IF (L=10) THEN BEGIN

              PREFIX=SUB_STRING(IN_PHONE,1,4);

              IF (PREFIX='3912') THEN
                OUT_PHONE=SUB_STRING(IN_PHONE,4,L);
              ELSE
               OUT_PHONE='+7'||IN_PHONE;

            END ELSE BEGIN

              PREFIX=SUB_STRING(IN_PHONE,1,5);

              IF (PREFIX='83912') THEN
                OUT_PHONE=SUB_STRING(IN_PHONE,5,L);
              ELSE BEGIN

               PREFIX=SUB_STRING(IN_PHONE,1,2);
               IF (PREFIX='89') THEN
                 OUT_PHONE='+7'||SUB_STRING(IN_PHONE,2,L);
               ELSE BEGIN

                 PREFIX=SUB_STRING(IN_PHONE,1,1);
                 IF (PREFIX='7') THEN
                   OUT_PHONE='+'||IN_PHONE;
                 ELSE
                   OUT_PHONE=IN_PHONE;

               END

              END

            END

          END

        END

      END

    END ELSE BEGIN

      IF (L=7) THEN
        OUT_PHONE=IN_PHONE;
      ELSE BEGIN
        IF (L=6) THEN
          OUT_PHONE='2'||IN_PHONE;
      END


    END

  END

END

--

ALTER TABLE OPERATORS
ADD CONVERSIONS BLOB

--

CREATE OR ALTER VIEW S_OPERATORS
AS
SELECT O.*
  FROM OPERATORS O

--

CREATE OR ALTER PROCEDURE I_OPERATOR
(
  OPERATOR_ID VARCHAR(32),
  NAME VARCHAR(100),
  DESCRIPTION VARCHAR(250),
  RANGES BLOB,
  ENABLED INTEGER,
  PRIORITY INTEGER,
  CONVERSIONS BLOB
)
AS
BEGIN
  INSERT INTO OPERATORS (OPERATOR_ID,NAME,DESCRIPTION,RANGES,ENABLED,PRIORITY,CONVERSIONS)
       VALUES (:OPERATOR_ID,:NAME,:DESCRIPTION,:RANGES,:ENABLED,:PRIORITY,:CONVERSIONS);
END

--

CREATE OR ALTER PROCEDURE U_OPERATOR
(
  OPERATOR_ID VARCHAR(32),
  NAME VARCHAR(100),
  DESCRIPTION VARCHAR(250),
  RANGES BLOB,
  ENABLED INTEGER,
  PRIORITY INTEGER,
  CONVERSIONS BLOB,
  OLD_OPERATOR_ID VARCHAR(32)
)
AS
BEGIN
  UPDATE OPERATORS
     SET OPERATOR_ID=:OPERATOR_ID,
         NAME=:NAME,
         DESCRIPTION=:DESCRIPTION,
         RANGES=:RANGES,
         ENABLED=:ENABLED,
         PRIORITY=:PRIORITY,
         CONVERSIONS=:CONVERSIONS
   WHERE OPERATOR_ID=:OLD_OPERATOR_ID;
END

--

CREATE OR ALTER PROCEDURE CONVERT_PHONE
(
  IN_PHONE VARCHAR(100),
  KIND INTEGER
)
RETURNS
(
  OUT_PHONE VARCHAR(100)
)
AS
DECLARE S1 VARCHAR(100);
DECLARE L2 INTEGER;
DECLARE S2 VARCHAR(100);
DECLARE S3 VARCHAR(100);
DECLARE IN_PHONE_NUM BIGINT;
DECLARE CONVERSIONS VARCHAR(32000);
DECLARE CONVERSION VARCHAR(1000);
DECLARE CONVERSION_FIRST VARCHAR(100);
DECLARE CONVERSION_SECOND VARCHAR(100);
DECLARE POS INTEGER;
DECLARE POS2 INTEGER;
DECLARE RANGE_MIN BIGINT;
DECLARE RANGE_MAX BIGINT;
DECLARE FLAG INTEGER;
BEGIN

  OUT_PHONE=IN_PHONE;
  FLAG=0;

  IF (IN_PHONE IS NOT NULL) THEN BEGIN
    IN_PHONE=TRIM(REPLACE_STRING(IN_PHONE,'+',''));
    IN_PHONE_NUM=CAST(IN_PHONE AS BIGINT);

    FOR SELECT CAST(BLOB_TO_STRING(CONVERSIONS,1,32000) AS VARCHAR(32000))
          FROM OPERATORS
         WHERE ENABLED=1
         ORDER BY PRIORITY
          INTO :CONVERSIONS DO BEGIN

      IF (CONVERSIONS IS NOT NULL) THEN BEGIN

        POS=-1;
        WHILE (POS<>0) DO BEGIN

          POS=POSITION(CHR(13)||CHR(10),CONVERSIONS);
          IF (POS>0) THEN BEGIN
            CONVERSION=SUB_STRING(CONVERSIONS,1,POS-1);
            CONVERSIONS=SUB_STRING(CONVERSIONS,POS+2,32000);
          END ELSE
            CONVERSION=SUB_STRING(CONVERSIONS,1,1000);

          POS2=POSITION('=',CONVERSION);
          IF (POS2>0) THEN BEGIN
            CONVERSION_FIRST=SUB_STRING(CONVERSION,1,POS2-1);
            CONVERSION_SECOND=SUB_STRING(CONVERSION,POS2+1,100);

            IF ((CONVERSION_FIRST IS NOT NULL) AND
                (TRIM(CONVERSION_FIRST)<>'') AND
                (CONVERSION_SECOND IS NOT NULL) AND
                (TRIM(CONVERSION_SECOND)<>'')) THEN BEGIN

              IF (KIND=1) THEN
                CONVERSION=CONVERSION_SECOND;
              ELSE
                CONVERSION=CONVERSION_FIRST;

              EXECUTE PROCEDURE GET_RANGE(CONVERSION)
               RETURNING_VALUES RANGE_MIN, RANGE_MAX;

              IF ((IN_PHONE_NUM>=RANGE_MIN) AND (IN_PHONE_NUM<=RANGE_MAX)) THEN BEGIN

                FLAG=1;

                IF (KIND=1) THEN
                  OUT_PHONE=CONVERSION_FIRST;
                ELSE
                  OUT_PHONE=CONVERSION_SECOND;

                S1=REVERSE(OUT_PHONE);
                S2=REVERSE(IN_PHONE);
                L2=STRING_LENGTH(S2);
                S3='';

                POS2=-1;
                WHILE (POS2<>0) DO BEGIN

                  POS2=POSITION('*',S1);
                  IF ((POS2>0) AND (POS2<=L2)) THEN BEGIN
                    S3=S3||SUB_STRING(S2,POS2,1);
                    S1=S3||SUB_STRING(S1,POS2+1,100);
                  END ELSE
                    BREAK;

                END

                OUT_PHONE=REVERSE(S1);

                BREAK;
              END

            END

          END

        END

      END

      IF (FLAG=1) THEN BEGIN
        BREAK;
      END

    END

  END
END

--

CREATE OR ALTER PROCEDURE INCOMING_CALL_CHECK
(
  CALLER_PHONE VARCHAR(100),
  CHANNEL VARCHAR(100)
)
RETURNS
(
  ACCOUNT_ID VARCHAR(32),
  PHONE VARCHAR(100),
  OPERATOR_ID VARCHAR(32),
  FIRM_ID VARCHAR(32),
  CHECKED INTEGER
)
AS
DECLARE CNT INTEGER;
DECLARE RANGE_MIN BIGINT;
DECLARE RANGE_MAX BIGINT;
DECLARE PHONE_NUM BIGINT;
BEGIN
  CHECKED=0;

  IF (CHANNEL IS NOT NULL) THEN BEGIN

    FIRM_ID=NULL;

    IF (CHANNEL='CallServerSipChannel2026672') THEN

      FIRM_ID='C49DF004D660BBAF434839044848F5B8';

    IF (CHANNEL='CallServerSipChannel2904021') THEN

      FIRM_ID='81DCAB751C23A5C942A41C19FE3FC78E';

  END

  IF ((CALLER_PHONE IS NOT NULL) AND (CALLER_PHONE<>'Anonymous')) THEN BEGIN

    PHONE=CALLER_PHONE;

    EXECUTE PROCEDURE TRANSFORM_PHONE (PHONE)
     RETURNING_VALUES PHONE;

    EXECUTE PROCEDURE CONVERT_PHONE(PHONE,1)
     RETURNING_VALUES PHONE;

    EXECUTE PROCEDURE GET_OPERATOR (PHONE)
     RETURNING_VALUES OPERATOR_ID, RANGE_MIN, RANGE_MAX, PHONE_NUM;

    SELECT FIRST 1
           ACCOUNT_ID
      FROM ACCOUNTS
     WHERE PHONE=:PHONE
      INTO :ACCOUNT_ID;

    IF (ACCOUNT_ID IS NULL) THEN BEGIN

      SELECT FIRST 1
             CLIENT_ID
        FROM CLIENT_PHONES
       WHERE PHONE=:PHONE
        INTO :ACCOUNT_ID;

    END

    SELECT COUNT(*)
      FROM BLACKS
     WHERE PHONE=:PHONE
      INTO :CNT;

    IF (CNT=0) THEN BEGIN

      CHECKED=1;

    END

  END

END

--

CREATE OR ALTER PROCEDURE OUTGOING_CALL_CHECK
(
  CALLER_ID VARCHAR(32),
  ACCEPTOR_PHONE VARCHAR(100)
)
RETURNS
(
  ACCOUNT_ID VARCHAR(32),
  PHONE VARCHAR(100),
  OPERATOR_ID VARCHAR(32),
  FIRM_ID VARCHAR(32),
  CHECKED INTEGER
)
AS
DECLARE CNT INTEGER;
DECLARE RANGE_MIN BIGINT;
DECLARE RANGE_MAX BIGINT;
DECLARE PHONE_NUM BIGINT;
BEGIN
  CHECKED=0;

  SELECT FIRST 1
         FIRM_ID
    FROM ACCOUNTS
   WHERE ACCOUNT_ID=:CALLER_ID
    INTO :FIRM_ID;

  IF (ACCEPTOR_PHONE IS NOT NULL) THEN BEGIN

    PHONE=ACCEPTOR_PHONE;

    EXECUTE PROCEDURE TRANSFORM_PHONE (PHONE)
     RETURNING_VALUES PHONE;

    EXECUTE PROCEDURE CONVERT_PHONE (PHONE,0)
     RETURNING_VALUES PHONE;

    EXECUTE PROCEDURE GET_OPERATOR (PHONE)
     RETURNING_VALUES OPERATOR_ID, RANGE_MIN, RANGE_MAX, PHONE_NUM;

    SELECT FIRST 1
           ACCOUNT_ID
      FROM ACCOUNTS
     WHERE PHONE=:PHONE
      INTO :ACCOUNT_ID;

    IF (ACCOUNT_ID IS NULL) THEN BEGIN

      SELECT FIRST 1
             CLIENT_ID
        FROM CLIENT_PHONES
       WHERE PHONE=:PHONE
        INTO :ACCOUNT_ID;

    END

    CHECKED=1;

  END

END

--

