/* Создание процедуры блокировки исходящих сообщений */

CREATE PROCEDURE /*PREFIX*/LOCK_OUT_MESSAGES
(
  MAX_COUNT INTEGER,
  LOCKED VARCHAR(32),
  TYPE_MESSAGE INTEGER,
  PERIOD INTEGER
)
RETURNS
(
 LOCK_COUNT INTEGER
)
AS
  DECLARE FLAG INTEGER;
  DECLARE OUT_MESSAGE_ID VARCHAR(32);
  DECLARE DATE_CREATE TIMESTAMP;
  DECLARE COMMON_PERIOD INTEGER;
  DECLARE MESSAGE_PERIOD INTEGER;
BEGIN
  LOCK_COUNT=0;

  FLAG=GEN_ID(/*PREFIX*/GEN_LOCK_OUT_MESSAGES,0);

  IF (FLAG=0) THEN BEGIN

    FLAG=GEN_ID(/*PREFIX*/GEN_LOCK_OUT_MESSAGES,-1);

    FOR SELECT OUT_MESSAGE_ID, DATE_CREATE, PERIOD
          FROM /*PREFIX*/OUT_MESSAGES
         WHERE DATE_OUT IS NULL
           AND LOCKED IS NULL
           AND TYPE_MESSAGE=:TYPE_MESSAGE
         ORDER BY PRIORITY, DATE_CREATE
          INTO :OUT_MESSAGE_ID, :DATE_CREATE, :MESSAGE_PERIOD DO BEGIN

      IF (MESSAGE_PERIOD IS NOT NULL) THEN
        COMMON_PERIOD=MESSAGE_PERIOD;
      ELSE
        COMMON_PERIOD=PERIOD;

      IF ((DATE_CREATE+(COMMON_PERIOD*(1e0/24/60/60)))>=CURRENT_TIMESTAMP) THEN BEGIN

        IF (LOCK_COUNT<=MAX_COUNT) THEN BEGIN

          UPDATE /*PREFIX*/OUT_MESSAGES
             SET LOCKED=:LOCKED
           WHERE OUT_MESSAGE_ID=:OUT_MESSAGE_ID;

          LOCK_COUNT=LOCK_COUNT+1;

        END ELSE BEGIN
          BREAK;
        END

      END

    END

    FLAG=GEN_ID(/*PREFIX*/GEN_LOCK_OUT_MESSAGES,1);

  END

END;

--
