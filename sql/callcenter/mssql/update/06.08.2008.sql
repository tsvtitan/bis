/* Расширение колонки комментарий в заданиях */

ALTER TABLE TASKS
ALTER COLUMN DESCRIPTION VARCHAR(4000)

--

/* Изменение таблицы просмотра заданий */

ALTER VIEW /*PREFIX*/S_TASKS
AS
   SELECT T.*, 
          D.DEAL_NUM,
          A.NAME AS ACTION_NAME,
          AC1.USER_NAME,
          AC2.USER_NAME AS PERFORMER_USER_NAME,
          R.NAME AS RESULT_NAME
     FROM /*PREFIX*/TASKS T
     JOIN /*PREFIX*/DEALS D ON D.DEAL_ID=T.DEAL_ID
     JOIN /*PREFIX*/ACTIONS A ON A.ACTION_ID=T.ACTION_ID
     LEFT JOIN /*PREFIX*/ACCOUNTS AC1 ON AC1.ACCOUNT_ID=T.ACCOUNT_ID
     LEFT JOIN /*PREFIX*/ACCOUNTS AC2 ON AC2.ACCOUNT_ID=T.PERFORMER_ID
     LEFT JOIN /*PREFIX*/RESULTS R ON R.RESULT_ID=T.RESULT_ID

--

/* Изменение процедуры создания задания */

ALTER PROCEDURE /*PREFIX*/I_TASK
  @TASK_ID VARCHAR(32),
  @DEAL_ID VARCHAR(32),
  @ACTION_ID VARCHAR(32),
  @ACCOUNT_ID VARCHAR(32),
  @PERFORMER_ID VARCHAR(32),
  @RESULT_ID VARCHAR(32),
  @DATE_CREATE DATETIME,
  @DATE_BEGIN DATETIME, 
  @DATE_END DATETIME, 
  @DESCRIPTION VARCHAR(4000)  
AS
BEGIN
  INSERT INTO /*PREFIX*/TASKS (TASK_ID,DEAL_ID,ACTION_ID,ACCOUNT_ID,PERFORMER_ID,RESULT_ID,
                               DATE_CREATE,DATE_BEGIN,DATE_END,DESCRIPTION)
       VALUES (@TASK_ID,@DEAL_ID,@ACTION_ID,@ACCOUNT_ID,@PERFORMER_ID,@RESULT_ID,
               @DATE_CREATE,@DATE_BEGIN,@DATE_END,@DESCRIPTION);
END;

--

/* Изменение процедуры изменения задания */

ALTER PROCEDURE /*PREFIX*/U_TASK
  @TASK_ID VARCHAR(32),
  @DEAL_ID VARCHAR(32),
  @ACTION_ID VARCHAR(32),
  @ACCOUNT_ID VARCHAR(32),
  @PERFORMER_ID VARCHAR(32),
  @RESULT_ID VARCHAR(32),
  @DATE_CREATE DATETIME,
  @DATE_BEGIN DATETIME, 
  @DATE_END DATETIME, 
  @DESCRIPTION VARCHAR(4000),
  @OLD_TASK_ID VARCHAR(32)
AS
BEGIN
  UPDATE /*PREFIX*/TASKS
     SET TASK_ID=@TASK_ID,
         DEAL_ID=@DEAL_ID,
         ACTION_ID=@ACTION_ID,
         ACCOUNT_ID=@ACCOUNT_ID,
         PERFORMER_ID=@PERFORMER_ID,
         RESULT_ID=@RESULT_ID,
         DATE_CREATE=@DATE_CREATE,
         DATE_BEGIN=@DATE_BEGIN,
         DATE_END=@DATE_END,
         DESCRIPTION=@DESCRIPTION
   WHERE TASK_ID=@OLD_TASK_ID;
END;

--

/* Изменение таблицы просмотра кредитного дела для задания оператора */

ALTER VIEW /*PREFIX*/S_DEAL_FIRMS
AS
   SELECT D.DEAL_ID,
          D.PLAN_ID,  
          D.GROUP_ID,
          D.AGREEMENT_ID,
          D.DEAL_NUM,
          D.DATE_ISSUE,
          D.DATE_CLOSE,
          D.ACCOUNT_NUM,
          D.ARREAR_PERIOD,
          D.INITIAL_DEBT,
          D.DEBT_INFORMATION,
          D.GUARANTORS, 
          D.DEBTOR_NUM,
          D.DEBTOR_DATE,
          DB.*,
          A.NUM AS AGREEMENT_NUM,
          F.FIRM_ID, 
          F.SMALL_NAME AS FIRM_SMALL_NAME,
          C.NAME AS CURRENCY_NAME,
          G.NAME AS GROUP_NAME,
          PL.NAME AS PLAN_NAME,
          P1.AMOUNT AS AMOUNT_PAYMENT,
          P.PATTERN,
          (CASE  
             WHEN P1.AMOUNT IS NULL THEN D.INITIAL_DEBT
             ELSE D.INITIAL_DEBT-P1.AMOUNT
           END) AS CURRENT_DEBT
     FROM /*PREFIX*/DEALS D
     JOIN /*PREFIX*/DEBTORS DB ON DB.DEBTOR_ID=D.DEBTOR_ID
     JOIN /*PREFIX*/GROUPS G ON G.GROUP_ID=D.GROUP_ID
     JOIN /*PREFIX*/AGREEMENTS A ON A.AGREEMENT_ID=D.AGREEMENT_ID
     JOIN /*PREFIX*/FIRMS F ON F.FIRM_ID=A.FIRM_ID
     JOIN /*PREFIX*/VARIANTS V ON V.VARIANT_ID=A.VARIANT_ID
     JOIN /*PREFIX*/CURRENCY C ON C.CURRENCY_ID=V.CURRENCY_ID
     LEFT JOIN /*PREFIX*/PLANS PL ON PL.PLAN_ID=D.PLAN_ID
     LEFT JOIN /*PREFIX*/PATTERNS P ON P.PATTERN_ID=G.PATTERN_ID
     LEFT JOIN (SELECT DEAL_ID, SUM(AMOUNT) AS AMOUNT 
                  FROM /*PREFIX*/PAYMENTS WHERE STATE=1
                 GROUP BY DEAL_ID)AS P1 ON P1.DEAL_ID=D.DEAL_ID  

--

/* Создание процедуры получения информации о кредитном деле */

CREATE PROCEDURE /*PREFIX*/GET_DEAL_INFO
  @DEAL_ID VARCHAR(32),
  @INITIAL_DEBT FLOAT OUT,
  @AMOUNT_PAYMENT FLOAT OUT,
  @CURRENT_DEBT FLOAT OUT
AS
BEGIN
  
  SELECT @INITIAL_DEBT=D.INITIAL_DEBT,
         @AMOUNT_PAYMENT=P1.AMOUNT,
         @CURRENT_DEBT= 
          (CASE  
             WHEN P1.AMOUNT IS NULL THEN D.INITIAL_DEBT
             ELSE D.INITIAL_DEBT-P1.AMOUNT
           END)
     FROM /*PREFIX*/DEALS D
     LEFT JOIN (SELECT DEAL_ID, SUM(AMOUNT) AS AMOUNT 
                  FROM /*PREFIX*/PAYMENTS WHERE STATE=1
                 GROUP BY DEAL_ID)AS P1 ON P1.DEAL_ID=D.DEAL_ID
    WHERE D.DEAL_ID=@DEAL_ID;
END;

--

/* Изменение таблицы просмотра заданий делопроизводителя, руководителя и менеджера */

ALTER VIEW /*PREFIX*/S_TASK_FIRMS
AS
   SELECT T.TASK_ID,
          D.DEAL_ID,
          DB.DEBTOR_ID,
          A.ACTION_ID,
          AR.AGREEMENT_ID,
          F.FIRM_ID,
          V.VARIANT_ID,
          C.CURRENCY_ID, 
          T.ACCOUNT_ID,
          A.NAME AS ACTION_NAME,
          A.PURPOSE,
          T.DATE_CREATE,
          T.DATE_BEGIN,
          D.DEAL_NUM,
          D.ACCOUNT_NUM,
          D.ARREAR_PERIOD,
          D.INITIAL_DEBT,
          D.DEBTOR_NUM,
          D.DEBTOR_DATE,
          D.GROUP_ID,
          F.SMALL_NAME AS FIRM_SMALL_NAME,
          DB.SURNAME,
          DB.NAME,
          DB.PATRONYMIC,
          C.NAME AS CURRENCY_NAME,
          (CASE  
             WHEN P1.AMOUNT IS NULL THEN D.INITIAL_DEBT
             ELSE D.INITIAL_DEBT-P1.AMOUNT
           END) AS CURRENT_DEBT,
          (SELECT TOP 1
                  R3.NAME AS LAST_RESULT_NAME
             FROM /*PREFIX*/TASKS T3
             JOIN /*PREFIX*/RESULTS R3 ON R3.RESULT_ID=T3.RESULT_ID
            WHERE T3.DEAL_ID=D.DEAL_ID
              AND T3.DATE_END IS NOT NULL
            ORDER BY T3.DATE_END DESC) AS LAST_RESULT_NAME
     FROM /*PREFIX*/TASKS T
     JOIN /*PREFIX*/DEALS D ON D.DEAL_ID=T.DEAL_ID 
     JOIN /*PREFIX*/ACTIONS A ON A.ACTION_ID=T.ACTION_ID
     JOIN /*PREFIX*/DEBTORS DB ON DB.DEBTOR_ID=D.DEBTOR_ID
     JOIN /*PREFIX*/AGREEMENTS AR ON AR.AGREEMENT_ID=D.AGREEMENT_ID
     JOIN /*PREFIX*/FIRMS F ON F.FIRM_ID=AR.FIRM_ID
     JOIN /*PREFIX*/VARIANTS V ON V.VARIANT_ID=AR.VARIANT_ID
     JOIN /*PREFIX*/CURRENCY C ON C.CURRENCY_ID=V.CURRENCY_ID
     LEFT JOIN (SELECT DEAL_ID, SUM(AMOUNT) AS AMOUNT 
                  FROM /*PREFIX*/PAYMENTS WHERE STATE=1
                 GROUP BY DEAL_ID)AS P1 ON P1.DEAL_ID=D.DEAL_ID    
    WHERE T.RESULT_ID IS NULL

--

/* Изменение таблицы просмотра кредитных дел со статусом ВСЕ */

ALTER VIEW /*PREFIX*/S_ALL_DEALS
AS 
  SELECT T.TASK_ID,
          T.DATE_CREATE,
          T.DATE_BEGIN,
          T.ACCOUNT_ID,
          T.RESULT_ID,
          D.DEAL_ID,
          D.DEAL_NUM,
          D.ACCOUNT_NUM,
          D.ARREAR_PERIOD,
          D.INITIAL_DEBT,
          D.DEBTOR_NUM,
          D.DEBTOR_DATE,
          D.GROUP_ID,
          D.DATE_CLOSE,
          A.ACTION_ID,
          A.NAME AS ACTION_NAME,
          A.PURPOSE,
          AR.AGREEMENT_ID,
          F.FIRM_ID,
          F.SMALL_NAME AS FIRM_SMALL_NAME,
          DB.DEBTOR_ID,
          DB.SURNAME,
          DB.NAME,
          DB.PATRONYMIC,
          DB.ADDRESS_RESIDENCE,
          DB.ADDRESS_ACTUAL,
          DB.ADDRESS_ADDITIONAL,
          DB.ADDRESS_WORK,
          V.VARIANT_ID,
          C.CURRENCY_ID, 
          C.NAME AS CURRENCY_NAME,
          (CASE  
             WHEN P1.AMOUNT IS NULL THEN D.INITIAL_DEBT
             ELSE D.INITIAL_DEBT-P1.AMOUNT
           END) AS CURRENT_DEBT
     FROM /*PREFIX*/TASKS T
     JOIN /*PREFIX*/DEALS D ON D.DEAL_ID=T.DEAL_ID
     JOIN /*PREFIX*/ACTIONS A ON A.ACTION_ID=T.ACTION_ID
     JOIN /*PREFIX*/DEBTORS DB ON DB.DEBTOR_ID=D.DEBTOR_ID
     JOIN /*PREFIX*/AGREEMENTS AR ON AR.AGREEMENT_ID=D.AGREEMENT_ID
     JOIN /*PREFIX*/FIRMS F ON F.FIRM_ID=AR.FIRM_ID
     JOIN /*PREFIX*/VARIANTS V ON V.VARIANT_ID=AR.VARIANT_ID
     JOIN /*PREFIX*/CURRENCY C ON C.CURRENCY_ID=V.CURRENCY_ID
     LEFT JOIN (SELECT DEAL_ID, SUM(AMOUNT) AS AMOUNT 
                  FROM /*PREFIX*/PAYMENTS WHERE STATE=1
                 GROUP BY DEAL_ID)AS P1 ON P1.DEAL_ID=D.DEAL_ID
     WHERE T.TASK_ID=(SELECT TOP 1 TASK_ID FROM TASKS WHERE DEAL_ID=D.DEAL_ID ORDER BY DATE_CREATE DESC)

--

/* Изменение таблицы просмотра кредитных дел со статусом ПРИОСТАНОВЛЕННЫЕ */

ALTER VIEW /*PREFIX*/S_CONSIDER_DEALS
AS 
  SELECT T.TASK_ID,
          T.DATE_CREATE,
          T.DATE_BEGIN,
          T.ACCOUNT_ID,
          T.RESULT_ID,
          D.DEAL_ID,
          D.DEAL_NUM,
          D.ACCOUNT_NUM,
          D.ARREAR_PERIOD,
          D.INITIAL_DEBT,
          D.DEBTOR_NUM,
          D.DEBTOR_DATE,
          D.GROUP_ID,
          D.DATE_CLOSE, 
          A.ACTION_ID,
          A.NAME AS ACTION_NAME,
          A.PURPOSE,
          AR.AGREEMENT_ID,
          F.FIRM_ID,
          F.SMALL_NAME AS FIRM_SMALL_NAME,
          DB.DEBTOR_ID,
          DB.SURNAME,
          DB.NAME,
          DB.PATRONYMIC,
          DB.ADDRESS_RESIDENCE,
          DB.ADDRESS_ACTUAL,
          DB.ADDRESS_ADDITIONAL,
          DB.ADDRESS_WORK,
          V.VARIANT_ID,
          C.CURRENCY_ID, 
          C.NAME AS CURRENCY_NAME,
          (CASE  
             WHEN P1.AMOUNT IS NULL THEN D.INITIAL_DEBT
             ELSE D.INITIAL_DEBT-P1.AMOUNT
           END) AS CURRENT_DEBT
     FROM /*PREFIX*/TASKS T
     JOIN /*PREFIX*/DEALS D ON D.DEAL_ID=T.DEAL_ID
     JOIN /*PREFIX*/ACTIONS A ON A.ACTION_ID=T.ACTION_ID
     JOIN /*PREFIX*/DEBTORS DB ON DB.DEBTOR_ID=D.DEBTOR_ID
     JOIN /*PREFIX*/AGREEMENTS AR ON AR.AGREEMENT_ID=D.AGREEMENT_ID
     JOIN /*PREFIX*/FIRMS F ON F.FIRM_ID=AR.FIRM_ID
     JOIN /*PREFIX*/VARIANTS V ON V.VARIANT_ID=AR.VARIANT_ID
     JOIN /*PREFIX*/CURRENCY C ON C.CURRENCY_ID=V.CURRENCY_ID
     LEFT JOIN (SELECT DEAL_ID, SUM(AMOUNT) AS AMOUNT 
                  FROM /*PREFIX*/PAYMENTS WHERE STATE=1
                 GROUP BY DEAL_ID)AS P1 ON P1.DEAL_ID=D.DEAL_ID
      WHERE T.RESULT_ID IS NULL
      AND D.DATE_CLOSE IS NULL
      AND T.ACTION_ID='3D3FCBA83B7291E94D723AC53EC369EB'

--

/* Изменение таблицы просмотра кредитных дел со статусом ОПЛАЧЕНЫ */


ALTER VIEW /*PREFIX*/S_FULLPAY_DEALS
AS 
 SELECT T.* FROM (  
   SELECT T.TASK_ID,
          T.DATE_CREATE,
          T.DATE_BEGIN,
          T.ACCOUNT_ID,
          T.RESULT_ID,
          D.DEAL_ID,
          D.DEAL_NUM,
          D.ACCOUNT_NUM,
          D.ARREAR_PERIOD,
          D.INITIAL_DEBT,
          D.DEBTOR_NUM,
          D.DEBTOR_DATE,
          D.GROUP_ID,
          D.DATE_CLOSE,
          A.ACTION_ID,
          A.NAME AS ACTION_NAME,
          A.PURPOSE,
          AR.AGREEMENT_ID,
          F.FIRM_ID,
          F.SMALL_NAME AS FIRM_SMALL_NAME,
          DB.DEBTOR_ID,
          DB.SURNAME,
          DB.NAME,
          DB.PATRONYMIC,
          DB.ADDRESS_RESIDENCE,
          DB.ADDRESS_ACTUAL,
          DB.ADDRESS_ADDITIONAL,
          DB.ADDRESS_WORK,
          V.VARIANT_ID,
          C.CURRENCY_ID, 
          C.NAME AS CURRENCY_NAME,
          (CASE  
             WHEN P1.AMOUNT IS NULL THEN D.INITIAL_DEBT
             ELSE D.INITIAL_DEBT-P1.AMOUNT
           END) AS CURRENT_DEBT
     FROM /*PREFIX*/TASKS T
     JOIN /*PREFIX*/DEALS D ON D.DEAL_ID=T.DEAL_ID
     JOIN /*PREFIX*/ACTIONS A ON A.ACTION_ID=T.ACTION_ID
     JOIN /*PREFIX*/DEBTORS DB ON DB.DEBTOR_ID=D.DEBTOR_ID
     JOIN /*PREFIX*/AGREEMENTS AR ON AR.AGREEMENT_ID=D.AGREEMENT_ID
     JOIN /*PREFIX*/FIRMS F ON F.FIRM_ID=AR.FIRM_ID
     JOIN /*PREFIX*/VARIANTS V ON V.VARIANT_ID=AR.VARIANT_ID
     JOIN /*PREFIX*/CURRENCY C ON C.CURRENCY_ID=V.CURRENCY_ID
     LEFT JOIN (SELECT DEAL_ID, SUM(AMOUNT) AS AMOUNT 
                  FROM /*PREFIX*/PAYMENTS WHERE STATE=1
                 GROUP BY DEAL_ID)AS P1 ON P1.DEAL_ID=D.DEAL_ID
     WHERE T.TASK_ID=(SELECT TOP 1 TASK_ID FROM TASKS WHERE DEAL_ID=D.DEAL_ID ORDER BY DATE_CREATE DESC)
) T
WHERE T.CURRENT_DEBT <= 0

--

/* Изменение таблицы просмотра кредитных дел со статусом НОВЫЕ ДЕЛА */

ALTER VIEW /*PREFIX*/S_NEW_DEALS
AS 
  SELECT T.TASK_ID,
          T.DATE_CREATE,
          T.DATE_BEGIN,
          T.ACCOUNT_ID,
          T.RESULT_ID,
          D.DEAL_ID,
          D.DEAL_NUM,
          D.ACCOUNT_NUM,
          D.ARREAR_PERIOD,
          D.INITIAL_DEBT,
          D.DEBTOR_NUM,
          D.DEBTOR_DATE,
          D.GROUP_ID,
          D.DATE_CLOSE,
          A.ACTION_ID,
          A.NAME AS ACTION_NAME,
          A.PURPOSE,
          AR.AGREEMENT_ID,
          F.FIRM_ID,
          F.SMALL_NAME AS FIRM_SMALL_NAME,
          DB.DEBTOR_ID,
          DB.SURNAME,
          DB.NAME,
          DB.PATRONYMIC,
          DB.ADDRESS_RESIDENCE,
          DB.ADDRESS_ACTUAL,
          DB.ADDRESS_ADDITIONAL,
          DB.ADDRESS_WORK,
          V.VARIANT_ID,
          C.CURRENCY_ID, 
          C.NAME AS CURRENCY_NAME,
          (CASE  
             WHEN P1.AMOUNT IS NULL THEN D.INITIAL_DEBT
             ELSE D.INITIAL_DEBT-P1.AMOUNT
           END) AS CURRENT_DEBT
     FROM /*PREFIX*/TASKS T
     JOIN /*PREFIX*/DEALS D ON D.DEAL_ID=T.DEAL_ID
     JOIN /*PREFIX*/ACTIONS A ON A.ACTION_ID=T.ACTION_ID
     JOIN /*PREFIX*/DEBTORS DB ON DB.DEBTOR_ID=D.DEBTOR_ID
     JOIN /*PREFIX*/AGREEMENTS AR ON AR.AGREEMENT_ID=D.AGREEMENT_ID
     JOIN /*PREFIX*/FIRMS F ON F.FIRM_ID=AR.FIRM_ID
     JOIN /*PREFIX*/VARIANTS V ON V.VARIANT_ID=AR.VARIANT_ID
     JOIN /*PREFIX*/CURRENCY C ON C.CURRENCY_ID=V.CURRENCY_ID
     LEFT JOIN (SELECT DEAL_ID, SUM(AMOUNT) AS AMOUNT 
                  FROM /*PREFIX*/PAYMENTS WHERE STATE=1
                 GROUP BY DEAL_ID)AS P1 ON P1.DEAL_ID=D.DEAL_ID
      WHERE T.RESULT_ID IS NULL
      AND D.DATE_CLOSE IS NULL
      AND T.DATE_CREATE<=CURRENT_TIMESTAMP     
      AND (SELECT COUNT(*) FROM /*PREFIX*/TASKS T2 WHERE T2.DEAL_ID=T.DEAL_ID)=1 

--

/* Изменение таблицы просмотра кредитных дел со статусом СВЕРИТЬ ОПЛАТУ */

ALTER VIEW /*PREFIX*/S_REVISE_DEALS
AS 
  SELECT T.TASK_ID,
          T.DATE_CREATE,
          T.DATE_BEGIN,
          T.ACCOUNT_ID,
          T.RESULT_ID,
          D.DEAL_ID,
          D.DEAL_NUM,
          D.ACCOUNT_NUM,
          D.ARREAR_PERIOD,
          D.INITIAL_DEBT,
          D.DEBTOR_NUM,
          D.DEBTOR_DATE,
          D.GROUP_ID,
          D.DATE_CLOSE,
          A.ACTION_ID,
          A.NAME AS ACTION_NAME,
          A.PURPOSE,
          AR.AGREEMENT_ID,
          F.FIRM_ID,
          F.SMALL_NAME AS FIRM_SMALL_NAME,
          DB.DEBTOR_ID,
          DB.SURNAME,
          DB.NAME,
          DB.PATRONYMIC,
          DB.ADDRESS_RESIDENCE,
          DB.ADDRESS_ACTUAL,
          DB.ADDRESS_ADDITIONAL,
          DB.ADDRESS_WORK,
          V.VARIANT_ID,
          C.CURRENCY_ID, 
          C.NAME AS CURRENCY_NAME,
          (CASE  
             WHEN P1.AMOUNT IS NULL THEN D.INITIAL_DEBT
             ELSE D.INITIAL_DEBT-P1.AMOUNT
           END) AS CURRENT_DEBT
     FROM /*PREFIX*/TASKS T
     JOIN /*PREFIX*/DEALS D ON D.DEAL_ID=T.DEAL_ID
     JOIN /*PREFIX*/ACTIONS A ON A.ACTION_ID=T.ACTION_ID
     JOIN /*PREFIX*/DEBTORS DB ON DB.DEBTOR_ID=D.DEBTOR_ID
     JOIN /*PREFIX*/AGREEMENTS AR ON AR.AGREEMENT_ID=D.AGREEMENT_ID
     JOIN /*PREFIX*/FIRMS F ON F.FIRM_ID=AR.FIRM_ID
     JOIN /*PREFIX*/VARIANTS V ON V.VARIANT_ID=AR.VARIANT_ID
     JOIN /*PREFIX*/CURRENCY C ON C.CURRENCY_ID=V.CURRENCY_ID
     LEFT JOIN (SELECT DEAL_ID, SUM(AMOUNT) AS AMOUNT 
                  FROM /*PREFIX*/PAYMENTS WHERE STATE=1
                 GROUP BY DEAL_ID)AS P1 ON P1.DEAL_ID=D.DEAL_ID
      WHERE T.RESULT_ID IS NULL
      AND D.DATE_CLOSE IS NULL
      AND T.ACTION_ID='B9227FBB961E8E9F4A326DB6DAC51B58'

--

/* Изменение таблицы просмотра кредитных дел со статусом В РАБОТЕ */

ALTER VIEW /*PREFIX*/S_WORK_DEALS
AS 
  SELECT T.TASK_ID,
          T.DATE_CREATE,
          T.DATE_BEGIN,
          T.ACCOUNT_ID,
          T.RESULT_ID,
          D.DEAL_ID,
          D.DEAL_NUM,
          D.ACCOUNT_NUM,
          D.ARREAR_PERIOD,
          D.INITIAL_DEBT,
          D.DEBTOR_NUM,
          D.DEBTOR_DATE,
          D.GROUP_ID,
          D.DATE_CLOSE,
          A.ACTION_ID,
          A.NAME AS ACTION_NAME,
          A.PURPOSE,
          AR.AGREEMENT_ID,
          F.FIRM_ID,
          F.SMALL_NAME AS FIRM_SMALL_NAME,
          DB.DEBTOR_ID,
          DB.SURNAME,
          DB.NAME,
          DB.PATRONYMIC,
          DB.ADDRESS_RESIDENCE,
          DB.ADDRESS_ACTUAL,
          DB.ADDRESS_ADDITIONAL,
          DB.ADDRESS_WORK,
          V.VARIANT_ID,
          C.CURRENCY_ID, 
          C.NAME AS CURRENCY_NAME,
          (CASE  
             WHEN P1.AMOUNT IS NULL THEN D.INITIAL_DEBT
             ELSE D.INITIAL_DEBT-P1.AMOUNT
           END) AS CURRENT_DEBT
     FROM /*PREFIX*/TASKS T
     JOIN /*PREFIX*/DEALS D ON D.DEAL_ID=T.DEAL_ID
     JOIN /*PREFIX*/ACTIONS A ON A.ACTION_ID=T.ACTION_ID
     JOIN /*PREFIX*/DEBTORS DB ON DB.DEBTOR_ID=D.DEBTOR_ID
     JOIN /*PREFIX*/AGREEMENTS AR ON AR.AGREEMENT_ID=D.AGREEMENT_ID
     JOIN /*PREFIX*/FIRMS F ON F.FIRM_ID=AR.FIRM_ID
     JOIN /*PREFIX*/VARIANTS V ON V.VARIANT_ID=AR.VARIANT_ID
     JOIN /*PREFIX*/CURRENCY C ON C.CURRENCY_ID=V.CURRENCY_ID
     LEFT JOIN (SELECT DEAL_ID, SUM(AMOUNT) AS AMOUNT 
                  FROM /*PREFIX*/PAYMENTS WHERE STATE=1
                 GROUP BY DEAL_ID)AS P1 ON P1.DEAL_ID=D.DEAL_ID
      WHERE T.RESULT_ID IS NULL
      AND D.DATE_CLOSE IS NULL
      AND (SELECT COUNT(*) FROM /*PREFIX*/TASKS T2 WHERE T2.DEAL_ID=T.DEAL_ID)>1 

--

/* Изменение процедуры блокировки одного задания */

ALTER PROCEDURE /*PREFIX*/LOCK_TASK
  @ACCOUNT_ID VARCHAR(32),
  @PURPOSE INTEGER,
  @DATE_CREATE DATETIME,
  @TASK_ID VARCHAR(32) OUTPUT
AS
BEGIN
  IF (@ACCOUNT_ID IS NOT NULL) BEGIN
    BEGIN TRANSACTION;
    IF (@DATE_CREATE IS NULL) BEGIN
      SET @DATE_CREATE=CURRENT_TIMESTAMP;
    END;
    SET @TASK_ID=(SELECT TOP 1 T.TASK_ID
                    FROM /*PREFIX*/TASKS T
                    JOIN /*PREFIX*/ACCOUNT_ACTIONS AA ON AA.ACTION_ID=T.ACTION_ID
                    JOIN /*PREFIX*/ACCOUNT_GROUPS AG ON AG.ACCOUNT_ID=AA.ACCOUNT_ID 
                    JOIN /*PREFIX*/DEALS D ON D.DEAL_ID=T.DEAL_ID AND D.GROUP_ID=AG.GROUP_ID
                    JOIN /*PREFIX*/ACTIONS A ON A.ACTION_ID=AA.ACTION_ID
                   WHERE AA.ACCOUNT_ID=@ACCOUNT_ID
                     AND (T.ACCOUNT_ID IS NULL OR T.ACCOUNT_ID=@ACCOUNT_ID)
                     AND T.RESULT_ID IS NULL
                     AND D.DATE_CLOSE IS NULL
                     AND T.DATE_CREATE<=@DATE_CREATE
                     AND A.PURPOSE=@PURPOSE
                   ORDER BY AG.PRIORITY, AA.PRIORITY, T.DATE_CREATE);
    IF (@TASK_ID IS NOT NULL) BEGIN
      UPDATE /*PREFIX*/TASKS
         SET ACCOUNT_ID=@ACCOUNT_ID,
             DATE_BEGIN=GETDATE()
       WHERE TASK_ID=@TASK_ID; 
    END;
    COMMIT TRANSACTION;
  END;
END

--








