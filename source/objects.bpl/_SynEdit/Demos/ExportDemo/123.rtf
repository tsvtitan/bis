{\rtf1\ansi\deff0\deftab720{\fonttbl{\f0\fmodern Courier New;}}
{\colortbl}
{\info{\comment Generated by the SynEdit RTF exporter}
{\title Source file exported to file}}

\deflang1033\pard\plain\f0\fs20 \i \{-------------------------------------------------------------------------------
\par The contents of this file are subject to the Mozilla Public License
\par Version 1.1 (the "License"); you may not use this file except in compliance
\par with the License. You may obtain a copy of the License at
\par http://www.mozilla.org/MPL/
\par 
\par Software distributed under the License is distributed on an "AS IS" basis,
\par WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
\par the specific language governing rights and limitations under the License.
\par 
\par The Original Code is: frmExportMain.pas, released 2000-06-23.
\par 
\par The Original Code is part of the ExportDemo project, written by Michael Hieke
\par for the SynEdit component suite.
\par All Rights Reserved.
\par 
\par Contributors to the SynEdit project are listed in the Contributors.txt file.
\par 
\par Alternatively, the contents of this file may be used under the terms of the
\par GNU General Public License Version 2 or later (the "GPL"), in which case
\par the provisions of the GPL are applicable instead of those above.
\par If you wish to allow use of your version of this file only under the terms
\par of the GPL and not to allow others to use your version of this file
\par under the MPL, indicate your decision by deleting the provisions above and
\par replace them with the notice and other provisions required by the GPL.
\par If you do not delete the provisions above, a recipient may use your version
\par of this file under either the MPL or the GPL.
\par 
\par $Id: frmExportMain.pas,v 1.2 2000/11/22 08:37:05 mghie Exp $
\par 
\par You may retrieve the latest version of this file at the SynEdit home page,
\par located at http://SynEdit.SourceForge.net
\par 
\par Known Issues:
\par -------------------------------------------------------------------------------\}
\par 
\par \i0\b unit\b0  frmExportMain;
\par 
\par \i \{$I SynEdit.inc\}
\par 
\par \i0\b interface
\par 
\par uses
\par \b0   Windows, Messages, SysUtils, Classes, Graphics, Controls, Forms, Dialogs,
\par   SynEdit, Menus, SynExportRTF, SynEditExport, SynExportHTML,
\par   SynEditHighlighter, SynHighlighterPas, ComCtrls, SynHighlighterDfm,
\par   SynHighlighterCpp;
\par 
\par \b type
\par \b0   TForm1 = \b class\b0 (TForm)
\par     menuMain: TMainMenu;
\par     mFile: TMenuItem;
\par     miFileOpen: TMenuItem;
\par     N1: TMenuItem;
\par     miFileExit: TMenuItem;
\par     SynEdit1: TSynEdit;
\par     dlgFileOpen: TOpenDialog;
\par     dlgFileSaveAs: TSaveDialog;
\par     mExport: TMenuItem;
\par     miExportToFile: TMenuItem;
\par     Statusbar: TStatusBar;
\par     SynExporterHTML1: TSynExporterHTML;
\par     SynExporterRTF1: TSynExporterRTF;
\par     miExportAsHTML: TMenuItem;
\par     miExportAsRTF: TMenuItem;
\par     miExportAllFormats: TMenuItem;
\par     N2: TMenuItem;
\par     N3: TMenuItem;
\par     miExportClipboardNative: TMenuItem;
\par     miExportClipboardText: TMenuItem;
\par     SynCppSyn1: TSynCppSyn;
\par     SynDfmSyn1: TSynDfmSyn;
\par     SynPasSyn1: TSynPasSyn;
\par     \b procedure\b0  FormCreate(Sender: TObject);
\par     \b procedure\b0  FormDestroy(Sender: TObject);
\par     \b procedure\b0  miFileOpenClick(Sender: TObject);
\par     \b procedure\b0  miFileExitClick(Sender: TObject);
\par     \b procedure\b0  miExportToFileClick(Sender: TObject);
\par     \b procedure\b0  mExportClick(Sender: TObject);
\par     \b procedure\b0  miExportAsClicked(Sender: TObject);
\par     \b procedure\b0  miExportClipboardNativeClick(Sender: TObject);
\par     \b procedure\b0  miExportClipboardTextClick(Sender: TObject);
\par   \b private
\par \b0     fExportAs: integer;
\par     fHighlighters: TStringList;
\par   \b end\b0 ;
\par 
\par \b var
\par \b0   Form1: TForm1;
\par 
\par \b implementation
\par 
\par \b0\i \{$R *.DFM\}
\par 
\par \i0\b uses
\par \b0   uHighlighterProcs, Clipbrd;
\par 
\par \i \{ TForm1 \}
\par \i0   
\par \b procedure\b0  TForm1.FormCreate(Sender: TObject);
\par \b begin
\par \b0   fHighlighters := TStringList.Create;
\par   fHighlighters.Sorted := TRUE;
\par   GetHighlighters(Self, fHighlighters, FALSE);
\par   dlgFileOpen.Filter := GetHighlightersFilter(fHighlighters) + 'All files|*.*|';
\par \b end\b0 ;
\par 
\par \b procedure\b0  TForm1.FormDestroy(Sender: TObject);
\par \b begin
\par \b0   fHighlighters.Free;
\par \b end\b0 ;
\par 
\par \b procedure\b0  TForm1.miFileOpenClick(Sender: TObject);
\par \b begin
\par \b0   \b if\b0  dlgFileOpen.Execute \b then\b0  \b begin
\par \b0     SynEdit1.Lines.LoadFromFile(dlgFileOpen.FileName);
\par     SynEdit1.Highlighter := GetHighlighterFromFileExt(fHighlighters,
\par       ExtractFileExt(dlgFileOpen.FileName));
\par     \b if\b0  Assigned(SynEdit1.Highlighter) \b then
\par \b0       Statusbar.SimpleText := 'Using highlighter for ' +
\par         SynEdit1.Highlighter.GetLanguageName
\par     \b else
\par \b0       Statusbar.SimpleText := 'No highlighter assigned';
\par   \b end\b0 ;
\par \b end\b0 ;
\par 
\par \b procedure\b0  TForm1.miFileExitClick(Sender: TObject);
\par \b begin
\par \b0   Close;
\par \b end\b0 ;
\par 
\par \b procedure\b0  TForm1.mExportClick(Sender: TObject);
\par \b var
\par \b0   HasText, IsEnabled: boolean;
\par   i: integer;
\par \b begin
\par \b0   miExportAsHTML.Checked := fExportAs = 1;
\par   miExportAsRTF.Checked := fExportAs = 2;
\par   miExportAllFormats.Checked := fExportAs = 0;
\par 
\par   HasText := FALSE;
\par   \b for\b0  i := 0 \b to\b0  SynEdit1.Lines.Count - 1 \b do
\par \b0     \b if\b0  SynEdit1.Lines[i] <> '' \b then\b0  \b begin
\par \b0       HasText := TRUE;
\par       break;
\par     \b end\b0 ;
\par   IsEnabled := HasText \b and\b0  Assigned(SynEdit1.Highlighter);
\par   miExportClipboardNative.Enabled := IsEnabled;
\par   IsEnabled := IsEnabled \b and\b0  (fExportAs > 0);
\par   miExportToFile.Enabled := IsEnabled;
\par   miExportClipboardText.Enabled := IsEnabled;
\par \b end\b0 ;
\par 
\par \b procedure\b0  TForm1.miExportToFileClick(Sender: TObject);
\par \b var
\par \b0   FileName: \b string\b0 ;
\par   Exporter: TSynCustomExporter;
\par \b begin
\par \b0   \b case\b0  fExportAs \b of
\par \b0     1: dlgFileSaveAs.Filter := SynExporterHTML1.DefaultFilter;
\par     2: dlgFileSaveAs.Filter := SynExporterRTF1.DefaultFilter;
\par   \b end\b0 ;
\par   \b if\b0  dlgFileSaveAs.Execute \b then\b0  \b begin
\par \b0     Exporter := \b nil\b0 ;
\par     FileName := dlgFileSaveAs.FileName;
\par     \b case\b0  fExportAs \b of
\par \b0       1: \b begin
\par \b0            \b if\b0  ExtractFileExt(FileName) = '' \b then
\par \b0              FileName := FileName + '.html';
\par            Exporter := SynExporterHTML1;
\par          \b end\b0 ;
\par       2: \b begin
\par \b0            \b if\b0  ExtractFileExt(FileName) = '' \b then
\par \b0              FileName := FileName + '.rtf';
\par            Exporter := SynExporterRTF1;
\par          \b end\b0 ;
\par     \b end\b0 ;
\par     \b if\b0  Assigned(Exporter) \b then\b0  \b with\b0  Exporter \b do\b0  \b begin
\par \b0       Title := 'Source file exported to file';
\par       Highlighter := SynEdit1.Highlighter;
\par       ExportAsText := TRUE;
\par       ExportAll(SynEdit1.Lines);
\par       SaveToFile(FileName);
\par     \b end\b0 ;
\par   \b end\b0 ;
\par \b end\b0 ;
\par 
\par \b procedure\b0  TForm1.miExportAsClicked(Sender: TObject);
\par \b begin
\par \b0   \b if\b0  Sender = miExportAsHTML \b then
\par \b0     fExportAs := 1
\par   \b else\b0  \b if\b0  Sender = miExportAsRTF \b then
\par \b0     fExportAs := 2
\par   \b else
\par \b0     fExportAs := 0;
\par \b end\b0 ;
\par 
\par \b procedure\b0  TForm1.miExportClipboardNativeClick(Sender: TObject);
\par \b begin
\par \b0   Clipboard.Open;
\par   \b try
\par \b0     Clipboard.AsText := SynEdit1.Lines.Text;
\par     \i // HTML?
\par \i0     \b if\b0  fExportAs \b in\b0  [0, 1] \b then\b0  \b with\b0  SynExporterHTML1 \b do\b0  \b begin
\par \b0       Title := 'Source file exported to clipboard (native format)';
\par       ExportAsText := FALSE;
\par       Highlighter := SynEdit1.Highlighter;
\par       ExportAll(SynEdit1.Lines);
\par       CopyToClipboard;
\par     \b end\b0 ;
\par     \i // RTF?
\par \i0     \b if\b0  fExportAs \b in\b0  [0, 2] \b then\b0  \b with\b0  SynExporterRTF1 \b do\b0  \b begin
\par \b0       Title := 'Source file exported to clipboard (native format)';
\par       ExportAsText := FALSE;
\par       Highlighter := SynEdit1.Highlighter;
\par       ExportAll(SynEdit1.Lines);
\par       CopyToClipboard;
\par     \b end\b0 ;
\par   \b finally
\par \b0     Clipboard.Close;
\par   \b end\b0 ;
\par \b end\b0 ;
\par 
\par \b procedure\b0  TForm1.miExportClipboardTextClick(Sender: TObject);
\par \b var
\par \b0   Exporter: TSynCustomExporter;
\par \b begin
\par \b0   Exporter := \b nil\b0 ;
\par   \b case\b0  fExportAs \b of
\par \b0     1: Exporter := SynExporterHTML1;
\par     2: Exporter := SynExporterRTF1;
\par   \b end\b0 ;
\par   \b if\b0  Assigned(Exporter) \b then\b0  \b with\b0  Exporter \b do\b0  \b begin
\par \b0     Title := 'Source file exported to clipboard (as text)';
\par     ExportAsText := TRUE;
\par     Highlighter := SynEdit1.Highlighter;
\par     ExportAll(SynEdit1.Lines);
\par     CopyToClipboard;
\par   \b end\b0 ;
\par \b end\b0 ;
\par 
\par \b end\b0 .
\par 
\par 
\par }