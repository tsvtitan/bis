/* Создание функции вырезки подстроки */

DECLARE EXTERNAL FUNCTION /*PREFIX*/SUB_STRING
    CSTRING(32767),
    INTEGER,
    INTEGER
RETURNS CSTRING(32767)
ENTRY_POINT 'SUB_STRING' MODULE_NAME 'udfibase.dll';

--

/* Создание функции замены строки */

DECLARE EXTERNAL FUNCTION /*PREFIX*/REPLACE_STRING
    CSTRING(32767),
    CSTRING(32767),
    CSTRING(32767)
RETURNS CSTRING(32767)
ENTRY_POINT 'REPLACE_STRING' MODULE_NAME 'udfibase.dll';

--

/* Создание функции подсчета времени работы системы */

DECLARE EXTERNAL FUNCTION SYSTEM_UPTIME
RETURNS BIGINT BY VALUE
ENTRY_POINT 'SYSTEM_UPTIME' MODULE_NAME 'udfibase.dll';

--

/* Создание процедуры получения константы */

CREATE OR ALTER PROCEDURE /*PREFIX*/GET_CONST_VALUE
(
  CONST_NAME VARCHAR(100)
)
RETURNS
(
  CONST_VALUE VARCHAR(4000)
)
AS
BEGIN
  CONST_VALUE=NULL;
  FOR SELECT SUBSTRING("VALUE" FROM 1 FOR 4000)
        FROM /*PREFIX*/CONSTS
       WHERE UPPER(NAME)=UPPER(:CONST_NAME)
        INTO :CONST_VALUE DO BEGIN
    BREAK;
  END
  SUSPEND;
END;

--

/* Создание процедуры запроса баланса */

CREATE OR ALTER PROCEDURE /*PREFIX*/CODE_BALANCE
(
 ACCOUNT_ID VARCHAR(32),
 IN_MESSAGE_ID VARCHAR(32)
)
AS
DECLARE CONTACT VARCHAR(100);
DECLARE SENDER_ID VARCHAR(32);
DECLARE S VARCHAR(70);
DECLARE SUM_CHARGE NUMERIC(15,2);
DECLARE SUM_RECEIPT NUMERIC(15,2);
DECLARE BALANCE NUMERIC(15,2);
DECLARE CNT INTEGER;
DECLARE CHARGE_TYPE_ID VARCHAR(32);
DECLARE CONST_VALUE VARCHAR(4000);
BEGIN
  SELECT CONTACT, SENDER_ID
    FROM /*PREFIX*/IN_MESSAGES
   WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID
    INTO :CONTACT, :SENDER_ID;

  IF ((CONTACT IS NOT NULL) AND (SENDER_ID IS NOT NULL)) THEN BEGIN


    SELECT (CASE WHEN SUM(SUM_CHARGE) IS NULL THEN 0.0 ELSE SUM(SUM_CHARGE) END)
      FROM /*PREFIX*/CHARGES
     WHERE ACCOUNT_ID=:SENDER_ID
      INTO :SUM_CHARGE;

    SELECT (CASE WHEN SUM(SUM_RECEIPT) IS NULL THEN 0.0 ELSE SUM(SUM_RECEIPT) END)
      FROM /*PREFIX*/RECEIPTS
     WHERE ACCOUNT_ID=:SENDER_ID
      INTO :SUM_RECEIPT;

    BALANCE=SUM_RECEIPT-SUM_CHARGE;

    SELECT COUNT(*)
      FROM /*PREFIX*/DRIVERS D
      JOIN /*PREFIX*/ ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
     WHERE D.DRIVER_ID=:SENDER_ID
       AND A.LOCKED<>1
      INTO :CNT;

    IF (CNT>0) THEN BEGIN

/*      S='Ваш баланс = '||CAST(BALANCE AS VARCHAR(30))||' р.';*/

      SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('2031AA8F2E4B959248967F2838DC5F19') INTO :S;

      IF (S IS NOT NULL) THEN BEGIN

        S=/*PREFIX*/REPLACE_STRING(S,'%BALANCE',CAST(BALANCE AS VARCHAR(30)));

        INSERT INTO /*PREFIX*/OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                            TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED)
                                    VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                            :S,NULL,0,:CONTACT,NULL,1,NULL);
      END

    END

  END
END;

--

/* Создание процедуры проверки работы модемов */

CREATE OR ALTER PROCEDURE /*PREFIX*/CODE_TEST
(
  ACCOUNT_ID VARCHAR(32),
  IN_MESSAGE_ID VARCHAR(32))
AS
DECLARE CONTACT VARCHAR(100);
DECLARE SENDER_ID VARCHAR(32);
DECLARE S VARCHAR(70);
DECLARE CNT INTEGER;
DECLARE MSEC BIGINT;
DECLARE DAYS INTEGER;
DECLARE HOURS INTEGER;
DECLARE MINUTES INTEGER;
DECLARE SECONDS INTEGER;
DECLARE D TIMESTAMP;
DECLARE UPTIME VARCHAR(100);
BEGIN
  SELECT CONTACT, SENDER_ID
    FROM /*PREFIX*/IN_MESSAGES
   WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID
    INTO :CONTACT, :SENDER_ID;

  IF ((CONTACT IS NOT NULL) AND (SENDER_ID IS NOT NULL)) THEN BEGIN

    SELECT COUNT(*)
      FROM /*PREFIX*/ACCOUNT_ROLES
     WHERE ROLE_ID IN ('3AC5EA48DEA3A72A4380D9CC5923471F','FF7F332564F795C8411BF28652B22BEA') /* Администраторы, Диспетчеры */
       AND ACCOUNT_ID=:SENDER_ID
      INTO CNT;

    IF (CNT>0) THEN BEGIN

/*      S='Система работает нормально'; */
      SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('DD5F7C07EB2CBC6B4CE52043B3BF395D') INTO :S;

      IF (S IS NOT NULL) THEN BEGIN

        MSEC=/*PREFIX*/SYSTEM_UPTIME();
        DAYS=MSEC/(1000*60*60*24);
        MSEC=MSEC-(DAYS*1000*60*60*24);
        HOURS=MSEC/(1000*60*60);
        MSEC=MSEC-(HOURS*1000*60*60);
        MINUTES=MSEC/(1000*60);
        MSEC=MSEC-(MINUTES*1000*60);
        SECONDS=MSEC/1000;
        D=CAST((CAST(HOURS AS VARCHAR(2))||':'||CAST(MINUTES AS VARCHAR(2))||':'||CAST(SECONDS AS VARCHAR(2))) AS TIME);

        UPTIME=CAST(DAYS AS VARCHAR(10))||'-'||/*PERFIX*/FORMAT_DATETIME('hh:nn:ss',D);

        S=/*PREFIX*/REPLACE_STRING(S,'%UPTIME',UPTIME);

        INSERT INTO /*PREFIX*/OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                            TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED)
                                    VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                            :S,NULL,0,:CONTACT,NULL,0,NULL);
      END
    END

  END

END;

--

/* Создание процедуры запросы черезвычайного проишествия  */

CREATE OR ALTER PROCEDURE /*PREFIX*/CODE_INCIDENT
(
  ACCOUNT_ID VARCHAR(32),
  IN_MESSAGE_ID VARCHAR(32)
)
AS
DECLARE CONTACT VARCHAR(100);
DECLARE SENDER_ID VARCHAR(32);
DECLARE TEXT_IN VARCHAR(4000);
DECLARE CNT INTEGER;
DECLARE SUM_CHARGE NUMERIC(15,2);
DECLARE SUM_RECEIPT NUMERIC(15,2);
DECLARE BALANCE NUMERIC(15,2);
DECLARE MIN_BALANCE NUMERIC(15,2);
DECLARE USER_NAME VARCHAR(100);
DECLARE CALLSIGN VARCHAR(10);
DECLARE S VARCHAR(250);
BEGIN
  SELECT IM.CONTACT, IM.SENDER_ID, IM.TEXT_IN
    FROM /*PREFIX*/IN_MESSAGES IM
    LEFT JOIN /*PREFIX*/CODE_MESSAGES CM ON CM.CODE_MESSAGE_ID=IM.CODE_MESSAGE_ID
   WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID
    INTO :CONTACT, :SENDER_ID, :TEXT_IN;

  IF ((CONTACT IS NOT NULL) AND (SENDER_ID IS NOT NULL) AND (TEXT_IN IS NOT NULL)) THEN BEGIN

    SELECT COUNT(*)
      FROM /*PREFIX*/DRIVERS D
      JOIN /*PREFIX*/ ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
     WHERE D.DRIVER_ID=:SENDER_ID
       AND A.LOCKED<>1
      INTO :CNT;

    IF (CNT>0) THEN BEGIN

      SELECT (CASE WHEN SUM(SUM_CHARGE) IS NULL THEN 0.0 ELSE SUM(SUM_CHARGE) END)
        FROM /*PREFIX*/CHARGES
       WHERE ACCOUNT_ID=:SENDER_ID
        INTO :SUM_CHARGE;

      SELECT (CASE WHEN SUM(SUM_RECEIPT) IS NULL THEN 0.0 ELSE SUM(SUM_RECEIPT) END)
        FROM /*PREFIX*/RECEIPTS
       WHERE ACCOUNT_ID=:SENDER_ID
        INTO :SUM_RECEIPT;

      BALANCE=SUM_RECEIPT-SUM_CHARGE;

      SELECT D.MIN_BALANCE, A.USER_NAME, C.CALLSIGN
        FROM /*PREFIX*/DRIVERS D
        JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
        JOIN CARS C ON C.CAR_ID=D.CAR_ID
       WHERE D.DRIVER_ID=:SENDER_ID
        INTO :MIN_BALANCE, :USER_NAME, :CALLSIGN;

      SELECT COUNT(*)
        FROM /*PREFIX*/SHIFTS
       WHERE ACCOUNT_ID=:SENDER_ID
         AND DATE_END IS NULL
        INTO :CNT;

      IF ((CNT>0) AND ((MIN_BALANCE IS NULL) OR ((MIN_BALANCE IS NOT NULL) AND (BALANCE>MIN_BALANCE)))) THEN BEGIN

        S=:CALLSIGN||' '||:USER_NAME;
        INSERT INTO /*PREFIX*/ALARMS (ALARM_ID,RECIPIENT_ID,TYPE_ALARM,DATE_BEGIN,DATE_END,
                                      CAPTION,TEXT_ALARM)
                              VALUES (GET_UNIQUE_ID(),NULL,1,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP+5*(1e0/24/60),
                                      'Черезвычайное проишествие',:S);

        SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('7B7B35D636E1B840426877D1EB07428F') INTO :S;

        IF (S IS NOT NULL) THEN BEGIN

          S=/*PREFIX*/REPLACE_STRING(S,'%CODE',TEXT_IN);

          INSERT INTO /*PREFIX*/OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                              TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED)
                                      VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                              :S,NULL,0,:CONTACT,NULL,1,NULL);
        END

      END

    END

  END
END;

--

/* Создание процедуры запроса водитель заблудился  */

CREATE OR ALTER PROCEDURE /*PREFIX*/CODE_LOSE
(
  ACCOUNT_ID VARCHAR(32),
  IN_MESSAGE_ID VARCHAR(32)
)
AS
DECLARE CONTACT VARCHAR(100);
DECLARE SENDER_ID VARCHAR(32);
DECLARE TEXT_IN VARCHAR(4000);
DECLARE CNT INTEGER;
DECLARE SUM_CHARGE NUMERIC(15,2);
DECLARE SUM_RECEIPT NUMERIC(15,2);
DECLARE BALANCE NUMERIC(15,2);
DECLARE MIN_BALANCE NUMERIC(15,2);
DECLARE USER_NAME VARCHAR(100);
DECLARE CALLSIGN VARCHAR(10);
DECLARE S VARCHAR(250);
BEGIN
  SELECT IM.CONTACT, IM.SENDER_ID, IM.TEXT_IN
    FROM /*PREFIX*/IN_MESSAGES IM
    LEFT JOIN /*PREFIX*/CODE_MESSAGES CM ON CM.CODE_MESSAGE_ID=IM.CODE_MESSAGE_ID
   WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID
    INTO :CONTACT, :SENDER_ID, :TEXT_IN;

  IF ((CONTACT IS NOT NULL) AND (SENDER_ID IS NOT NULL) AND (TEXT_IN IS NOT NULL)) THEN BEGIN

    SELECT COUNT(*)
      FROM /*PREFIX*/DRIVERS D
      JOIN /*PREFIX*/ ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
     WHERE D.DRIVER_ID=:SENDER_ID
       AND A.LOCKED<>1
      INTO :CNT;

    IF (CNT>0) THEN BEGIN

      SELECT (CASE WHEN SUM(SUM_CHARGE) IS NULL THEN 0.0 ELSE SUM(SUM_CHARGE) END)
        FROM /*PREFIX*/CHARGES
       WHERE ACCOUNT_ID=:SENDER_ID
        INTO :SUM_CHARGE;

      SELECT (CASE WHEN SUM(SUM_RECEIPT) IS NULL THEN 0.0 ELSE SUM(SUM_RECEIPT) END)
        FROM /*PREFIX*/RECEIPTS
       WHERE ACCOUNT_ID=:SENDER_ID
        INTO :SUM_RECEIPT;

      BALANCE=SUM_RECEIPT-SUM_CHARGE;

      SELECT D.MIN_BALANCE, A.USER_NAME, C.CALLSIGN
        FROM /*PREFIX*/DRIVERS D
        JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
        JOIN CARS C ON C.CAR_ID=D.CAR_ID
       WHERE D.DRIVER_ID=:SENDER_ID
        INTO :MIN_BALANCE, :USER_NAME, :CALLSIGN;

      SELECT COUNT(*)
        FROM /*PREFIX*/SHIFTS
       WHERE ACCOUNT_ID=:SENDER_ID
         AND DATE_END IS NULL
        INTO :CNT;

      IF ((CNT>0) AND ((MIN_BALANCE IS NULL) OR ((MIN_BALANCE IS NOT NULL) AND (BALANCE>MIN_BALANCE)))) THEN BEGIN

        S=:CALLSIGN||' '||:USER_NAME;
        INSERT INTO /*PREFIX*/ALARMS (ALARM_ID,RECIPIENT_ID,TYPE_ALARM,DATE_BEGIN,DATE_END,
                                      CAPTION,TEXT_ALARM)
                              VALUES (GET_UNIQUE_ID(),NULL,0,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP+5*(1e0/24/60),
                                      'Водитель заблудился',:S);

        SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('AB84E2116D3485A847EEE59DB47CE27B') INTO :S;

        IF (S IS NOT NULL) THEN BEGIN

          S=/*PREFIX*/REPLACE_STRING(S,'%CODE',TEXT_IN);

          INSERT INTO /*PREFIX*/OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                              TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED)
                                      VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                              :S,NULL,0,:CONTACT,NULL,1,NULL);
        END

      END

    END

  END
END;

--

/* Создание процедуры запроса постановки на стоянку */

CREATE OR ALTER PROCEDURE /*PREFIX*/CODE_PARK_IN
(
  ACCOUNT_ID VARCHAR(32),
  IN_MESSAGE_ID VARCHAR(32)
)
AS
DECLARE CONTACT VARCHAR(100);
DECLARE SENDER_ID VARCHAR(32);
DECLARE CODE VARCHAR(100);
DECLARE S VARCHAR(1000);
DECLARE CNT INTEGER;
DECLARE SUM_CHARGE NUMERIC(15,2);
DECLARE SUM_RECEIPT NUMERIC(15,2);
DECLARE BALANCE NUMERIC(15,2);
DECLARE MIN_BALANCE NUMERIC(15,2);
DECLARE D TIMESTAMP;
DECLARE PARK_ID VARCHAR(32);
DECLARE PARK_NAME VARCHAR(100);
DECLARE PARK_DESCRIPTION VARCHAR(250);
DECLARE PRIORITY INTEGER;
/*DECLARE FLAG INTEGER;*/
DECLARE CHARGE_TYPE_ID VARCHAR(32);
BEGIN
  SELECT IM.CONTACT, IM.SENDER_ID, CM.CODE
    FROM /*PREFIX*/IN_MESSAGES IM
    LEFT JOIN /*PREFIX*/CODE_MESSAGES CM ON CM.CODE_MESSAGE_ID=IM.CODE_MESSAGE_ID
   WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID
    INTO :CONTACT, :SENDER_ID, :CODE;

  IF ((CONTACT IS NOT NULL) AND (SENDER_ID IS NOT NULL) AND (CODE IS NOT NULL)) THEN BEGIN

    SELECT COUNT(*)
      FROM /*PREFIX*/DRIVERS D
      JOIN /*PREFIX*/ ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
     WHERE D.DRIVER_ID=:SENDER_ID
       AND A.LOCKED<>1
      INTO :CNT;

    IF (CNT>0) THEN BEGIN

      SELECT (CASE WHEN SUM(SUM_CHARGE) IS NULL THEN 0.0 ELSE SUM(SUM_CHARGE) END)
        FROM /*PREFIX*/CHARGES
       WHERE ACCOUNT_ID=:SENDER_ID
        INTO :SUM_CHARGE;

      SELECT (CASE WHEN SUM(SUM_RECEIPT) IS NULL THEN 0.0 ELSE SUM(SUM_RECEIPT) END)
        FROM /*PREFIX*/RECEIPTS
       WHERE ACCOUNT_ID=:SENDER_ID
        INTO :SUM_RECEIPT;

      BALANCE=SUM_RECEIPT-SUM_CHARGE;

      SELECT MIN_BALANCE
        FROM /*PREFIX*/DRIVERS
       WHERE DRIVER_ID=:SENDER_ID
        INTO :MIN_BALANCE;

      IF ((MIN_BALANCE IS NULL) OR ((MIN_BALANCE IS NOT NULL) AND (BALANCE>MIN_BALANCE))) THEN BEGIN

        SELECT COUNT(*)
          FROM /*PREFIX*/ORDERS
         WHERE DRIVER_ID=:SENDER_ID
           AND PARENT_ID IS NULL
           AND DATE_HISTORY IS NULL
           AND FINISHED<>1
          INTO :CNT;

        IF (CNT>0) THEN BEGIN

/*          S='Вы на заказе';*/
          SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('764B2BA8498AB18345852AA2FE39F4D9') INTO :S;

          IF (S IS NOT NULL) THEN BEGIN

            INSERT INTO /*PREFIX*/OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                                TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED)
                                        VALUES (/*PREFIX*/GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                                :S,NULL,0,:CONTACT,NULL,2,NULL);
          END

        END ELSE BEGIN

       /*   SELECT COUNT(*)
            FROM /*PREFIX*//*PARK_STATES
           WHERE DRIVER_ID=:SENDER_ID
             AND DATE_OUT IS NULL
            INTO FLAG;       */

          UPDATE /*PREFIX*/PARK_STATES
             SET DATE_OUT=CURRENT_TIMESTAMP
           WHERE DRIVER_ID=:SENDER_ID
             AND DATE_OUT IS NULL;

          SELECT COUNT(*)
            FROM /*PREFIX*/SHIFTS
           WHERE ACCOUNT_ID=:SENDER_ID
             AND DATE_END IS NULL
            INTO :CNT;

          D=CURRENT_TIMESTAMP;

          IF (CNT=0) THEN BEGIN

            INSERT INTO /*PREFIX*/SHIFTS (SHIFT_ID,ACCOUNT_ID,DATE_BEGIN,DATE_END)
                                  VALUES (GET_UNIQUE_ID(),:SENDER_ID,:D,NULL);

          END

          PARK_ID=NULL;
          PARK_NAME=NULL;

          FOR SELECT P.PARK_ID, P.NAME, P.DESCRIPTION
                FROM /*PREFIX*/PARKS P
               WHERE (((P.MAX_COUNT IS NOT NULL) AND
                       (P.MAX_COUNT> (SELECT COUNT(*)
                                        FROM /*PREFIX*/PARK_STATES
                                       WHERE DATE_OUT IS NULL
                                         AND PARK_ID=P.PARK_ID)))
                      OR (P.MAX_COUNT IS NULL))
                 AND P.NAME=:CODE
                INTO :PARK_ID, :PARK_NAME, :PARK_DESCRIPTION  DO BEGIN
            BREAK;
          END

          IF (PARK_ID IS NOT NULL) THEN BEGIN

            INSERT INTO /*PREFIX*/PARK_STATES (PARK_STATE_ID,PARK_ID,DRIVER_ID,DATE_IN,DATE_OUT)
                                       VALUES (GET_UNIQUE_ID(),:PARK_ID,:SENDER_ID,:D,NULL);

            SELECT COUNT(*)
              FROM /*PREFIX*/ PARK_STATES
             WHERE PARK_ID=:PARK_ID
               AND DATE_OUT IS NULL
              INTO PRIORITY;

/*            S='Вы '||CAST(PRIORITY AS VARCHAR(10))||' на стоянке '||PARK_NAME||' ('||PARK_DESCRIPTION||')';

            IF (FLAG=0) THEN BEGIN

              S=S||'. Баланс = '||CAST(BALANCE AS VARCHAR(30))||' р.';

            END*/

            SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('80627FCA459EA3574F6BA8730F32946F') INTO :S;

            IF (S IS NOT NULL) THEN BEGIN

              S=/*PREFIX*/REPLACE_STRING(S,'%PRIORITY',CAST(PRIORITY AS VARCHAR(10)));
              S=/*PREFIX*/REPLACE_STRING(S,'%PARK_NAME',PARK_NAME);
              S=/*PREFIX*/REPLACE_STRING(S,'%PARK_DESCRIPTION',PARK_DESCRIPTION);
              S=/*PREFIX*/REPLACE_STRING(S,'%BALANCE',CAST(BALANCE AS VARCHAR(30)));

              INSERT INTO /*PREFIX*/OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                                  TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED)
                                          VALUES (/*PREFIX*/GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                                  :S,NULL,0,:CONTACT,NULL,1,NULL);
            END

          END ELSE BEGIN

/*            S='Нет свободных мест ';*/

            SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('18B1E217D3789DDF4BCE1EEE9C7AB7A5') INTO :S;

            IF (S IS NOT NULL) THEN BEGIN

              INSERT INTO /*PREFIX*/OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                                  TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED)
                                          VALUES (/*PREFIX*/GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                                  :S,NULL,0,:CONTACT,NULL,1,NULL);
            END

          END

        END

      END ELSE BEGIN

/*        S='Ваш баланс равен или меньше минимальному'; */

        SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('0690BD9649C89DD8472558C3270F35D6') INTO :S;

        IF (S IS NOT NULL) THEN BEGIN

          INSERT INTO /*PREFIX*/OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                              TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED)
                                      VALUES (/*PREFIX*/GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                              :S,NULL,0,:CONTACT,NULL,1,NULL);
        END

      END

    END

  END
END;

--

/* Создание процедуры запроса снятия со стоянки */

CREATE OR ALTER PROCEDURE /*PREFIX*/CODE_PARK_OUT
(
  ACCOUNT_ID VARCHAR(32),
  IN_MESSAGE_ID VARCHAR(32)
)
AS
DECLARE CONTACT VARCHAR(100);
DECLARE SENDER_ID VARCHAR(32);
DECLARE S VARCHAR(1000);
DECLARE PARK_NAME VARCHAR(100);
DECLARE PARK_STATE_ID VARCHAR(32);
DECLARE CNT INTEGER;
DECLARE D TIMESTAMP;
BEGIN
  SELECT CONTACT, SENDER_ID
    FROM /*PREFIX*/IN_MESSAGES
   WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID
    INTO :CONTACT, :SENDER_ID;

  IF ((CONTACT IS NOT NULL) AND (SENDER_ID IS NOT NULL)) THEN BEGIN

    SELECT COUNT(*)
      FROM /*PREFIX*/DRIVERS D
      JOIN /*PREFIX*/ ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
     WHERE D.DRIVER_ID=:SENDER_ID
       AND A.LOCKED<>1
      INTO :CNT;

    IF (CNT>0) THEN BEGIN


      SELECT COUNT(*)
        FROM /*PREFIX*/ORDERS
       WHERE DRIVER_ID=:SENDER_ID
         AND PARENT_ID IS NULL
         AND DATE_HISTORY IS NULL
         AND FINISHED<>1
        INTO :CNT;

      IF (CNT>0) THEN BEGIN

/*        S='Вы на заказе';*/
        SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('7E75E7A3DA4FAB8D443F2D7384B3DF46') INTO :S;

        IF (S IS NOT NULL) THEN BEGIN

          INSERT INTO /*PREFIX*/OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                              TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED)
                                      VALUES (/*PREFIX*/GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                              :S,NULL,0,:CONTACT,NULL,1,NULL);
        END

      END ELSE BEGIN

        FOR SELECT P.NAME, PS.PARK_STATE_ID
              FROM /*PREFIX*/PARK_STATES PS
              JOIN /*PREFIX*/PARKS P ON P.PARK_ID=PS.PARK_ID
             WHERE PS.DRIVER_ID=:SENDER_ID
               AND PS.DATE_OUT IS NULL
              INTO :PARK_NAME, :PARK_STATE_ID DO BEGIN

          D=CURRENT_TIMESTAMP;

          UPDATE /*PREFIX*/PARK_STATES
             SET DATE_OUT=:D
           WHERE PARK_STATE_ID=:PARK_STATE_ID;

/*          S='Вы сняты со стоянки '||PARK_NAME||' в '||/*PERFIX*//*FORMAT_DATETIME('hh:nn:ss dd.mm.yyyy',D);*/
          SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('F5FAEFF5369FA2E2496554FFACF900A3') INTO :S;

          IF (S IS NOT NULL) THEN BEGIN

            S=/*PREFIX*/REPLACE_STRING(S,'%PARK_NAME',PARK_NAME);
            S=/*PREFIX*/REPLACE_STRING(S,'%TIME_DATE',/*PERFIX*/FORMAT_DATETIME('hh:nn:ss dd.mm.yyyy',D));

            INSERT INTO /*PREFIX*/OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                                TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED)
                                        VALUES (/*PREFIX*/GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                                :S,NULL,0,:CONTACT,NULL,1,NULL);
          END

          BREAK;

        END

      END

    END

  END
END;

--

/* Создание процедуры запроса очереди на стоянке */

CREATE OR ALTER PROCEDURE /*PREFIX*/CODE_PARK_QUEUE
(
  ACCOUNT_ID VARCHAR(32),
  IN_MESSAGE_ID VARCHAR(32)
)
AS
DECLARE CONTACT VARCHAR(100);
DECLARE SENDER_ID VARCHAR(32);
DECLARE S VARCHAR(1000);
DECLARE CNT INTEGER;
DECLARE D TIMESTAMP;
DECLARE DATE_IN TIMESTAMP;
DECLARE DRIVER_ID VARCHAR(32);
DECLARE PARK_NAME VARCHAR(100);
DECLARE PARK_ID VARCHAR(32);
DECLARE SUM_CHARGE NUMERIC(15,2);
DECLARE SUM_RECEIPT NUMERIC(15,2);
DECLARE BALANCE NUMERIC(15,2);
DECLARE MIN_BALANCE NUMERIC(15,2);
DECLARE MINUTES INTEGER;
DECLARE COUNTER INTEGER;
DECLARE PRIORITY INTEGER;
BEGIN
  SELECT CONTACT, SENDER_ID
    FROM /*PREFIX*/IN_MESSAGES
   WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID
    INTO :CONTACT, :SENDER_ID;

  IF ((CONTACT IS NOT NULL) AND (SENDER_ID IS NOT NULL)) THEN BEGIN

    SELECT COUNT(*)
      FROM /*PREFIX*/DRIVERS D
      JOIN /*PREFIX*/ ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
     WHERE D.DRIVER_ID=:SENDER_ID
       AND A.LOCKED<>1
      INTO :CNT;

    IF (CNT>0) THEN BEGIN

      SELECT (CASE WHEN SUM(SUM_CHARGE) IS NULL THEN 0.0 ELSE SUM(SUM_CHARGE) END)
        FROM /*PREFIX*/CHARGES
       WHERE ACCOUNT_ID=:SENDER_ID
        INTO :SUM_CHARGE;

      SELECT (CASE WHEN SUM(SUM_RECEIPT) IS NULL THEN 0.0 ELSE SUM(SUM_RECEIPT) END)
        FROM /*PREFIX*/RECEIPTS
       WHERE ACCOUNT_ID=:SENDER_ID
        INTO :SUM_RECEIPT;

      BALANCE=SUM_RECEIPT-SUM_CHARGE;

      SELECT MIN_BALANCE
        FROM /*PREFIX*/DRIVERS
       WHERE DRIVER_ID=:SENDER_ID
        INTO :MIN_BALANCE;

      IF ((MIN_BALANCE IS NULL) OR ((MIN_BALANCE IS NOT NULL) AND (BALANCE>MIN_BALANCE))) THEN BEGIN

        PARK_ID=NULL;
        PARK_NAME=NULL;

        FOR SELECT PS.PARK_ID, P.NAME
              FROM /*PREFIX*/PARK_STATES PS
              JOIN /*PREFIX*/PARKS P ON P.PARK_ID=PS.PARK_ID
             WHERE DRIVER_ID=:SENDER_ID
               AND DATE_OUT IS NULL
              INTO :PARK_ID, :PARK_NAME DO BEGIN
          BREAK;
        END

        IF (PARK_ID IS NOT NULL) THEN BEGIN

          D=NULL;
          COUNTER=0;

          FOR SELECT DATE_IN, DRIVER_ID
                FROM /*PREFIX*/PARK_STATES
               WHERE DATE_OUT IS NULL
                 AND PARK_ID=:PARK_ID
               ORDER BY DATE_IN
                INTO :DATE_IN, :DRIVER_ID DO BEGIN

            COUNTER=COUNTER+1;

            IF (DRIVER_ID=SENDER_ID) THEN BEGIN
              D=CURRENT_TIMESTAMP;
              MINUTES=CAST((D-DATE_IN)*(1e0*24*60) AS INTEGER);
              PRIORITY=COUNTER;
            END

          END

          IF (D IS NOT NULL) THEN BEGIN

/*            S='Вы '||CAST(PRIORITY AS VARCHAR(10))||' из '||CAST(COUNTER AS VARCHAR(10))||' на стоянке '||PARK_NAME||'.';
            S=S||' Длительность = '||CAST(MINUTES AS VARCHAR(10))||' мин.';*/

            SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('A92208254FCBA05643224EB1F4508300') INTO :S;

            IF (S IS NOT NULL) THEN BEGIN

              S=/*PREFIX*/REPLACE_STRING(S,'%PRIORITY',CAST(PRIORITY AS VARCHAR(10)));
              S=/*PREFIX*/REPLACE_STRING(S,'%COUNTER',CAST(COUNTER AS VARCHAR(10)));
              S=/*PREFIX*/REPLACE_STRING(S,'%PARK_NAME',PARK_NAME);
              S=/*PREFIX*/REPLACE_STRING(S,'%MINUTES',CAST(MINUTES AS VARCHAR(10)));

              INSERT INTO /*PREFIX*/OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                                  TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED)
                                          VALUES (/*PREFIX*/GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                                  :S,NULL,0,:CONTACT,NULL,1,NULL);
            END

          END

        END

      END

    END

  END
END;

--

/* Создание процедуры запроса состояния стоянок */

CREATE OR ALTER PROCEDURE /*PREFIX*/CODE_PARK_STATES
(
  ACCOUNT_ID VARCHAR(32),
  IN_MESSAGE_ID VARCHAR(32)
)
AS
DECLARE CONTACT VARCHAR(100);
DECLARE SENDER_ID VARCHAR(32);
DECLARE S VARCHAR(1000);
DECLARE S1 VARCHAR(1000);
DECLARE F VARCHAR(1000);
DECLARE PARK_NAME VARCHAR(100);
DECLARE SUM_CHARGE NUMERIC(15,2);
DECLARE SUM_RECEIPT NUMERIC(15,2);
DECLARE BALANCE NUMERIC(15,2);
DECLARE MIN_BALANCE NUMERIC(15,2);
DECLARE CNT INTEGER;
BEGIN
  SELECT CONTACT, SENDER_ID
    FROM /*PREFIX*/IN_MESSAGES
   WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID
    INTO :CONTACT, :SENDER_ID;

  IF ((CONTACT IS NOT NULL) AND (SENDER_ID IS NOT NULL)) THEN BEGIN

    SELECT COUNT(*)
      FROM /*PREFIX*/DRIVERS D
      JOIN /*PREFIX*/ ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
     WHERE D.DRIVER_ID=:SENDER_ID
       AND A.LOCKED<>1
      INTO :CNT;

    IF (CNT>0) THEN BEGIN

      SELECT (CASE WHEN SUM(SUM_CHARGE) IS NULL THEN 0.0 ELSE SUM(SUM_CHARGE) END)
        FROM /*PREFIX*/CHARGES
       WHERE ACCOUNT_ID=:SENDER_ID
        INTO :SUM_CHARGE;

      SELECT (CASE WHEN SUM(SUM_RECEIPT) IS NULL THEN 0.0 ELSE SUM(SUM_RECEIPT) END)
        FROM /*PREFIX*/RECEIPTS
       WHERE ACCOUNT_ID=:SENDER_ID
        INTO :SUM_RECEIPT;

      BALANCE=SUM_RECEIPT-SUM_CHARGE;

      SELECT MIN_BALANCE
        FROM /*PREFIX*/DRIVERS
       WHERE DRIVER_ID=:SENDER_ID
        INTO :MIN_BALANCE;

      IF ((MIN_BALANCE IS NULL) OR ((MIN_BALANCE IS NOT NULL) AND (BALANCE>MIN_BALANCE))) THEN BEGIN

        S='';

        SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('A3D890F68FF0BDCC4B42C3135174ABEF') INTO :F;

        IF (F IS NOT NULL) THEN BEGIN

          FOR SELECT P.NAME,
                     (SELECT COUNT(*)
                        FROM /*PREFIX*/PARK_STATES PS
                       WHERE PS.DATE_OUT IS NULL
                         AND PS.PARK_ID=P.PARK_ID)
                FROM /*PREFIX*/PARKS P
               ORDER BY P.PRIORITY
                INTO :PARK_NAME, :CNT DO BEGIN

            S1=F;
            S1=/*PREFIX*/REPLACE_STRING(S1,'%PARK_NAME',PARK_NAME);
            S1=/*PREFIX*/REPLACE_STRING(S1,'%COUNT',CAST(CNT AS VARCHAR(10)));

            S=S||S1;

          END

          INSERT INTO /*PREFIX*/OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                              TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED)
                                      VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                              :S,NULL,0,:CONTACT,NULL,1,NULL);
        END

      END

    END

  END
END;

--

/* Создание процедуры запроса закрытия смены */

CREATE OR ALTER PROCEDURE /*PREFIX*/CODE_SHIFT_CLOSE
(
  ACCOUNT_ID VARCHAR(32),
  IN_MESSAGE_ID VARCHAR(32)
)
AS
DECLARE CONTACT VARCHAR(100);
DECLARE SENDER_ID VARCHAR(32);
DECLARE S VARCHAR(1000);
DECLARE CNT INTEGER;
DECLARE D TIMESTAMP;
DECLARE DATE_BEGIN TIMESTAMP;
DECLARE SHIFT_ID VARCHAR(32);
DECLARE HOURS NUMERIC(10,1);
BEGIN
  SELECT CONTACT, SENDER_ID
    FROM /*PREFIX*/IN_MESSAGES
   WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID
    INTO CONTACT, SENDER_ID;

  IF ((CONTACT IS NOT NULL) AND (SENDER_ID IS NOT NULL)) THEN BEGIN

    SELECT COUNT(*)
      FROM /*PREFIX*/DRIVERS
     WHERE DRIVER_ID=:SENDER_ID
      INTO :CNT;

    IF (CNT>0) THEN BEGIN

      SELECT COUNT(*)
        FROM /*PREFIX*/ORDERS
       WHERE DRIVER_ID=:SENDER_ID
         AND PARENT_ID IS NULL
         AND DATE_HISTORY IS NULL
         AND FINISHED<>1
        INTO :CNT;

      IF (CNT>0) THEN BEGIN

/*        S='Вы на заказе';*/

        SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('0A2F3602D3FD9A0E476E367410F37492') INTO :S;

        IF (S IS NOT NULL) THEN BEGIN

          INSERT INTO /*PREFIX*/OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                              TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED)
                                       VALUES (/*PREFIX*/GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                               :S,NULL,0,:CONTACT,NULL,1,NULL);
        END

      END ELSE BEGIN

        FOR SELECT DATE_BEGIN, SHIFT_ID
              FROM /*PREFIX*/SHIFTS
             WHERE ACCOUNT_ID=:SENDER_ID
               AND DATE_END IS NULL
              INTO :DATE_BEGIN, :SHIFT_ID DO BEGIN

          D=CURRENT_TIMESTAMP;

          UPDATE /*PREFIX*/PARK_STATES
             SET DATE_OUT=:D
           WHERE DRIVER_ID=:SENDER_ID;

          UPDATE /*PREFIX*/SHIFTS
             SET DATE_END=:D
           WHERE SHIFT_ID=:SHIFT_ID;

          HOURS=CAST((D-DATE_BEGIN)*(1e0*24) AS NUMERIC(10,1));

/*          S='Ваша смена закрыта в '||/*PERFIX*//*FORMAT_DATETIME('hh:nn:ss dd.mm.yyyy',D)||'.';
          S=S||' Длительность = '||CAST(HOURS AS VARCHAR(30))||' ч. ';*/

          SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('5D8701DF0DEDB7A6491181074CE5A88D') INTO :S;

          IF (S IS NOT NULL) THEN BEGIN

            S=/*PREFIX*/REPLACE_STRING(S,'%TIME_DATE',/*PERFIX*/FORMAT_DATETIME('hh:nn:ss dd.mm.yyyy',D));
            S=/*PREFIX*/REPLACE_STRING(S,'%HOURS',CAST(HOURS AS VARCHAR(30)));

            INSERT INTO /*PREFIX*/OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                                TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED)
                                        VALUES (/*PREFIX*/GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                                :S,NULL,0,:CONTACT,NULL,1,NULL);
          END
        END

      END

    END

  END
END;

--

/* Создание процедуры обработки результата подтверждения заказа */

CREATE OR ALTER PROCEDURE /*PREFIX*/PR_CONFIRM_ORDER
(
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32)
)
AS
DECLARE PHONE VARCHAR(100);
DECLARE DRIVER_ID VARCHAR(32);
DECLARE PARK_ID VARCHAR(32);
DECLARE RECIPIENT_ID VARCHAR(32);
DECLARE S VARCHAR(1000);
BEGIN

  SELECT PHONE, DRIVER_ID, PARK_ID
    FROM /*PREFIX*/ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :PHONE, :DRIVER_ID, :PARK_ID;

  UPDATE /*PREFIX*/ORDERS
     SET DATE_BEGIN=CURRENT_TIMESTAMP
   WHERE ORDER_ID=:ORDER_ID;

  IF ((PHONE IS NOT NULL) AND (DRIVER_ID IS NOT NULL)) THEN BEGIN

    UPDATE /*PREFIX*/PARK_STATES
       SET DATE_OUT=CURRENT_TIMESTAMP
     WHERE DRIVER_ID=:DRIVER_ID
       AND PARK_ID=:PARK_ID
       AND DATE_OUT IS NULL;

    IF (SUBSTR(PHONE,1,3)='+79')  THEN BEGIN

      RECIPIENT_ID=NULL;

      FOR SELECT ACCOUNT_ID
            FROM /*PREFIX*/ACCOUNTS
           WHERE PHONE=:PHONE
            INTO :RECIPIENT_ID DO BEGIN

        IF (RECIPIENT_ID IS NOT NULL) THEN
          BREAK;
      END

/*      S='*А Такси* 277-77-87. Машина в пути.Ожидайте СМС-уведомление о прибытии';*/

      SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('1C12AF5D5D57ACD045A724F8E3FF90ED') INTO :S;

      IF (S IS NOT NULL) THEN BEGIN

        INSERT INTO /*PREFIX*/OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                            TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED)
                                    VALUES (/*PREFIX*/GET_UNIQUE_ID(),:ACCOUNT_ID,:RECIPIENT_ID,CURRENT_TIMESTAMP,
                                            :S,NULL,0,:PHONE,NULL,2,NULL);
      END
    END

    SELECT PHONE_MOBILE
      FROM /*PREFIX*/DRIVERS
     WHERE DRIVER_ID=:DRIVER_ID
      INTO :PHONE;

    SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('723E98B898F89A8941B6CAAB092221AE') INTO :S;

    IF (S IS NOT NULL) THEN BEGIN

      RECIPIENT_ID=DRIVER_ID;

      INSERT INTO /*PREFIX*/OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                          TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED)
                                  VALUES (/*PREFIX*/GET_UNIQUE_ID(),:ACCOUNT_ID,:RECIPIENT_ID,CURRENT_TIMESTAMP,
                                          :S,NULL,0,:PHONE,NULL,2,NULL);
    END

  END

END;

--

/* Создание процедуры обработки результата клиент в машине */

CREATE OR ALTER PROCEDURE /*PREFIX*/PR_CLIENT_IN_CAR
(
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32)
)
AS
DECLARE PHONE VARCHAR(100);
DECLARE DRIVER_ID VARCHAR(32);
DECLARE S VARCHAR(1000);
BEGIN

  SELECT DRIVER_ID
    FROM /*PREFIX*/ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID;

  UPDATE /*PREFIX*/ORDERS
     SET DATE_BEGIN=CURRENT_TIMESTAMP
   WHERE ORDER_ID=:ORDER_ID;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    SELECT PHONE_MOBILE
      FROM /*PREFIX*/DRIVERS
     WHERE DRIVER_ID=:DRIVER_ID
      INTO :PHONE;

    SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('620D357394B89B18454EB58DD5CE9F19') INTO :S;

    IF (S IS NOT NULL) THEN BEGIN

      INSERT INTO /*PREFIX*/OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                          TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED)
                                  VALUES (/*PREFIX*/GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                          :S,NULL,0,:PHONE,NULL,2,NULL);
    END

  END

END;

--

/* Создание процедуры обработки результат полный расчет */

CREATE OR ALTER PROCEDURE /*PREFIX*/PR_FULL_CALC
(
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32)
)
AS
DECLARE COST_RATE NUMERIC(15,2);
DECLARE COST_FACT NUMERIC(15,2);
DECLARE PHONE VARCHAR(100);
DECLARE DRIVER_ID VARCHAR(32);
DECLARE RECIPIENT_ID VARCHAR(32);
DECLARE SUM_CHARGE NUMERIC(15,2);
DECLARE SUM_RECEIPT NUMERIC(15,2);
DECLARE BALANCE NUMERIC(15,2);
DECLARE MIN_BALANCE NUMERIC(15,2);
DECLARE CHARGE_TYPE_ID VARCHAR(32);
DECLARE S VARCHAR(1000);
BEGIN

  SELECT PHONE, DRIVER_ID, COST_RATE, COST_FACT
    FROM /*PREFIX*/ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :PHONE, :DRIVER_ID, :COST_RATE, :COST_FACT;

  IF (COST_FACT IS NULL) THEN
    COST_FACT=:COST_RATE;

  UPDATE /*PREFIX*/ORDERS
     SET FINISHED=1,
         DATE_END=CURRENT_TIMESTAMP,
         WHO_PROCESS_ID=:ACCOUNT_ID,
         COST_FACT=:COST_FACT
   WHERE ORDER_ID=:ORDER_ID;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    IF (PHONE IS NOT NULL) THEN BEGIN

      IF (SUBSTR(PHONE,1,3)='+79')  THEN BEGIN

        RECIPIENT_ID=NULL;

        FOR SELECT ACCOUNT_ID
              FROM /*PREFIX*/ACCOUNTS
             WHERE PHONE=:PHONE
              INTO :RECIPIENT_ID DO BEGIN

          IF (RECIPIENT_ID IS NOT NULL) THEN
            BREAK;
        END

/*        S='*А Такси* Спасибо что воспользовались нашими услугами';*/

        SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('05B75340B170BF5141FC63F5CDF7FCD6') INTO :S;

        IF (S IS NOT NULL) THEN BEGIN

          INSERT INTO /*PREFIX*/OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                              TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED)
                                      VALUES (/*PREFIX*/GET_UNIQUE_ID(),:ACCOUNT_ID,:RECIPIENT_ID,CURRENT_TIMESTAMP,
                                              :S,NULL,0,:PHONE,NULL,2,NULL);
        END

/*        S='*А Такси* Наши телефоны: 277-77-87, 271-08-91, 271-08-97';*/

        SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('E9FFA9589ABD8C174474572B72017BCC') INTO :S;

        IF (S IS NOT NULL) THEN BEGIN

          INSERT INTO /*PREFIX*/OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                              TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED)
                                      VALUES (/*PREFIX*/GET_UNIQUE_ID(),:ACCOUNT_ID,:RECIPIENT_ID,CURRENT_TIMESTAMP,
                                              :S,NULL,0,:PHONE,NULL,2,NULL);
        END

      END

    END

    CHARGE_TYPE_ID='E1BC9789DA9DB2B041C0784EBE92BFC9'; /* Выполнение заказа */

    SELECT RET_SUM
      FROM /*PREFIX*/GET_DRIVER_SUM(:DRIVER_ID,:COST_FACT)
      INTO :SUM_CHARGE;

    INSERT INTO /*PREFIX*/CHARGES (CHARGE_ID,WHO_CREATE_ID,CHARGE_TYPE_ID,ACCOUNT_ID,
                                   SUM_CHARGE,DATE_CHARGE,DATE_CREATE,DESCRIPTION)
                           VALUES (/*PREFIX*/GET_UNIQUE_ID(),:ACCOUNT_ID,:CHARGE_TYPE_ID,:DRIVER_ID,
                                   :SUM_CHARGE,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,NULL);

    SELECT (CASE WHEN SUM(SUM_CHARGE) IS NULL THEN 0.0 ELSE SUM(SUM_CHARGE) END)
      FROM /*PREFIX*/CHARGES
     WHERE ACCOUNT_ID=:DRIVER_ID
      INTO :SUM_CHARGE;

    SELECT (CASE WHEN SUM(SUM_RECEIPT) IS NULL THEN 0.0 ELSE SUM(SUM_RECEIPT) END)
      FROM /*PREFIX*/RECEIPTS
     WHERE ACCOUNT_ID=:DRIVER_ID
      INTO :SUM_RECEIPT;

    BALANCE=SUM_RECEIPT-SUM_CHARGE;

    SELECT MIN_BALANCE
      FROM /*PREFIX*/DRIVERS
     WHERE DRIVER_ID=:DRIVER_ID
      INTO :MIN_BALANCE;

    IF ((MIN_BALANCE IS NULL) OR ((MIN_BALANCE IS NOT NULL) AND (BALANCE>MIN_BALANCE))) THEN BEGIN

/*      S='Заказ завершен. Баланс = '||CAST(BALANCE AS VARCHAR(30))||' р.';*/

      SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('16835607B30CA79F4CE883B53AFE972D') INTO :S;

    END ELSE BEGIN

      UPDATE /*PREFIX*/SHIFTS
         SET DATE_END=CURRENT_TIMESTAMP
       WHERE ACCOUNT_ID=:DRIVER_ID
         AND DATE_END IS NULL;

/*      S='Заказ завершен. Вы сняты со смены. Баланс = '||CAST(BALANCE AS VARCHAR(30))||' р.'; */

      SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('634880F305E9AA434245E3E596697001') INTO :S;

    END

    SELECT PHONE_MOBILE
      FROM /*PREFIX*/DRIVERS
     WHERE DRIVER_ID=:DRIVER_ID
      INTO :PHONE;

    IF (S IS NOT NULL) THEN BEGIN

      S=/*PREFIX*/REPLACE_STRING(S,'%BALANCE',CAST(BALANCE AS VARCHAR(30)));

      INSERT INTO /*PREFIX*/OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                          TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED)
                                  VALUES (/*PREFIX*/GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                          :S,NULL,0,:PHONE,NULL,2,NULL);
    END

  END
END;

--

/* Удаление процедуры обработки результата водитель отказался */

DROP PROCEDURE /*PRFEIX*/PR_REFUSE_DRIVER

--

/* Создание процедуры обработки результата водитель отказался на этапе подтверждения */

CREATE OR ALTER PROCEDURE /*PREFIX*/PR_REFUSE_DRIVER_CONFIRM
(
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32)
)
AS
DECLARE DRIVER_ID VARCHAR(32);
DECLARE PHONE VARCHAR(100);
DECLARE S VARCHAR(1000);
BEGIN

  SELECT DRIVER_ID
    FROM /*PREFIX*/ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID;

  UPDATE /*PREFIX*/ORDERS
     SET DATE_BEGIN=CURRENT_TIMESTAMP,
         DRIVER_ID=NULL,
         CAR_ID=NULL
   WHERE ORDER_ID=:ORDER_ID;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    UPDATE /*PREFIX*/PARK_STATES
       SET DATE_OUT=CURRENT_TIMESTAMP
     WHERE DATE_OUT IS NULL
       AND DRIVER_ID=:DRIVER_ID;

    SELECT PHONE_MOBILE
      FROM /*PREFIX*/DRIVERS
     WHERE DRIVER_ID=:DRIVER_ID
      INTO :PHONE;

/*    S='Отказ от заказа. Вы сняты со стоянки';*/

    SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('14AB0F225BEFBBB14E0A5296BEB471A3') INTO :S;

    IF (S IS NOT NULL) THEN BEGIN

      INSERT INTO /*PREFIX*/OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                          TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED)
                                  VALUES (/*PREFIX*/GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                          :S,NULL,0,:PHONE,NULL,2,NULL);
    END

  END

END;

--

/* Создание процедуры обработки результата водитель отказался на этапе выехал */

CREATE OR ALTER PROCEDURE /*PREFIX*/PR_REFUSE_DRIVER_DRIVE_OUT
(
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32)
)
AS
DECLARE DRIVER_ID VARCHAR(32);
DECLARE PHONE VARCHAR(100);
DECLARE S VARCHAR(1000);
BEGIN

  SELECT DRIVER_ID
    FROM /*PREFIX*/ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID;

  UPDATE /*PREFIX*/ORDERS
     SET DATE_BEGIN=CURRENT_TIMESTAMP,
         DRIVER_ID=NULL,
         CAR_ID=NULL
   WHERE ORDER_ID=:ORDER_ID;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    SELECT PHONE_MOBILE
      FROM /*PREFIX*/DRIVERS
     WHERE DRIVER_ID=:DRIVER_ID
      INTO :PHONE;

/*    S='Отказ от заказа. По освобождению встаньте на стоянку';*/

    SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('7D5B6BED096187764ECE40FC7D5CB943') INTO :S;

    IF (S IS NOT NULL) THEN BEGIN

      INSERT INTO /*PREFIX*/OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                          TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED)
                                  VALUES (/*PREFIX*/GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                          :S,NULL,0,:PHONE,NULL,2,NULL);
    END

  END

END;

--

/* Создание процедуры обработки результата водитель отказался на этапе прибыл */

CREATE OR ALTER PROCEDURE /*PREFIX*/PR_REFUSE_DRIVER_COME_OUT
(
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32)
)
AS
DECLARE DRIVER_ID VARCHAR(32);
DECLARE PHONE VARCHAR(100);
DECLARE S VARCHAR(1000);
BEGIN

  SELECT DRIVER_ID
    FROM /*PREFIX*/ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID;

  UPDATE /*PREFIX*/ORDERS
     SET TYPE_PROCESS=1,
         DATE_END=CURRENT_TIMESTAMP,
         WHO_PROCESS_ID=:ACCOUNT_ID
   WHERE ORDER_ID=:ORDER_ID;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    SELECT PHONE_MOBILE
      FROM /*PREFIX*/DRIVERS
     WHERE DRIVER_ID=:DRIVER_ID
      INTO :PHONE;

    SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('2C0BBC7EF7418D934C32D8969D7F2D8C') INTO :S;

    IF (S IS NOT NULL) THEN BEGIN

      INSERT INTO /*PREFIX*/OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                          TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED)
                                  VALUES (/*PREFIX*/GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                          :S,NULL,0,:PHONE,NULL,2,NULL);
    END

  END

END;

--

/* Удаление процедуры обработки результата клиент отказался */

DROP PROCEDURE /*PRFEIX*/PR_REFUSE_CLIENT

--

/* Создание процедуры обработки результата клиент отказался на этапе выехал */

CREATE OR ALTER PROCEDURE /*PREFIX*/PR_REFUSE_CLIENT_DRIVE_OUT
(
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32)
)
AS
DECLARE DRIVER_ID VARCHAR(32);
DECLARE PARK_ID VARCHAR(32);
DECLARE PARK_NAME VARCHAR(100);
DECLARE PHONE VARCHAR(100);
DECLARE PARK_STATE_ID VARCHAR(32);
DECLARE DATE_IN TIMESTAMP;
DECLARE S VARCHAR(1000);
BEGIN

  SELECT DRIVER_ID, PARK_ID
    FROM /*PREFIX*/ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID, :PARK_ID;

  UPDATE /*PREFIX*/ORDERS
     SET DATE_BEGIN=CURRENT_TIMESTAMP
   WHERE ORDER_ID=:ORDER_ID;

  IF ((DRIVER_ID IS NOT NULL) AND (PARK_ID IS NOT NULL)) THEN BEGIN

    FOR SELECT PS.PARK_STATE_ID, P.NAME, PS.DATE_IN
          FROM /*PREFIX*/PARK_STATES PS
          JOIN /*PREFIX*/PARKS P ON P.PARK_ID=PS.PARK_ID
         WHERE PS.PARK_ID=:PARK_ID
           AND PS.DATE_OUT IS NULL
         ORDER BY PS.DATE_IN
          INTO :PARK_STATE_ID, :PARK_NAME, :DATE_IN DO BEGIN

      DATE_IN=DATE_IN-2*(1e0/24/60/60);

      INSERT INTO /*PREFIX*/PARK_STATES (PARK_STATE_ID,DRIVER_ID,PARK_ID,DATE_IN,DATE_OUT)
                                 VALUES (GET_UNIQUE_ID(),:DRIVER_ID,:PARK_ID,:DATE_IN,NULL);

      BREAK;
    END

    IF (PARK_NAME IS NULL) THEN BEGIN

      INSERT INTO /*PREFIX*/PARK_STATES (PARK_STATE_ID,DRIVER_ID,PARK_ID,DATE_IN,DATE_OUT)
                                 VALUES (GET_UNIQUE_ID(),:DRIVER_ID,:PARK_ID,CURRENT_TIMESTAMP,NULL);

      SELECT NAME
        FROM /*PREFIX*/PARKS
       WHERE PARK_ID=:PARK_ID
        INTO :PARK_NAME;

    END


    UPDATE /*PREFIX*/ORDERS
       SET TYPE_PROCESS=1,
           DATE_END=CURRENT_TIMESTAMP,
           WHO_PROCESS_ID=:ACCOUNT_ID,
           FINISHED=1
     WHERE ORDER_ID=:ORDER_ID;

    SELECT PHONE_MOBILE
      FROM /*PREFIX*/DRIVERS
     WHERE DRIVER_ID=:DRIVER_ID
      INTO :PHONE;

/*    S='Отказ по заказу. Вы поставлены 1 на стоянку '||PARK_NAME;*/

    SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('7604B1762FDB97EC406174FB54FA13EA') INTO :S;

    IF (S IS NOT NULL) THEN BEGIN

      S=/*PREFIX*/REPLACE_STRING(S,'%PARK_NAME',PARK_NAME);

      INSERT INTO /*PREFIX*/OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                          TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED)
                                  VALUES (/*PREFIX*/GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                          :S,NULL,0,:PHONE,NULL,0,NULL);
    END

  END

END;

--

/* Создание процедуры обработки результата клиент отказался на этапе прибыл */

CREATE OR ALTER PROCEDURE /*PREFIX*/PR_REFUSE_CLIENT_COME_OUT
(
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32)
)
AS
DECLARE DRIVER_ID VARCHAR(32);
DECLARE PHONE VARCHAR(100);
DECLARE S VARCHAR(1000);
BEGIN

  SELECT DRIVER_ID
    FROM /*PREFIX*/ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID;

  UPDATE /*PREFIX*/ORDERS
     SET TYPE_PROCESS=1,
         DATE_END=CURRENT_TIMESTAMP,
         WHO_PROCESS_ID=:ACCOUNT_ID
   WHERE ORDER_ID=:ORDER_ID;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    SELECT PHONE_MOBILE
      FROM /*PREFIX*/DRIVERS
     WHERE DRIVER_ID=:DRIVER_ID
      INTO :PHONE;

    SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('13D70B96F52BBE8D4E115CCC194F3B10') INTO :S;

    IF (S IS NOT NULL) THEN BEGIN

      INSERT INTO /*PREFIX*/OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                          TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED)
                                  VALUES (/*PREFIX*/GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                          :S,NULL,0,:PHONE,NULL,2,NULL);
    END

  END

END;

--

/* Создание процедуры обработки результата выбора водителя */

CREATE OR ALTER PROCEDURE /*PREFIX*/PR_SELECT_DRIVER
(
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32)
)
AS
DECLARE DRIVER_ID VARCHAR(32);
DECLARE CAR_ID VARCHAR(32);
DECLARE CNT INTEGER;
DECLARE S VARCHAR(1000);
DECLARE ADDRESS VARCHAR(1000);
DECLARE PREFIX VARCHAR(10);
DECLARE STREET VARCHAR(100);
DECLARE HOUSE VARCHAR(10);
DECLARE FLAT VARCHAR(10);
DECLARE PORCH VARCHAR(10);
DECLARE LOCALITY VARCHAR(100);
DECLARE PHONE VARCHAR(100);
DECLARE DATE_ACCEPT TIMESTAMP;
DECLARE DATE_ARRIVAL TIMESTAMP;
DECLARE DATE_BEGIN TIMESTAMP;
DECLARE BEFORE_PERIOD INTEGER;
DECLARE ACTION_ID VARCHAR(32);
DECLARE D TIMESTAMP;
DECLARE DESCRIPTION VARCHAR(250);
BEGIN

  SELECT O.DRIVER_ID,
         S.PREFIX, S.NAME, O.HOUSE, O.FLAT, O.PORCH, L.NAME,
         O.DATE_ACCEPT, O.DATE_ARRIVAL, O.BEFORE_PERIOD,
         O.ACTION_ID, O.DATE_BEGIN, O.DESCRIPTION
    FROM /*PREFIX*/ORDERS O
    JOIN /*PREFIX*/STREETS S ON S.STREET_ID=O.STREET_ID
    JOIN /*PREFIX*/LOCALITIES L ON L.LOCALITY_ID=S.LOCALITY_ID
   WHERE O.ORDER_ID=:ORDER_ID
     INTO :DRIVER_ID,
          :PREFIX, :STREET, :HOUSE, :FLAT, :PORCH, :LOCALITY,
          :DATE_ACCEPT, :DATE_ARRIVAL, :BEFORE_PERIOD,
          :ACTION_ID, :DATE_BEGIN, :DESCRIPTION;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    CNT=0;

    SELECT COUNT(*)
      FROM /*PREFIX*/OUT_MESSAGES
     WHERE RECIPIENT_ID=:DRIVER_ID
       AND DESCRIPTION=:ORDER_ID||:ACTION_ID
       AND TYPE_MESSAGE=0
       AND DATE_OUT IS NULL
       AND DATE_CREATE>=:DATE_BEGIN
      INTO CNT;

    IF (CNT=0) THEN BEGIN

      SELECT CAR_ID, PHONE_MOBILE
        FROM /*PREFIX*/DRIVERS
       WHERE DRIVER_ID=:DRIVER_ID
        INTO :CAR_ID, :PHONE;

      D=CURRENT_TIMESTAMP;

      UPDATE /*PREFIX*/ORDERS
         SET DRIVER_ID=:DRIVER_ID,
             CAR_ID=:CAR_ID,
             DATE_END=:D,
             WHO_PROCESS_ID=:ACCOUNT_ID
       WHERE ORDER_ID=:ORDER_ID;

      ADDRESS='';

      IF (PREFIX IS NOT NULL) THEN
        ADDRESS=PREFIX||' ';

      ADDRESS=ADDRESS||STREET||' '||HOUSE;

      IF (FLAT IS NOT NULL) THEN
        ADDRESS=ADDRESS||'-'||FLAT;

      IF (PORCH IS NOT NULL) THEN
        ADDRESS=ADDRESS||' п.'||PORCH;

      ADDRESS=ADDRESS||', '||LOCALITY;

      IF (DATE_ACCEPT<DATE_ARRIVAL) THEN BEGIN

        IF ((DATE_ACCEPT+(BEFORE_PERIOD*(1e0/24/60)))<DATE_ARRIVAL) THEN BEGIN

/*          S='Предв. на '||/*PERFIX*//*FORMAT_DATETIME('hh:nn',DATE_ARRIVAL)||', '||ADDRESS;*/

          SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('2A773F389AD895B94010252F1DC6D3CC') INTO :S;

        END ELSE BEGIN

/*          S='Заказ на '||/*PERFIX*//*FORMAT_DATETIME('hh:nn',DATE_ARRIVAL)||', '||ADDRESS;*/

          SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('051BE1C8C28F9DB34EAA8DD46E0DA3B4') INTO :S;

        END

      END ELSE BEGIN

/*        S=/*PERFIX*//*FORMAT_DATETIME('hh:nn',DATE_ARRIVAL)||', '||ADDRESS;*/

        SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('CD5055A23D04B51641F3211814253430') INTO :S;

      END

      IF (S IS NOT NULL) THEN BEGIN

        S=/*PREFIX*/REPLACE_STRING(S,'%TIME',/*PERFIX*/FORMAT_DATETIME('hh:nn',DATE_ARRIVAL));
        S=/*PREFIX*/REPLACE_STRING(S,'%ADDRESS',ADDRESS);

        INSERT INTO /*PREFIX*/OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                            TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED)
                                    VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,:D,
                                            :S,NULL,0,:PHONE,:ORDER_ID||:ACTION_ID,0,NULL);

        IF ((DESCRIPTION IS NOT NULL) AND (TRIM(DESCRIPTION)<>'')) THEN BEGIN

          S=DESCRIPTION;

          INSERT INTO /*PREFIX*/OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                              TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED)
                                      VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,:D,
                                              :S,NULL,0,:PHONE,NULL,0,NULL);
        END

      END

    END

  END

END;

--

/* Создание поступления */

CREATE OR ALTER PROCEDURE /*PREFIX*/I_RECEIPT
(
  RECEIPT_ID VARCHAR(32),
  RECEIPT_TYPE_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32),
  WHO_CREATE_ID VARCHAR(32),
  SUM_RECEIPT NUMERIC(15,2),
  DATE_RECEIPT TIMESTAMP,
  DATE_CREATE TIMESTAMP,
  DESCRIPTION VARCHAR(250)
)
AS
DECLARE S VARCHAR(70);
DECLARE ASUM_CHARGE NUMERIC(15,2);
DECLARE ASUM_RECEIPT NUMERIC(15,2);
DECLARE BALANCE NUMERIC(15,2);
DECLARE PHONE VARCHAR(100);
BEGIN
  INSERT INTO /*PREFIX*/RECEIPTS (RECEIPT_ID,RECEIPT_TYPE_ID,ACCOUNT_ID,WHO_CREATE_ID,
                                  SUM_RECEIPT,DATE_RECEIPT,DATE_CREATE,DESCRIPTION)
       VALUES (:RECEIPT_ID,:RECEIPT_TYPE_ID,:ACCOUNT_ID,:WHO_CREATE_ID,
               :SUM_RECEIPT,:DATE_RECEIPT,:DATE_CREATE,:DESCRIPTION);


  SELECT (CASE WHEN SUM(SUM_CHARGE) IS NULL THEN 0.0 ELSE SUM(SUM_CHARGE) END)
    FROM /*PREFIX*/CHARGES
   WHERE ACCOUNT_ID=:ACCOUNT_ID
    INTO :ASUM_CHARGE;

  SELECT (CASE WHEN SUM(SUM_RECEIPT) IS NULL THEN 0.0 ELSE SUM(SUM_RECEIPT) END)
    FROM /*PREFIX*/RECEIPTS
   WHERE ACCOUNT_ID=:ACCOUNT_ID
    INTO :ASUM_RECEIPT;

  BALANCE=ASUM_RECEIPT-ASUM_CHARGE;

  SELECT PHONE
    FROM /*PREFIX*/ACCOUNTS
   WHERE ACCOUNT_ID=:ACCOUNT_ID
    INTO :PHONE;

/*  S='Ваш баланс = '||CAST(BALANCE AS VARCHAR(30))||' р.';*/

  SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('2031AA8F2E4B959248967F2838DC5F19') INTO :S;

  IF (S IS NOT NULL) THEN BEGIN

    S=/*PREFIX*/REPLACE_STRING(S,'%BALANCE',CAST(BALANCE AS VARCHAR(30)));

    INSERT INTO /*PREFIX*/OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                        TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED)
                                VALUES (GET_UNIQUE_ID(),:WHO_CREATE_ID,:ACCOUNT_ID,CURRENT_TIMESTAMP,
                                        :S,NULL,0,:PHONE,NULL,2,NULL);
  END

END;

--

/* Создание процедуры обработки результата изменение маршрута */

CREATE OR ALTER PROCEDURE /*PREFIX*/PR_CHANGE_ROUTE
(
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32)
)
AS
DECLARE PHONE VARCHAR(100);
DECLARE DRIVER_ID VARCHAR(32);
DECLARE S VARCHAR(1000);
BEGIN

  SELECT DRIVER_ID
    FROM /*PREFIX*/ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID;

  UPDATE /*PREFIX*/ORDERS
     SET TYPE_PROCESS=1,
         DATE_END=CURRENT_TIMESTAMP,
         WHO_PROCESS_ID=:ACCOUNT_ID
   WHERE ORDER_ID=:ORDER_ID;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    SELECT PHONE_MOBILE
      FROM /*PREFIX*/DRIVERS
     WHERE DRIVER_ID=:DRIVER_ID
      INTO :PHONE;

    SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('2A7354AFB1FDB1D041F8FB2D06FFBC70') INTO :S;

    IF (S IS NOT NULL) THEN BEGIN

      INSERT INTO /*PREFIX*/OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                          TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED)
                                  VALUES (/*PREFIX*/GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                          :S,NULL,0,:PHONE,NULL,2,NULL);
    END

  END

END;

--

/* Создание процедуры обработки результата частичный расчет */

CREATE OR ALTER PROCEDURE /*PREFIX*/PR_PARTY_CALC
(
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32)
)
AS
DECLARE PHONE VARCHAR(100);
DECLARE DRIVER_ID VARCHAR(32);
DECLARE S VARCHAR(1000);
BEGIN

  SELECT DRIVER_ID
    FROM /*PREFIX*/ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID;

  UPDATE /*PREFIX*/ORDERS
     SET TYPE_PROCESS=1,
         DATE_END=CURRENT_TIMESTAMP,
         WHO_PROCESS_ID=:ACCOUNT_ID
   WHERE ORDER_ID=:ORDER_ID;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    SELECT PHONE_MOBILE
      FROM /*PREFIX*/DRIVERS
     WHERE DRIVER_ID=:DRIVER_ID
      INTO :PHONE;

    SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('8B477D56F777966345EBC1130AF01C55') INTO :S;

    IF (S IS NOT NULL) THEN BEGIN

      INSERT INTO /*PREFIX*/OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                          TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED)
                                  VALUES (/*PREFIX*/GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                          :S,NULL,0,:PHONE,NULL,2,NULL);
    END

  END

END;

--

/* Создание процедуры определения результата водитель выехал */

CREATE OR ALTER PROCEDURE /*PREFIX*/DR_ARRIVAL_DRIVER
(
  ORDER_ID VARCHAR(32),
  ACTION_ID VARCHAR(32),
  RESULT_ID VARCHAR(32))
RETURNS
(
  DETECTED INTEGER
)
AS
DECLARE CNT INTEGER;
DECLARE DRIVER_ID VARCHAR(32);
DECLARE DATE_BEGIN TIMESTAMP;
BEGIN
  DETECTED=0;

  SELECT DRIVER_ID, DATE_BEGIN
    FROM /*PREFIX*/ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID, :DATE_BEGIN;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    SELECT COUNT(*)
      FROM /*PREFIX*/IN_MESSAGES IM
      JOIN /*PREFIX*/CODE_MESSAGES CM ON CM.CODE_MESSAGE_ID=IM.CODE_MESSAGE_ID
     WHERE IM.SENDER_ID=:DRIVER_ID
       AND IM.CODE_MESSAGE_ID='618A0B399123BEEA474944099929C541' /* Водитель прибыл */
       AND IM.TYPE_MESSAGE=0
       AND IM.DATE_IN>:DATE_BEGIN
       AND CM.ENABLED=1
      INTO CNT;

    IF (CNT>0) THEN
      DETECTED=1;

  END

  SUSPEND;
END;

--

/* Создание процедуры определения результата изменение маршрута */ 

CREATE OR ALTER PROCEDURE /*PREFIX*/DR_CHANGE_ROUTE
(
  ORDER_ID VARCHAR(32),
  ACTION_ID VARCHAR(32),
  RESULT_ID VARCHAR(32)
)
RETURNS
(
  DETECTED INTEGER
)
AS
DECLARE CNT INTEGER;
DECLARE DRIVER_ID VARCHAR(32);
DECLARE DATE_BEGIN TIMESTAMP;
BEGIN
  DETECTED=0;

  SELECT DRIVER_ID, DATE_BEGIN
    FROM /*PREFIX*/ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID, :DATE_BEGIN;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    SELECT COUNT(*)
      FROM /*PREFIX*/IN_MESSAGES IM
      JOIN /*PREFIX*/CODE_MESSAGES CM ON CM.CODE_MESSAGE_ID=IM.CODE_MESSAGE_ID
     WHERE IM.SENDER_ID=:DRIVER_ID
       AND IM.CODE_MESSAGE_ID='F42D57842950B923481A9B2D02B925CB' /* Клиент хочет сменить маршрут */
       AND IM.TYPE_MESSAGE=0
       AND IM.DATE_IN>:DATE_BEGIN
       AND CM.ENABLED=1
      INTO CNT;

    IF (CNT>0) THEN
      DETECTED=1;

  END

  SUSPEND;
END;

--

/* Создание процедуры определения результата клиент в машине */

CREATE OR ALTER PROCEDURE /*PREFIX*/DR_CLIENT_IN_CAR
(
  ORDER_ID VARCHAR(32),
  ACTION_ID VARCHAR(32),
  RESULT_ID VARCHAR(32)
)
RETURNS
(
  DETECTED INTEGER
)
AS
DECLARE CNT INTEGER;
DECLARE DRIVER_ID VARCHAR(32);
DECLARE DATE_BEGIN TIMESTAMP;
BEGIN
  DETECTED=0;

  SELECT DRIVER_ID, DATE_BEGIN
    FROM /*PREFIX*/ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID, :DATE_BEGIN;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    SELECT COUNT(*)
      FROM /*PREFIX*/IN_MESSAGES IM
      JOIN /*PREFIX*/CODE_MESSAGES CM ON CM.CODE_MESSAGE_ID=IM.CODE_MESSAGE_ID
     WHERE IM.SENDER_ID=:DRIVER_ID
       AND IM.CODE_MESSAGE_ID='3FD0D3ABD5E0B697483FF8520EDDBD6D' /* Клиент сел в машину */
       AND IM.TYPE_MESSAGE=0
       AND IM.DATE_IN>:DATE_BEGIN
       AND CM.ENABLED=1
      INTO CNT;

    IF (CNT>0) THEN
      DETECTED=1;

  END

  SUSPEND;
END;

--

/* Создание процедуры определения результата подтверждение заказа */

CREATE OR ALTER  PROCEDURE /*PREFIX*/DR_CONFIRM_ORDER
(
  ORDER_ID VARCHAR(32),
  ACTION_ID VARCHAR(32),
  RESULT_ID VARCHAR(32)
)
RETURNS
(
  DETECTED INTEGER
)
AS
DECLARE CNT INTEGER;
DECLARE DRIVER_ID VARCHAR(32);
DECLARE DATE_BEGIN TIMESTAMP;
BEGIN
  DETECTED=0;

  SELECT DRIVER_ID, DATE_BEGIN
    FROM /*PREFIX*/ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID, :DATE_BEGIN;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    SELECT COUNT(*)
      FROM /*PREFIX*/IN_MESSAGES IM
      JOIN /*PREFIX*/CODE_MESSAGES CM ON CM.CODE_MESSAGE_ID=IM.CODE_MESSAGE_ID
     WHERE IM.SENDER_ID=:DRIVER_ID
       AND IM.CODE_MESSAGE_ID='A87C64B41C87907A4B8C58C5F6A19E2F' /* Водитель принял заказ */
       AND IM.TYPE_MESSAGE=0
       AND IM.DATE_IN>:DATE_BEGIN
       AND CM.ENABLED=1
      INTO CNT;

    IF (CNT>0) THEN
      DETECTED=1;

  END

  SUSPEND;
END;

--

/* Создание процедуры определения результата полный расчет */

CREATE OR ALTER PROCEDURE /*PREFIX*/DR_FULL_CALC
(
  ORDER_ID VARCHAR(32),
  ACTION_ID VARCHAR(32),
  RESULT_ID VARCHAR(32)
)
RETURNS
(
  DETECTED INTEGER
)
AS
DECLARE CNT INTEGER;
DECLARE DRIVER_ID VARCHAR(32);
DECLARE DATE_BEGIN TIMESTAMP;
BEGIN
  DETECTED=0;

  SELECT DRIVER_ID, DATE_BEGIN
    FROM /*PREFIX*/ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID, :DATE_BEGIN;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    SELECT COUNT(*)
      FROM /*PREFIX*/IN_MESSAGES IM
      JOIN /*PREFIX*/CODE_MESSAGES CM ON CM.CODE_MESSAGE_ID=IM.CODE_MESSAGE_ID
     WHERE IM.SENDER_ID=:DRIVER_ID
       AND IM.CODE_MESSAGE_ID='0388BCC17DE1A1754B566F18AEEED771' /* Клиент рассчитался полностью */
       AND IM.TYPE_MESSAGE=0
       AND IM.DATE_IN>:DATE_BEGIN
       AND CM.ENABLED=1
      INTO CNT;

    IF (CNT>0) THEN
      DETECTED=1;

  END

  SUSPEND;
END;

--

/* Создание процедуры определения результата частичный расчет */

CREATE OR ALTER PROCEDURE /*PREFIX*/DR_PARTLY_CALC
(
  ORDER_ID VARCHAR(32),
  ACTION_ID VARCHAR(32),
  RESULT_ID VARCHAR(32)
)
RETURNS
(
  DETECTED INTEGER
)
AS
DECLARE CNT INTEGER;
DECLARE DRIVER_ID VARCHAR(32);
DECLARE DATE_BEGIN TIMESTAMP;
BEGIN
  DETECTED=0;

  SELECT DRIVER_ID, DATE_BEGIN
    FROM /*PREFIX*/ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID, :DATE_BEGIN;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    SELECT COUNT(*)
      FROM /*PREFIX*/IN_MESSAGES IM
      JOIN /*PREFIX*/CODE_MESSAGES CM ON CM.CODE_MESSAGE_ID=IM.CODE_MESSAGE_ID
     WHERE IM.SENDER_ID=:DRIVER_ID
       AND IM.CODE_MESSAGE_ID='E0D06394F6BC81BA481D1F94D12B3FB4' /* Клиент отказался платить */
       AND IM.TYPE_MESSAGE=0
       AND IM.DATE_IN>:DATE_BEGIN
       AND CM.ENABLED=1
      INTO CNT;

    IF (CNT>0) THEN
      DETECTED=1;

  END

  SUSPEND;
END;

--

/* Создание процедуры определения результата отказ клиента */

CREATE OR ALTER PROCEDURE /*PREFIX*/DR_REFUSE_CLIENT
(
  ORDER_ID VARCHAR(32),
  ACTION_ID VARCHAR(32),
  RESULT_ID VARCHAR(32)
)
RETURNS
(
  DETECTED INTEGER
)
AS
DECLARE CNT INTEGER;
DECLARE DRIVER_ID VARCHAR(32);
DECLARE DATE_BEGIN TIMESTAMP;
BEGIN
  DETECTED=0;

  SELECT DRIVER_ID, DATE_BEGIN
    FROM /*PREFIX*/ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID, :DATE_BEGIN;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    SELECT COUNT(*)
      FROM /*PREFIX*/IN_MESSAGES IM
      JOIN /*PREFIX*/CODE_MESSAGES CM ON CM.CODE_MESSAGE_ID=IM.CODE_MESSAGE_ID
     WHERE IM.SENDER_ID=:DRIVER_ID
       AND IM.CODE_MESSAGE_ID='9273E67428E797614B153E4C799D6F48' /* Клиент отказался от заказа */
       AND IM.TYPE_MESSAGE=0
       AND IM.DATE_IN>:DATE_BEGIN
       AND CM.ENABLED=1
      INTO CNT;

    IF (CNT>0) THEN
      DETECTED=1;

  END

  SUSPEND;
END;

--

/* Создание процедуры определения результата отказ водителя */

CREATE OR ALTER PROCEDURE /*PREFIX*/DR_REFUSE_DRIVER
(
  ORDER_ID VARCHAR(32),
  ACTION_ID VARCHAR(32),
  RESULT_ID VARCHAR(32)
)
RETURNS
(
  DETECTED INTEGER
)
AS
DECLARE CNT INTEGER;
DECLARE DRIVER_ID VARCHAR(32);
DECLARE DATE_BEGIN TIMESTAMP;
BEGIN
  DETECTED=0;

  SELECT DRIVER_ID, DATE_BEGIN
    FROM /*PREFIX*/ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID, :DATE_BEGIN;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    SELECT COUNT(*)
      FROM /*PREFIX*/IN_MESSAGES IM
      JOIN /*PREFIX*/CODE_MESSAGES CM ON CM.CODE_MESSAGE_ID=IM.CODE_MESSAGE_ID
     WHERE IM.SENDER_ID=:DRIVER_ID
       AND IM.CODE_MESSAGE_ID='2D41BEAE73EE84B04F4E6210C399BB63' /*Водитель отказалася от заказа */
       AND IM.TYPE_MESSAGE=0
       AND IM.DATE_IN>:DATE_BEGIN
       AND CM.ENABLED=1
      INTO CNT;

    IF (CNT>0) THEN
      DETECTED=1;

  END

  SUSPEND;
END;

--

/* Создание процедуры определения стоимости на основе расстояния по карте */

CREATE OR ALTER PROCEDURE /*PREFIX*/GET_COST_MAP
(
  ORDER_ID VARCHAR(32),
  STREET_ID VARCHAR(32),
  ZONE_ID VARCHAR(32),
  CAR_ID VARCHAR(32),
  RATE_ID VARCHAR(32),
  CAR_TYPE_ID VARCHAR(32),
  FIRM_ID VARCHAR(32),
  PARK_ID VARCHAR(32),
  DRIVER_ID VARCHAR(32),
  SOURCE_ID VARCHAR(32),
  DISCOUNT_ID VARCHAR(32),
  HOUSE VARCHAR(10),
  FLAT VARCHAR(10),
  PORCH VARCHAR(10),
  PHONE VARCHAR(100),
  CUSTOMER VARCHAR(250),
  ORDER_NUM VARCHAR(10),
  BASE_COST NUMERIC(15,2),
  BASE_DISTANCE NUMERIC(15,2),
  BASE_PERIOD INTEGER
)
RETURNS
(
  COST NUMERIC(15,2)
)
AS
BEGIN
  COST=BASE_COST*BASE_DISTANCE;

  IF (COST IS NOT NULL) THEN BEGIN

    IF (COST<100.0) THEN BEGIN

      IF (BASE_DISTANCE>0.0) THEN
        COST=100.0;
      ELSE
        COST=0.0;

    END ELSE BEGIN

      IF (BASE_DISTANCE>10.0) THEN BEGIN

        COST=COST*0.9;

      END

    END

  END

  IF (COST IS NOT NULL) THEN BEGIN

    COST=CAST(CAST((COST/10) AS NUMERIC(15,1)) AS NUMERIC(15,0))*10;

  END

END;

--

/* Создание процедуры обработки результата водитель прибыл */

CREATE OR ALTER PROCEDURE PR_ARRIVAL_DRIVER
(
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32)
)
AS
DECLARE PHONE VARCHAR(100);
DECLARE DRIVER_ID VARCHAR(32);
DECLARE COST_RATE NUMERIC(15,2);
DECLARE COLOR VARCHAR(100);
DECLARE BRAND VARCHAR(100);
DECLARE STATE_NUM VARCHAR(50);
DECLARE PREFIX VARCHAR(10);
DECLARE STREET VARCHAR(100);
DECLARE HOUSE VARCHAR(10);
DECLARE FLAT VARCHAR(10);
DECLARE PORCH VARCHAR(10);
DECLARE LOCALITY VARCHAR(100);
DECLARE RECIPIENT_ID VARCHAR(32);
DECLARE S VARCHAR(1000);
DECLARE ADDRESS VARCHAR(1000);
DECLARE CNT INTEGER;
BEGIN

  SELECT O.PHONE, O.DRIVER_ID, O.COST_RATE,
         C.COLOR, C.BRAND, C.STATE_NUM
    FROM /*PREFIX*/ORDERS O
    LEFT JOIN /*PREFIX*/DRIVERS D ON D.DRIVER_ID=O.DRIVER_ID
    LEFT JOIN /*PERFIX*/CARS C ON C.CAR_ID=D.CAR_ID
   WHERE ORDER_ID=:ORDER_ID
    INTO :PHONE, :DRIVER_ID, :COST_RATE,
         :COLOR, :BRAND, :STATE_NUM;

  UPDATE /*PREFIX*/ORDERS
     SET DATE_BEGIN=CURRENT_TIMESTAMP
   WHERE ORDER_ID=:ORDER_ID;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    IF (PHONE IS NOT NULL) THEN BEGIN

      IF (SUBSTR(PHONE,1,3)='+79')  THEN BEGIN

        RECIPIENT_ID=NULL;

        FOR SELECT ACCOUNT_ID
              FROM /*PREFIX*/ACCOUNTS
             WHERE PHONE=:PHONE
              INTO :RECIPIENT_ID DO BEGIN

          IF (RECIPIENT_ID IS NOT NULL) THEN
            BREAK;
        END

/*        S='Выходите, такси '||COLOR||', '||BRAND||', '||STATE_NUM||'.';*/

        IF (COST_RATE>0.0) THEN BEGIN

/*          S=S||' Стоимость = '||CAST(CAST(COST_RATE AS NUMERIC(15,0)) AS VARCHAR(30))||' р.';*/

          SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('8D9E6C9F4852AD8142205F027B2A5288') INTO :S;

        END ELSE BEGIN

/*          S=S||' Стоимость не определена';*/

          SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('93EBB0171E37A0884313759C0DA1EB3D') INTO :S;

        END

        IF (S IS NOT NULL) THEN BEGIN

          S=/*PREFIX*/REPLACE_STRING(S,'%COLOR',COLOR);
          S=/*PREFIX*/REPLACE_STRING(S,'%BRAND',BRAND);
          S=/*PREFIX*/REPLACE_STRING(S,'%STATE_NUM',STATE_NUM);
          S=/*PREFIX*/REPLACE_STRING(S,'%COST_RATE',CAST(CAST(COST_RATE AS NUMERIC(15,0)) AS VARCHAR(30)));

          INSERT INTO /*PREFIX*/OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                              TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED)
                                      VALUES (/*PREFIX*/GET_UNIQUE_ID(),:ACCOUNT_ID,:RECIPIENT_ID,CURRENT_TIMESTAMP,
                                              :S,NULL,0,:PHONE,NULL,0,NULL);

        END

      END

    END

    SELECT PHONE_MOBILE
      FROM /*PREFIX*/DRIVERS
     WHERE DRIVER_ID=:DRIVER_ID
      INTO :PHONE;

    SELECT COUNT(*)
      FROM /*PREFIX*/ROUTES
     WHERE ORDER_ID=:ORDER_ID
      INTO CNT;

    ADDRESS='';

    IF (CNT>0) THEN BEGIN

      FOR SELECT S.PREFIX, S.NAME, R.HOUSE, R.FLAT, R.PORCH, L.NAME
            FROM /*PREFIX*/ROUTES R
            LEFT JOIN /*PREFIX*/STREETS S ON S.STREET_ID=R.STREET_ID
            LEFT JOIN /*PREFIX*/LOCALITIES L ON L.LOCALITY_ID=S.LOCALITY_ID
           WHERE R.ORDER_ID=:ORDER_ID
           ORDER BY R.PRIORITY DESC
            INTO :PREFIX, :STREET, :HOUSE, :FLAT, :PORCH, :LOCALITY DO BEGIN
        BREAK;
      END

      IF ((STREET IS NOT NULL) AND (HOUSE IS NOT NULL)) THEN BEGIN

        IF (PREFIX IS NOT NULL) THEN
          ADDRESS=PREFIX||' ';

        IF (STREET IS NOT NULL) THEN
          ADDRESS=ADDRESS||STREET;

        IF (HOUSE IS NOT NULL) THEN
          ADDRESS=ADDRESS||' '||HOUSE;

        IF (FLAT IS NOT NULL) THEN
          ADDRESS=ADDRESS||'-'||FLAT;

        IF (PORCH IS NOT NULL) THEN
          ADDRESS=ADDRESS||' п.'||PORCH;

        IF (LOCALITY IS NOT NULL) THEN
          ADDRESS=ADDRESS||', '||LOCALITY;

      END ELSE BEGIN

        SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('7ED5E8A8BBD9870A411517B54D9EB973') INTO :ADDRESS;

      END

    END ELSE BEGIN

/*      ADDRESS='Уточните маршрут.';*/

      SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('7ED5E8A8BBD9870A411517B54D9EB973') INTO :ADDRESS;
    END

    IF (COST_RATE>0.0) THEN BEGIN

/*      S=ADDRESS||' Стоимость = '||CAST(CAST(COST_RATE AS NUMERIC(15,0)) AS VARCHAR(30))||' р.';*/

      SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('9C8BC7D14DAEAE5C4DC8C1C91B20BCC2') INTO :S;

    END ELSE BEGIN

/*      S=ADDRESS||' Стоимость не определена';*/

      SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('92009DB6C3EAA9E74B80D333538FE40D') INTO :S;

    END

    IF (S IS NOT NULL) THEN BEGIN

      S=/*PREFIX*/REPLACE_STRING(S,'%ADDRESS',ADDRESS);
      S=/*PREFIX*/REPLACE_STRING(S,'%COST_RATE',CAST(CAST(COST_RATE AS NUMERIC(15,0)) AS VARCHAR(30)));

      RECIPIENT_ID=DRIVER_ID;

      INSERT INTO /*PREFIX*/OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                          TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED)
                                  VALUES (/*PREFIX*/GET_UNIQUE_ID(),:ACCOUNT_ID,:RECIPIENT_ID,CURRENT_TIMESTAMP,
                                          :S,NULL,0,:PHONE,NULL,2,NULL);
    END

  END

END;

--

/* Добавление порядка в таблицу водителей */

ALTER TABLE /*PREFIX*/DRIVERS
ADD PRIORITY INTEGER;

--

/* Удаление просмотра свободных водителей */

DROP VIEW /*PREFIX*/S_DRIVER_FREE;

--

/* Удаление просмотра свободных водителей без стоянки */

DROP VIEW /*PREFIX*/S_DRIVER_PARK_FREE;

--

/* Удаление просмотра водителей с положительным балансом */

DROP VIEW /*PREFIX*/S_DRIVER_POSITIVES;

--

/* Удаление просмотра водителей */

DROP VIEW /*PREFIX*/S_DRIVERS;

--

/* Создание просмотра водителей */

CREATE VIEW /*PREFIX*/S_DRIVERS(
    DRIVER_ID,
    CALC_ID,
    CAR_ID,
    PHONE_MOBILE,
    PHONE_HOME,
    LICENSE,
    CATEGORIES,
    INSURANCE,
    HEALTH_CERT,
    DESCRIPTION,
    ADDICT_CERT,
    PASSPORT,
    PLACE_BIRTH,
    DATE_BIRTH,
    ADDRESS_RESIDENCE,
    ADDRESS_ACTUAL,
    MIN_BALANCE,
    PRIORITY,
    USER_NAME,
    DATE_CREATE,
    LOCKED,
    SURNAME,
    NAME,
    PATRONYMIC,
    CALC_NAME,
    CAR_STATE_NUM,
    CAR_BRAND,
    CAR_COLOR,
    CAR_CALLSIGN,
    CAR_TYPE_ID,
    CAR_TYPE_NAME,
    CAR_TYPE_FONT_COLOR,
    CAR_TYPE_BRUSH_COLOR)
AS
SELECT D.*,
       A.USER_NAME,
       A.DATE_CREATE,
       A.LOCKED,
       A.SURNAME,
       A.NAME,
       A.PATRONYMIC,
       CL.NAME AS CALC_NAME,
       CR.STATE_NUM AS CAR_STATE_NUM,
       CR.BRAND AS CAR_BRAND,
       CR.COLOR AS CAR_COLOR,
       CR.CALLSIGN AS CAR_CALLSIGN,
       CR.CAR_TYPE_ID,
       CT.NAME AS CAR_TYPE_NAME,
       CT.FONT_COLOR AS CAR_TYPE_FONT_COLOR,
       CT.BRUSH_COLOR AS CAR_TYPE_BRUSH_COLOR
  FROM /*PREFIX*/DRIVERS D
  JOIN /*PREFIX*/ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
  JOIN /*PREFIX*/CALCS CL ON CL.CALC_ID=D.CALC_ID
  JOIN /*PREFIX*/CARS CR ON CR.CAR_ID=D.CAR_ID
  JOIN /*PREFIX*/CAR_TYPES CT ON CT.CAR_TYPE_ID=CR.CAR_TYPE_ID

--

/* Создание расширенного просмотра водителей */

CREATE VIEW /*PREFIX*/S_DRIVERS_EX
(
    DRIVER_ID,
    CALC_ID,
    CAR_ID,
    PHONE_MOBILE,
    PHONE_HOME,
    LICENSE,
    CATEGORIES,
    INSURANCE,
    HEALTH_CERT,
    DESCRIPTION,
    ADDICT_CERT,
    PASSPORT,
    PLACE_BIRTH,
    DATE_BIRTH,
    ADDRESS_RESIDENCE,
    ADDRESS_ACTUAL,
    MIN_BALANCE,
    PRIORITY,
    USER_NAME,
    DATE_CREATE,
    LOCKED,
    SURNAME,
    NAME,
    PATRONYMIC,
    CALC_NAME,
    CAR_STATE_NUM,
    CAR_BRAND,
    CAR_COLOR,
    CAR_CALLSIGN,
    CAR_TYPE_ID,
    CAR_TYPE_NAME,
    CAR_TYPE_FONT_COLOR,
    CAR_TYPE_BRUSH_COLOR,
    SUM_CHARGE,
    SUM_RECEIPT,
    ACTUAL_BALANCE)
AS
SELECT D.*,
       A.USER_NAME,
       A.DATE_CREATE,
       A.LOCKED,
       A.SURNAME,
       A.NAME,
       A.PATRONYMIC,
       CL.NAME AS CALC_NAME,
       CR.STATE_NUM AS CAR_STATE_NUM,
       CR.BRAND AS CAR_BRAND,
       CR.COLOR AS CAR_COLOR,
       CR.CALLSIGN AS CAR_CALLSIGN,
       CR.CAR_TYPE_ID,
       CT.NAME AS CAR_TYPE_NAME,
       CT.FONT_COLOR AS CAR_TYPE_FONT_COLOR,
       CT.BRUSH_COLOR AS CAR_TYPE_BRUSH_COLOR,
       (CASE WHEN SAC.SUM_CHARGE IS NULL THEN 0.0 ELSE SAC.SUM_CHARGE END) SUM_CHARGE,
       (CASE WHEN SAR.SUM_RECEIPT IS NULL THEN 0.0 ELSE SAR.SUM_RECEIPT END) SUM_RECEIPT,
       ((CASE WHEN SAR.SUM_RECEIPT IS NULL THEN 0.0 ELSE SAR.SUM_RECEIPT END)-
        (CASE WHEN SAC.SUM_CHARGE IS NULL THEN 0.0 ELSE SAC.SUM_CHARGE END)) AS ACTUAL_BALANCE
  FROM /*PREFIX*/DRIVERS D
  JOIN /*PREFIX*/ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
  JOIN /*PREFIX*/CALCS CL ON CL.CALC_ID=D.CALC_ID
  JOIN /*PREFIX*/CARS CR ON CR.CAR_ID=D.CAR_ID
  JOIN /*PREFIX*/CAR_TYPES CT ON CT.CAR_TYPE_ID=CR.CAR_TYPE_ID
  LEFT JOIN /*PREFIX*/S_ACCOUNT_CHARGES SAC ON SAC.ACCOUNT_ID=D.DRIVER_ID
  LEFT JOIN /*PREFIX*/S_ACCOUNT_RECEIPTS SAR ON SAR.ACCOUNT_ID=D.DRIVER_ID

--

/* Создание просмотра водителей с положительным балансом */

CREATE VIEW /*PREFIX*/S_DRIVER_POSITIVES
(
    DRIVER_ID,
    CALC_ID,
    CAR_ID,
    PHONE_MOBILE,
    PHONE_HOME,
    LICENSE,
    CATEGORIES,
    INSURANCE,
    HEALTH_CERT,
    DESCRIPTION,
    ADDICT_CERT,
    PASSPORT,
    PLACE_BIRTH,
    DATE_BIRTH,
    ADDRESS_RESIDENCE,
    ADDRESS_ACTUAL,
    MIN_BALANCE,
    PRIORITY,
    USER_NAME,
    DATE_CREATE,
    LOCKED,
    SURNAME,
    NAME,
    PATRONYMIC,
    CALC_NAME,
    CAR_STATE_NUM,
    CAR_BRAND,
    CAR_COLOR,
    CAR_CALLSIGN,
    CAR_TYPE_ID,
    CAR_TYPE_NAME,
    CAR_TYPE_FONT_COLOR,
    CAR_TYPE_BRUSH_COLOR,
    SUM_CHARGE,
    SUM_RECEIPT,
    ACTUAL_BALANCE)
AS
SELECT *
  FROM /*PREFIX*/S_DRIVERS_EX
 WHERE (MIN_BALANCE IS NULL)
    OR (ACTUAL_BALANCE>MIN_BALANCE)

--

/* Создание просмотра водителей без стоянки */

CREATE VIEW /*PREFIX*/S_DRIVER_PARK_FREE
(
    DRIVER_ID,
    CALC_ID,
    CAR_ID,
    PHONE_MOBILE,
    PHONE_HOME,
    LICENSE,
    CATEGORIES,
    INSURANCE,
    HEALTH_CERT,
    DESCRIPTION,
    ADDICT_CERT,
    PASSPORT,
    PLACE_BIRTH,
    DATE_BIRTH,
    ADDRESS_RESIDENCE,
    ADDRESS_ACTUAL,
    MIN_BALANCE,
    PRIORITY,
    USER_NAME,
    DATE_CREATE,
    LOCKED,
    SURNAME,
    NAME,
    PATRONYMIC,
    CALC_NAME,
    CAR_STATE_NUM,
    CAR_BRAND,
    CAR_COLOR,
    CAR_CALLSIGN,
    CAR_TYPE_ID,
    CAR_TYPE_NAME,
    CAR_TYPE_FONT_COLOR,
    CAR_TYPE_BRUSH_COLOR,
    SUM_CHARGE,
    SUM_RECEIPT,
    ACTUAL_BALANCE)
AS
SELECT *
  FROM S_DRIVERS_EX
 WHERE DRIVER_ID IN (SELECT ACCOUNT_ID FROM SHIFTS
                      WHERE DATE_END IS NULL)
   AND DRIVER_ID NOT IN (SELECT DRIVER_ID FROM PARK_STATES
                          WHERE DATE_OUT IS NULL)
   AND LOCKED=0
   AND ((MIN_BALANCE IS NULL) OR (ACTUAL_BALANCE>MIN_BALANCE))

--

/* Создание просмотра свободных водителей */

CREATE VIEW /*PREFIX*/S_DRIVER_FREE
(
    DRIVER_ID,
    CALC_ID,
    CAR_ID,
    PHONE_MOBILE,
    PHONE_HOME,
    LICENSE,
    CATEGORIES,
    INSURANCE,
    HEALTH_CERT,
    DESCRIPTION,
    ADDICT_CERT,
    PASSPORT,
    PLACE_BIRTH,
    DATE_BIRTH,
    ADDRESS_RESIDENCE,
    ADDRESS_ACTUAL,
    MIN_BALANCE,
    PRIORITY,
    USER_NAME,
    DATE_CREATE,
    LOCKED,
    SURNAME,
    NAME,
    PATRONYMIC,
    CALC_NAME,
    CAR_STATE_NUM,
    CAR_BRAND,
    CAR_COLOR,
    CAR_CALLSIGN,
    CAR_TYPE_ID,
    CAR_TYPE_NAME,
    CAR_TYPE_FONT_COLOR,
    CAR_TYPE_BRUSH_COLOR,
    SUM_CHARGE,
    SUM_RECEIPT,
    ACTUAL_BALANCE)
AS
SELECT *
  FROM S_DRIVERS_EX
 WHERE DRIVER_ID NOT IN (SELECT ACCOUNT_ID FROM SHIFTS
                          WHERE DATE_END IS NULL)
   AND LOCKED=0
   AND ((MIN_BALANCE IS NULL) OR (ACTUAL_BALANCE>MIN_BALANCE))

--

/* Создание процедуры создания водителя */

CREATE OR ALTER PROCEDURE /*PREFIX*/I_DRIVER
(
  DRIVER_ID VARCHAR(32),
  CALC_ID VARCHAR(32),
  CAR_ID VARCHAR(32),
  PHONE_MOBILE VARCHAR(100),
  PHONE_HOME VARCHAR(100),
  LICENSE VARCHAR(250),
  CATEGORIES VARCHAR(100),
  INSURANCE VARCHAR(250),
  HEALTH_CERT VARCHAR(250),
  DESCRIPTION VARCHAR(250),
  ADDICT_CERT VARCHAR(250),
  PASSPORT VARCHAR(250),
  PLACE_BIRTH VARCHAR(250),
  DATE_BIRTH DATE,
  ADDRESS_RESIDENCE VARCHAR(250),
  ADDRESS_ACTUAL VARCHAR(250),
  MIN_BALANCE NUMERIC(15,2),
  PRIORITY INTEGER,
  USER_NAME VARCHAR(100),
  LOCKED INTEGER,
  SURNAME VARCHAR(100),
  NAME VARCHAR(100),
  PATRONYMIC VARCHAR(100)
)
AS
BEGIN

  INSERT INTO /*PREFIX*/ACCOUNTS(ACCOUNT_ID,DATE_CREATE,USER_NAME,LOCKED,SURNAME,NAME,PATRONYMIC,IS_ROLE,PHONE)
       VALUES (:DRIVER_ID,CURRENT_TIMESTAMP,:USER_NAME,:LOCKED,:SURNAME,:NAME,:PATRONYMIC,0,:PHONE_MOBILE);

  INSERT INTO /*PREFIX*/DRIVERS (DRIVER_ID,CALC_ID,CAR_ID,PHONE_MOBILE,PHONE_HOME,LICENSE,
                                 CATEGORIES,INSURANCE,HEALTH_CERT,DESCRIPTION,ADDICT_CERT,
                                 PASSPORT,PLACE_BIRTH,DATE_BIRTH,ADDRESS_RESIDENCE,ADDRESS_ACTUAL,
                                 MIN_BALANCE,PRIORITY)
       VALUES (:DRIVER_ID,:CALC_ID,:CAR_ID,:PHONE_MOBILE,:PHONE_HOME,:LICENSE,
               :CATEGORIES,:INSURANCE,:HEALTH_CERT,:DESCRIPTION,:ADDICT_CERT,
               :PASSPORT,:PLACE_BIRTH,:DATE_BIRTH,:ADDRESS_RESIDENCE,:ADDRESS_ACTUAL,
               :MIN_BALANCE,:PRIORITY);
END;

--

/* Создание процедуры изменения водителя */

CREATE OR ALTER PROCEDURE /*PREFIX*/U_DRIVER
(
  DRIVER_ID VARCHAR(32),
  CALC_ID VARCHAR(32),
  CAR_ID VARCHAR(32),
  PHONE_MOBILE VARCHAR(100),
  PHONE_HOME VARCHAR(100),
  LICENSE VARCHAR(250),
  CATEGORIES VARCHAR(100),
  INSURANCE VARCHAR(250),
  HEALTH_CERT VARCHAR(250),
  DESCRIPTION VARCHAR(250),
  ADDICT_CERT VARCHAR(250),
  PASSPORT VARCHAR(250),
  PLACE_BIRTH VARCHAR(250),
  DATE_BIRTH DATE,
  ADDRESS_RESIDENCE VARCHAR(250),
  ADDRESS_ACTUAL VARCHAR(250),
  MIN_BALANCE NUMERIC(15,2),
  PRIORITY INTEGER,
  USER_NAME VARCHAR(100),
  LOCKED INTEGER,
  SURNAME VARCHAR(100),
  NAME VARCHAR(100),
  PATRONYMIC VARCHAR(100),
  OLD_DRIVER_ID VARCHAR(32)
)
AS
BEGIN

  UPDATE /*PREFIX*/ACCOUNTS
     SET ACCOUNT_ID=:DRIVER_ID,
         USER_NAME=:USER_NAME,
         LOCKED=:LOCKED,
         SURNAME=:SURNAME,
         NAME=:NAME,
         PATRONYMIC=:PATRONYMIC,
         IS_ROLE=0,
         PHONE=:PHONE_MOBILE
   WHERE ACCOUNT_ID=:OLD_DRIVER_ID;

  UPDATE /*PREFIX*/DRIVERS
     SET DRIVER_ID=:DRIVER_ID,
         CALC_ID=:CALC_ID,
         CAR_ID=:CAR_ID,
         PHONE_MOBILE=:PHONE_MOBILE,
         PHONE_HOME=:PHONE_HOME,
         LICENSE=:LICENSE,
         CATEGORIES=:CATEGORIES,
         INSURANCE=:INSURANCE,
         HEALTH_CERT=:HEALTH_CERT,
         DESCRIPTION=:DESCRIPTION,
         ADDICT_CERT=:ADDICT_CERT,
         PASSPORT=:PASSPORT,
         PLACE_BIRTH=:PLACE_BIRTH,
         DATE_BIRTH=:DATE_BIRTH,
         ADDRESS_RESIDENCE=:ADDRESS_RESIDENCE,
         ADDRESS_ACTUAL=:ADDRESS_ACTUAL,
         MIN_BALANCE=:MIN_BALANCE,
         PRIORITY=:PRIORITY
   WHERE DRIVER_ID=:OLD_DRIVER_ID;

END;

--

/* Создание процедуры удаления водителя */

CREATE OR ALTER PROCEDURE /*PREFIX*/D_DRIVER
(
  OLD_DRIVER_ID VARCHAR(32)
)
AS
BEGIN
  DELETE FROM /*PREFIX*/DRIVERS
        WHERE DRIVER_ID=:OLD_DRIVER_ID;

  DELETE FROM /*PREFIX*/ACCOUNTS
        WHERE ACCOUNT_ID=:OLD_DRIVER_ID;
END;

--

/* Удаление просмотра водителей с положительным балансом на стоянках */

DROP VIEW /*PREFIX*/S_DRIVER_POSITIVE_PARKS

--

/* Удаление просмотра водителя на стоянках */

DROP VIEW /*PREFIX*/S_DRIVER_PARKS

--

/* Создание просмотра водителя на стоянках */

CREATE VIEW /*PREFIX*/S_DRIVER_PARKS
(
    PARK_STATE_ID,
    DRIVER_ID,
    PARK_ID,
    DATE_IN,
    DATE_OUT,
    DRIVER_NAME,
    CAR_ID,
    MIN_BALANCE,
    PRIORITY,
    CAR_COLOR,
    CAR_BRAND,
    CAR_STATE_NUM,
    CAR_CALLSIGN,
    CAR_TYPE_ID,
    CAR_TYPE_NAME,
    CAR_TYPE_FONT_COLOR,
    CAR_TYPE_BRUSH_COLOR,
    PARK_NAME,
    SUM_CHARGE,
    SUM_RECEIPT,
    ACTUAL_BALANCE)
AS
SELECT PS.*,
       A.USER_NAME AS DRIVER_NAME,
       D.CAR_ID,
       D.MIN_BALANCE,
       D.PRIORITY,
       C.COLOR AS CAR_COLOR,
       C.BRAND AS CAR_BRAND,
       C.STATE_NUM AS CAR_STATE_NUM,
       C.CALLSIGN AS CAR_CALLSIGN,
       C.CAR_TYPE_ID,
       CT.NAME AS CAR_TYPE_NAME,
       CT.FONT_COLOR AS CAR_TYPE_FONT_COLOR,
       CT.BRUSH_COLOR AS CAR_TYPE_BRUSH_COLOR,
       P.NAME AS PARK_NAME,
       (CASE WHEN SAC.SUM_CHARGE IS NULL THEN 0.0 ELSE SAC.SUM_CHARGE END) SUM_CHARGE,
       (CASE WHEN SAR.SUM_RECEIPT IS NULL THEN 0.0 ELSE SAR.SUM_RECEIPT END) SUM_RECEIPT,
       ((CASE WHEN SAR.SUM_RECEIPT IS NULL THEN 0.0 ELSE SAR.SUM_RECEIPT END)-
        (CASE WHEN SAC.SUM_CHARGE IS NULL THEN 0.0 ELSE SAC.SUM_CHARGE END)) AS ACTUAL_BALANCE
  FROM /*PREFIX*/PARK_STATES PS
  JOIN /*PREFIX*/PARKS P ON P.PARK_ID=PS.PARK_ID
  JOIN /*PREFIX*/ACCOUNTS A ON A.ACCOUNT_ID=PS.DRIVER_ID
  JOIN /*PREFIX*/DRIVERS D ON D.DRIVER_ID=PS.DRIVER_ID
  JOIN /*PREFIX*/CARS C ON C.CAR_ID=D.CAR_ID
  JOIN /*PREFIX*/CAR_TYPES CT ON CT.CAR_TYPE_ID=C.CAR_TYPE_ID
  LEFT JOIN /*PREFIX*/S_ACCOUNT_CHARGES SAC ON SAC.ACCOUNT_ID=PS.DRIVER_ID
  LEFT JOIN /*PREFIX*/S_ACCOUNT_RECEIPTS SAR ON SAR.ACCOUNT_ID=PS.DRIVER_ID

--

/* Создание просмотра водителей с положительным балансом на стоянках */

CREATE VIEW /*PREFIX*/S_DRIVER_POSITIVE_PARKS
(
    PARK_STATE_ID,
    DRIVER_ID,
    PARK_ID,
    DATE_IN,
    DATE_OUT,
    DRIVER_NAME,
    CAR_ID,
    MIN_BALANCE,
    PRIORITY,
    CAR_COLOR,
    CAR_BRAND,
    CAR_STATE_NUM,
    CAR_CALLSIGN,
    CAR_TYPE_ID,
    CAR_TYPE_NAME,
    CAR_TYPE_FONT_COLOR,
    CAR_TYPE_BRUSH_COLOR,
    PARK_NAME,
    SUM_CHARGE,
    SUM_RECEIPT,
    ACTUAL_BALANCE)
AS
SELECT *
  FROM /*PREFIX*/S_DRIVER_PARKS
 WHERE (MIN_BALANCE IS NULL)
    OR (ACTUAL_BALANCE>MIN_BALANCE)

--

/* Создание процедуры обработки результата нет водителей */

CREATE OR ALTER PROCEDURE /*PREFIX*/PR_NO_DRIVER
(
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32)
)
AS
DECLARE PARK_ID VARCHAR(32);
DECLARE DRIVER_ID VARCHAR(32);
DECLARE RESULT_ID VARCHAR(32);
DECLARE CAR_ID VARCHAR(32);
DECLARE CNT INTEGER;
BEGIN

  SELECT PARK_ID, DRIVER_ID
    FROM /*PREFIX*/ORDERS
   WHERE ORDER_ID=:ORDER_ID
     INTO :PARK_ID, :DRIVER_ID;

  IF (DRIVER_ID IS NULL) THEN BEGIN

    IF (PARK_ID IS NOT NULL) THEN BEGIN

      RESULT_ID=NULL;

      FOR SELECT PS.DRIVER_ID
            FROM /*PREFIX*/PARK_STATES PS
            JOIN /*PREFIX*/DRIVERS D ON D.DRIVER_ID=PS.DRIVER_ID
           WHERE PS.PARK_ID=:PARK_ID
             AND PS.DATE_OUT IS NULL
           ORDER BY D.PRIORITY, PS.DATE_IN
            INTO :DRIVER_ID DO BEGIN

        SELECT COUNT(*)
          FROM /*PREFIX*/ORDERS
         WHERE DRIVER_ID=:DRIVER_ID
           AND PARENT_ID IS NULL
           AND DATE_HISTORY IS NULL
           AND FINISHED<>1
          INTO :CNT;

        IF (CNT=0) THEN BEGIN
          RESULT_ID=:DRIVER_ID;
          BREAK;
        END

      END

      IF (RESULT_ID IS NOT NULL) THEN BEGIN

        SELECT CAR_ID
          FROM /*PREFIX*/DRIVERS
         WHERE DRIVER_ID=:RESULT_ID
          INTO :CAR_ID;

        UPDATE /*PREFIX*/ORDERS
           SET DRIVER_ID=:RESULT_ID,
               CAR_ID=:CAR_ID,
               DATE_END=CURRENT_TIMESTAMP,
               WHO_PROCESS_ID=:ACCOUNT_ID
         WHERE ORDER_ID=:ORDER_ID;

      END ELSE BEGIN

        EXECUTE PROCEDURE PR_MANUAL(ORDER_ID,ACCOUNT_ID);

      END

    END ELSE BEGIN

      EXECUTE PROCEDURE PR_MANUAL(ORDER_ID,ACCOUNT_ID);

    END

  END

END;

--

/* Создание процедуры получения баланса учетной записи */

CREATE OR ALTER PROCEDURE /*PREFIX*/GET_ACCOUNT_BALANCE
(
  ACCOUNT_ID VARCHAR(32)
)
RETURNS
(
  SUM_CHARGE NUMERIC(15,2),
  SUM_RECEIPT NUMERIC(15,2),
  BALANCE NUMERIC(15,2)
)
AS
BEGIN

  SELECT SUM(SUM_CHARGE)
    FROM /*PREFIX*/CHARGES
   WHERE ACCOUNT_ID=:ACCOUNT_ID
    INTO :SUM_CHARGE;

  IF (SUM_CHARGE IS NULL) THEN
    SUM_CHARGE=0.0;

  SELECT SUM(SUM_RECEIPT)
    FROM /*PREFIX*/RECEIPTS
   WHERE ACCOUNT_ID=:ACCOUNT_ID
    INTO :SUM_RECEIPT;

  IF (SUM_RECEIPT IS NULL) THEN
    SUM_RECEIPT=0.0;

  BALANCE=SUM_RECEIPT-SUM_CHARGE;
END;

--

/* Удаление просмотра водителей с положительным балансом на сменах */

DROP VIEW /*PREFIX*/S_DRIVER_POSITIVE_SHIFTS

--

/* Удаление просмотра водителей на сменах */

DROP VIEW /*PREFIX*/S_DRIVER_SHIFTS

--

/* Создание просмотра водителей на сменах */

CREATE VIEW /*PREFIX*/S_DRIVER_SHIFTS
(
    SHIFT_ID,
    DRIVER_ID,
    DATE_BEGIN,
    DATE_END,
    DRIVER_NAME,
    CAR_ID,
    MIN_BALANCE,
    PRIORITY,
    CAR_COLOR,
    CAR_BRAND,
    CAR_STATE_NUM,
    CAR_CALLSIGN,
    CAR_TYPE_ID,
    CAR_TYPE_NAME,
    CAR_TYPE_FONT_COLOR,
    CAR_TYPE_BRUSH_COLOR,
    PARK_ID,
    PARK_NAME,
    PARK_DESCRIPTION,
    SUM_CHARGE,
    SUM_RECEIPT,
    ACTUAL_BALANCE)
AS
SELECT S.*,
       A.USER_NAME AS DRIVER_NAME,
       D.CAR_ID,
       D.MIN_BALANCE,
       D.PRIORITY,
       C.COLOR AS CAR_COLOR,
       C.BRAND AS CAR_BRAND,
       C.STATE_NUM AS CAR_STATE_NUM,
       C.CALLSIGN AS CAR_CALLSIGN,
       C.CAR_TYPE_ID,
       CT.NAME AS CAR_TYPE_NAME,
       CT.FONT_COLOR AS CAR_TYPE_FONT_COLOR,
       CT.BRUSH_COLOR AS CAR_TYPE_BRUSH_COLOR,
       P.PARK_ID,
       P.NAME AS PARK_NAME,
       P.DESCRIPTION AS PARK_DESCRIPTION,
       (CASE WHEN SAC.SUM_CHARGE IS NULL THEN 0.0 ELSE SAC.SUM_CHARGE END) SUM_CHARGE,
       (CASE WHEN SAR.SUM_RECEIPT IS NULL THEN 0.0 ELSE SAR.SUM_RECEIPT END) SUM_RECEIPT,
       ((CASE WHEN SAR.SUM_RECEIPT IS NULL THEN 0.0 ELSE SAR.SUM_RECEIPT END)-
        (CASE WHEN SAC.SUM_CHARGE IS NULL THEN 0.0 ELSE SAC.SUM_CHARGE END)) AS BALANCE
  FROM /*PREFIX*/SHIFTS S
  JOIN /*PREFIX*/ACCOUNTS A ON A.ACCOUNT_ID=S.ACCOUNT_ID
  JOIN /*PREFIX*/DRIVERS D ON D.DRIVER_ID=S.ACCOUNT_ID
  JOIN /*PREFIX*/CARS C ON C.CAR_ID=D.CAR_ID
  JOIN /*PREFIX*/CAR_TYPES CT ON CT.CAR_TYPE_ID=C.CAR_TYPE_ID
  LEFT JOIN /*PREFIX*/PARK_STATES PS ON PS.DRIVER_ID=D.DRIVER_ID AND PS.DATE_OUT IS NULL
  LEFT JOIN /*PREFIX*/PARKS P ON P.PARK_ID=PS.PARK_ID
  LEFT JOIN /*PREFIX*/S_ACCOUNT_CHARGES SAC ON SAC.ACCOUNT_ID=S.ACCOUNT_ID
  LEFT JOIN /*PREFIX*/S_ACCOUNT_RECEIPTS SAR ON SAR.ACCOUNT_ID=S.ACCOUNT_ID

--

/* Создание просмотра водителей с положительным балансом на сменах */

CREATE VIEW /*PREFIX*/S_DRIVER_POSITIVE_SHIFTS
(
    SHIFT_ID,
    DRIVER_ID,
    DATE_BEGIN,
    DATE_END,
    DRIVER_NAME,
    CAR_ID,
    MIN_BALANCE,
    PRIORITY,
    CAR_COLOR,
    CAR_BRAND,
    CAR_STATE_NUM,
    CAR_CALLSIGN,
    CAR_TYPE_ID,
    CAR_TYPE_NAME,
    CAR_TYPE_FONT_COLOR,
    CAR_TYPE_BRUSH_COLOR,
    PARK_ID,
    PARK_NAME,
    PARK_DESCRIPTION,
    SUM_CHARGE,
    SUM_RECEIPT,
    ACTUAL_BALANCE)
AS
SELECT *
  FROM /*PREFIX*/S_DRIVER_SHIFTS
 WHERE (MIN_BALANCE IS NULL)
    OR (ACTUAL_BALANCE>MIN_BALANCE)

--

/* Удаление просмотра стоянок с положительным балансом */

DROP VIEW /*PREFIX*/S_PARK_POSITIVE_STATES

--

/* Удаление просмотра стоянок */

DROP VIEW /*PREFIX*/S_PARK_STATES

--

/* Создание просмотра стоянок */

CREATE VIEW /*PREFIX*/S_PARK_STATES
(
    PARK_STATE_ID,
    DRIVER_ID,
    PARK_ID,
    DATE_IN,
    DATE_OUT,
    PARK_NAME,
    PARK_DESCRIPTION,
    DRIVER_NAME,
    CAR_ID,
    MIN_BALANCE,
    PRIORITY,
    CAR_COLOR,
    CAR_BRAND,
    CAR_STATE_NUM,
    CAR_TYPE_ID,
    CAR_CALLSIGN,
    SUM_CHARGE,
    SUM_RECEIPT,
    ACTUAL_BALANCE)
AS
SELECT PS.*,
       P.NAME AS PARK_NAME,
       P.DESCRIPTION AS PARK_DESCRIPTION,
       A.USER_NAME AS DRIVER_NAME,
       D.CAR_ID,
       D.MIN_BALANCE,
       D.PRIORITY,
       C.COLOR AS CAR_COLOR,
       C.BRAND AS CAR_BRAND,
       C.STATE_NUM AS CAR_STATE_NUM,
       C.CAR_TYPE_ID,
       C.CALLSIGN AS CAR_CALLSIGN,
       (CASE WHEN SAC.SUM_CHARGE IS NULL THEN 0.0 ELSE SAC.SUM_CHARGE END) SUM_CHARGE,
       (CASE WHEN SAR.SUM_RECEIPT IS NULL THEN 0.0 ELSE SAR.SUM_RECEIPT END) SUM_RECEIPT,
       ((CASE WHEN SAR.SUM_RECEIPT IS NULL THEN 0.0 ELSE SAR.SUM_RECEIPT END)-
        (CASE WHEN SAC.SUM_CHARGE IS NULL THEN 0.0 ELSE SAC.SUM_CHARGE END)) AS ACTUAL_BALANCE
  FROM /*PREFIX*/PARK_STATES PS
  JOIN /*PREFIX*/ACCOUNTS A ON A.ACCOUNT_ID=PS.DRIVER_ID
  JOIN /*PREFIX*/PARKS P ON P.PARK_ID=PS.PARK_ID
  JOIN /*PRFEIX*/DRIVERS D ON D.DRIVER_ID=PS.DRIVER_ID
  JOIN /*PREFIX*/CARS C ON C.CAR_ID=D.CAR_ID
  LEFT JOIN /*PREFIX*/S_ACCOUNT_CHARGES SAC ON SAC.ACCOUNT_ID=PS.DRIVER_ID
  LEFT JOIN /*PREFIX*/S_ACCOUNT_RECEIPTS SAR ON SAR.ACCOUNT_ID=PS.DRIVER_ID

--

/* Создание просмотра стоянок с положительным балансом */

CREATE VIEW /*PREFIX*/S_PARK_POSITIVE_STATES(
    PARK_STATE_ID,
    DRIVER_ID,
    PARK_ID,
    DATE_IN,
    DATE_OUT,
    PARK_NAME,
    PARK_DESCRIPTION,
    DRIVER_NAME,
    CAR_ID,
    MIN_BALANCE,
    PRIORITY,
    CAR_COLOR,
    CAR_BRAND,
    CAR_STATE_NUM,
    CAR_TYPE_ID,
    CAR_CALLSIGN,
    SUM_CHARGE,
    SUM_RECEIPT,
    ACTUAL_BALANCE)
AS
SELECT *
  FROM /*PREFIX*/S_PARK_STATES
 WHERE (MIN_BALANCE IS NULL)
    OR (ACTUAL_BALANCE>MIN_BALANCE)

--

/* Удаление просмотра диспетчеров */

DROP VIEW /*PREFIX*/S_DISPATCHERS

--

/* Создание просмотра диспетчеров */

CREATE VIEW /*PREFIX*/S_DISPATCHERS
(
    DISPATCHER_ID,
    CALC_ID,
    PHONE_MOBILE,
    PHONE_HOME,
    DESCRIPTION,
    PASSPORT,
    PLACE_BIRTH,
    DATE_BIRTH,
    ADDRESS_RESIDENCE,
    ADDRESS_ACTUAL,
    USER_NAME,
    DATE_CREATE,
    LOCKED,
    SURNAME,
    NAME,
    PATRONYMIC,
    CALC_NAME)
AS
SELECT D.*,
       A.USER_NAME,
       A.DATE_CREATE,
       A.LOCKED,
       A.SURNAME,
       A.NAME,
       A.PATRONYMIC,
       CL.NAME AS CALC_NAME
  FROM /*PREFIX*/DISPATCHERS D
  JOIN /*PREFIX*/ACCOUNTS A ON A.ACCOUNT_ID=D.DISPATCHER_ID
  JOIN /*PREFIX*/CALCS CL ON CL.CALC_ID=D.CALC_ID

--

/* Изменение процедуры обработки результата */

UPDATE /*PREFIX*/RESULTS
   SET PROC_PROCESS='PR_REFUSE_DRIVER_CONFIRM'
 WHERE RESULT_ID='BEB1137E08AB80D3489370B9B0FBB709'

--

/* Изменение процедуры обработки результата */

UPDATE /*PREFIX*/RESULTS
   SET PROC_PROCESS='PR_REFUSE_DRIVER_DRIVE_OUT'
 WHERE RESULT_ID='A6E11C19FFBF90C14D2FDC83B002A9A9'

--

/* Изменение процедуры обработки результата */

UPDATE /*PREFIX*/RESULTS
   SET PROC_PROCESS='PR_REFUSE_CLIENT_DRIVE_OUT'
 WHERE RESULT_ID='E03D43E2E5B4AEEE4416B997D888FC71'

--

/* Изменение процедуры обработки результата */

UPDATE /*PREFIX*/RESULTS
   SET PROC_PROCESS='DR_REFUSE_DRIVER_COME_OUT'
 WHERE RESULT_ID='CF02BE7D90A4A3B041F2F728D25154F5'

--

/* Изменение процедуры обработки результата */

UPDATE /*PREFIX*/RESULTS
   SET PROC_PROCESS='PR_REFUSE_CLIENT_COME_OUT'
 WHERE RESULT_ID='B01126058AE48A354BBF0472888819A3'

--

/* Изменение процедуры обработки результата */

UPDATE /*PREFIX*/RESULTS
   SET PROC_PROCESS='PR_PARTY_CALC'
 WHERE RESULT_ID='6E32A4F77B2F89F74814E7868361124B'

--

/* Изменение процедуры обработки результата */

UPDATE /*PREFIX*/RESULTS
   SET PROC_PROCESS='PR_CHANGE_ROUTE'
 WHERE RESULT_ID='DBB316AA7632966A4E25BBD07D93ECEB'

--

/* Фиксация изменений */

COMMIT