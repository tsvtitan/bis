/* Создание процедуры создания водителя */

CREATE OR ALTER PROCEDURE /*PREFIX*/I_DRIVER (
  DRIVER_ID VARCHAR(32),
  CALC_ID VARCHAR(32),
  CAR_ID VARCHAR(32),
  PHONE_MOBILE VARCHAR(100),
  PHONE_HOME VARCHAR(100),
  LICENSE VARCHAR(250),
  CATEGORIES VARCHAR(100),
  INSURANCE VARCHAR(250),
  HEALTH_CERT VARCHAR(250),
  DESCRIPTION VARCHAR(250),
  ADDICT_CERT VARCHAR(250),
  PASSPORT VARCHAR(250),
  PLACE_BIRTH VARCHAR(250),
  DATE_BIRTH DATE,
  ADDRESS_RESIDENCE VARCHAR(250),
  ADDRESS_ACTUAL VARCHAR(250),
  MIN_BALANCE NUMERIC(15,2),
  PRIORITY INTEGER,
  USER_NAME VARCHAR(100),
  LOCKED INTEGER,
  SURNAME VARCHAR(100),
  NAME VARCHAR(100),
  PATRONYMIC VARCHAR(100))
AS
  DECLARE ROLE_ID VARCHAR(32);
BEGIN

  INSERT INTO /*PREFIX*/ACCOUNTS (ACCOUNT_ID,DATE_CREATE,USER_NAME,LOCKED,SURNAME,NAME,PATRONYMIC,IS_ROLE,PHONE)
       VALUES (:DRIVER_ID,CURRENT_TIMESTAMP,:USER_NAME,:LOCKED,:SURNAME,:NAME,:PATRONYMIC,0,:PHONE_MOBILE);

  INSERT INTO /*PREFIX*/DRIVERS (DRIVER_ID,CALC_ID,CAR_ID,PHONE_MOBILE,PHONE_HOME,LICENSE,
                                 CATEGORIES,INSURANCE,HEALTH_CERT,DESCRIPTION,ADDICT_CERT,
                                 PASSPORT,PLACE_BIRTH,DATE_BIRTH,ADDRESS_RESIDENCE,ADDRESS_ACTUAL,
                                 MIN_BALANCE,PRIORITY)
       VALUES (:DRIVER_ID,:CALC_ID,:CAR_ID,:PHONE_MOBILE,:PHONE_HOME,:LICENSE,
               :CATEGORIES,:INSURANCE,:HEALTH_CERT,:DESCRIPTION,:ADDICT_CERT,
               :PASSPORT,:PLACE_BIRTH,:DATE_BIRTH,:ADDRESS_RESIDENCE,:ADDRESS_ACTUAL,
               :MIN_BALANCE,:PRIORITY);

  ROLE_ID='3EBE04F48C07BAB246324FBA8551FEF1'; /* Водители */
  INSERT INTO /*PREFIX*/ACCOUNT_ROLES (ROLE_ID,ACCOUNT_ID)
       VALUES (:ROLE_ID,:DRIVER_ID);
END;

--

/* Создание процедуры удаления водителя */

CREATE OR ALTER PROCEDURE /*PREFIX*/D_DRIVER (
  OLD_DRIVER_ID VARCHAR(32))
AS
BEGIN
  DELETE FROM /*PREFIX*/DRIVERS
        WHERE DRIVER_ID=:OLD_DRIVER_ID;

  DELETE FROM /*PREFIX*/ACCOUNT_ROLES
        WHERE ACCOUNT_ID=:OLD_DRIVER_ID;

  DELETE FROM /*PRFEIX*/ACCOUNTS
        WHERE ACCOUNT_ID=:OLD_DRIVER_ID;
END;

--

/* Создание процедуры удаления учетной записи */

CREATE OR ALTER PROCEDURE /*PREFIX*/D_ACCOUNT (
  OLD_ACCOUNT_ID VARCHAR(32))
AS
BEGIN
  DELETE FROM /*PREFIX*/PROFILES
        WHERE ACCOUNT_ID=:OLD_ACCOUNT_ID;

  DELETE FROM /*PREFIX*/ACCOUNTS
        WHERE ACCOUNT_ID=:OLD_ACCOUNT_ID;
END;

--

/* Создание процедуры создания диспетчера */

CREATE OR ALTER PROCEDURE /*PREFIX*/I_DISPATCHER (
  DISPATCHER_ID VARCHAR(32),
  CALC_ID VARCHAR(32),
  PHONE_MOBILE VARCHAR(100),
  PHONE_HOME VARCHAR(100),
  DESCRIPTION VARCHAR(250),
  PASSPORT VARCHAR(250),
  PLACE_BIRTH VARCHAR(250),
  DATE_BIRTH DATE,
  ADDRESS_RESIDENCE VARCHAR(250),
  ADDRESS_ACTUAL VARCHAR(250),
  USER_NAME VARCHAR(100),
  LOCKED INTEGER,
  SURNAME VARCHAR(100),
  NAME VARCHAR(100),
  PATRONYMIC VARCHAR(100))
AS
  DECLARE ROLE_ID VARCHAR(32);
BEGIN

  INSERT INTO /*PREFIX*/ACCOUNTS(ACCOUNT_ID,DATE_CREATE,USER_NAME,LOCKED,SURNAME,NAME,PATRONYMIC,IS_ROLE,PHONE)
       VALUES (:DISPATCHER_ID,CURRENT_TIMESTAMP,:USER_NAME,:LOCKED,:SURNAME,:NAME,:PATRONYMIC,0,:PHONE_MOBILE);

  INSERT INTO /*PREFIX*/DISPATCHERS (DISPATCHER_ID,CALC_ID,PHONE_MOBILE,PHONE_HOME,
                                     DESCRIPTION,PASSPORT,PLACE_BIRTH,DATE_BIRTH,
                                     ADDRESS_RESIDENCE,ADDRESS_ACTUAL)
       VALUES (:DISPATCHER_ID,:CALC_ID,:PHONE_MOBILE,:PHONE_HOME,
               :DESCRIPTION,:PASSPORT,:PLACE_BIRTH,:DATE_BIRTH,
               :ADDRESS_RESIDENCE,:ADDRESS_ACTUAL);

  ROLE_ID='FF7F332564F795C8411BF28652B22BEA'; /* Диспетчеры */
  INSERT INTO /*PREFIX*/ACCOUNT_ROLES (ROLE_ID,ACCOUNT_ID)
       VALUES (:ROLE_ID,:DISPATCHER_ID);

END;

--

/* Создание процедуры удаления диспетчера */

CREATE OR ALTER PROCEDURE /*PREFIX*/D_DISPATCHER (
  OLD_DISPATCHER_ID VARCHAR(32))
AS
BEGIN
  DELETE FROM /*PREFIX*/DISPATCHERS 
        WHERE DISPATCHER_ID=:OLD_DISPATCHER_ID;

  DELETE FROM /*PREFIX*/ACCOUNT_ROLES
        WHERE ACCOUNT_ID=:OLD_DISPATCHER_ID;

  DELETE FROM /*PREFIX*/PROFILES
        WHERE ACCOUNT_ID=:OLD_DISPATCHER_ID;

  DELETE FROM /*PREFIX*/ACCOUNTS
        WHERE ACCOUNT_ID=:OLD_DISPATCHER_ID;
END;

--

/* Создание процедуры запроса состояния стоянок */

CREATE OR ALTER PROCEDURE /*PREFIX*/QUERY_PARK_STATES (
  CREATOR_ID VARCHAR(32),
  RECIPIENT_ID VARCHAR(32),
  CONTACT VARCHAR(100)
  )
AS
  DECLARE S VARCHAR(1000);
  DECLARE F VARCHAR(1000);
  DECLARE S1 VARCHAR(1000);
  DECLARE PARK_NAME VARCHAR(100);
  DECLARE CNT INTEGER;
BEGIN
  IF ((CREATOR_ID IS NOT NULL) AND (CONTACT IS NOT NULL)) THEN BEGIN

    S='';

    SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('A3D890F68FF0BDCC4B42C3135174ABEF') INTO :F;

    IF (F IS NOT NULL) THEN BEGIN

       FOR SELECT P.NAME,
                  (SELECT COUNT(*)
                     FROM /*PREFIX*/PARK_STATES PS
                    WHERE PS.DATE_OUT IS NULL
                      AND PS.PARK_ID=P.PARK_ID)
             FROM /*PREFIX*/PARKS P
            ORDER BY P.PRIORITY
             INTO :PARK_NAME, :CNT DO BEGIN

         S1=F;
         S1=/*PREFIX*/REPLACE_STRING(S1,'%PARK_NAME',PARK_NAME);
         S1=/*PREFIX*/REPLACE_STRING(S1,'%COUNT',CAST(CNT AS VARCHAR(10)));

         S=S||S1;

       END

       INSERT INTO /*PREFIX*/OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                           TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED)
                                   VALUES (/*PREFIX*/GET_UNIQUE_ID(),:CREATOR_ID,:RECIPIENT_ID,CURRENT_TIMESTAMP,
                                           :S,NULL,0,:CONTACT,NULL,1,NULL);
     END

  END

END;

--

/* Создание процедуры кода состояния стоянок */

CREATE OR ALTER PROCEDURE /*PREFIX*/CODE_PARK_STATES (
  ACCOUNT_ID VARCHAR(32),
  IN_MESSAGE_ID VARCHAR(32))
AS
DECLARE CONTACT VARCHAR(100);
DECLARE SENDER_ID VARCHAR(32);
DECLARE S VARCHAR(1000);
DECLARE S1 VARCHAR(1000);
DECLARE F VARCHAR(1000);
DECLARE PARK_NAME VARCHAR(100);
DECLARE SUM_CHARGE NUMERIC(15,2);
DECLARE SUM_RECEIPT NUMERIC(15,2);
DECLARE BALANCE NUMERIC(15,2);
DECLARE MIN_BALANCE NUMERIC(15,2);
DECLARE CNT INTEGER;
BEGIN
  SELECT CONTACT, SENDER_ID
    FROM /*PREFIX*/IN_MESSAGES
   WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID
    INTO :CONTACT, :SENDER_ID;

  IF ((CONTACT IS NOT NULL) AND (SENDER_ID IS NOT NULL)) THEN BEGIN

    SELECT COUNT(*)
      FROM /*PREFIX*/DRIVERS D
      JOIN  /*PREFIX*/ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
     WHERE D.DRIVER_ID=:SENDER_ID
       AND A.LOCKED<>1
      INTO :CNT;

    IF (CNT>0) THEN BEGIN

      SELECT (CASE WHEN SUM(SUM_CHARGE) IS NULL THEN 0.0 ELSE SUM(SUM_CHARGE) END)
        FROM /*PREFIX*/CHARGES
       WHERE ACCOUNT_ID=:SENDER_ID
        INTO :SUM_CHARGE;

      SELECT (CASE WHEN SUM(SUM_RECEIPT) IS NULL THEN 0.0 ELSE SUM(SUM_RECEIPT) END)
        FROM /*PREFIX*/RECEIPTS
       WHERE ACCOUNT_ID=:SENDER_ID
        INTO :SUM_RECEIPT;

      BALANCE=SUM_RECEIPT-SUM_CHARGE;

      SELECT MIN_BALANCE
        FROM /*PREFIX*/DRIVERS
       WHERE DRIVER_ID=:SENDER_ID
        INTO :MIN_BALANCE;

      IF ((MIN_BALANCE IS NULL) OR ((MIN_BALANCE IS NOT NULL) AND (BALANCE>MIN_BALANCE))) THEN BEGIN
 
        EXECUTE PROCEDURE /*PREFIX*/QUERY_PARK_STATES (ACCOUNT_ID,SENDER_ID,CONTACT);

      END

    END

  END
END;

--

/* Создание процедуры полного расчета */

CREATE OR ALTER PROCEDURE /*PREFIX*/PR_FULL_CALC (
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE COST_RATE NUMERIC(15,2);
DECLARE COST_FACT NUMERIC(15,2);
DECLARE PHONE VARCHAR(100);
DECLARE DRIVER_ID VARCHAR(32);
DECLARE RECIPIENT_ID VARCHAR(32);
DECLARE SUM_CHARGE NUMERIC(15,2);
DECLARE SUM_RECEIPT NUMERIC(15,2);
DECLARE BALANCE NUMERIC(15,2);
DECLARE MIN_BALANCE NUMERIC(15,2);
DECLARE CHARGE_TYPE_ID VARCHAR(32);
DECLARE S VARCHAR(1000);
BEGIN

  SELECT PHONE, DRIVER_ID, COST_RATE, COST_FACT
    FROM /*PREFIX*/ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :PHONE, :DRIVER_ID, :COST_RATE, :COST_FACT;

  IF (COST_FACT IS NULL) THEN
    COST_FACT=:COST_RATE;

  UPDATE /*PREFIX*/ORDERS
     SET FINISHED=1,
         DATE_END=CURRENT_TIMESTAMP,
         WHO_PROCESS_ID=:ACCOUNT_ID,
         COST_FACT=:COST_FACT
   WHERE ORDER_ID=:ORDER_ID;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    IF (PHONE IS NOT NULL) THEN BEGIN

      IF (/*PREFIX*/SUBSTR(PHONE,1,3)='+79')  THEN BEGIN

        RECIPIENT_ID=NULL;

        FOR SELECT ACCOUNT_ID
              FROM /*PREFIX*/ACCOUNTS
             WHERE PHONE=:PHONE
              INTO :RECIPIENT_ID DO BEGIN

          IF (RECIPIENT_ID IS NOT NULL) THEN
            BREAK;
        END

/*        S='*А Такси* Спасибо что воспользовались нашими услугами';*/

        SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('05B75340B170BF5141FC63F5CDF7FCD6') INTO :S;

        IF (S IS NOT NULL) THEN BEGIN

          INSERT INTO /*PREFIX*/OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                              TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED)
                                      VALUES (/*PREFIX*/GET_UNIQUE_ID(),:ACCOUNT_ID,:RECIPIENT_ID,CURRENT_TIMESTAMP,
                                              :S,NULL,0,:PHONE,NULL,2,NULL);
        END

/*        S='*А Такси* Наши телефоны: 277-77-87, 271-08-91, 271-08-97';*/

        SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('E9FFA9589ABD8C174474572B72017BCC') INTO :S;

        IF (S IS NOT NULL) THEN BEGIN

          INSERT INTO /*PREFIX*/OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                              TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED)
                                      VALUES (/*PREFIX*/GET_UNIQUE_ID(),:ACCOUNT_ID,:RECIPIENT_ID,CURRENT_TIMESTAMP,
                                              :S,NULL,0,:PHONE,NULL,2,NULL);
        END

      END

    END

    CHARGE_TYPE_ID='E1BC9789DA9DB2B041C0784EBE92BFC9'; /* Выполнение заказа */

    SELECT RET_SUM
      FROM /*PREFIX*/GET_DRIVER_SUM(:DRIVER_ID,:COST_FACT)
      INTO :SUM_CHARGE;

    INSERT INTO /*PREFIX*/CHARGES (CHARGE_ID,WHO_CREATE_ID,CHARGE_TYPE_ID,ACCOUNT_ID,
                                   SUM_CHARGE,DATE_CHARGE,DATE_CREATE,DESCRIPTION)
                           VALUES (/*PREFIX*/GET_UNIQUE_ID(),:ACCOUNT_ID,:CHARGE_TYPE_ID,:DRIVER_ID,
                                   :SUM_CHARGE,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,NULL);

    SELECT (CASE WHEN SUM(SUM_CHARGE) IS NULL THEN 0.0 ELSE SUM(SUM_CHARGE) END)
      FROM /*PREFIX*/CHARGES
     WHERE ACCOUNT_ID=:DRIVER_ID
      INTO :SUM_CHARGE;

    SELECT (CASE WHEN SUM(SUM_RECEIPT) IS NULL THEN 0.0 ELSE SUM(SUM_RECEIPT) END)
      FROM /*PREFIX*/RECEIPTS
     WHERE ACCOUNT_ID=:DRIVER_ID
      INTO :SUM_RECEIPT;

    BALANCE=SUM_RECEIPT-SUM_CHARGE;

    SELECT MIN_BALANCE
      FROM /*PREFIX*/DRIVERS
     WHERE DRIVER_ID=:DRIVER_ID
      INTO :MIN_BALANCE;

    IF ((MIN_BALANCE IS NULL) OR ((MIN_BALANCE IS NOT NULL) AND (BALANCE>MIN_BALANCE))) THEN BEGIN

/*      S='Заказ завершен. Баланс = '||CAST(BALANCE AS VARCHAR(30))||' р.';*/

      SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('16835607B30CA79F4CE883B53AFE972D') INTO :S;

    END ELSE BEGIN

      UPDATE /*PREFIX*/SHIFTS
         SET DATE_END=CURRENT_TIMESTAMP
       WHERE ACCOUNT_ID=:DRIVER_ID
         AND DATE_END IS NULL;

/*      S='Заказ завершен. Вы сняты со смены. Баланс = '||CAST(BALANCE AS VARCHAR(30))||' р.'; */

      SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('634880F305E9AA434245E3E596697001') INTO :S;

    END

    SELECT PHONE_MOBILE
      FROM /*PREFIX*/DRIVERS
     WHERE DRIVER_ID=:DRIVER_ID
      INTO :PHONE;

    IF (S IS NOT NULL) THEN BEGIN

      S=/*PREFIX*/REPLACE_STRING(S,'%BALANCE',CAST(BALANCE AS VARCHAR(30)));

      INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                          TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED)
                                  VALUES (/*PREFIX*/GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                          :S,NULL,0,:PHONE,NULL,2,NULL);
    END

    EXECUTE PROCEDURE /*PREFIX*/QUERY_PARK_STATES (ACCOUNT_ID,DRIVER_ID,PHONE);

  END
END;

--

/* Создание процедуры прибытия водителя */

CREATE OR ALTER PROCEDURE /*PREFIX*/PR_ARRIVAL_DRIVER (
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE PHONE VARCHAR(100);
DECLARE DRIVER_ID VARCHAR(32);
DECLARE COST_RATE NUMERIC(15,2);
DECLARE COLOR VARCHAR(100);
DECLARE BRAND VARCHAR(100);
DECLARE STATE_NUM VARCHAR(50);
DECLARE PREFIX VARCHAR(10);
DECLARE STREET VARCHAR(100);
DECLARE HOUSE VARCHAR(10);
DECLARE FLAT VARCHAR(10);
DECLARE PORCH VARCHAR(10);
DECLARE LOCALITY VARCHAR(100);
DECLARE RECIPIENT_ID VARCHAR(32);
DECLARE S VARCHAR(1000);
DECLARE ADDRESS VARCHAR(1000);
DECLARE CNT INTEGER;
BEGIN

  SELECT O.PHONE, O.DRIVER_ID, O.COST_RATE,
         C.COLOR, C.BRAND, C.STATE_NUM
    FROM /*PREFIX*/ORDERS O
    LEFT JOIN /*PREFIX*/DRIVERS D ON D.DRIVER_ID=O.DRIVER_ID
    LEFT JOIN /*PREFIX*/CARS C ON C.CAR_ID=D.CAR_ID
   WHERE ORDER_ID=:ORDER_ID
    INTO :PHONE, :DRIVER_ID, :COST_RATE,
         :COLOR, :BRAND, :STATE_NUM;

  UPDATE /*PREFIX*/ORDERS
     SET DATE_BEGIN=CURRENT_TIMESTAMP
   WHERE ORDER_ID=:ORDER_ID;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    IF (PHONE IS NOT NULL) THEN BEGIN

      IF (/*PREFIX*/SUBSTR(PHONE,1,3)='+79')  THEN BEGIN

        RECIPIENT_ID=NULL;

        FOR SELECT ACCOUNT_ID
              FROM /*PREFIX*/ACCOUNTS
             WHERE PHONE=:PHONE
              INTO :RECIPIENT_ID DO BEGIN

          IF (RECIPIENT_ID IS NOT NULL) THEN
            BREAK;
        END

/*        S='Выходите, такси '||COLOR||', '||BRAND||', '||STATE_NUM||'.';*/

        IF (COST_RATE>0.0) THEN BEGIN

/*          S=S||' Стоимость = '||CAST(CAST(COST_RATE AS NUMERIC(15,0)) AS VARCHAR(30))||' р.';*/

          SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('8D9E6C9F4852AD8142205F027B2A5288') INTO :S;

        END ELSE BEGIN

/*          S=S||' Стоимость не определена';*/

          SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('93EBB0171E37A0884313759C0DA1EB3D') INTO :S;

        END

        IF (S IS NOT NULL) THEN BEGIN

          S=/*PREFIX*/REPLACE_STRING(S,'%COLOR',COLOR);
          S=/*PREFIX*/REPLACE_STRING(S,'%BRAND',BRAND);
          S=/*PREFIX*/REPLACE_STRING(S,'%STATE_NUM',STATE_NUM);
          S=/*PREFIX*/REPLACE_STRING(S,'%COST_RATE',CAST(CAST(COST_RATE AS NUMERIC(15,0)) AS VARCHAR(30)));

          INSERT INTO /*PREFIX*/OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                              TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED)
                                      VALUES (/*PREFIX*/GET_UNIQUE_ID(),:ACCOUNT_ID,:RECIPIENT_ID,CURRENT_TIMESTAMP,
                                              :S,NULL,0,:PHONE,NULL,0,NULL);

        END

        SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('F4384929079999BB47A895BFCA5BB382') INTO :S;

        IF (S IS NOT NULL) THEN BEGIN

          INSERT INTO /*PREFIX*/OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                              TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED)
                                      VALUES (/*PREFIX*/GET_UNIQUE_ID(),:ACCOUNT_ID,:RECIPIENT_ID,CURRENT_TIMESTAMP,
                                              :S,NULL,0,:PHONE,NULL,0,NULL);

        END

      END

    END

    SELECT PHONE_MOBILE
      FROM /*PREFIX*/DRIVERS
     WHERE DRIVER_ID=:DRIVER_ID
      INTO :PHONE;

    SELECT COUNT(*)
      FROM /*PREFIX*/ROUTES
     WHERE ORDER_ID=:ORDER_ID
      INTO CNT;

    ADDRESS='';

    IF (CNT>0) THEN BEGIN

      FOR SELECT S.PREFIX, S.NAME, R.HOUSE, R.FLAT, R.PORCH, L.NAME
            FROM /*PREFIX*/ROUTES R
            LEFT JOIN /*PREFIX*/STREETS S ON S.STREET_ID=R.STREET_ID
            LEFT JOIN /*PREFIX*/LOCALITIES L ON L.LOCALITY_ID=S.LOCALITY_ID
           WHERE R.ORDER_ID=:ORDER_ID
           ORDER BY R.PRIORITY DESC
            INTO :PREFIX, :STREET, :HOUSE, :FLAT, :PORCH, :LOCALITY DO BEGIN
        BREAK;
      END

      IF ((STREET IS NOT NULL) AND (HOUSE IS NOT NULL)) THEN BEGIN

        IF (PREFIX IS NOT NULL) THEN
          ADDRESS=PREFIX||' ';

        IF (STREET IS NOT NULL) THEN
          ADDRESS=ADDRESS||STREET;

        IF (HOUSE IS NOT NULL) THEN
          ADDRESS=ADDRESS||' '||HOUSE;

        IF (FLAT IS NOT NULL) THEN
          ADDRESS=ADDRESS||'-'||FLAT;

        IF (PORCH IS NOT NULL) THEN
          ADDRESS=ADDRESS||' п.'||PORCH;

        IF (LOCALITY IS NOT NULL) THEN
          ADDRESS=ADDRESS||', '||LOCALITY;

      END ELSE BEGIN

        SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('7ED5E8A8BBD9870A411517B54D9EB973') INTO :ADDRESS;

      END

    END ELSE BEGIN

/*      ADDRESS='Уточните маршрут.';*/

      SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('7ED5E8A8BBD9870A411517B54D9EB973') INTO :ADDRESS;
    END

    IF (COST_RATE>0.0) THEN BEGIN

/*      S=ADDRESS||' Стоимость = '||CAST(CAST(COST_RATE AS NUMERIC(15,0)) AS VARCHAR(30))||' р.';*/

      SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('9C8BC7D14DAEAE5C4DC8C1C91B20BCC2') INTO :S;

    END ELSE BEGIN

/*      S=ADDRESS||' Стоимость не определена';*/

      SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('92009DB6C3EAA9E74B80D333538FE40D') INTO :S;

    END

    IF (S IS NOT NULL) THEN BEGIN

      S=/*PREFIX*/REPLACE_STRING(S,'%ADDRESS',ADDRESS);
      S=/*PREFIX*/REPLACE_STRING(S,'%COST_RATE',CAST(CAST(COST_RATE AS NUMERIC(15,0)) AS VARCHAR(30)));

      RECIPIENT_ID=DRIVER_ID;

      INSERT INTO /*PREFIX*/OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                          TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED)
                                  VALUES (/*PREFIX*/GET_UNIQUE_ID(),:ACCOUNT_ID,:RECIPIENT_ID,CURRENT_TIMESTAMP,
                                          :S,NULL,0,:PHONE,NULL,2,NULL);
    END

  END

END;

--

/* Создание процедуры изменения заказа */

CREATE OR ALTER PROCEDURE /*PREFIX*/U_ORDER (
  ORDER_ID VARCHAR(32),
  ACTION_ID VARCHAR(32),
  RATE_ID VARCHAR(32),
  CAR_TYPE_ID VARCHAR(32),
  WHO_ACCEPT_ID VARCHAR(32),
  STREET_ID VARCHAR(32),
  ZONE_ID VARCHAR(32),
  PARENT_ID VARCHAR(32),
  FIRM_ID VARCHAR(32),
  CAR_ID VARCHAR(32),
  WHO_PROCESS_ID VARCHAR(32),
  RESULT_ID VARCHAR(32),
  PARK_ID VARCHAR(32),
  SOURCE_ID VARCHAR(32),
  DISCOUNT_ID VARCHAR(32),
  DRIVER_ID VARCHAR(32),
  ORDER_NUM VARCHAR(10),
  PHONE VARCHAR(100),
  HOUSE VARCHAR(10),
  FLAT VARCHAR(10),
  PORCH VARCHAR(10),
  DATE_ACCEPT TIMESTAMP,
  DATE_ARRIVAL TIMESTAMP,
  DATE_BEGIN TIMESTAMP,
  DATE_END TIMESTAMP,
  CUSTOMER VARCHAR(250),
  DESCRIPTION VARCHAR(250),
  COST_RATE NUMERIC(15,2),
  COST_FACT NUMERIC(15,2),
  TYPE_ACCEPT INTEGER,
  TYPE_PROCESS INTEGER,
  DATE_HISTORY TIMESTAMP,
  WHO_HISTORY_ID VARCHAR(32),
  BEFORE_PERIOD INTEGER,
  FINISHED INTEGER,
  OLD_ORDER_ID VARCHAR(32))
AS
  DECLARE RECIPIENT_ID VARCHAR(32);
  DECLARE OLD_COST_RATE NUMERIC(15,2);
  DECLARE S VARCHAR(70);
BEGIN
  UPDATE /*PREFIX*/ORDERS
     SET ORDER_ID=:ORDER_ID,
         ACTION_ID=:ACTION_ID,
         RATE_ID=:RATE_ID,
         CAR_TYPE_ID=:CAR_TYPE_ID,
         WHO_ACCEPT_ID=:WHO_ACCEPT_ID,
         STREET_ID=:STREET_ID,
         ZONE_ID=:ZONE_ID,
         PARENT_ID=:PARENT_ID,
         FIRM_ID=:FIRM_ID,
         CAR_ID=:CAR_ID,
         WHO_PROCESS_ID=:WHO_PROCESS_ID,
         RESULT_ID=:RESULT_ID,
         PARK_ID=:PARK_ID,
         SOURCE_ID=:SOURCE_ID,
         DISCOUNT_ID=:DISCOUNT_ID,
         DRIVER_ID=:DRIVER_ID,
         ORDER_NUM=:ORDER_NUM,
         PHONE=:PHONE,
         HOUSE=:HOUSE,
         FLAT=:FLAT,
         PORCH=:PORCH,
         DATE_ACCEPT=:DATE_ACCEPT,
         DATE_ARRIVAL=:DATE_ARRIVAL,
         DATE_BEGIN=:DATE_BEGIN,
         DATE_END=:DATE_END,
         CUSTOMER=:CUSTOMER,
         DESCRIPTION=:DESCRIPTION,
         COST_RATE=:COST_RATE,
         COST_FACT=:COST_FACT,
         TYPE_ACCEPT=:TYPE_ACCEPT,
         TYPE_PROCESS=:TYPE_PROCESS,
         DATE_HISTORY=:DATE_HISTORY,
         WHO_HISTORY_ID=:WHO_HISTORY_ID,
         BEFORE_PERIOD=:BEFORE_PERIOD,
         FINISHED=:FINISHED
   WHERE ORDER_ID=:OLD_ORDER_ID;

  OLD_COST_RATE=NULL;

  FOR SELECT COST_RATE
        FROM /*PREFIX*/ORDERS
       WHERE PARENT_ID=:OLD_ORDER_ID
         AND DATE_HISTORY IS NOT NULL
       ORDER BY DATE_HISTORY DESC
        INTO :OLD_COST_RATE DO BEGIN

    IF (OLD_COST_RATE IS NOT NULL) THEN
      BREAK;

  END

  IF ((COST_RATE IS NOT NULL) AND (OLD_COST_RATE<>COST_RATE) AND (WHO_PROCESS_ID IS NOT NULL)) THEN BEGIN

    IF (/*PREFIX*/SUBSTR(PHONE,1,3)='+79')  THEN BEGIN

      RECIPIENT_ID=NULL;

      FOR SELECT ACCOUNT_ID
            FROM /*PREFIX*/ACCOUNTS
           WHERE PHONE=:PHONE
            INTO :RECIPIENT_ID DO BEGIN

        IF (RECIPIENT_ID IS NOT NULL) THEN
          BREAK;
      END

      SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('6F6E5F38806C896B43AC16E69914EFFA') INTO :S;

      IF (S IS NOT NULL) THEN BEGIN

        S=/*PREFIX*/REPLACE_STRING(S,'%COST_RATE',CAST(COST_RATE AS VARCHAR(30)));

        INSERT INTO /*PREFIX*/OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                            TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED)
                                    VALUES (/*PREFIX*/GET_UNIQUE_ID(),:WHO_PROCESS_ID,:RECIPIENT_ID,CURRENT_TIMESTAMP,
                                            :S,NULL,0,:PHONE,NULL,1,NULL);
      END

    END

  END

END;

--

/* Создание процедуры окончания заказа */

CREATE OR ALTER PROCEDURE /*PREFIX*/PR_FINISH (
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
BEGIN

  UPDATE /*PREFIX*/ORDERS
     SET DATE_END=CURRENT_TIMESTAMP,
         WHO_PROCESS_ID=:ACCOUNT_ID,
         FINISHED=1
   WHERE ORDER_ID=:ORDER_ID;

END;

--

/* Создание процедуры отказа клиента на этапе выехал */

CREATE OR ALTER PROCEDURE /*PREFIX*/PR_REFUSE_CLIENT_DRIVE_OUT (
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE DRIVER_ID VARCHAR(32);
DECLARE PARK_ID VARCHAR(32);
DECLARE PARK_NAME VARCHAR(100);
DECLARE PHONE VARCHAR(100);
DECLARE PARK_STATE_ID VARCHAR(32);
DECLARE DATE_IN TIMESTAMP;
DECLARE S VARCHAR(1000);
BEGIN

  SELECT DRIVER_ID, PARK_ID
    FROM /*PREFIX*/ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID, :PARK_ID;

  UPDATE /*PREFIX*/ORDERS
     SET DATE_END=CURRENT_TIMESTAMP,
         WHO_PROCESS_ID=:ACCOUNT_ID,
         FINISHED=1
   WHERE ORDER_ID=:ORDER_ID;


  IF ((DRIVER_ID IS NOT NULL) AND (PARK_ID IS NOT NULL)) THEN BEGIN

    FOR SELECT PS.PARK_STATE_ID, P.NAME, PS.DATE_IN
          FROM /*PREFIX*/PARK_STATES PS
          JOIN /*PREFIX*/PARKS P ON P.PARK_ID=PS.PARK_ID
         WHERE PS.PARK_ID=:PARK_ID
           AND PS.DATE_OUT IS NULL
         ORDER BY PS.DATE_IN
          INTO :PARK_STATE_ID, :PARK_NAME, :DATE_IN DO BEGIN

      DATE_IN=DATE_IN-2*(1e0/24/60/60);

      INSERT INTO /*PREFIX*/PARK_STATES (PARK_STATE_ID,DRIVER_ID,PARK_ID,DATE_IN,DATE_OUT)
                                 VALUES (/*PREFIX*/GET_UNIQUE_ID(),:DRIVER_ID,:PARK_ID,:DATE_IN,NULL);

      BREAK;
    END

    IF (PARK_NAME IS NULL) THEN BEGIN

      INSERT INTO /*PREFIX*/PARK_STATES (PARK_STATE_ID,DRIVER_ID,PARK_ID,DATE_IN,DATE_OUT)
                                 VALUES (/*PREFIX*/GET_UNIQUE_ID(),:DRIVER_ID,:PARK_ID,CURRENT_TIMESTAMP,NULL);

      SELECT NAME
        FROM /*PREFIX*/PARKS
       WHERE PARK_ID=:PARK_ID
        INTO :PARK_NAME;

    END

    SELECT PHONE_MOBILE
      FROM /*PREFIX*/DRIVERS
     WHERE DRIVER_ID=:DRIVER_ID
      INTO :PHONE;

/*    S='Отказ по заказу. Вы поставлены 1 на стоянку '||PARK_NAME;*/

    SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('7604B1762FDB97EC406174FB54FA13EA') INTO :S;

    IF (S IS NOT NULL) THEN BEGIN

      S=/*PREFIX*/REPLACE_STRING(S,'%PARK_NAME',PARK_NAME);

      INSERT INTO /*PREFIX*/OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                          TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED)
                                  VALUES (/*PREFIX*/GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                          :S,NULL,0,:PHONE,NULL,0,NULL);
    END

  END

END;

--

/* Создание процедуры отказа клиента на этапе прибыл */

CREATE OR ALTER PROCEDURE /*PREFIX*/PR_REFUSE_CLIENT_COME_OUT (
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE DRIVER_ID VARCHAR(32);
DECLARE PARK_ID VARCHAR(32);
DECLARE PARK_NAME VARCHAR(100);
DECLARE PHONE VARCHAR(100);
DECLARE PARK_STATE_ID VARCHAR(32);
DECLARE DATE_IN TIMESTAMP;
DECLARE S VARCHAR(1000);
BEGIN

  SELECT DRIVER_ID, PARK_ID
    FROM /*PREFIX*/ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID, :PARK_ID;

  UPDATE /*PREFIX*/ORDERS
     SET DATE_END=CURRENT_TIMESTAMP,
         WHO_PROCESS_ID=:ACCOUNT_ID,
         FINISHED=1
   WHERE ORDER_ID=:ORDER_ID;

  IF ((DRIVER_ID IS NOT NULL) AND (PARK_ID IS NOT NULL)) THEN BEGIN

    FOR SELECT PS.PARK_STATE_ID, P.NAME, PS.DATE_IN
          FROM /*PREFIX*/PARK_STATES PS
          JOIN /*PREFIX*/PARKS P ON P.PARK_ID=PS.PARK_ID
         WHERE PS.PARK_ID=:PARK_ID
           AND PS.DATE_OUT IS NULL
         ORDER BY PS.DATE_IN
          INTO :PARK_STATE_ID, :PARK_NAME, :DATE_IN DO BEGIN

      DATE_IN=DATE_IN-2*(1e0/24/60/60);

      INSERT INTO /*PREFIX*/PARK_STATES (PARK_STATE_ID,DRIVER_ID,PARK_ID,DATE_IN,DATE_OUT)
                                 VALUES (/*PREFIX*/GET_UNIQUE_ID(),:DRIVER_ID,:PARK_ID,:DATE_IN,NULL);

      BREAK;
    END

    IF (PARK_NAME IS NULL) THEN BEGIN

      INSERT INTO /*PREFIX*/PARK_STATES (PARK_STATE_ID,DRIVER_ID,PARK_ID,DATE_IN,DATE_OUT)
                                 VALUES (/*PREFIX*/GET_UNIQUE_ID(),:DRIVER_ID,:PARK_ID,CURRENT_TIMESTAMP,NULL);

      SELECT NAME
        FROM /*PREFIX*/PARKS
       WHERE PARK_ID=:PARK_ID
        INTO :PARK_NAME;

    END

    SELECT PHONE_MOBILE
      FROM /*PREFIX*/DRIVERS
     WHERE DRIVER_ID=:DRIVER_ID
      INTO :PHONE;

    SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('13D70B96F52BBE8D4E115CCC194F3B10') INTO :S;

    IF (S IS NOT NULL) THEN BEGIN

      S=/*PREFIX*/REPLACE_STRING(S,'%PARK_NAME',PARK_NAME);

      INSERT INTO /*PREFIX*/OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                          TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED)
                                  VALUES (/*PREFIX*/GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                          :S,NULL,0,:PHONE,NULL,2,NULL);
    END

  END

END;

--

/* Создание процедуры отказа клиента на этапе подтверждения */

CREATE OR ALTER PROCEDURE /*PREFIX*/PR_REFUSE_CLIENT_CONFIRM (
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE DRIVER_ID VARCHAR(32);
DECLARE PHONE VARCHAR(100);
DECLARE S VARCHAR(1000);
BEGIN

  SELECT DRIVER_ID
    FROM /*PREFIX*/ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :DRIVER_ID;

  UPDATE /*PREFIX*/ORDERS
     SET DATE_END=CURRENT_TIMESTAMP,
         WHO_PROCESS_ID=:ACCOUNT_ID,
         FINISHED=1
   WHERE ORDER_ID=:ORDER_ID;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    SELECT PHONE_MOBILE
      FROM /*PREFIX*/DRIVERS
     WHERE DRIVER_ID=:DRIVER_ID
      INTO :PHONE;

    SELECT CONST_VALUE FROM /*PREFIX*/GET_CONST_VALUE('C40297F408B0AF3A45776489F11FC512') INTO :S;

    IF (S IS NOT NULL) THEN BEGIN

      INSERT INTO /*PREFIX*/OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                          TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED)
                                  VALUES (/*PREFIX*/GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                          :S,NULL,0,:PHONE,NULL,0,NULL);
    END

  END

END;

--

/* Удаление всех констант */

DELETE FROM /*PREFIX*/CONSTS;

--


/* Фиксация изменений */

COMMIT