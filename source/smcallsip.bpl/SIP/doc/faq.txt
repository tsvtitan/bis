1. The project won't compile!

2. The project's broken! It raises exceptions all over the place!

3. Where do I begin?

4. How do I create a new header type?

5. When my test runs I expect a message to be sent. It's not. Why?

6. The tests take too long to run. I only want to test this little
   test unit. What do I do?

7. My test blows up with an access violation in IdSipCore.pas
   immediately after the TIdSipAction sends a message.

8. But how do I make a call?






1. Check that you've installed DUnit (http://dunit.sourceforge.net/),
   and, if you're running Indy 9, that you've installed the patch in
   the indy-patches directory to Indy 9. If you're getting "Undeclared
   identifier: 'TNAPTRRecord'" in IdSipIndyLocator, make sure you
   replace Indy's IdDNSResolver.pas with the version in the
   indy-patches\Indy9 folder (or just merge the differences).

2. If you're running the test suite or demo in the IDE, then you'll
   find exceptions (like EParserError, EBadHeader) being raised. This
   is normal. If you look further in the call stack you'll see those
   exceptions being caught. If they bug you, just turn off the "Stop
   on Delphi Exceptions" when running the tests.

3. Read the class comment on TIdSipStackConfigurator. Decide on what
   configuration you want, put that configuration in a TStrings, and
   invoke TIdSipStackInterface.Create with that TStrings. The UiHandle
   contains the HWND of the window to which the TIdSipStackInterface
   will post messages. These messages will be things like "you've
   received an inbound INVITE" and the like. Look for CM_SUCCESS to
   find the list of possible messages.

4. TIdSipHeader is the base class for all header types. Follow these
   steps to define a new header type:
   * find a suitable subclass (e.g., if the header primarily consists
     of an address, subclass TIdSipAddressHeader);
   * override GetName;
   * override GetValue, if necessary;
   * override Parse, if necessary;
   * add the header type to TIdSipHeaderList.HeaderTypes;
   * add the header name (possibly both full and short forms) to
     TIdSipHeaderList.CanonicaliseName.

5. Your first bet would be to make sure that the Locator can resolve
   the hostname in the requests's Request-URI or response's top-most
   Via header. See if the stack signals OnNetworkFailure. If it does,
   add a new A or AAAA record to the locator by means of AddA/AddAAAA
   as part of the test setup. If your test involves a TimerQueue (say,
   it's a test for TIdSipStackInterface), then you need to trigger
   those TIdWaits manually, via
   TIdDebugTimerQueue.TriggerAllEventsOfType.

6. Comment out the unwanted test units. Unfortunately, up to at least
   version 0.5.2, TestIdSipStackInterface depends on the StackWindow
   unit. If you comment out TestIdSipStackInterface be sure to comment
   out StackWindow. Conversely, if you want to test
   TestIdSipStackInterface, be sure to uncomment the StackWindow line
   in SIP.dpr's uses clause.

7. Solution: send the message to a real address by specifying an
   A/AAAA record in the MockLocator that doesn't match the address of
   the stack under test.

   Why? Your request is being hairpinned (it's being sent to the stack
   that sent the request). Under production conditions that's not a
   problem. In a test environment that means that your Action is being
   terminated before it's finished sending the request. Example: You
   send an OPTIONS from your stack S. Then S receives your OPTIONS,
   sends a 200 OK, which S receives. That response terminates the
   OPTIONS... and yet you've not finished sending the request! This
   violates one of the core assumptions of the stack architecture,
   which is that receiving or sending a message is a single,
   uninterruptable event. This seems terrible. It's OK: this can only
   occur in a test environment, and only when you hairpin requests.

8. Let's suppose you've instantiated a stack (let's call it
   Stack). Making a call to someone is as simple as this:

     CallHandle := Stack.MakeCall(<destination>, <offer>, <description type>);
     Stack.Send(CallHandle);

   Typically, <descriptiontype> will be SdpMimeType, in
   IdSdp.pas. Don't forget, though, that SIP doesn't know anything
   about media. If you want to place, say, a real-time text call to
   someone, instantiate your TIdSdpMultimediaSession, set it up how
   you want, start it listening, and then pass in its
   LocalSessionDescription to MakeCall. Then, wait for your
   CM_CALL_ESTABLISHED notification.