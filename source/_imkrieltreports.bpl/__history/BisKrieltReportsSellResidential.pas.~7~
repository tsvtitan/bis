unit BisKrieltReportsSellResidential;

interface

uses Controls, BisProvider, BisKrieltReportsUtils, BisFilterGroups, SysUtils,
  BisKrieltReportsFm;

procedure ExportSellApartmentsKrs(BisKrieltReportsForm: TBisKrieltReportsForm; DateBegin, DateEnd: TDate);
procedure ExportSellApartmentsOthers(BisKrieltReportsForm: TBisKrieltReportsForm; DateBegin, DateEnd: TDate);
procedure ExportSellHousesCottagesKrs(BisKrieltReportsForm: TBisKrieltReportsForm; DateBegin, DateEnd: TDate);
procedure ExportSellHousesCottagesOthers(BisKrieltReportsForm: TBisKrieltReportsForm; DateBegin, DateEnd: TDate);
procedure ExportSellTownHousesKrs(BisKrieltReportsForm: TBisKrieltReportsForm; DateBegin, DateEnd: TDate);
procedure ExportSellOutsideHouses(BisKrieltReportsForm: TBisKrieltReportsForm; DateBegin, DateEnd: TDate);
procedure ExportSellDatchas(BisKrieltReportsForm: TBisKrieltReportsForm; DateBegin, DateEnd: TDate);

implementation

procedure ExportSellApartmentsKrs(BisKrieltReportsForm: TBisKrieltReportsForm; DateBegin, DateEnd: TDate);
var Provider: TBisProvider;
  LastRow, Code, RoomInt: Integer;
  Excel, Sheet: Variant;
  Region, Room, XLSNew, SDateBegin, SDateEnd: String;
begin

  SDateBegin:=ConvertDateTime(DateBegin,'Begin');
  SDateEnd:=ConvertDateTime(DateEnd,'End');

  Provider:=TBisProvider.Create(nil);
  Provider.ProviderName:='_SELL_APARTMENTS_KRS_EXPORT';      

  with Provider, FieldNames do begin
    AddInvisible('OBJECT_ID');          
    AddInvisible('VIEW_ID');            
    AddInvisible('TYPE_ID');            
    AddInvisible('OPERATION_ID');       
    AddInvisible('DATE_BEGIN');         
    AddInvisible('ACCOUNT_ID');         
    AddInvisible('USER_NAME');          
    AddInvisible('PHONE');              
    AddInvisible('Комн');               
    AddInvisible('Район');              
    AddInvisible('Улица');              
    AddInvisible('Ориентир');           
    AddInvisible('План.');              
    AddInvisible('Этаж');               
    AddInvisible('Тип');                
    AddInvisible('Тел');                
    AddInvisible('Пл, м2');             
    AddInvisible('Санузел');            
    AddInvisible('Балкон');             
    AddInvisible('Бытовая техника');    
    AddInvisible('Цена');               
    AddInvisible('Населенный пункт');   
  end;

  with Provider, FilterGroups do begin
    Add(foAnd);
    Items[0].Filters.Add('DATE_BEGIN',fcEqualGreater,SDateBegin);
    Items[0].Filters.Add('DATE_BEGIN',fcEqualLess,SDateEnd);
    Items[0].Filters.Add('Населенный пункт',fcEqual,'Красноярск г.');   
  end;

  with Provider, Orders do begin
    Add('Комн');               
    Add('Район');              
    Add('DATE_BEGIN');         
  end;

  Provider.Open;
  Provider.First;
  BisKrieltReportsForm.Height:=463;
  SetProgressBarToNull(BisKrieltReportsForm, Provider);

  XLSNew:=CopyExcelDocToNew('sell_apartments_krs.xls','Продам_квартиры_в_г.Красноярск');
  Excel:=OpenExcelDoc(XLSNew);
  Sheet:=Excel.ActiveSheet;

  Sheet.Range['A1']:='продам, готовое жилье';
  Room:=Provider.FieldByName('Комн').AsString;
  Val(Room,RoomInt,Code);

  if Length(Room)=0 then begin
    Sheet.Range['I1']:='';
    Sheet.Range['A4']:='';
  end;
  if (Code=0) Or (Room='1,5') then begin
    Sheet.Range['I1']:='квартиры '+Room+'-комнатные';
    Sheet.Range['A4']:=Room+'-комнатные';
  end;
  if Room='г' then begin
    Sheet.Range['I1']:='гостинки';
    Sheet.Range['A4']:='гостинки';
  end;
  if Room='комната' then begin
    Sheet.Range['I1']:='комнаты';
    Sheet.Range['A4']:='комнаты';
  end;
  if Room='с' then begin
    Sheet.Range['I1']:='секционки';
    Sheet.Range['A4']:='секционки';
  end;

  Region:=Provider.FieldByName('Район').AsString;
  Sheet.Range['A5']:=Region;
  LastRow:=9;

  Repeat
    Sheet.Range['A'+IntToStr(LastRow-3)]:=Provider.FieldByName('Улица').AsString;
    Sheet.Range['B'+IntToStr(LastRow-3)]:=Provider.FieldByName('Ориентир').AsString;
    Sheet.Range['C'+IntToStr(LastRow-3)]:=Provider.FieldByName('План.').AsString;
    Sheet.Range['D'+IntToStr(LastRow-3)]:=Provider.FieldByName('Этаж').AsString;
    Sheet.Range['E'+IntToStr(LastRow-3)]:=Provider.FieldByName('Тип').AsString;
    Sheet.Range['F'+IntToStr(LastRow-3)]:=Provider.FieldByName('Тел').AsString;
    Sheet.Range['G'+IntToStr(LastRow-3)]:=Provider.FieldByName('Пл, м2').AsString;
    Sheet.Range['H'+IntToStr(LastRow-3)]:=Provider.FieldByName('Санузел').AsString;
    Sheet.Range['I'+IntToStr(LastRow-3)]:=Provider.FieldByName('Балкон').AsString;
    Sheet.Range['J'+IntToStr(LastRow-3)]:=Provider.FieldByName('Бытовая техника').AsString;
    Sheet.Range['K'+IntToStr(LastRow-3)]:=Provider.FieldByName('Цена').AsString;
    Sheet.Range['L'+IntToStr(LastRow-3)]:=Provider.FieldByName('PHONE').AsString;

    ExtendPosProgressBar(BisKrieltReportsForm);
    Provider.Next;
    if Provider.Eof=True then Break;
    if (Provider.FieldByName('Комн').AsString<>Room) then Begin
      Room:=Provider.FieldByName('Комн').AsString;
      Region:=Provider.FieldByName('Район').AsString;

      InsertExcelRows(Sheet,LastRow-1,LastRow-1,'L',LastRow+3);
      InsertExcelRows(Sheet,LastRow-2,LastRow-2,'L',LastRow+2);
      InsertExcelRows(Sheet,LastRow+3,LastRow+3,'L',LastRow-2);
      InsertExcelRows(Sheet,1,1,'L',LastRow-1);
      InsertExcelRows(Sheet,4,4,'L',LastRow);
      InsertExcelRows(Sheet,5,5,'L',LastRow+1);

      Sheet.Range['A'+IntToStr(LastRow-1)]:='продам, готовое жилье';
      Val(Room,RoomInt,Code);
      if Length(Room)=0 then begin
        Sheet.Range['I'+IntToStr(LastRow-1)]:='';
        Sheet.Range['A'+IntToStr(LastRow)]:='';
      end;
      if (Code=0) Or (Room='1,5') then begin
        Sheet.Range['I'+IntToStr(LastRow-1)]:='квартиры '+Room+'-комнатные';
        Sheet.Range['A'+IntToStr(LastRow)]:=Room+'-комнатные';
      end;
      if Room='г' then begin
        Sheet.Range['I'+IntToStr(LastRow-1)]:='гостинки';
        Sheet.Range['A'+IntToStr(LastRow)]:='гостинки';
      end;
      if Room='комната' then begin
        Sheet.Range['I'+IntToStr(LastRow-1)]:='комнаты';
        Sheet.Range['A'+IntToStr(LastRow)]:='комнаты';
      end;
      if Room='с' then begin
        Sheet.Range['I'+IntToStr(LastRow-1)]:='секционки';
        Sheet.Range['A'+IntToStr(LastRow)]:='секционки';
      end;

      Sheet.Range['A'+IntToStr(LastRow+1)]:=Region;
      LastRow:=LastRow+4;
    End;
    if (Provider.FieldByName('Район').AsString<>Region) then Begin
      Region:=Provider.FieldByName('Район').AsString;
      InsertExcelRows(Sheet,LastRow-1,LastRow-1,'L',LastRow);
      InsertExcelRows(Sheet,LastRow-2,LastRow-2,'L',LastRow-1);
      InsertExcelRows(Sheet,5,5,'L',LastRow-2);
      Sheet.Range['A'+IntToStr(LastRow-2)]:=Region;
      LastRow:=LastRow+1;
    End;
    InsertExcelRows(Sheet,LastRow-1,LastRow-1,'L',LastRow);
    InsertExcelRows(Sheet,LastRow-2,LastRow-2,'L',LastRow-1);
    InsertExcelRows(Sheet,6,6,'L',LastRow-2);
    Sheet.Rows[LastRow-2]:='';
    LastRow:=LastRow+1;
  Until False;

  Sheet.Rows[LastRow-1].Clear;

  Excel.Visible:=True;
  Provider.Close;

  Provider.Free;

end;

procedure ExportSellApartmentsOthers(BisKrieltReportsForm: TBisKrieltReportsForm; DateBegin, DateEnd: TDate);
var Provider: TBisProvider;
  LastRow, Code, RoomInt: Integer;
  Excel, Sheet: Variant;
  Room, XLSNew, SDateBegin, SDateEnd: String;
begin

  SDateBegin:=ConvertDateTime(DateBegin,'Begin');
  SDateEnd:=ConvertDateTime(DateEnd,'End');

  Provider:=TBisProvider.Create(nil);
  Provider.ProviderName:='_SELL_APARTMENTS_OTHERS_EXPORT';      

  with Provider, FieldNames do begin
    AddInvisible('OBJECT_ID');          
    AddInvisible('VIEW_ID');            
    AddInvisible('TYPE_ID');            
    AddInvisible('OPERATION_ID');       
    AddInvisible('DATE_BEGIN');         
    AddInvisible('ACCOUNT_ID');         
    AddInvisible('USER_NAME');          
    AddInvisible('PHONE');              
    AddInvisible('Комн');               
    AddInvisible('Улица');              
    AddInvisible('План.');              
    AddInvisible('Этаж');               
    AddInvisible('Тип');                
    AddInvisible('Тел');                
    AddInvisible('Пл, м2');             
    AddInvisible('Санузел');            
    AddInvisible('Балкон');             
    AddInvisible('Бытовая техника');    
    AddInvisible('Цена');               
    AddInvisible('Населенный пункт');   
  end;

  with Provider, FilterGroups do begin
    Add(foAnd);
    Items[0].Filters.Add('DATE_BEGIN',fcEqualGreater,SDateBegin);
    Items[0].Filters.Add('DATE_BEGIN',fcEqualLess,SDateEnd);
    Items[0].Filters.Add('Населенный пункт',fcNotEqual,'Красноярск г.');   
  end;

  with Provider, Orders do begin
    Add('Комн');               
    Add('DATE_BEGIN');         
  end;

  Provider.Open;
  Provider.First;
  BisKrieltReportsForm.Height:=463;
  SetProgressBarToNull(BisKrieltReportsForm, Provider);

  XLSNew:=CopyExcelDocToNew('sell_apartments_others.xls','Продам_квартиры_в_других_населенных_пунктах');
  Excel:=OpenExcelDoc(XLSNew);
  Sheet:=Excel.ActiveSheet;

  Sheet.Range['A1']:='продам, готовое жилье';
  Room:=Provider.FieldByName('Комн').AsString;
  Val(Room,RoomInt,Code);

  if Length(Room)=0 then begin
    Sheet.Range['I1']:='';
    Sheet.Range['A4']:='';
  end;
  if (Code=0) Or (Room='1,5') then begin
    Sheet.Range['I1']:='квартиры '+Room+'-комнатные';
    Sheet.Range['A4']:=Room+'-комнатные';
  end;
  if Room='г' then begin
    Sheet.Range['I1']:='гостинки';
    Sheet.Range['A4']:='гостинки';
  end;
  if Room='комната' then begin
    Sheet.Range['I1']:='комнаты';
    Sheet.Range['A4']:='комнаты';
  end;
  if Room='с' then begin
    Sheet.Range['I1']:='секционки';
    Sheet.Range['A4']:='секционки';
  end;

  LastRow:=8;

  Repeat
    Sheet.Range['A'+IntToStr(LastRow-3)]:=Provider.FieldByName('Населенный пункт').AsString;
    Sheet.Range['B'+IntToStr(LastRow-3)]:=Provider.FieldByName('Улица').AsString;
    Sheet.Range['C'+IntToStr(LastRow-3)]:=Provider.FieldByName('План.').AsString;
    Sheet.Range['D'+IntToStr(LastRow-3)]:=Provider.FieldByName('Этаж').AsString;
    Sheet.Range['E'+IntToStr(LastRow-3)]:=Provider.FieldByName('Тип').AsString;
    Sheet.Range['F'+IntToStr(LastRow-3)]:=Provider.FieldByName('Тел').AsString;
    Sheet.Range['G'+IntToStr(LastRow-3)]:=Provider.FieldByName('Пл, м2').AsString;
    Sheet.Range['H'+IntToStr(LastRow-3)]:=Provider.FieldByName('Санузел').AsString;
    Sheet.Range['I'+IntToStr(LastRow-3)]:=Provider.FieldByName('Балкон').AsString;
    Sheet.Range['J'+IntToStr(LastRow-3)]:=Provider.FieldByName('Бытовая техника').AsString;
    Sheet.Range['K'+IntToStr(LastRow-3)]:=Provider.FieldByName('Цена').AsString;
    Sheet.Range['L'+IntToStr(LastRow-3)]:=Provider.FieldByName('PHONE').AsString;
    ExtendPosProgressBar(BisKrieltReportsForm);
    Provider.Next;
    if Provider.Eof=True then Break;
    if (Provider.FieldByName('Комн').AsString<>Room) then Begin
      Room:=Provider.FieldByName('Комн').AsString;

      InsertExcelRows(Sheet,LastRow-1,LastRow-1,'L',LastRow+2);
      InsertExcelRows(Sheet,LastRow-2,LastRow-2,'L',LastRow+1);
      InsertExcelRows(Sheet,LastRow+2,LastRow+2,'L',LastRow-2);
      InsertExcelRows(Sheet,1,1,'L',LastRow-1);
      InsertExcelRows(Sheet,4,4,'L',LastRow);

      Sheet.Range['A'+IntToStr(LastRow-1)]:='продам, готовое жилье';
      Val(Room,RoomInt,Code);
      if Length(Room)=0 then begin
        Sheet.Range['I'+IntToStr(LastRow-1)]:='';
        Sheet.Range['A'+IntToStr(LastRow)]:='';
      end;
      if (Code=0) Or (Room='1,5') then begin
        Sheet.Range['I'+IntToStr(LastRow-1)]:='квартиры '+Room+'-комнатные';
        Sheet.Range['A'+IntToStr(LastRow)]:=Room+'-комнатные';
      end;
      if Room='г' then begin
        Sheet.Range['I'+IntToStr(LastRow-1)]:='гостинки';
        Sheet.Range['A'+IntToStr(LastRow)]:='гостинки';
      end;
      if Room='комната' then begin
        Sheet.Range['I'+IntToStr(LastRow-1)]:='комнаты';
        Sheet.Range['A'+IntToStr(LastRow)]:='комнаты';
      end;
      if Room='с' then begin
        Sheet.Range['I'+IntToStr(LastRow-1)]:='секционки';
        Sheet.Range['A'+IntToStr(LastRow)]:='секционки';
      end;

      LastRow:=LastRow+3;
    End;
    InsertExcelRows(Sheet,LastRow-1,LastRow-1,'L',LastRow);
    InsertExcelRows(Sheet,LastRow-2,LastRow-2,'L',LastRow-1);
    InsertExcelRows(Sheet,5,5,'L',LastRow-2);
    Sheet.Rows[LastRow-2]:='';
    LastRow:=LastRow+1;
  Until False;

  Sheet.Rows[LastRow-1].Clear;

  Excel.Visible:=True;
  Provider.Close;

  Provider.Free;

end;

procedure ExportSellHousesCottagesKrs(BisKrieltReportsForm: TBisKrieltReportsForm; DateBegin, DateEnd: TDate);
var Provider: TBisProvider;
  LastRow: Integer;
  Excel, Sheet: Variant;
  Region, XLSNew, SDateBegin, SDateEnd: String;
begin

  SDateBegin:=ConvertDateTime(DateBegin,'Begin');
  SDateEnd:=ConvertDateTime(DateEnd,'End');

  Provider:=TBisProvider.Create(nil);
  Provider.ProviderName:='S_SELL_HOUSES_COTTAGES_KRS_EXPORT';      

  with Provider, FieldNames do begin
    AddInvisible('OBJECT_ID');          
    AddInvisible('VIEW_ID');            
    AddInvisible('TYPE_ID');            
    AddInvisible('OPERATION_ID');       
    AddInvisible('DATE_BEGIN');         
    AddInvisible('ACCOUNT_ID');         
    AddInvisible('USER_NAME');          
    AddInvisible('PHONE');              
    AddInvisible('Район');              
    AddInvisible('Улица');              
    AddInvisible('Ориентир');           
    AddInvisible('Этажность дома');     
    AddInvisible('Тип');                
    AddInvisible('Общая площадь');      
    AddInvisible('Цена');               
    AddInvisible('Населенный пункт');   
  end;

  with Provider, FilterGroups do begin
    Add(foAnd);
    Items[0].Filters.Add('DATE_BEGIN',fcEqualGreater,SDateBegin);
    Items[0].Filters.Add('DATE_BEGIN',fcEqualLess,SDateEnd);
    Items[0].Filters.Add('Населенный пункт',fcEqual,'Красноярск г.');   
  end;

  with Provider, Orders do begin
    Add('Район');              
    Add('DATE_BEGIN');         
  end;

  Provider.Open;
  Provider.First;
  BisKrieltReportsForm.Height:=463;
  SetProgressBarToNull(BisKrieltReportsForm, Provider);

  XLSNew:=CopyExcelDocToNew('sell_houses_cottages_krs.xls','Продам_дома,_коттеджи_в_г.Красноярск');
  Excel:=OpenExcelDoc(XLSNew);
  Sheet:=Excel.ActiveSheet;

  Sheet.Range['A1']:='продам, готовое жилье';
  Sheet.Range['D1']:='частные дома, коттеджи';

  Region:=Provider.FieldByName('Район').AsString;
  Sheet.Range['A4']:=Region;
  LastRow:=7;

  Repeat
    Sheet.Range['A'+IntToStr(LastRow-2)]:=Provider.FieldByName('Улица').AsString;
    Sheet.Range['B'+IntToStr(LastRow-2)]:=Provider.FieldByName('Ориентир').AsString;
    Sheet.Range['C'+IntToStr(LastRow-2)]:=Provider.FieldByName('Этажность дома').AsString;
    Sheet.Range['D'+IntToStr(LastRow-2)]:=Provider.FieldByName('Тип').AsString;
    Sheet.Range['E'+IntToStr(LastRow-2)]:=Provider.FieldByName('Общая площадь').AsString;
    Sheet.Range['F'+IntToStr(LastRow-2)]:=Provider.FieldByName('Цена').AsString;
    Sheet.Range['G'+IntToStr(LastRow-2)]:=Provider.FieldByName('PHONE').AsString;
    ExtendPosProgressBar(BisKrieltReportsForm);
    Provider.Next;
    if Provider.Eof=True then Break;

    if (Provider.FieldByName('Район').AsString<>Region) then Begin
      Region:=Provider.FieldByName('Район').AsString;
      InsertExcelRows(Sheet,LastRow-1,LastRow-1,'L',LastRow);
      InsertExcelRows(Sheet,4,4,'L',LastRow-1);
      Sheet.Range['A'+IntToStr(LastRow-1)]:=Region;
      LastRow:=LastRow+1;
    End;
    InsertExcelRows(Sheet,LastRow-1,LastRow-1,'L',LastRow);
    InsertExcelRows(Sheet,5,5,'L',LastRow-1);
    Sheet.Rows[LastRow-1]:='';
    LastRow:=LastRow+1;
  Until False;

  Excel.Visible:=True;
  Provider.Close;

  Provider.Free;

end;

procedure ExportSellHousesCottagesOthers(BisKrieltReportsForm: TBisKrieltReportsForm; DateBegin, DateEnd: TDate);
var Provider: TBisProvider;
  LastRow: Integer;
  Excel, Sheet: Variant;
  XLSNew, SDateBegin, SDateEnd: String;
begin

  SDateBegin:=ConvertDateTime(DateBegin,'Begin');
  SDateEnd:=ConvertDateTime(DateEnd,'End');

  Provider:=TBisProvider.Create(nil);
  Provider.ProviderName:='S_SELL_HOUSES_COTTAGES_OTHERS_EXPORT';      

  with Provider, FieldNames do begin
    AddInvisible('OBJECT_ID');          
    AddInvisible('VIEW_ID');            
    AddInvisible('TYPE_ID');            
    AddInvisible('OPERATION_ID');       
    AddInvisible('DATE_BEGIN');         
    AddInvisible('ACCOUNT_ID');         
    AddInvisible('USER_NAME');          
    AddInvisible('PHONE');              
    AddInvisible('Населенный пункт');   
    AddInvisible('Этажность дома');     
    AddInvisible('Тип');                
    AddInvisible('Общая площадь');      
    AddInvisible('Цена');               
  end;

  with Provider, FilterGroups do begin
    Add(foAnd);
    Items[0].Filters.Add('DATE_BEGIN',fcEqualGreater,SDateBegin);
    Items[0].Filters.Add('DATE_BEGIN',fcEqualLess,SDateEnd);
    Items[0].Filters.Add('Населенный пункт',fcNotEqual,'Красноярск г.');   
  end;

  with Provider, Orders do begin
    Add('DATE_BEGIN');         
  end;

  Provider.Open;
  Provider.First;
  BisKrieltReportsForm.Height:=463;
  SetProgressBarToNull(BisKrieltReportsForm, Provider);

  XLSNew:=CopyExcelDocToNew('sell_houses_cottages_others.xls','Продам_дома,_коттеджи_в_других_населенных_пунктах');
  Excel:=OpenExcelDoc(XLSNew);
  Sheet:=Excel.ActiveSheet;

  Sheet.Range['A1']:='продам, готовое жилье';
  Sheet.Range['C1']:='частные дома, коттеджи';

  LastRow:=6;

  Repeat
    Sheet.Range['A'+IntToStr(LastRow-2)]:=Provider.FieldByName('Населенный пункт').AsString;
    Sheet.Range['B'+IntToStr(LastRow-2)]:=Provider.FieldByName('Этажность дома').AsString;
    Sheet.Range['C'+IntToStr(LastRow-2)]:=Provider.FieldByName('Тип').AsString;
    Sheet.Range['D'+IntToStr(LastRow-2)]:=Provider.FieldByName('Общая площадь').AsString;
    Sheet.Range['E'+IntToStr(LastRow-2)]:=Provider.FieldByName('Цена').AsString;
    Sheet.Range['F'+IntToStr(LastRow-2)]:=Provider.FieldByName('PHONE').AsString;
    ExtendPosProgressBar(BisKrieltReportsForm);
    Provider.Next;
    if Provider.Eof=True then Break;

    InsertExcelRows(Sheet,LastRow-1,LastRow-1,'L',LastRow);
    InsertExcelRows(Sheet,4,4,'L',LastRow-1);
    Sheet.Rows[LastRow-1]:='';
    LastRow:=LastRow+1;
  Until False;

  Excel.Visible:=True;
  Provider.Close;

  Provider.Free;

end;

procedure ExportSellTownHousesKrs(BisKrieltReportsForm: TBisKrieltReportsForm; DateBegin, DateEnd: TDate);
var Provider: TBisProvider;
  LastRow: Integer;
  Excel, Sheet: Variant;
  Region, XLSNew, SDateBegin, SDateEnd: String;
begin

  SDateBegin:=ConvertDateTime(DateBegin,'Begin');
  SDateEnd:=ConvertDateTime(DateEnd,'End');

  Provider:=TBisProvider.Create(nil);
  Provider.ProviderName:='S_SELL_TOWN_HOUSES_KRS_EXPORT';      

  with Provider, FieldNames do begin
    AddInvisible('OBJECT_ID');          
    AddInvisible('VIEW_ID');            
    AddInvisible('TYPE_ID');            
    AddInvisible('OPERATION_ID');       
    AddInvisible('DATE_BEGIN');         
    AddInvisible('ACCOUNT_ID');         
    AddInvisible('USER_NAME');          
    AddInvisible('PHONE');              
    AddInvisible('Район');              
    AddInvisible('Улица');              
    AddInvisible('Ориентир');           
    AddInvisible('Этажность дома');     
    AddInvisible('Тип');                
    AddInvisible('Общая площадь');      
    AddInvisible('Цена');               
    AddInvisible('Населенный пункт');   
  end;

  with Provider, FilterGroups do begin
    Add(foAnd);
    Items[0].Filters.Add('DATE_BEGIN',fcEqualGreater,SDateBegin);
    Items[0].Filters.Add('DATE_BEGIN',fcEqualLess,SDateEnd);
    Items[0].Filters.Add('Населенный пункт',fcEqual,'Красноярск г.');   
  end;

  with Provider, Orders do begin
    Add('Район');              
    Add('DATE_BEGIN');         
  end;

  Provider.Open;
  Provider.First;
  BisKrieltReportsForm.Height:=463;
  SetProgressBarToNull(BisKrieltReportsForm, Provider);

  XLSNew:=CopyExcelDocToNew('sell_town_houses_krs.xls','Продам_таунхаусы_в_г.Красноярск');
  Excel:=OpenExcelDoc(XLSNew);
  Sheet:=Excel.ActiveSheet;

  Sheet.Range['A1']:='продам, готовое жилье';
  Sheet.Range['D1']:='таунхаусы';

  Region:=Provider.FieldByName('Район').AsString;
  Sheet.Range['A4']:=Region;
  LastRow:=7;

  Repeat
    Sheet.Range['A'+IntToStr(LastRow-2)]:=Provider.FieldByName('Улица').AsString;
    Sheet.Range['B'+IntToStr(LastRow-2)]:=Provider.FieldByName('Ориентир').AsString;
    Sheet.Range['C'+IntToStr(LastRow-2)]:=Provider.FieldByName('Этажность дома').AsString;
    Sheet.Range['D'+IntToStr(LastRow-2)]:=Provider.FieldByName('Тип').AsString;
    Sheet.Range['E'+IntToStr(LastRow-2)]:=Provider.FieldByName('Общая площадь').AsString;
    Sheet.Range['F'+IntToStr(LastRow-2)]:=Provider.FieldByName('Цена').AsString;
    Sheet.Range['G'+IntToStr(LastRow-2)]:=Provider.FieldByName('PHONE').AsString;
    ExtendPosProgressBar(BisKrieltReportsForm);
    Provider.Next;
    if Provider.Eof=True then Break;

    if (Provider.FieldByName('Район').AsString<>Region) then Begin
      Region:=Provider.FieldByName('Район').AsString;
      InsertExcelRows(Sheet,LastRow-1,LastRow-1,'L',LastRow);
      InsertExcelRows(Sheet,4,4,'L',LastRow-1);
      Sheet.Range['A'+IntToStr(LastRow-1)]:=Region;
      LastRow:=LastRow+1;
    End;
    InsertExcelRows(Sheet,LastRow-1,LastRow-1,'L',LastRow);
    InsertExcelRows(Sheet,5,5,'L',LastRow-1);
    Sheet.Rows[LastRow-1]:='';
    LastRow:=LastRow+1;
  Until False;

  Excel.Visible:=True;
  Provider.Close;

  Provider.Free;

end;

procedure ExportSellOutsideHouses(BisKrieltReportsForm: TBisKrieltReportsForm; DateBegin, DateEnd: TDate);
var Provider: TBisProvider;
  LastRow: Integer;
  Excel, Sheet: Variant;
  XLSNew, SDateBegin, SDateEnd: String;
begin

  SDateBegin:=ConvertDateTime(DateBegin,'Begin');
  SDateEnd:=ConvertDateTime(DateEnd,'End');

  Provider:=TBisProvider.Create(nil);
  Provider.ProviderName:='S_SELL_OUTSIDE_HOUSES_EXPORT';      

  with Provider, FieldNames do begin
    AddInvisible('OBJECT_ID');          
    AddInvisible('VIEW_ID');            
    AddInvisible('TYPE_ID');            
    AddInvisible('OPERATION_ID');       
    AddInvisible('DATE_BEGIN');         
    AddInvisible('ACCOUNT_ID');         
    AddInvisible('USER_NAME');          
    AddInvisible('PHONE');              
    AddInvisible('Населенный пункт');   
    AddInvisible('Этажность дома');     
    AddInvisible('Тип');                
    AddInvisible('Общая площадь');      
    AddInvisible('Цена');               
  end;

  with Provider, FilterGroups do begin
    Add(foAnd);
    Items[0].Filters.Add('DATE_BEGIN',fcEqualGreater,SDateBegin);
    Items[0].Filters.Add('DATE_BEGIN',fcEqualLess,SDateEnd);
  end;

  with Provider, Orders do begin
    Add('DATE_BEGIN');         
  end;

  Provider.Open;
  Provider.First;
  BisKrieltReportsForm.Height:=463;
  SetProgressBarToNull(BisKrieltReportsForm, Provider);

  XLSNew:=CopyExcelDocToNew('sell_outside_houses.xls','Продам_загородные_дома');
  Excel:=OpenExcelDoc(XLSNew);
  Sheet:=Excel.ActiveSheet;

  Sheet.Range['A1']:='продам, готовое жилье';
  Sheet.Range['C1']:='загородные дома';

  LastRow:=6;

  Repeat
    Sheet.Range['A'+IntToStr(LastRow-2)]:=Provider.FieldByName('Населенный пункт').AsString;
    Sheet.Range['B'+IntToStr(LastRow-2)]:=Provider.FieldByName('Этажность дома').AsString;
    Sheet.Range['C'+IntToStr(LastRow-2)]:=Provider.FieldByName('Тип').AsString;
    Sheet.Range['D'+IntToStr(LastRow-2)]:=Provider.FieldByName('Общая площадь').AsString;
    Sheet.Range['E'+IntToStr(LastRow-2)]:=Provider.FieldByName('Цена').AsString;
    Sheet.Range['F'+IntToStr(LastRow-2)]:=Provider.FieldByName('PHONE').AsString;
    ExtendPosProgressBar(BisKrieltReportsForm);
    Provider.Next;
    if Provider.Eof=True then Break;

    InsertExcelRows(Sheet,LastRow-1,LastRow-1,'L',LastRow);
    InsertExcelRows(Sheet,4,4,'L',LastRow-1);
    Sheet.Rows[LastRow-1]:='';
    LastRow:=LastRow+1;
  Until False;

  Excel.Visible:=True;
  Provider.Close;

  Provider.Free;

end;

procedure ExportSellDatchas(BisKrieltReportsForm: TBisKrieltReportsForm; DateBegin, DateEnd: TDate);
var Provider: TBisProvider;
  LastRow: Integer;
  Excel, Sheet: Variant;
  XLSNew, SDateBegin, SDateEnd: String;
begin

  SDateBegin:=ConvertDateTime(DateBegin,'Begin');
  SDateEnd:=ConvertDateTime(DateEnd,'End');

  Provider:=TBisProvider.Create(nil);
  Provider.ProviderName:='S_SELL_DATCHAS_EXPORT';      

  with Provider, FieldNames do begin
    AddInvisible('OBJECT_ID');          
    AddInvisible('VIEW_ID');            
    AddInvisible('TYPE_ID');            
    AddInvisible('OPERATION_ID');       
    AddInvisible('DATE_BEGIN');         
    AddInvisible('ACCOUNT_ID');         
    AddInvisible('USER_NAME');          
    AddInvisible('PHONE');              
    AddInvisible('Населенный пункт');   
    AddInvisible('Участок');            
    AddInvisible('Общая площадь');      
    AddInvisible('Тип');                
    AddInvisible('Цена');               
  end;

  with Provider, FilterGroups do begin
    Add(foAnd);
    Items[0].Filters.Add('DATE_BEGIN',fcEqualGreater,SDateBegin);
    Items[0].Filters.Add('DATE_BEGIN',fcEqualLess,SDateEnd);
  end;

  with Provider, Orders do begin
    Add('DATE_BEGIN');
  end;

  Provider.Open;
  Provider.First;
  BisKrieltReportsForm.Height:=463;
  SetProgressBarToNull(BisKrieltReportsForm, Provider);

  XLSNew:=CopyExcelDocToNew('sell_datchas.xls','Продам_дачи');
  Excel:=OpenExcelDoc(XLSNew);
  Sheet:=Excel.ActiveSheet;

  Sheet.Range['A1']:='продам, готовое жилье';
  Sheet.Range['C1']:='дачи';

  LastRow:=6;

  Repeat
    Sheet.Range['A'+IntToStr(LastRow-2)]:=Provider.FieldByName('Населенный пункт').AsString;
    Sheet.Range['B'+IntToStr(LastRow-2)]:=Provider.FieldByName('Участок').AsString;
    Sheet.Range['C'+IntToStr(LastRow-2)]:=Provider.FieldByName('Общая площадь').AsString;
    Sheet.Range['D'+IntToStr(LastRow-2)]:=Provider.FieldByName('Тип').AsString;
    Sheet.Range['E'+IntToStr(LastRow-2)]:=Provider.FieldByName('Цена').AsString;
    Sheet.Range['F'+IntToStr(LastRow-2)]:=Provider.FieldByName('PHONE').AsString;
    ExtendPosProgressBar(BisKrieltReportsForm);
    Provider.Next;
    if Provider.Eof=True then Break;

    InsertExcelRows(Sheet,LastRow-1,LastRow-1,'L',LastRow);
    InsertExcelRows(Sheet,4,4,'L',LastRow-1);
    Sheet.Rows[LastRow-1]:='';
    LastRow:=LastRow+1;
  Until False;

  Excel.Visible:=True;
  Provider.Close;

  Provider.Free;

end;

end.
