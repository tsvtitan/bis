unit BisTaxiPhoneFormatFm;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, ExtCtrls,
  WaveACMDrivers,
  BisDialogFm,
  BisWave;                                                                                          

type
  TBisTaxiPhoneFormatForm = class(TBisDialogForm)
    LabelDriver: TLabel;
    ComboBoxDrivers: TComboBox;
    ListBoxFormats: TListBox;
    RadioButtonBoth: TRadioButton;
    RadioButtonMono: TRadioButton;
    RadioButtonStereo: TRadioButton;
    procedure ComboBoxDriversChange(Sender: TObject);
    procedure ListBoxFormatsClick(Sender: TObject);
    procedure ComboBoxDriversCloseUp(Sender: TObject);
    procedure CheckBoxMonoClick(Sender: TObject);
    procedure RadioButtonBothClick(Sender: TObject);
  private
    FDrivers: TBisACMDrivers;
    FOldIndex: Integer;
    procedure RefreshDrivers;
    function GetFormatDescription(Format: TWaveACMDriverFormat): String;
    procedure RefreshFormats;
    function GetDriver: TWaveACMDriver;
    function GetFormat: TWaveACMDriverFormat;
    function GetDriverIndex(AFormat: TWaveACMDriverFormat): Integer;
    function GetFormatIndex(AFormat: TWaveACMDriverFormat): Integer;
    procedure UpdateButtonOk;
    procedure SetFormat(const Value: TWaveACMDriverFormat);
    procedure SetDrivers(const Value: TBisACMDrivers);
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
    procedure BeforeShow; override;

    property Drivers: TBisACMDrivers read FDrivers write SetDrivers; 
    property Format: TWaveACMDriverFormat read GetFormat write SetFormat;
  end;

  TBisTaxiPhoneFormatFormIface=class(TBisDialogFormIface)
  public
    constructor Create(AOwner: TComponent); override;
  end;

var
  BisTaxiPhoneFormatForm: TBisTaxiPhoneFormatForm;

implementation

uses BisUtils;

{$R *.dfm}

{ TBisTaxiPhoneFormatFormIface }

constructor TBisTaxiPhoneFormatFormIface.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  FormClass:=TBisTaxiPhoneFormatForm;
end;

{ TBisTaxiPhoneFormatForm }

constructor TBisTaxiPhoneFormatForm.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  SizesStored:=true;
  SizeGrip.Visible:=true;
  FOldIndex:=-1;
end;

destructor TBisTaxiPhoneFormatForm.Destroy;
begin
  inherited Destroy;
end;

procedure TBisTaxiPhoneFormatForm.CheckBoxMonoClick(Sender: TObject);
begin
  RefreshFormats;
end;

procedure TBisTaxiPhoneFormatForm.ComboBoxDriversChange(Sender: TObject);
begin
  if FOldIndex<>ComboBoxDrivers.ItemIndex then begin
    RefreshFormats;
    UpdateButtonOk;
    FOldIndex:=ComboBoxDrivers.ItemIndex;
  end;
end;

procedure TBisTaxiPhoneFormatForm.ComboBoxDriversCloseUp(Sender: TObject);
begin
  ListBoxFormats.SetFocus;
end;

function TBisTaxiPhoneFormatForm.GetDriver: TWaveACMDriver;
begin
  Result:=nil;
  if ComboBoxDrivers.ItemIndex<>-1 then
    Result:=TWaveACMDriver(ComboBoxDrivers.Items.Objects[ComboBoxDrivers.ItemIndex]);
end;

function TBisTaxiPhoneFormatForm.GetDriverIndex(AFormat: TWaveACMDriverFormat): Integer;
var
  i: Integer;
  Driver: TWaveACMDriver;
begin
  Result:=-1;
  if Assigned(AFormat) then begin
    for i:=0 to ComboBoxDrivers.Items.Count-1 do begin
      Driver:=TWaveACMDriver(ComboBoxDrivers.Items.Objects[i]);
      if Driver.ID=AFormat.Driver.ID then begin
        Result:=i;
        exit;
      end;
    end;
  end;
end;

function TBisTaxiPhoneFormatForm.GetFormatIndex(AFormat: TWaveACMDriverFormat): Integer;
var
  i: Integer;
  Format: TWaveACMDriverFormat;
begin
  Result:=-1;
  if Assigned(AFormat) then begin
    for i:=0 to ListBoxFormats.Items.Count-1 do begin
      Format:=TWaveACMDriverFormat(ListBoxFormats.Items.Objects[i]);
      if AnsiSameText(Format.Name,AFormat.Name) and
         (Format.Index=AFormat.Index) and
         (Format.Tag=AFormat.Tag) then begin
        Result:=i;
        exit;
      end;
    end;
  end;
end;

procedure TBisTaxiPhoneFormatForm.ListBoxFormatsClick(Sender: TObject);
begin
  UpdateButtonOk;
end;

function TBisTaxiPhoneFormatForm.GetFormat: TWaveACMDriverFormat;
begin
  Result:=nil;
  if ListBoxFormats.ItemIndex<>-1 then
    Result:=TWaveACMDriverFormat(ListBoxFormats.Items.Objects[ListBoxFormats.ItemIndex]);
end;

procedure TBisTaxiPhoneFormatForm.RadioButtonBothClick(Sender: TObject);
begin
  RefreshFormats;
end;

procedure TBisTaxiPhoneFormatForm.RefreshDrivers;
var
  i: Integer;
  Driver: TWaveACMDriver;
  S: String;
begin
  ComboBoxDrivers.Items.BeginUpdate;
  try
    ComboBoxDrivers.Items.Clear;
    for i:=0 to FDrivers.Count-1 do begin
      Driver:=FDrivers.Items[i];
      S:=FormatEx('%s - %s',[Driver.ShortName,Driver.LongName]);
      ComboBoxDrivers.Items.AddObject(S,Driver);
    end;
  finally
    ComboBoxDrivers.Items.EndUpdate;
  end;
end;

function TBisTaxiPhoneFormatForm.GetFormatDescription(Format: TWaveACMDriverFormat): String;
const
  Channels: array[1..2] of String = ('ћоно', '—терео');
begin
  Result:='Ќе поддерживаетс€';
  if Assigned(Format) and Assigned(Format.WaveFormat) then begin
    with Format.WaveFormat^ do begin
      if wBitsPerSample <> 0 then
        if nChannels in [1..2] then
          Result := FormatEx('%.3f к√ц; %d бит; %s', [nSamplesPerSec / 1000, wBitsPerSample, Channels[nChannels]])
        else
          Result := FormatEx('%.3f к√ц; %d бит; %d канала(ов)', [nSamplesPerSec / 1000, wBitsPerSample, nChannels])
      else
        if nChannels in [1..2] then
          Result := FormatEx('%.3f к√ц; %s', [nSamplesPerSec / 1000, Channels[nChannels]])
        else
          Result := FormatEx('%.3f к√ц; %d канала(ов)', [nSamplesPerSec / 1000, nChannels]);
      Result:=FormatEx('%s: %s | %s',[Format.Name,Result,Format.Description]);
    end;
  end;
end;

procedure TBisTaxiPhoneFormatForm.RefreshFormats;
var
  i: Integer;
  Driver: TWaveACMDriver;
  Format: TWaveACMDriverFormat;
  S: String;
  Flag: Boolean;
begin
  Driver:=GetDriver;
  if Assigned(Driver) then begin
    ListBoxFormats.Items.BeginUpdate;
    try
      ListBoxFormats.Items.Clear;
      for i:=0 to Driver.Formats.Count-1 do begin
        Format:=Driver.Formats.Items[i];
        Flag:=true;
        if RadioButtonMono.Checked then
          Flag:=Format.WaveFormat.nChannels=1;
        if RadioButtonStereo.Checked then
          Flag:=Format.WaveFormat.nChannels=2;
        if Flag then begin
          S:=GetFormatDescription(Format);
          ListBoxFormats.Items.AddObject(S,Format);
        end;
      end;
    finally
      ListBoxFormats.Items.EndUpdate;
    end;
  end;
end;

procedure TBisTaxiPhoneFormatForm.SetDrivers(const Value: TBisACMDrivers);
begin
  FDrivers := Value;
  RefreshDrivers;
end;

procedure TBisTaxiPhoneFormatForm.SetFormat(const Value: TWaveACMDriverFormat);
begin
  if Assigned(Value) and Assigned(Value.WaveFormat) then begin
    RadioButtonMono.Checked:=Value.WaveFormat.nChannels=1;
    RadioButtonStereo.Checked:=Value.WaveFormat.nChannels=2;
  end;
  ComboBoxDrivers.ItemIndex:=GetDriverIndex(Value);
  RefreshFormats;
  ListBoxFormats.ItemIndex:=GetFormatIndex(Value);
  UpdateButtonOk;
end;

procedure TBisTaxiPhoneFormatForm.UpdateButtonOk;
var
  Format: TWaveACMDriverFormat;
begin
  Format:=GetFormat;
  ButtonOk.Enabled:=Assigned(Format);
end;

procedure TBisTaxiPhoneFormatForm.BeforeShow;
begin
  inherited BeforeShow;
end;

end.
