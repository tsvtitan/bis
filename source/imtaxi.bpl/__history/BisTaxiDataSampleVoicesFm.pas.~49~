unit BisTaxiDataSampleVoicesFm;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, ExtCtrls, ComCtrls, BisFm, ActnList, DB,
  BisDataGridFm, BisFieldNames,
  BisTaxiDataSampleVoicesFrm;

type                                                                                                      
  TBisTaxiDataSampleVoicesForm = class(TBisDataGridForm)
  end;

  TBisTaxiDataSampleVoicesFormIface=class(TBisDataGridFormIface)
  private
    function GetTypeSampleName(FieldName: TBisFieldName; DataSet: TDataSet): Variant;
  public
    constructor Create(AOwner: TComponent); override;
  end;

var
  BisTaxiDataSampleVoicesForm: TBisTaxiDataSampleVoicesForm;

implementation

{$R *.dfm}

uses BisUtils, BisTaxiDataSampleVoiceEditFm, BisConsts;

{ TBisTaxiDataSampleVoicesFormIface }

constructor TBisTaxiDataSampleVoicesFormIface.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  FormClass:=TBisTaxiDataSampleVoicesForm;
  FilterClass:=TBisTaxiDataSampleVoiceFilterFormIface;
  InsertClass:=TBisTaxiDataSampleVoiceInsertFormIface;
  UpdateClass:=TBisTaxiDataSampleVoiceUpdateFormIface;
  DeleteClass:=TBisTaxiDataSampleVoiceDeleteFormIface;
  Permissions.Enabled:=true;
  ProviderName:='S_SAMPLE_VOICES';
  with FieldNames do begin
    AddKey('SAMPLE_VOICE_ID');
    AddInvisible('DESCRIPTION');
    AddInvisible('TYPE_SAMPLE');
    AddCalculate('TYPE_SAMPLE_NAME','Тип образца',GetTypeSampleName,ftString,10,60);
    Add('SAMPLE_TEXT','Текст',240);
    Add('PRIORITY','Порядок',50);
  end;
end;

function TBisTaxiDataSampleVoicesFormIface.GetTypeSampleName(FieldName: TBisFieldName; DataSet: TDataSet): Variant;
var
  S: String;
begin
  Result:=Null;
  S:=GetTypeSampleByIndex(DataSet.FieldByName('TYPE_SAMPLE').AsInteger);
  if Trim(S)<>'' then
    Result:=S;
end;

end.
