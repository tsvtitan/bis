unit BisHttpServerHandlerEvent;

interface

uses Classes,
     HTTPApp,
     BisHttpServerHandlerModules, BisHttpServerHandlers,
     BisHttpServerHandlerSignalWm;

type

  TBisHttpServerHandlerSignal=class(TBisHttpServerHandler)
  private
    FWebModule: TBisHttpServerHandlerSignalWebModule;
//    FClientKey: String;
//    FServerKey: String;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
    procedure Init; override;
    function HandleRequest(Request: TWebRequest; Response: TWebResponse): Boolean; override;
    procedure CopyFrom(Source: TBisHttpServerHandler); override;

  end;

procedure InitServerHttpHandlerModule(AModule: TBisHttpServerHandlerModule); stdcall;

exports
  InitServerHttpHandlerModule;

implementation

uses SysUtils, Variants,
     BisCore, BisUtils, BisConsts, BisHttpServerHandlerSignalConsts;

procedure InitServerHttpHandlerModule(AModule: TBisHttpServerHandlerModule); stdcall;
begin
  AModule.HandlerClass:=TBisHttpServerHandlerSignal;
end;

{ TBisHttpServerHandlerSignal }

constructor TBisHttpServerHandlerSignal.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  FWebModule:=TBisHttpServerHandlerSignalWebModule.Create(Self);
  FWebModule.Handler:=Self;
end;

destructor TBisHttpServerHandlerSignal.Destroy;
begin
  FWebModule.Free;
  inherited Destroy;
end;

procedure TBisHttpServerHandlerSignal.Init;
var
  AName: String;
  AValue: Variant;
begin
  inherited Init;
  if Params.Active and not Params.Empty then begin
    Params.First;
    while not Params.Eof do begin
      AName:=Params.FieldByName(SFieldName).AsString;
      AValue:=Params.FieldByName(SFieldValue).Value;

{      if AnsiSameText(AName,SParamClientKey) then FClientKey:=VarToStrDef(AValue,'');
      if AnsiSameText(AName,SParamServerKey) then FServerKey:=VarToStrDef(AValue,'');}

      Params.Next;
    end;
  end;
end;

function TBisHttpServerHandlerSignal.HandleRequest(Request: TWebRequest; Response: TWebResponse): Boolean;
begin
  if FWebModule is TBisHttpServerHandlerSignalWebModule then begin
{     TBisHttpServerHandlerSignalWebModule(FWebModule).ClientKey:=FClientKey;
     TBisHttpServerHandlerSignalWebModule(FWebModule).ServerKey:=FServerKey;}
  end;
  Result:=IWebRequestHandler(FWebModule).HandleRequest(Request,Response);
end;

procedure TBisHttpServerHandlerSignal.CopyFrom(Source: TBisHttpServerHandler);
begin
  inherited CopyFrom(Source);
  if Assigned(Source) then begin
//    FClientKey:=TBisHttpServerHandlerSignal(Source).FClientKey;
//    FServerKey:=TBisHttpServerHandlerSignal(Source).FServerKey;
  end;
end;

end.
