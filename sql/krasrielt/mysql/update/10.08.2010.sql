ALTER TABLE COLUMN_PARAMS
ADD ELEMENT_TYPE INTEGER

--

DROP VIEW S_COLUMN_PARAMS

--

CREATE VIEW S_COLUMN_PARAMS
AS
SELECT CP.*,
			 C.NAME AS COLUMN_NAME,
			 P.NAME AS PARAM_NAME,
			 P.PARAM_TYPE 
  FROM COLUMN_PARAMS CP
	JOIN COLUMNS C ON  C.COLUMN_ID=CP.COLUMN_ID
  JOIN PARAMS P ON P.PARAM_ID=CP.PARAM_ID

--

DROP PROCEDURE I_COLUMN_PARAM

--

CREATE PROCEDURE I_COLUMN_PARAM
(
  IN COLUMN_ID VARCHAR(32),
  IN PARAM_ID VARCHAR(32),
  IN PRIORITY INTEGER,
	IN STRING_BEFORE VARCHAR(100),
	IN USE_STRING_BEFORE INTEGER,
	IN STRING_AFTER VARCHAR(100),
	IN USE_STRING_AFTER INTEGER,
  IN ELEMENT_TYPE INTEGER
)
BEGIN
  INSERT INTO COLUMN_PARAMS (COLUMN_ID,PARAM_ID,PRIORITY,STRING_BEFORE,USE_STRING_BEFORE,
	                                     STRING_AFTER,USE_STRING_AFTER,ELEMENT_TYPE)
       VALUES (COLUMN_ID,PARAM_ID,PRIORITY,STRING_BEFORE,USE_STRING_BEFORE,
			         STRING_AFTER,USE_STRING_AFTER,ELEMENT_TYPE);
END;

--

DROP PROCEDURE U_COLUMN_PARAM

--

CREATE PROCEDURE U_COLUMN_PARAM
(
  IN COLUMN_ID VARCHAR(32),
  IN PARAM_ID VARCHAR(32),
  IN PRIORITY INTEGER,
	IN STRING_BEFORE VARCHAR(100),
	IN USE_STRING_BEFORE INTEGER,
	IN STRING_AFTER VARCHAR(100),
	IN USE_STRING_AFTER INTEGER,
  IN ELEMENT_TYPE INTEGER,
  IN OLD_COLUMN_ID VARCHAR(32),
  IN OLD_PARAM_ID VARCHAR(32)
)
BEGIN
  UPDATE COLUMN_PARAMS CP
     SET CP.COLUMN_ID=COLUMN_ID,
		     CP.PARAM_ID=PARAM_ID,
         CP.PRIORITY=PRIORITY,
         CP.STRING_BEFORE=STRING_BEFORE,
				 CP.USE_STRING_BEFORE=USE_STRING_BEFORE,
         CP.STRING_AFTER=STRING_AFTER,
				 CP.USE_STRING_AFTER=USE_STRING_AFTER,
         CP.ELEMENT_TYPE=ELEMENT_TYPE
   WHERE CP.COLUMN_ID=OLD_COLUMN_ID
	   AND CP.PARAM_ID=OLD_PARAM_ID;
END;

--

CREATE PROCEDURE GET_PRESENTATION_TABLE_NAME
(
  OUT TABLE_NAME VARCHAR(100)
)
BEGIN
  SET TABLE_NAME=CONCAT('_',DATE_FORMAT(CURRENT_TIMESTAMP,'%Y%m%d%H%i%s'));
END;

--

DROP PROCEDURE IF EXISTS R_PRESENTATIONS;

--

CREATE PROCEDURE R_PRESENTATIONS()
BEGIN
  DECLARE PRESENTATION_ID VARCHAR(32);
	DECLARE DONE INTEGER DEFAULT 0;
	DECLARE C1 CURSOR FOR SELECT P.PRESENTATION_ID
  												FROM  PRESENTATIONS P;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET DONE=1;	
	
	OPEN C1;
  FETCH C1 INTO PRESENTATION_ID;
  WHILE NOT DONE DO
		CALL  R_PRESENTATION (PRESENTATION_ID);
    FETCH C1 INTO PRESENTATION_ID;
  END WHILE;
  CLOSE C1;		 
END;

--

DROP PROCEDURE IF EXISTS R_PRESENTATION;

--

CREATE PROCEDURE R_PRESENTATION(
  IN PRESENTATION_ID VARCHAR(32)
)
BEGIN
  DECLARE ATABLE VARCHAR(100);
	DECLARE COLUMN_ID VARCHAR(32);
	DECLARE PUBLISHING_ID VARCHAR(32);
	DECLARE VIEW_ID VARCHAR(32);
	DECLARE TYPE_ID VARCHAR(32);
	DECLARE OPERATION_ID VARCHAR(32);
	DECLARE CONDITIONS LONGBLOB;
	DECLARE SORTING VARCHAR(250);
	DECLARE PARAM_IDS VARCHAR(1000);
	DECLARE COLUMN_NAME VARCHAR(100);
  DECLARE PARAM_COLUMN_NAME VARCHAR(100);
	DECLARE OLD_COLUMN_ID VARCHAR(32);
	DECLARE PARAM_ID VARCHAR(32);
	DECLARE PARAM_TYPE INTEGER;
	DECLARE PARAM_COUNT INTEGER;
	DECLARE PRESENTATION_TYPE INTEGER;
	DECLARE REAL_COUNT INTEGER;
	DECLARE CP_STRING_BEFORE VARCHAR(100);
	DECLARE CP_STRING_AFTER VARCHAR(100);
	DECLARE CP_USE_STRING_BEFORE INTEGER;
	DECLARE CP_USE_STRING_AFTER INTEGER;
	DECLARE FIELD_NAME VARCHAR(1000);
  DECLARE PARAM_FIELD_NAME VARCHAR(1000);
	DECLARE SELECT_NAME VARCHAR(200);
  DECLARE PARAM_SELECT_NAME VARCHAR(200);
  DECLARE COUNTER INTEGER;
  DECLARE MAX_LENGTH INTEGER;
	DECLARE NEW_QUERY VARCHAR(2000);
	DECLARE PARAM_NEW_QUERY VARCHAR(2000);
	DECLARE DONE INTEGER DEFAULT 0;
	DECLARE C1 CURSOR FOR SELECT C.COLUMN_ID, CP.PARAM_ID, P.PARAM_TYPE, P.MAX_LENGTH,
	                             CP.STRING_BEFORE AS CP_STRING_BEFORE,CP.STRING_AFTER AS CP_STRING_AFTER,
			                         CP.USE_STRING_BEFORE AS CP_USE_STRING_BEFORE,CP.USE_STRING_AFTER AS CP_USE_STRING_AFTER,
			                         PR.PUBLISHING_ID,PR.VIEW_ID,PR.TYPE_ID,PR.OPERATION_ID,PR.CONDITIONS,PR.SORTING,
			                         PR.PRESENTATION_TYPE,
			                         (SELECT COUNT(*) FROM COLUMN_PARAMS CP1 WHERE CP1.COLUMN_ID=CP.COLUMN_ID) AS PARAM_COUNT
                          FROM COLUMNS C
                          JOIN COLUMN_PARAMS CP ON CP.COLUMN_ID=C.COLUMN_ID
                          JOIN PARAMS P ON P.PARAM_ID=CP.PARAM_ID
	                        JOIN PRESENTATIONS PR ON PR.PRESENTATION_ID=C.PRESENTATION_ID
                         WHERE C.PRESENTATION_ID=PRESENTATION_ID
                         ORDER BY C.PRIORITY, CP.PRIORITY;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET DONE=1;												
	
  SELECT P.TABLE_NAME INTO ATABLE
    FROM PRESENTATIONS P
   WHERE P.PRESENTATION_ID=PRESENTATION_ID
	   AND P.PRESENTATION_TYPE IN (0);
	
	IF (ATABLE<>'') THEN
	
		SET @QUERY=CONCAT('DROP TABLE IF EXISTS ',ATABLE);
    PREPARE STMT FROM @QUERY;
    EXECUTE STMT;
    DEALLOCATE PREPARE STMT;
	  SET @QUERY=CONCAT('CREATE TABLE ',ATABLE,' AS SELECT T.* FROM (SELECT OP.OBJECT_ID,PO.PUBLISHING_ID,P.NAME AS PUBLISHING_NAME,');
	  SET @QUERY=CONCAT(@QUERY,'O.VIEW_ID,V.NAME AS VIEW_NAME,O.TYPE_ID,T.NAME AS TYPE_NAME,O.OPERATION_ID,OT.NAME AS OPERATION_NAME,');
	  SET @QUERY=CONCAT(@QUERY,'D.DESIGN_ID,D.NAME AS DESIGN_NAME,');
	  SET @QUERY=CONCAT(@QUERY,'PO.DATE_BEGIN,O.ACCOUNT_ID,A.USER_NAME,A.PHONE,O.STATUS');
	  SET PARAM_IDS='';
	  SET OLD_COLUMN_ID='';
	  SET FIELD_NAME='';
	  SET REAL_COUNT=0;
    SET COUNTER=0;
		
	  OPEN C1;
    FETCH C1 INTO COLUMN_ID,PARAM_ID,PARAM_TYPE,MAX_LENGTH,
		              CP_STRING_BEFORE,CP_STRING_AFTER,CP_USE_STRING_BEFORE,CP_USE_STRING_AFTER,
		              PUBLISHING_ID,VIEW_ID,TYPE_ID,OPERATION_ID,CONDITIONS,SORTING,PRESENTATION_TYPE,PARAM_COUNT;
    WHILE NOT DONE DO
	
		  IF (OLD_COLUMN_ID<>COLUMN_ID) THEN
        SET COUNTER=COUNTER+1;
  		  SET REAL_COUNT=0;
	  	END IF;
		
		  SET REAL_COUNT=REAL_COUNT+1;
		
		  IF (PARAM_TYPE IN (0,3,9)) AND (MAX_LENGTH IS NOT NULL) THEN
			  SET SELECT_NAME='CONVERT(OP.VALUE_STRING USING CP1251)'; 
			  SET PARAM_SELECT_NAME=CONCAT('CAST(OP.VALUE_STRING AS CHAR(',CAST(MAX_LENGTH AS CHAR),'))'); 
			END IF;
    
		  IF (PARAM_TYPE IN (1,2)) THEN
			  SET SELECT_NAME='CAST(OP.VALUE_NUMBER AS CHAR(250))'; 
			  SET PARAM_SELECT_NAME='OP.VALUE_NUMBER'; 
			END IF;
		  
		  IF (PARAM_TYPE IN (4,5)) THEN
			  SET SELECT_NAME='CAST(OP.VALUE_DATE AS CHAR(250))'; 
			  SET PARAM_SELECT_NAME='OP.VALUE_DATE'; 
			END IF;
      
		  IF (PARAM_TYPE IN (6,7,8)) THEN
			  SET SELECT_NAME='CONVERT(OP.VALUE_BLOB USING CP1251)'; 
			  SET PARAM_SELECT_NAME=SELECT_NAME; 
			END IF;

      SET COLUMN_NAME=CONCAT('C_',CAST(COUNTER AS CHAR));
      
      SET PARAM_COLUMN_NAME=CONCAT('P_',CAST(COUNTER AS CHAR),'_',CAST(REAL_COUNT AS CHAR));
      
		  SET FIELD_NAME=CONCAT('IFNULL(MIN(IF(OP.PARAM_ID=''',
		                        PARAM_ID,
				  									''',CONCAT(''',
					  								IFNULL(CP_STRING_BEFORE,''),
						  							''',',
														SELECT_NAME,
														',''',
							  						IFNULL(CP_STRING_AFTER,''),
								  					'''),NULL)),CONCAT(''',
														IF(CP_USE_STRING_BEFORE=1,IFNULL(CP_STRING_BEFORE,''),''),
														''',''',
														IF(CP_USE_STRING_AFTER=1,IFNULL(CP_STRING_AFTER,''),''),
														'''))');
                            
      SET PARAM_FIELD_NAME=CONCAT('MIN(IF(OP.PARAM_ID=''',
		                              PARAM_ID,
				  									      ''',',
														      PARAM_SELECT_NAME,
														      ',NULL))');
		
		  IF (REAL_COUNT=PARAM_COUNT) THEN
    		IF (PARAM_COUNT=1) THEN
	    	  SET NEW_QUERY=FIELD_NAME;
          SET PARAM_NEW_QUERY=CONCAT(PARAM_FIELD_NAME,' AS ''',PARAM_COLUMN_NAME,'''');
 		    ELSE	
  	      SET NEW_QUERY=CONCAT(NEW_QUERY,',',FIELD_NAME,')');
          SET PARAM_NEW_QUERY=CONCAT(PARAM_NEW_QUERY,',',PARAM_FIELD_NAME,' AS ''',PARAM_COLUMN_NAME,'''');
	  	  END IF;
        
        SET @QUERY=CONCAT(@QUERY,',CAST(',NEW_QUERY,' AS CHAR(250)) AS ''',COLUMN_NAME,''''); 
        SET @QUERY=CONCAT(@QUERY,',',PARAM_NEW_QUERY);
          
        SET NEW_QUERY='';
        SET PARAM_NEW_QUERY='';
		  ELSE
		    IF (REAL_COUNT=1) THEN
			    SET NEW_QUERY=CONCAT('CONCAT(',FIELD_NAME);
          SET PARAM_NEW_QUERY=CONCAT(PARAM_FIELD_NAME,' AS ''',PARAM_COLUMN_NAME,'''');
			  ELSE	
  			  SET NEW_QUERY=CONCAT(NEW_QUERY,',',FIELD_NAME);
          SET PARAM_NEW_QUERY=CONCAT(PARAM_NEW_QUERY,',',PARAM_FIELD_NAME,' AS ''',PARAM_COLUMN_NAME,'''');
			  END IF;
		  END IF;

		  IF TRIM(PARAM_IDS)='' THEN
  		  SET PARAM_IDS=CONCAT('''',PARAM_ID,''''); 
		  ELSE
  		  SET PARAM_IDS=CONCAT(PARAM_IDS,',',CONCAT('''',PARAM_ID,'''')); 
		  END IF;
		
  		SET OLD_COLUMN_ID=COLUMN_ID;
		
      FETCH C1 INTO COLUMN_ID,PARAM_ID,PARAM_TYPE,MAX_LENGTH,
			              CP_STRING_BEFORE,CP_STRING_AFTER,CP_USE_STRING_BEFORE,CP_USE_STRING_AFTER,
			              PUBLISHING_ID,VIEW_ID,TYPE_ID,OPERATION_ID,CONDITIONS,SORTING,PRESENTATION_TYPE,PARAM_COUNT;
    END WHILE;
    CLOSE C1;		 
	  SET @QUERY=CONCAT(@QUERY,' FROM OBJECT_PARAMS OP ');
	  SET @QUERY=CONCAT(@QUERY,'JOIN OBJECTS O ON O.OBJECT_ID=OP.OBJECT_ID ');
		SET @QUERY=CONCAT(@QUERY,'JOIN ACCOUNTS A ON A.ACCOUNT_ID=O.ACCOUNT_ID ');
		SET @QUERY=CONCAT(@QUERY,'JOIN PUBLISHING_OBJECTS PO ON PO.OBJECT_ID=OP.OBJECT_ID ');
		SET @QUERY=CONCAT(@QUERY,'JOIN PUBLISHING P ON P.PUBLISHING_ID=PO.PUBLISHING_ID ');
		SET @QUERY=CONCAT(@QUERY,'JOIN VIEWS V ON V.VIEW_ID=O.VIEW_ID ');
		SET @QUERY=CONCAT(@QUERY,'JOIN TYPES T ON T.TYPE_ID=O.TYPE_ID ');
		SET @QUERY=CONCAT(@QUERY,'JOIN OPERATIONS OT ON OT.OPERATION_ID=O.OPERATION_ID ');
    SET @QUERY=CONCAT(@QUERY,'LEFT JOIN DESIGNS D ON D.DESIGN_ID=O.DESIGN_ID ');
		
	  IF TRIM(PARAM_IDS)<>'' THEN
  	  SET @QUERY=CONCAT(@QUERY,'WHERE OP.PARAM_ID IN (',PARAM_IDS,') ');
		  SET @QUERY=CONCAT(@QUERY,'AND OP.DATE_CREATE=(SELECT MAX(DATE_CREATE) FROM OBJECT_PARAMS WHERE PARAM_ID=OP.PARAM_ID AND OBJECT_ID=O.OBJECT_ID) ');
			IF PUBLISHING_ID IS NOT NULL THEN
  	    SET @QUERY=CONCAT(@QUERY,'AND PO.PUBLISHING_ID=''',PUBLISHING_ID,''' ');
			END IF;
			IF VIEW_ID IS NOT NULL THEN
    	  SET @QUERY=CONCAT(@QUERY,'AND O.VIEW_ID=''',VIEW_ID,''' ');
			END IF;
			IF TYPE_ID IS NOT NULL THEN
    	  SET @QUERY=CONCAT(@QUERY,'AND O.TYPE_ID=''',TYPE_ID,''' ');
			END IF;
			IF OPERATION_ID IS NOT NULL THEN
     	  SET @QUERY=CONCAT(@QUERY,'AND O.OPERATION_ID=''',OPERATION_ID,''' ');
			END IF;
  	  SET @QUERY=CONCAT(@QUERY,'AND PO.DATE_BEGIN>=DATE_ADD(CURRENT_TIMESTAMP,INTERVAL -1 MONTH) ');
  	  SET @QUERY=CONCAT(@QUERY,'AND (PO.DATE_END IS NULL OR PO.DATE_END>=CURRENT_TIMESTAMP) ');
  	  SET @QUERY=CONCAT(@QUERY,'AND O.STATUS IN (0,1) ');
		  SET @QUERY=CONCAT(@QUERY,'GROUP BY OP.OBJECT_ID, PO.PUBLISHING_ID ');
      SET @QUERY=CONCAT(@QUERY,'ORDER BY PO.DATE_BEGIN DESC) T ');
			IF (TRIM(CONVERT(CONDITIONS USING cp1251))<>'') THEN
    	  SET @QUERY=CONCAT(@QUERY,'WHERE ',CONVERT(CONDITIONS USING cp1251),' ');
			END IF;
			IF TRIM(SORTING)<>'' THEN 
        SET @QUERY=CONCAT(@QUERY,'ORDER BY ',SORTING);
			END IF;
			
  	  PREPARE STMT FROM @QUERY;
      EXECUTE STMT;
      DEALLOCATE PREPARE STMT; 
      SET @QUERY=CONCAT('ALTER TABLE ',ATABLE,' ADD PRIMARY KEY (OBJECT_ID,PUBLISHING_ID)');
  		PREPARE STMT FROM @QUERY;
      EXECUTE STMT;
      DEALLOCATE PREPARE STMT; 
      SET @QUERY=CONCAT('ALTER TABLE ',ATABLE,' ENGINE = MEMORY');
  		PREPARE STMT FROM @QUERY;
      EXECUTE STMT;
      DEALLOCATE PREPARE STMT;       
		
	  END IF;	
  END IF;		
END;


