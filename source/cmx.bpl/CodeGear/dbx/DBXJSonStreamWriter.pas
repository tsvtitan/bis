// DO NOT EDIT THIS FILE - WARNING WARNING - Generated file
unit DBXJSonStreamWriter;
interface
uses
  DBXChannel,
  DBXCommon,
  DBXErrorHandler,
  DBXPlatformUtil,
  DBXTraceHandler,
  SysUtils;
type
  TDBXJSonStreamWriter = class
  public
    procedure WriteConnectObjectStart; virtual;
    procedure WriteHandleObject(Handle: Integer); virtual;
    procedure WriteDisconnectObject(ConnectionHandle: Integer); virtual;
    procedure WriteTxBegin(Isolation: Integer); virtual;
    procedure WriteTxEnd(Commit: Boolean; Txid: Integer); virtual;
    procedure WriteMoreBlobObject(Handle: Integer; Id: Integer; Row: Int64; Ordinal: Integer; IsOutParameter: Boolean); virtual;
    procedure WriteMoreBlobResultObject(Handle: Integer; Id: Integer; Row: Int64; Ordinal: Integer); virtual;
    procedure WriteCommandCloseObject(CommandHandle: Integer); virtual;
    procedure WriteReaderCloseObject(ReaderHandle: Integer); virtual;
    procedure WriteTableObjectStart; virtual;
    procedure WriteColumnsObjectStart; virtual;
    procedure WriteParameterMetadataStart; virtual;
    procedure WritePrepareObject(CommandHandle: Integer; Updateable: Boolean; CommandType: WideString; Command: WideString); virtual;
    procedure WriteExecuteStart; virtual;
    procedure WriteExecuteFieldsObject(CommandHandle: Integer; Updateable: Boolean; CommandType: WideString; Command: WideString); virtual;
    procedure WriteParametersObjectStart(Count: Integer); virtual;
    procedure WriteParameter(DataType: Integer; SubType: Integer; ParameterDirection: Integer; Precision: Integer; Scale: Integer; Name: WideString; ChildPosition: Integer; Size: Integer); virtual;
    procedure WriteFieldsObjectStart; virtual;
    procedure WriteExecute(CommandHandle: Integer); virtual;
    procedure WriteResultVoidObject; virtual;
    procedure WriteResultObjectStart; virtual;
    procedure WriteSessionObjectStart; virtual;
    procedure WriteRowsObjectStart; virtual;
    procedure WriteDataObjectStart; virtual;
    procedure WriteDataObject(Data: TBytes; Count: Integer); overload; virtual;
    procedure WriteDataObject(Reader: TDBXStreamReader); overload; virtual;
    procedure WriteNextObject(Handle: Integer; Position: Int64); virtual;
    procedure WriteNextResultObject(Handle: Integer); virtual;
    procedure WriteVendorProperty(PropertyName: WideString); virtual;
    procedure WriteResultEnd; virtual;
    procedure WriteResultObject(Value: Int64); virtual;
    procedure WriteRpcError(Name: WideString; ErrorCode: Integer; Message: WideString; NameValuePairs: TDBXWideStringArray); virtual;
    procedure WriteNamedString(Name: WideString; Value: WideString);
    procedure WriteObjectStart; virtual;
    procedure WriteObjectEnd; virtual;
    procedure WriteArrayStart; virtual;
    procedure WriteArrayEnd; virtual;
    procedure WriteParamsStart; virtual;
    procedure WriteValueSeparator; virtual;
    procedure WriteNameSeparator; virtual;
    procedure WriteDataBytes(SourceBytes: TBytes; SourceOffset: Integer; Count: Integer); virtual;
    procedure WriteString(Chars: WideString);
    procedure Flush; virtual;
    procedure FlushFullBuffer; virtual;
    procedure WriteInt(Data: Integer); virtual;
    procedure WriteByte(Data: Byte); virtual;
    procedure WriteSpace;
    procedure WriteShort(Data: SmallInt); virtual;
    procedure WriteLong(Data: Int64); virtual;
    procedure WriteFloat(Data: Single); virtual;
    procedure WriteDouble(Data: Double); virtual;
    procedure WriteBoolean(Data: Boolean); virtual;
    procedure WriteNull; virtual;
    procedure WriteSignature; virtual;
    procedure Open; virtual;
    procedure Close; virtual;
    procedure Skip(Count: Integer);
    destructor Destroy; override;
  protected
    function IsClosed: Boolean; virtual;
    procedure CreateBuffers; virtual;
    function GetTheTraceHandler: TDBXTraceHandler; virtual;
    procedure SetTheTraceHandler(TraceHandler: TDBXTraceHandler); virtual;
  private
    procedure WriteCommandFields(CommandHandle: Integer; Updateable: Boolean; CommandType: WideString; Command: WideString);
    procedure WriteBytes(Bytes: TBytes);
  public
    class var ProtocolVersion2: Integer;
    class var ProtocolVersion: Integer;
  protected
    FErrorHandler: TDBXErrorHandler;
    FTraceHandler: TDBXTraceHandler;
    FWriteBufferSize: Integer;
    FWriteBuffer: TBytes;
    FDecimalBuffer: TBytes;
    FWriteBufferPosition: Integer;
    FWriteCount: Integer;
    FChannel: TDBXChannel;
  private
    class var Hex: TBytes;
    class var MethodStart: TBytes;
    class var ParamsStart: TBytes;
    class var Connect: TBytes;
    class var Disconnect: TBytes;
    class var Prepare: TBytes;
    class var Parameters: TBytes;
    class var ParameterMetadataStart: TBytes;
    class var Execute: TBytes;
    class var CommandClose: TBytes;
    class var ReaderClose: TBytes;
    class var ResultStart: TBytes;
    class var ErrorStart: TBytes;
    class var CodeLabel: TBytes;
    class var MessageLabel: TBytes;
    class var NullValue: TBytes;
    class var TrueValue: TBytes;
    class var FalseValue: TBytes;
    class var ColumnsStart: TBytes;
    class var TableStart: TBytes;
    class var SessionStart: TBytes;
    class var RowsStart: TBytes;
    class var DataStart: TBytes;
    class var Next: TBytes;
    class var HandleStart: TBytes;
    class var FieldsStart: TBytes;
    class var Txbegin: TBytes;
    class var Txend: TBytes;
    class var MoreBlob: TBytes;
    class var MoreBlobStart: TBytes;
    class var NextResult: TBytes;
    class var VendorProperty: TBytes;
  public
    property Closed: Boolean read IsClosed;
    property DbxChannel: TDBXChannel write FChannel;
    property TheWriteBufferSize: Integer write FWriteBufferSize;
    property WriteBufferSize: Integer read FWriteBufferSize;
    property TheErrorHandler: TDBXErrorHandler write FErrorHandler;
    property ErrorHandler: TDBXErrorHandler read FErrorHandler;
    property TheTraceHandler: TDBXTraceHandler read GetTheTraceHandler write SetTheTraceHandler;
    property Buffer: TBytes read FWriteBuffer;
    property BufferPosition: Integer read FWriteBufferPosition;
  end;

implementation
uses
  DBXPlatform;

//  private static byte[] COMMAND_CREATE;
//    COMMAND_CREATE = new byte[]{(byte)'"', (byte)'c', (byte)'o', (byte)'m', (byte)'m', (byte)'a', (byte)'n', (byte)'d', (byte)'_', (byte)'c', (byte)'r', (byte)'e', (byte)'a', (byte)'t', (byte)'e',  (byte)'"', (byte)','};
procedure TDBXJSonStreamWriter.WriteConnectObjectStart;
begin
  WriteBytes(MethodStart);
  WriteBytes(Connect);
end;

procedure TDBXJSonStreamWriter.WriteHandleObject(Handle: Integer);
begin
  WriteBytes(HandleStart);
  WriteInt(Handle);
  WriteArrayEnd;
  WriteObjectEnd;
end;

procedure TDBXJSonStreamWriter.WriteDisconnectObject(ConnectionHandle: Integer);
begin
  WriteBytes(MethodStart);
  WriteBytes(Disconnect);
  WriteParamsStart;
  WriteInt(ConnectionHandle);
  WriteArrayEnd;
  WriteObjectEnd;
  Flush;
end;

procedure TDBXJSonStreamWriter.WriteTxBegin(Isolation: Integer);
begin
  WriteBytes(MethodStart);
  WriteBytes(Txbegin);
  WriteParamsStart;
  WriteInt(Isolation);
  WriteArrayEnd;
  WriteObjectEnd;
  Flush;
end;

procedure TDBXJSonStreamWriter.WriteTxEnd(Commit: Boolean; Txid: Integer);
begin
  WriteBytes(MethodStart);
  WriteBytes(Txend);
  WriteParamsStart;
  WriteBoolean(Commit);
  WriteValueSeparator;
  WriteInt(Txid);
  WriteArrayEnd;
  WriteObjectEnd;
  Flush;
end;

procedure TDBXJSonStreamWriter.WriteMoreBlobObject(Handle: Integer; Id: Integer; Row: Int64; Ordinal: Integer; IsOutParameter: Boolean);
begin
  WriteBytes(MethodStart);
  WriteBytes(MoreBlob);
  WriteParamsStart;
  WriteInt(Handle);
  WriteValueSeparator;
  WriteInt(Id);
  WriteValueSeparator;
  WriteLong(Row);
  WriteValueSeparator;
  WriteInt(Ordinal);
  WriteValueSeparator;
  WriteBoolean(IsOutParameter);
  WriteArrayEnd;
  WriteObjectEnd;
  Flush;
end;

procedure TDBXJSonStreamWriter.WriteMoreBlobResultObject(Handle: Integer; Id: Integer; Row: Int64; Ordinal: Integer);
begin
  WriteObjectStart;
  WriteBytes(MoreBlobStart);
  WriteInt(Handle);
  WriteValueSeparator;
  WriteInt(Id);
  WriteValueSeparator;
  WriteLong(Row);
  WriteValueSeparator;
  WriteInt(Ordinal);
  WriteArrayEnd;
  WriteObjectEnd;
  Flush;
end;

procedure TDBXJSonStreamWriter.WriteCommandCloseObject(CommandHandle: Integer);
begin
  WriteBytes(MethodStart);
  WriteBytes(CommandClose);
  WriteParamsStart;
  WriteInt(CommandHandle);
  WriteArrayEnd;
  WriteObjectEnd;
  Flush;
end;

procedure TDBXJSonStreamWriter.WriteReaderCloseObject(ReaderHandle: Integer);
begin
  WriteBytes(MethodStart);
  WriteBytes(ReaderClose);
  WriteParamsStart;
  WriteInt(ReaderHandle);
  WriteArrayEnd;
  WriteObjectEnd;
end;

procedure TDBXJSonStreamWriter.WriteTableObjectStart;
begin
  WriteBytes(TableStart);
end;

procedure TDBXJSonStreamWriter.WriteColumnsObjectStart;
begin
  WriteBytes(ColumnsStart);
end;

procedure TDBXJSonStreamWriter.WriteParameterMetadataStart;
begin
  WriteBytes(ParameterMetadataStart);
end;

procedure TDBXJSonStreamWriter.WriteCommandFields(CommandHandle: Integer; Updateable: Boolean; CommandType: WideString; Command: WideString);
begin
  WriteInt(CommandHandle);
  WriteValueSeparator;
  WriteBoolean(Updateable);
  WriteValueSeparator;
  WriteString(CommandType);
  WriteValueSeparator;
  WriteString(Command);
end;

procedure TDBXJSonStreamWriter.WritePrepareObject(CommandHandle: Integer; Updateable: Boolean; CommandType: WideString; Command: WideString);
begin
  WriteBytes(MethodStart);
  WriteBytes(Prepare);
  WriteParamsStart;
  WriteCommandFields(CommandHandle, Updateable, CommandType, Command);
  WriteArrayEnd;
  WriteObjectEnd;
end;

procedure TDBXJSonStreamWriter.WriteExecuteStart;
begin
  WriteBytes(MethodStart);
  WriteBytes(Execute);
  WriteParamsStart;
end;

procedure TDBXJSonStreamWriter.WriteExecuteFieldsObject(CommandHandle: Integer; Updateable: Boolean; CommandType: WideString; Command: WideString);
begin
  WriteBytes(FieldsStart);
  WriteCommandFields(CommandHandle, Updateable, CommandType, Command);
  WriteArrayEnd;
  WriteObjectEnd;
end;

procedure TDBXJSonStreamWriter.WriteParametersObjectStart(Count: Integer);
begin
  WriteBytes(Parameters);
  WriteInt(Count);
end;

procedure TDBXJSonStreamWriter.WriteParameter(DataType: Integer; SubType: Integer; ParameterDirection: Integer; Precision: Integer; Scale: Integer; Name: WideString; ChildPosition: Integer; Size: Integer);
begin
  WriteValueSeparator;
  WriteArrayStart;
  WriteInt(DataType);
  WriteValueSeparator;
  WriteInt(SubType);
  WriteValueSeparator;
  WriteInt(ParameterDirection);
  WriteValueSeparator;
  WriteLong(Precision);
  WriteValueSeparator;
  WriteInt(Scale);
  WriteValueSeparator;
  WriteString(Name);
  WriteValueSeparator;
  WriteInt(ChildPosition);
  WriteValueSeparator;
  WriteInt(Size);
  WriteArrayEnd;
end;

procedure TDBXJSonStreamWriter.WriteFieldsObjectStart;
begin
  WriteBytes(FieldsStart);
end;

procedure TDBXJSonStreamWriter.WriteExecute(CommandHandle: Integer);
begin
  WriteBytes(MethodStart);
  WriteBytes(Execute);
  WriteParamsStart;
  WriteInt(CommandHandle);
  WriteArrayEnd;
  WriteObjectEnd;
  Flush;
end;

procedure TDBXJSonStreamWriter.WriteResultVoidObject;
begin
  WriteBytes(ResultStart);
  if Incr(FWriteBufferPosition) = FWriteBufferSize then
    FlushFullBuffer;
  FWriteBuffer[FWriteBufferPosition] := Ord(']');
  if Incr(FWriteBufferPosition) = FWriteBufferSize then
    FlushFullBuffer;
  FWriteBuffer[FWriteBufferPosition] := Ord('}');
  Flush;
end;

procedure TDBXJSonStreamWriter.WriteResultObjectStart;
begin
  WriteBytes(ResultStart);
end;

procedure TDBXJSonStreamWriter.WriteSessionObjectStart;
begin
  WriteBytes(SessionStart);
end;

procedure TDBXJSonStreamWriter.WriteRowsObjectStart;
begin
  WriteBytes(RowsStart);
end;

procedure TDBXJSonStreamWriter.WriteDataObjectStart;
begin
  WriteBytes(DataStart);
end;

procedure TDBXJSonStreamWriter.WriteDataObject(Data: TBytes; Count: Integer);
begin
  WriteBytes(DataStart);
  WriteInt(Count);
  WriteValueSeparator;
  WriteDataBytes(Data, 0, Count);
  WriteArrayEnd;
  WriteObjectEnd;
end;

procedure TDBXJSonStreamWriter.WriteDataObject(Reader: TDBXStreamReader);
var
  GapSize: Integer;
  ReadBytes: Integer;
  MaxBytes: Integer;
  SeparatorPosition: Integer;
  DataPosition: Integer;
begin
  WriteBytes(DataStart);
  GapSize := 9 + 1;
  SeparatorPosition := FWriteBufferPosition + GapSize;
  DataPosition := SeparatorPosition + 1;
  MaxBytes := FWriteBufferSize - (DataPosition) - 2;
  ReadBytes := Reader.Read(FWriteBuffer, DataPosition, MaxBytes);
  if ReadBytes < MaxBytes then
    WriteInt(-ReadBytes)
  else 
    WriteInt(ReadBytes);
  while FWriteBufferPosition < (SeparatorPosition - 1) do
    WriteSpace;
  WriteValueSeparator;
  FWriteBufferPosition := FWriteBufferPosition + ReadBytes;
  ;
  WriteArrayEnd;
  WriteObjectEnd;
  Flush;
end;

procedure TDBXJSonStreamWriter.WriteNextObject(Handle: Integer; Position: Int64);
begin
  WriteBytes(MethodStart);
  WriteBytes(Next);
  WriteParamsStart;
  WriteInt(Handle);
  WriteValueSeparator;
  WriteLong(Position);
  WriteArrayEnd;
  WriteObjectEnd;
end;

procedure TDBXJSonStreamWriter.WriteNextResultObject(Handle: Integer);
begin
  WriteBytes(MethodStart);
  WriteBytes(NextResult);
  WriteParamsStart;
  WriteInt(Handle);
  WriteArrayEnd;
  WriteObjectEnd;
end;

procedure TDBXJSonStreamWriter.WriteVendorProperty(PropertyName: WideString);
begin
  WriteBytes(MethodStart);
  WriteBytes(VendorProperty);
  WriteParamsStart;
  WriteString(PropertyName);
  WriteArrayEnd;
  WriteObjectEnd;
  Flush;
end;

procedure TDBXJSonStreamWriter.WriteResultEnd;
begin
  if Incr(FWriteBufferPosition) = FWriteBufferSize then
    FlushFullBuffer;
  FWriteBuffer[FWriteBufferPosition] := Ord('}');
end;

procedure TDBXJSonStreamWriter.WriteResultObject(Value: Int64);
begin
  WriteBytes(ResultStart);
  WriteLong(Value);
  if Incr(FWriteBufferPosition) = FWriteBufferSize then
    FlushFullBuffer;
  FWriteBuffer[FWriteBufferPosition] := Ord(']');
  if Incr(FWriteBufferPosition) = FWriteBufferSize then
    FlushFullBuffer;
  FWriteBuffer[FWriteBufferPosition] := Ord('}');
  Flush;
end;

procedure TDBXJSonStreamWriter.WriteRpcError(Name: WideString; ErrorCode: Integer; Message: WideString; NameValuePairs: TDBXWideStringArray);
begin
  WriteBytes(ErrorStart);
  WriteString(Name);
  WriteValueSeparator;
  WriteBytes(CodeLabel);
  WriteInt(ErrorCode);
  WriteValueSeparator;
  WriteBytes(MessageLabel);
  WriteString(Message);
  if Length(NameValuePairs) > 0 then
  begin
    WriteValueSeparator;
    WriteString('error');
    WriteNameSeparator;
    WriteObjectStart;
    WriteObjectEnd;
  end;
  WriteObjectEnd;
end;

procedure TDBXJSonStreamWriter.WriteNamedString(Name: WideString; Value: WideString);
begin
  WriteString(Name);
  WriteNameSeparator;
  WriteString(Value);
end;

procedure TDBXJSonStreamWriter.WriteObjectStart;
begin
  if Incr(FWriteBufferPosition) = FWriteBufferSize then
    FlushFullBuffer;
  FWriteBuffer[FWriteBufferPosition] := Ord('{');
end;

procedure TDBXJSonStreamWriter.WriteObjectEnd;
begin
  if Incr(FWriteBufferPosition) = FWriteBufferSize then
    FlushFullBuffer;
  FWriteBuffer[FWriteBufferPosition] := Ord('}');
end;

procedure TDBXJSonStreamWriter.WriteArrayStart;
begin
  if Incr(FWriteBufferPosition) = FWriteBufferSize then
    FlushFullBuffer;
  FWriteBuffer[FWriteBufferPosition] := Ord('[');
end;

procedure TDBXJSonStreamWriter.WriteArrayEnd;
begin
  if Incr(FWriteBufferPosition) = FWriteBufferSize then
    FlushFullBuffer;
  FWriteBuffer[FWriteBufferPosition] := Ord(']');
end;

procedure TDBXJSonStreamWriter.WriteParamsStart;
begin
  WriteBytes(ParamsStart);
end;

procedure TDBXJSonStreamWriter.WriteValueSeparator;
begin
  if Incr(FWriteBufferPosition) = FWriteBufferSize then
    FlushFullBuffer;
  FWriteBuffer[FWriteBufferPosition] := Ord(',');
end;

procedure TDBXJSonStreamWriter.WriteNameSeparator;
begin
  if Incr(FWriteBufferPosition) = FWriteBufferSize then
    FlushFullBuffer;
  FWriteBuffer[FWriteBufferPosition] := Ord(':');
end;

procedure TDBXJSonStreamWriter.WriteBytes(Bytes: TBytes);
var
  Index: Integer;
  Count: Integer;
begin
  Count := Length(Bytes);
  Index := -1;
  while Incr(Index) < Count do
  begin
    if Incr(FWriteBufferPosition) = FWriteBufferSize then
      FlushFullBuffer;
    FWriteBuffer[FWriteBufferPosition] := Bytes[Index];
  end;
end;

procedure TDBXJSonStreamWriter.WriteDataBytes(SourceBytes: TBytes; SourceOffset: Integer; Count: Integer);
var
  Available: Integer;
begin
  while Count > 0 do
  begin
    Available := FWriteBufferSize - (FWriteBufferPosition + 1);
    if Available < 1 then
      Flush;
    if Available > Count then
      FWriteCount := Count
    else 
      FWriteCount := Available;
    TDBXPlatform.CopyByteArray(SourceBytes, SourceOffset, FWriteBuffer, FWriteBufferPosition + 1, FWriteCount);
    Count := Count - FWriteCount;
    SourceOffset := SourceOffset + FWriteCount;
    FWriteBufferPosition := FWriteBufferPosition + FWriteCount;
  end;
end;

procedure TDBXJSonStreamWriter.WriteString(Chars: WideString);
var
  Index: Integer;
  Count: Integer;
  CurrentChar: WideChar;
  UnicodeValue: Integer;
begin
  Count := Length(Chars);
  Index := 0;
  if Incr(FWriteBufferPosition) = FWriteBufferSize then
    FlushFullBuffer;
  FWriteBuffer[FWriteBufferPosition] := Ord('"');
  while Index < Count do
  begin
    if Incr(FWriteBufferPosition) = FWriteBufferSize then
      FlushFullBuffer;
    CurrentChar := Chars[1+Index];
    case CurrentChar of
      '"':
        begin
          FWriteBuffer[FWriteBufferPosition] := Ord('\');
          if Incr(FWriteBufferPosition) = FWriteBufferSize then
            FlushFullBuffer;
          FWriteBuffer[FWriteBufferPosition] := Ord(CurrentChar);
        end;
      '\':
        begin
          FWriteBuffer[FWriteBufferPosition] := Ord(CurrentChar);
          if Incr(FWriteBufferPosition) = FWriteBufferSize then
            FlushFullBuffer;
          FWriteBuffer[FWriteBufferPosition] := Ord(CurrentChar);
        end;
      #$8:
        begin
          FWriteBuffer[FWriteBufferPosition] := Ord('\');
          if Incr(FWriteBufferPosition) = FWriteBufferSize then
            FlushFullBuffer;
          FWriteBuffer[FWriteBufferPosition] := Ord('b');
        end;
      #$c:
        begin
          FWriteBuffer[FWriteBufferPosition] := Ord('\');
          if Incr(FWriteBufferPosition) = FWriteBufferSize then
            FlushFullBuffer;
          FWriteBuffer[FWriteBufferPosition] := Ord('f');
        end;
      #$a:
        begin
          FWriteBuffer[FWriteBufferPosition] := Ord('\');
          if Incr(FWriteBufferPosition) = FWriteBufferSize then
            FlushFullBuffer;
          FWriteBuffer[FWriteBufferPosition] := Ord('n');
        end;
      #$d:
        begin
          FWriteBuffer[FWriteBufferPosition] := Ord('\');
          if Incr(FWriteBufferPosition) = FWriteBufferSize then
            FlushFullBuffer;
          FWriteBuffer[FWriteBufferPosition] := Ord('r');
        end;
      #$9:
        begin
          FWriteBuffer[FWriteBufferPosition] := Ord('\');
          if Incr(FWriteBufferPosition) = FWriteBufferSize then
            FlushFullBuffer;
          FWriteBuffer[FWriteBufferPosition] := Ord('t');
        end;
      else
        if (CurrentChar < WideChar(32)) or (CurrentChar > WideChar(255)) then
        begin
          FWriteBuffer[FWriteBufferPosition] := Ord('\');
          if Incr(FWriteBufferPosition) = FWriteBufferSize then
            FlushFullBuffer;
          FWriteBuffer[FWriteBufferPosition] := Ord('u');
          if Incr(FWriteBufferPosition) = FWriteBufferSize then
            FlushFullBuffer;
          UnicodeValue := Ord(CurrentChar);
          FWriteBuffer[FWriteBufferPosition] := Hex[(UnicodeValue and 61440) shr 12];
          if Incr(FWriteBufferPosition) = FWriteBufferSize then
            FlushFullBuffer;
          FWriteBuffer[FWriteBufferPosition] := Hex[(UnicodeValue and 3840) shr 8];
          if Incr(FWriteBufferPosition) = FWriteBufferSize then
            FlushFullBuffer;
          FWriteBuffer[FWriteBufferPosition] := Hex[(UnicodeValue and 240) shr 4];
          if Incr(FWriteBufferPosition) = FWriteBufferSize then
            FlushFullBuffer;
          FWriteBuffer[FWriteBufferPosition] := Hex[(UnicodeValue and 15)];
        end
        else 
          FWriteBuffer[FWriteBufferPosition] := Ord(CurrentChar);
    end;
    Incr(Index);
  end;
  if Incr(FWriteBufferPosition) = FWriteBufferSize then
    FlushFullBuffer;
  FWriteBuffer[FWriteBufferPosition] := Ord('"');
end;

procedure TDBXJSonStreamWriter.Flush;
begin
  FChannel.Write(FWriteBuffer, 0, FWriteBufferPosition + 1);
  FWriteBufferPosition := -1;
end;

procedure TDBXJSonStreamWriter.FlushFullBuffer;
begin
  FChannel.Write(FWriteBuffer, 0, FWriteBufferPosition);
  FWriteBufferPosition := 0;
end;

procedure TDBXJSonStreamWriter.WriteInt(Data: Integer);
var
  LocalDecimalBuffer: TBytes;
  DecimalBufferLength: Integer;
  DecimalPosition: Integer;
begin
  LocalDecimalBuffer := FDecimalBuffer;
  DecimalBufferLength := Length(LocalDecimalBuffer);
  DecimalPosition := DecimalBufferLength;
  if Data < 0 then
  begin
    if Incr(FWriteBufferPosition) = FWriteBufferSize then
      FlushFullBuffer;
    FWriteBuffer[FWriteBufferPosition] := Ord('-');
    Data := -Data;
  end;
  if Data < 10 then
  begin
    if Incr(FWriteBufferPosition) = FWriteBufferSize then
      FlushFullBuffer;
    FWriteBuffer[FWriteBufferPosition] := Byte((Ord('0') + Byte(Data)));
    begin
      
      exit;
    end;
  end;
  while Data <> 0 do
  begin
    LocalDecimalBuffer[Decr(DecimalPosition)] := Byte((Ord('0') + Byte((Data mod 10))));
    Data := Data div 10;
  end;
  Decr(DecimalPosition);
  while Incr(DecimalPosition) < DecimalBufferLength do
  begin
    if Incr(FWriteBufferPosition) = FWriteBufferSize then
      FlushFullBuffer;
    FWriteBuffer[FWriteBufferPosition] := LocalDecimalBuffer[DecimalPosition];
  end;
end;

procedure TDBXJSonStreamWriter.WriteByte(Data: Byte);
begin
  WriteInt(Data);
end;

procedure TDBXJSonStreamWriter.WriteSpace;
begin
  if Incr(FWriteBufferPosition) = FWriteBufferSize then
    FlushFullBuffer;
  FWriteBuffer[FWriteBufferPosition] := Ord(' ');
end;

procedure TDBXJSonStreamWriter.WriteShort(Data: SmallInt);
begin
  WriteInt(Data);
end;

procedure TDBXJSonStreamWriter.WriteLong(Data: Int64);
var
  LocalDecimalBuffer: TBytes;
  DecimalBufferLength: Integer;
  DecimalPosition: Integer;
begin
  LocalDecimalBuffer := FDecimalBuffer;
  DecimalBufferLength := Length(LocalDecimalBuffer);
  DecimalPosition := DecimalBufferLength;
  if Data < 0 then
  begin
    if Incr(FWriteBufferPosition) = FWriteBufferSize then
      FlushFullBuffer;
    FWriteBuffer[FWriteBufferPosition] := Ord('-');
    Data := -Data;
  end;
  if Data < 10 then
  begin
    if Incr(FWriteBufferPosition) = FWriteBufferSize then
      FlushFullBuffer;
    FWriteBuffer[FWriteBufferPosition] := Byte((Ord('0') + Byte(Data)));
    begin
      
      exit;
    end;
  end;
  while Data <> 0 do
  begin
    LocalDecimalBuffer[Decr(DecimalPosition)] := Byte((Ord('0') + Byte((Data mod 10))));
    Data := Data div 10;
  end;
  Decr(DecimalPosition);
  while Incr(DecimalPosition) < DecimalBufferLength do
  begin
    if Incr(FWriteBufferPosition) = FWriteBufferSize then
      FlushFullBuffer;
    FWriteBuffer[FWriteBufferPosition] := LocalDecimalBuffer[DecimalPosition];
  end;
end;

procedure TDBXJSonStreamWriter.WriteFloat(Data: Single);
begin
end;

procedure TDBXJSonStreamWriter.WriteDouble(Data: Double);
begin
end;

procedure TDBXJSonStreamWriter.WriteBoolean(Data: Boolean);
begin
  if Data then
    WriteBytes(TrueValue)
  else 
    WriteBytes(FalseValue);
end;

procedure TDBXJSonStreamWriter.WriteNull;
begin
  WriteBytes(NullValue);
end;

procedure TDBXJSonStreamWriter.WriteSignature;
begin
end;

procedure TDBXJSonStreamWriter.Open;
begin
  CreateBuffers;
end;

procedure TDBXJSonStreamWriter.Close;
begin
end;

function TDBXJSonStreamWriter.IsClosed: Boolean;
begin
  Result := False;
end;

procedure TDBXJSonStreamWriter.CreateBuffers;
begin
  FWriteBufferPosition := -1;
  if FWriteBufferSize = 0 then
    FWriteBufferSize := 1024 * 8;
  SetLength(FWriteBuffer,FWriteBufferSize);
  SetLength(FDecimalBuffer,20);
end;

function TDBXJSonStreamWriter.GetTheTraceHandler: TDBXTraceHandler;
begin
  Result := FTraceHandler;
end;

procedure TDBXJSonStreamWriter.SetTheTraceHandler(TraceHandler: TDBXTraceHandler);
begin
  self.FTraceHandler := TraceHandler;
end;

procedure TDBXJSonStreamWriter.Skip(Count: Integer);
begin
  FWriteBufferPosition := FWriteBufferPosition + Count;
end;

destructor TDBXJSonStreamWriter.Destroy;
begin
  FWriteBuffer := nil;
  FDecimalBuffer := nil;
  inherited Destroy;
end;

initialization
  SetLength(TDBXJSonStreamWriter.Hex,16);
  TDBXJSonStreamWriter.Hex[0] := Ord('0');
  TDBXJSonStreamWriter.Hex[1] := Ord('1');
  TDBXJSonStreamWriter.Hex[2] := Ord('2');
  TDBXJSonStreamWriter.Hex[3] := Ord('3');
  TDBXJSonStreamWriter.Hex[4] := Ord('4');
  TDBXJSonStreamWriter.Hex[5] := Ord('5');
  TDBXJSonStreamWriter.Hex[6] := Ord('6');
  TDBXJSonStreamWriter.Hex[7] := Ord('7');
  TDBXJSonStreamWriter.Hex[8] := Ord('8');
  TDBXJSonStreamWriter.Hex[9] := Ord('9');
  TDBXJSonStreamWriter.Hex[10] := Ord('A');
  TDBXJSonStreamWriter.Hex[11] := Ord('B');
  TDBXJSonStreamWriter.Hex[12] := Ord('C');
  TDBXJSonStreamWriter.Hex[13] := Ord('D');
  TDBXJSonStreamWriter.Hex[14] := Ord('E');
  TDBXJSonStreamWriter.Hex[15] := Ord('F');
  SetLength(TDBXJSonStreamWriter.MethodStart,10);
  TDBXJSonStreamWriter.MethodStart[0] := Ord('{');
  TDBXJSonStreamWriter.MethodStart[1] := Ord('"');
  TDBXJSonStreamWriter.MethodStart[2] := Ord('m');
  TDBXJSonStreamWriter.MethodStart[3] := Ord('e');
  TDBXJSonStreamWriter.MethodStart[4] := Ord('t');
  TDBXJSonStreamWriter.MethodStart[5] := Ord('h');
  TDBXJSonStreamWriter.MethodStart[6] := Ord('o');
  TDBXJSonStreamWriter.MethodStart[7] := Ord('d');
  TDBXJSonStreamWriter.MethodStart[8] := Ord('"');
  TDBXJSonStreamWriter.MethodStart[9] := Ord(':');
  SetLength(TDBXJSonStreamWriter.ParamsStart,10);
  TDBXJSonStreamWriter.ParamsStart[0] := Ord('"');
  TDBXJSonStreamWriter.ParamsStart[1] := Ord('p');
  TDBXJSonStreamWriter.ParamsStart[2] := Ord('a');
  TDBXJSonStreamWriter.ParamsStart[3] := Ord('r');
  TDBXJSonStreamWriter.ParamsStart[4] := Ord('a');
  TDBXJSonStreamWriter.ParamsStart[5] := Ord('m');
  TDBXJSonStreamWriter.ParamsStart[6] := Ord('s');
  TDBXJSonStreamWriter.ParamsStart[7] := Ord('"');
  TDBXJSonStreamWriter.ParamsStart[8] := Ord(':');
  TDBXJSonStreamWriter.ParamsStart[9] := Ord('[');
  SetLength(TDBXJSonStreamWriter.Connect,10);
  TDBXJSonStreamWriter.Connect[0] := Ord('"');
  TDBXJSonStreamWriter.Connect[1] := Ord('c');
  TDBXJSonStreamWriter.Connect[2] := Ord('o');
  TDBXJSonStreamWriter.Connect[3] := Ord('n');
  TDBXJSonStreamWriter.Connect[4] := Ord('n');
  TDBXJSonStreamWriter.Connect[5] := Ord('e');
  TDBXJSonStreamWriter.Connect[6] := Ord('c');
  TDBXJSonStreamWriter.Connect[7] := Ord('t');
  TDBXJSonStreamWriter.Connect[8] := Ord('"');
  TDBXJSonStreamWriter.Connect[9] := Ord(',');
  SetLength(TDBXJSonStreamWriter.Disconnect,13);
  TDBXJSonStreamWriter.Disconnect[0] := Ord('"');
  TDBXJSonStreamWriter.Disconnect[1] := Ord('d');
  TDBXJSonStreamWriter.Disconnect[2] := Ord('i');
  TDBXJSonStreamWriter.Disconnect[3] := Ord('s');
  TDBXJSonStreamWriter.Disconnect[4] := Ord('c');
  TDBXJSonStreamWriter.Disconnect[5] := Ord('o');
  TDBXJSonStreamWriter.Disconnect[6] := Ord('n');
  TDBXJSonStreamWriter.Disconnect[7] := Ord('n');
  TDBXJSonStreamWriter.Disconnect[8] := Ord('e');
  TDBXJSonStreamWriter.Disconnect[9] := Ord('c');
  TDBXJSonStreamWriter.Disconnect[10] := Ord('t');
  TDBXJSonStreamWriter.Disconnect[11] := Ord('"');
  TDBXJSonStreamWriter.Disconnect[12] := Ord(',');
  SetLength(TDBXJSonStreamWriter.Prepare,10);
  TDBXJSonStreamWriter.Prepare[0] := Ord('"');
  TDBXJSonStreamWriter.Prepare[1] := Ord('p');
  TDBXJSonStreamWriter.Prepare[2] := Ord('r');
  TDBXJSonStreamWriter.Prepare[3] := Ord('e');
  TDBXJSonStreamWriter.Prepare[4] := Ord('p');
  TDBXJSonStreamWriter.Prepare[5] := Ord('a');
  TDBXJSonStreamWriter.Prepare[6] := Ord('r');
  TDBXJSonStreamWriter.Prepare[7] := Ord('e');
  TDBXJSonStreamWriter.Prepare[8] := Ord('"');
  TDBXJSonStreamWriter.Prepare[9] := Ord(',');
  SetLength(TDBXJSonStreamWriter.Parameters,15);
  TDBXJSonStreamWriter.Parameters[0] := Ord('{');
  TDBXJSonStreamWriter.Parameters[1] := Ord('"');
  TDBXJSonStreamWriter.Parameters[2] := Ord('p');
  TDBXJSonStreamWriter.Parameters[3] := Ord('a');
  TDBXJSonStreamWriter.Parameters[4] := Ord('r');
  TDBXJSonStreamWriter.Parameters[5] := Ord('a');
  TDBXJSonStreamWriter.Parameters[6] := Ord('m');
  TDBXJSonStreamWriter.Parameters[7] := Ord('e');
  TDBXJSonStreamWriter.Parameters[8] := Ord('t');
  TDBXJSonStreamWriter.Parameters[9] := Ord('e');
  TDBXJSonStreamWriter.Parameters[10] := Ord('r');
  TDBXJSonStreamWriter.Parameters[11] := Ord('s');
  TDBXJSonStreamWriter.Parameters[12] := Ord('"');
  TDBXJSonStreamWriter.Parameters[13] := Ord(':');
  TDBXJSonStreamWriter.Parameters[14] := Ord('[');
  SetLength(TDBXJSonStreamWriter.Execute,10);
  TDBXJSonStreamWriter.Execute[0] := Ord('"');
  TDBXJSonStreamWriter.Execute[1] := Ord('e');
  TDBXJSonStreamWriter.Execute[2] := Ord('x');
  TDBXJSonStreamWriter.Execute[3] := Ord('e');
  TDBXJSonStreamWriter.Execute[4] := Ord('c');
  TDBXJSonStreamWriter.Execute[5] := Ord('u');
  TDBXJSonStreamWriter.Execute[6] := Ord('t');
  TDBXJSonStreamWriter.Execute[7] := Ord('e');
  TDBXJSonStreamWriter.Execute[8] := Ord('"');
  TDBXJSonStreamWriter.Execute[9] := Ord(',');
  SetLength(TDBXJSonStreamWriter.CommandClose,16);
  TDBXJSonStreamWriter.CommandClose[0] := Ord('"');
  TDBXJSonStreamWriter.CommandClose[1] := Ord('c');
  TDBXJSonStreamWriter.CommandClose[2] := Ord('o');
  TDBXJSonStreamWriter.CommandClose[3] := Ord('m');
  TDBXJSonStreamWriter.CommandClose[4] := Ord('m');
  TDBXJSonStreamWriter.CommandClose[5] := Ord('a');
  TDBXJSonStreamWriter.CommandClose[6] := Ord('n');
  TDBXJSonStreamWriter.CommandClose[7] := Ord('d');
  TDBXJSonStreamWriter.CommandClose[8] := Ord('_');
  TDBXJSonStreamWriter.CommandClose[9] := Ord('c');
  TDBXJSonStreamWriter.CommandClose[10] := Ord('l');
  TDBXJSonStreamWriter.CommandClose[11] := Ord('o');
  TDBXJSonStreamWriter.CommandClose[12] := Ord('s');
  TDBXJSonStreamWriter.CommandClose[13] := Ord('e');
  TDBXJSonStreamWriter.CommandClose[14] := Ord('"');
  TDBXJSonStreamWriter.CommandClose[15] := Ord(',');
  SetLength(TDBXJSonStreamWriter.ReaderClose,15);
  TDBXJSonStreamWriter.ReaderClose[0] := Ord('"');
  TDBXJSonStreamWriter.ReaderClose[1] := Ord('r');
  TDBXJSonStreamWriter.ReaderClose[2] := Ord('e');
  TDBXJSonStreamWriter.ReaderClose[3] := Ord('a');
  TDBXJSonStreamWriter.ReaderClose[4] := Ord('d');
  TDBXJSonStreamWriter.ReaderClose[5] := Ord('e');
  TDBXJSonStreamWriter.ReaderClose[6] := Ord('r');
  TDBXJSonStreamWriter.ReaderClose[7] := Ord('_');
  TDBXJSonStreamWriter.ReaderClose[8] := Ord('c');
  TDBXJSonStreamWriter.ReaderClose[9] := Ord('l');
  TDBXJSonStreamWriter.ReaderClose[10] := Ord('o');
  TDBXJSonStreamWriter.ReaderClose[11] := Ord('s');
  TDBXJSonStreamWriter.ReaderClose[12] := Ord('e');
  TDBXJSonStreamWriter.ReaderClose[13] := Ord('"');
  TDBXJSonStreamWriter.ReaderClose[14] := Ord(',');
  SetLength(TDBXJSonStreamWriter.ResultStart,11);
  TDBXJSonStreamWriter.ResultStart[0] := Ord('{');
  TDBXJSonStreamWriter.ResultStart[1] := Ord('"');
  TDBXJSonStreamWriter.ResultStart[2] := Ord('r');
  TDBXJSonStreamWriter.ResultStart[3] := Ord('e');
  TDBXJSonStreamWriter.ResultStart[4] := Ord('s');
  TDBXJSonStreamWriter.ResultStart[5] := Ord('u');
  TDBXJSonStreamWriter.ResultStart[6] := Ord('l');
  TDBXJSonStreamWriter.ResultStart[7] := Ord('t');
  TDBXJSonStreamWriter.ResultStart[8] := Ord('"');
  TDBXJSonStreamWriter.ResultStart[9] := Ord(':');
  TDBXJSonStreamWriter.ResultStart[10] := Ord('[');
  SetLength(TDBXJSonStreamWriter.ErrorStart,17);
  TDBXJSonStreamWriter.ErrorStart[0] := Ord('{');
  TDBXJSonStreamWriter.ErrorStart[1] := Ord('"');
  TDBXJSonStreamWriter.ErrorStart[2] := Ord('e');
  TDBXJSonStreamWriter.ErrorStart[3] := Ord('r');
  TDBXJSonStreamWriter.ErrorStart[4] := Ord('r');
  TDBXJSonStreamWriter.ErrorStart[5] := Ord('o');
  TDBXJSonStreamWriter.ErrorStart[6] := Ord('r');
  TDBXJSonStreamWriter.ErrorStart[7] := Ord('"');
  TDBXJSonStreamWriter.ErrorStart[8] := Ord(':');
  TDBXJSonStreamWriter.ErrorStart[9] := Ord('{');
  TDBXJSonStreamWriter.ErrorStart[10] := Ord('"');
  TDBXJSonStreamWriter.ErrorStart[11] := Ord('n');
  TDBXJSonStreamWriter.ErrorStart[12] := Ord('a');
  TDBXJSonStreamWriter.ErrorStart[13] := Ord('m');
  TDBXJSonStreamWriter.ErrorStart[14] := Ord('e');
  TDBXJSonStreamWriter.ErrorStart[15] := Ord('"');
  TDBXJSonStreamWriter.ErrorStart[16] := Ord(':');
  SetLength(TDBXJSonStreamWriter.CodeLabel,7);
  TDBXJSonStreamWriter.CodeLabel[0] := Ord('"');
  TDBXJSonStreamWriter.CodeLabel[1] := Ord('c');
  TDBXJSonStreamWriter.CodeLabel[2] := Ord('o');
  TDBXJSonStreamWriter.CodeLabel[3] := Ord('d');
  TDBXJSonStreamWriter.CodeLabel[4] := Ord('e');
  TDBXJSonStreamWriter.CodeLabel[5] := Ord('"');
  TDBXJSonStreamWriter.CodeLabel[6] := Ord(':');
  SetLength(TDBXJSonStreamWriter.MessageLabel,10);
  TDBXJSonStreamWriter.MessageLabel[0] := Ord('"');
  TDBXJSonStreamWriter.MessageLabel[1] := Ord('m');
  TDBXJSonStreamWriter.MessageLabel[2] := Ord('e');
  TDBXJSonStreamWriter.MessageLabel[3] := Ord('s');
  TDBXJSonStreamWriter.MessageLabel[4] := Ord('s');
  TDBXJSonStreamWriter.MessageLabel[5] := Ord('a');
  TDBXJSonStreamWriter.MessageLabel[6] := Ord('g');
  TDBXJSonStreamWriter.MessageLabel[7] := Ord('e');
  TDBXJSonStreamWriter.MessageLabel[8] := Ord('"');
  TDBXJSonStreamWriter.MessageLabel[9] := Ord(':');
  SetLength(TDBXJSonStreamWriter.NullValue,4);
  TDBXJSonStreamWriter.NullValue[0] := Ord('n');
  TDBXJSonStreamWriter.NullValue[1] := Ord('u');
  TDBXJSonStreamWriter.NullValue[2] := Ord('l');
  TDBXJSonStreamWriter.NullValue[3] := Ord('l');
  SetLength(TDBXJSonStreamWriter.TrueValue,4);
  TDBXJSonStreamWriter.TrueValue[0] := Ord('t');
  TDBXJSonStreamWriter.TrueValue[1] := Ord('r');
  TDBXJSonStreamWriter.TrueValue[2] := Ord('u');
  TDBXJSonStreamWriter.TrueValue[3] := Ord('e');
  SetLength(TDBXJSonStreamWriter.FalseValue,5);
  TDBXJSonStreamWriter.FalseValue[0] := Ord('f');
  TDBXJSonStreamWriter.FalseValue[1] := Ord('a');
  TDBXJSonStreamWriter.FalseValue[2] := Ord('l');
  TDBXJSonStreamWriter.FalseValue[3] := Ord('s');
  TDBXJSonStreamWriter.FalseValue[4] := Ord('e');
  SetLength(TDBXJSonStreamWriter.ColumnsStart,12);
  TDBXJSonStreamWriter.ColumnsStart[0] := Ord('{');
  TDBXJSonStreamWriter.ColumnsStart[1] := Ord('"');
  TDBXJSonStreamWriter.ColumnsStart[2] := Ord('c');
  TDBXJSonStreamWriter.ColumnsStart[3] := Ord('o');
  TDBXJSonStreamWriter.ColumnsStart[4] := Ord('l');
  TDBXJSonStreamWriter.ColumnsStart[5] := Ord('u');
  TDBXJSonStreamWriter.ColumnsStart[6] := Ord('m');
  TDBXJSonStreamWriter.ColumnsStart[7] := Ord('n');
  TDBXJSonStreamWriter.ColumnsStart[8] := Ord('s');
  TDBXJSonStreamWriter.ColumnsStart[9] := Ord('"');
  TDBXJSonStreamWriter.ColumnsStart[10] := Ord(':');
  TDBXJSonStreamWriter.ColumnsStart[11] := Ord('[');
  SetLength(TDBXJSonStreamWriter.TableStart,10);
  TDBXJSonStreamWriter.TableStart[0] := Ord('{');
  TDBXJSonStreamWriter.TableStart[1] := Ord('"');
  TDBXJSonStreamWriter.TableStart[2] := Ord('t');
  TDBXJSonStreamWriter.TableStart[3] := Ord('a');
  TDBXJSonStreamWriter.TableStart[4] := Ord('b');
  TDBXJSonStreamWriter.TableStart[5] := Ord('l');
  TDBXJSonStreamWriter.TableStart[6] := Ord('e');
  TDBXJSonStreamWriter.TableStart[7] := Ord('"');
  TDBXJSonStreamWriter.TableStart[8] := Ord(':');
  TDBXJSonStreamWriter.TableStart[9] := Ord('[');
  SetLength(TDBXJSonStreamWriter.SessionStart,12);
  TDBXJSonStreamWriter.SessionStart[0] := Ord('{');
  TDBXJSonStreamWriter.SessionStart[1] := Ord('"');
  TDBXJSonStreamWriter.SessionStart[2] := Ord('s');
  TDBXJSonStreamWriter.SessionStart[3] := Ord('e');
  TDBXJSonStreamWriter.SessionStart[4] := Ord('s');
  TDBXJSonStreamWriter.SessionStart[5] := Ord('s');
  TDBXJSonStreamWriter.SessionStart[6] := Ord('i');
  TDBXJSonStreamWriter.SessionStart[7] := Ord('o');
  TDBXJSonStreamWriter.SessionStart[8] := Ord('n');
  TDBXJSonStreamWriter.SessionStart[9] := Ord('"');
  TDBXJSonStreamWriter.SessionStart[10] := Ord(':');
  TDBXJSonStreamWriter.SessionStart[11] := Ord('[');
  SetLength(TDBXJSonStreamWriter.RowsStart,9);
  TDBXJSonStreamWriter.RowsStart[0] := Ord('{');
  TDBXJSonStreamWriter.RowsStart[1] := Ord('"');
  TDBXJSonStreamWriter.RowsStart[2] := Ord('r');
  TDBXJSonStreamWriter.RowsStart[3] := Ord('o');
  TDBXJSonStreamWriter.RowsStart[4] := Ord('w');
  TDBXJSonStreamWriter.RowsStart[5] := Ord('s');
  TDBXJSonStreamWriter.RowsStart[6] := Ord('"');
  TDBXJSonStreamWriter.RowsStart[7] := Ord(':');
  TDBXJSonStreamWriter.RowsStart[8] := Ord('[');
  SetLength(TDBXJSonStreamWriter.DataStart,9);
  TDBXJSonStreamWriter.DataStart[0] := Ord('{');
  TDBXJSonStreamWriter.DataStart[1] := Ord('"');
  TDBXJSonStreamWriter.DataStart[2] := Ord('d');
  TDBXJSonStreamWriter.DataStart[3] := Ord('a');
  TDBXJSonStreamWriter.DataStart[4] := Ord('t');
  TDBXJSonStreamWriter.DataStart[5] := Ord('a');
  TDBXJSonStreamWriter.DataStart[6] := Ord('"');
  TDBXJSonStreamWriter.DataStart[7] := Ord(':');
  TDBXJSonStreamWriter.DataStart[8] := Ord('[');
  SetLength(TDBXJSonStreamWriter.Next,7);
  TDBXJSonStreamWriter.Next[0] := Ord('"');
  TDBXJSonStreamWriter.Next[1] := Ord('n');
  TDBXJSonStreamWriter.Next[2] := Ord('e');
  TDBXJSonStreamWriter.Next[3] := Ord('x');
  TDBXJSonStreamWriter.Next[4] := Ord('t');
  TDBXJSonStreamWriter.Next[5] := Ord('"');
  TDBXJSonStreamWriter.Next[6] := Ord(',');
  SetLength(TDBXJSonStreamWriter.HandleStart,11);
  TDBXJSonStreamWriter.HandleStart[0] := Ord('{');
  TDBXJSonStreamWriter.HandleStart[1] := Ord('"');
  TDBXJSonStreamWriter.HandleStart[2] := Ord('h');
  TDBXJSonStreamWriter.HandleStart[3] := Ord('a');
  TDBXJSonStreamWriter.HandleStart[4] := Ord('n');
  TDBXJSonStreamWriter.HandleStart[5] := Ord('d');
  TDBXJSonStreamWriter.HandleStart[6] := Ord('l');
  TDBXJSonStreamWriter.HandleStart[7] := Ord('e');
  TDBXJSonStreamWriter.HandleStart[8] := Ord('"');
  TDBXJSonStreamWriter.HandleStart[9] := Ord(':');
  TDBXJSonStreamWriter.HandleStart[10] := Ord('[');
  SetLength(TDBXJSonStreamWriter.FieldsStart,11);
  TDBXJSonStreamWriter.FieldsStart[0] := Ord('{');
  TDBXJSonStreamWriter.FieldsStart[1] := Ord('"');
  TDBXJSonStreamWriter.FieldsStart[2] := Ord('f');
  TDBXJSonStreamWriter.FieldsStart[3] := Ord('i');
  TDBXJSonStreamWriter.FieldsStart[4] := Ord('e');
  TDBXJSonStreamWriter.FieldsStart[5] := Ord('l');
  TDBXJSonStreamWriter.FieldsStart[6] := Ord('d');
  TDBXJSonStreamWriter.FieldsStart[7] := Ord('s');
  TDBXJSonStreamWriter.FieldsStart[8] := Ord('"');
  TDBXJSonStreamWriter.FieldsStart[9] := Ord(':');
  TDBXJSonStreamWriter.FieldsStart[10] := Ord('[');
  SetLength(TDBXJSonStreamWriter.Txbegin,10);
  TDBXJSonStreamWriter.Txbegin[0] := Ord('"');
  TDBXJSonStreamWriter.Txbegin[1] := Ord('t');
  TDBXJSonStreamWriter.Txbegin[2] := Ord('x');
  TDBXJSonStreamWriter.Txbegin[3] := Ord('b');
  TDBXJSonStreamWriter.Txbegin[4] := Ord('e');
  TDBXJSonStreamWriter.Txbegin[5] := Ord('g');
  TDBXJSonStreamWriter.Txbegin[6] := Ord('i');
  TDBXJSonStreamWriter.Txbegin[7] := Ord('n');
  TDBXJSonStreamWriter.Txbegin[8] := Ord('"');
  TDBXJSonStreamWriter.Txbegin[9] := Ord(',');
  SetLength(TDBXJSonStreamWriter.Txend,8);
  TDBXJSonStreamWriter.Txend[0] := Ord('"');
  TDBXJSonStreamWriter.Txend[1] := Ord('t');
  TDBXJSonStreamWriter.Txend[2] := Ord('x');
  TDBXJSonStreamWriter.Txend[3] := Ord('e');
  TDBXJSonStreamWriter.Txend[4] := Ord('n');
  TDBXJSonStreamWriter.Txend[5] := Ord('d');
  TDBXJSonStreamWriter.Txend[6] := Ord('"');
  TDBXJSonStreamWriter.Txend[7] := Ord(',');
  SetLength(TDBXJSonStreamWriter.MoreBlob,12);
  TDBXJSonStreamWriter.MoreBlob[0] := Ord('"');
  TDBXJSonStreamWriter.MoreBlob[1] := Ord('m');
  TDBXJSonStreamWriter.MoreBlob[2] := Ord('o');
  TDBXJSonStreamWriter.MoreBlob[3] := Ord('r');
  TDBXJSonStreamWriter.MoreBlob[4] := Ord('e');
  TDBXJSonStreamWriter.MoreBlob[5] := Ord('_');
  TDBXJSonStreamWriter.MoreBlob[6] := Ord('b');
  TDBXJSonStreamWriter.MoreBlob[7] := Ord('l');
  TDBXJSonStreamWriter.MoreBlob[8] := Ord('o');
  TDBXJSonStreamWriter.MoreBlob[9] := Ord('b');
  TDBXJSonStreamWriter.MoreBlob[10] := Ord('"');
  TDBXJSonStreamWriter.MoreBlob[11] := Ord(',');
  SetLength(TDBXJSonStreamWriter.MoreBlobStart,13);
  TDBXJSonStreamWriter.MoreBlobStart[0] := Ord('"');
  TDBXJSonStreamWriter.MoreBlobStart[1] := Ord('m');
  TDBXJSonStreamWriter.MoreBlobStart[2] := Ord('o');
  TDBXJSonStreamWriter.MoreBlobStart[3] := Ord('r');
  TDBXJSonStreamWriter.MoreBlobStart[4] := Ord('e');
  TDBXJSonStreamWriter.MoreBlobStart[5] := Ord('_');
  TDBXJSonStreamWriter.MoreBlobStart[6] := Ord('b');
  TDBXJSonStreamWriter.MoreBlobStart[7] := Ord('l');
  TDBXJSonStreamWriter.MoreBlobStart[8] := Ord('o');
  TDBXJSonStreamWriter.MoreBlobStart[9] := Ord('b');
  TDBXJSonStreamWriter.MoreBlobStart[10] := Ord('"');
  TDBXJSonStreamWriter.MoreBlobStart[11] := Ord(':');
  TDBXJSonStreamWriter.MoreBlobStart[12] := Ord('[');
  SetLength(TDBXJSonStreamWriter.NextResult,14);
  TDBXJSonStreamWriter.NextResult[0] := Ord('"');
  TDBXJSonStreamWriter.NextResult[1] := Ord('n');
  TDBXJSonStreamWriter.NextResult[2] := Ord('e');
  TDBXJSonStreamWriter.NextResult[3] := Ord('x');
  TDBXJSonStreamWriter.NextResult[4] := Ord('t');
  TDBXJSonStreamWriter.NextResult[5] := Ord('_');
  TDBXJSonStreamWriter.NextResult[6] := Ord('r');
  TDBXJSonStreamWriter.NextResult[7] := Ord('e');
  TDBXJSonStreamWriter.NextResult[8] := Ord('s');
  TDBXJSonStreamWriter.NextResult[9] := Ord('u');
  TDBXJSonStreamWriter.NextResult[10] := Ord('l');
  TDBXJSonStreamWriter.NextResult[11] := Ord('t');
  TDBXJSonStreamWriter.NextResult[12] := Ord('"');
  TDBXJSonStreamWriter.NextResult[13] := Ord(',');
  SetLength(TDBXJSonStreamWriter.VendorProperty,18);
  TDBXJSonStreamWriter.VendorProperty[0] := Ord('"');
  TDBXJSonStreamWriter.VendorProperty[1] := Ord('v');
  TDBXJSonStreamWriter.VendorProperty[2] := Ord('e');
  TDBXJSonStreamWriter.VendorProperty[3] := Ord('n');
  TDBXJSonStreamWriter.VendorProperty[4] := Ord('d');
  TDBXJSonStreamWriter.VendorProperty[5] := Ord('o');
  TDBXJSonStreamWriter.VendorProperty[6] := Ord('r');
  TDBXJSonStreamWriter.VendorProperty[7] := Ord('_');
  TDBXJSonStreamWriter.VendorProperty[8] := Ord('p');
  TDBXJSonStreamWriter.VendorProperty[9] := Ord('r');
  TDBXJSonStreamWriter.VendorProperty[10] := Ord('o');
  TDBXJSonStreamWriter.VendorProperty[11] := Ord('p');
  TDBXJSonStreamWriter.VendorProperty[12] := Ord('e');
  TDBXJSonStreamWriter.VendorProperty[13] := Ord('r');
  TDBXJSonStreamWriter.VendorProperty[14] := Ord('t');
  TDBXJSonStreamWriter.VendorProperty[15] := Ord('y');
  TDBXJSonStreamWriter.VendorProperty[16] := Ord('"');
  TDBXJSonStreamWriter.VendorProperty[17] := Ord(',');
end.
