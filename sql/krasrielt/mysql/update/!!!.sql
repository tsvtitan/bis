
DROP PROCEDURE R_PRESENTATION

--

CREATE PROCEDURE R_PRESENTATION
(
  IN PRESENTATION_ID VARCHAR(32)
)
BEGIN
  DECLARE ATABLE VARCHAR(100);
	DECLARE COLUMN_ID VARCHAR(32);
	DECLARE PUBLISHING_ID VARCHAR(32);
	DECLARE VIEW_ID VARCHAR(32);
	DECLARE TYPE_ID VARCHAR(32);
	DECLARE OPERATION_ID VARCHAR(32);
	DECLARE CONDITIONS LONGBLOB;
	DECLARE SORTING VARCHAR(250);
	DECLARE PARAM_IDS VARCHAR(1000);
	DECLARE COLUMN_NAME VARCHAR(100);
  DECLARE PARAM_COLUMN_NAME VARCHAR(100);
	DECLARE OLD_COLUMN_ID VARCHAR(32);
	DECLARE PARAM_ID VARCHAR(32);
	DECLARE PARAM_TYPE INTEGER;
	DECLARE PARAM_COUNT INTEGER;
	DECLARE PRESENTATION_TYPE INTEGER;
	DECLARE REAL_COUNT INTEGER;
	DECLARE CP_STRING_BEFORE VARCHAR(100);
	DECLARE CP_STRING_AFTER VARCHAR(100);
	DECLARE CP_USE_STRING_BEFORE INTEGER;
	DECLARE CP_USE_STRING_AFTER INTEGER;
	DECLARE FIELD_NAME VARCHAR(1000);
  DECLARE PARAM_FIELD_NAME VARCHAR(1000);
	DECLARE SELECT_NAME VARCHAR(200);
  DECLARE PARAM_SELECT_NAME VARCHAR(200);
  DECLARE COUNTER INTEGER;
  DECLARE MAX_LENGTH INTEGER;
	DECLARE NEW_QUERY VARCHAR(2000);
	DECLARE PARAM_NEW_QUERY VARCHAR(2000);
	DECLARE DONE INTEGER DEFAULT 0;
	DECLARE C1 CURSOR FOR SELECT C.COLUMN_ID, CP.PARAM_ID, P.PARAM_TYPE, P.MAX_LENGTH,
	                             CP.STRING_BEFORE AS CP_STRING_BEFORE,CP.STRING_AFTER AS CP_STRING_AFTER,
			                         CP.USE_STRING_BEFORE AS CP_USE_STRING_BEFORE,CP.USE_STRING_AFTER AS CP_USE_STRING_AFTER,
			                         PR.PUBLISHING_ID,PR.VIEW_ID,PR.TYPE_ID,PR.OPERATION_ID,PR.CONDITIONS,PR.SORTING,
			                         PR.PRESENTATION_TYPE,
			                         (SELECT COUNT(*) FROM COLUMN_PARAMS CP1 WHERE CP1.COLUMN_ID=CP.COLUMN_ID) AS PARAM_COUNT
                          FROM COLUMNS C
                          JOIN COLUMN_PARAMS CP ON CP.COLUMN_ID=C.COLUMN_ID
                          JOIN PARAMS P ON P.PARAM_ID=CP.PARAM_ID
	                        JOIN PRESENTATIONS PR ON PR.PRESENTATION_ID=C.PRESENTATION_ID
                         WHERE C.PRESENTATION_ID=PRESENTATION_ID
                         ORDER BY C.PRIORITY, CP.PRIORITY;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET DONE=1;												
	
  SELECT P.TABLE_NAME INTO ATABLE
    FROM PRESENTATIONS P
   WHERE P.PRESENTATION_ID=PRESENTATION_ID
	   AND P.PRESENTATION_TYPE IN (0);
	
	IF (ATABLE<>'') THEN
	
		SET @QUERY=CONCAT('DROP TABLE IF EXISTS ',ATABLE);
    PREPARE STMT FROM @QUERY;
    EXECUTE STMT;
    DEALLOCATE PREPARE STMT;
	  SET @QUERY=CONCAT('CREATE TABLE ',ATABLE,' AS SELECT T.* FROM (SELECT OP.OBJECT_ID,PO.PUBLISHING_ID,P.NAME AS PUBLISHING_NAME,');
	  SET @QUERY=CONCAT(@QUERY,'O.VIEW_ID,V.NAME AS VIEW_NAME,O.TYPE_ID,T.NAME AS TYPE_NAME,O.OPERATION_ID,OT.NAME AS OPERATION_NAME,');
	  SET @QUERY=CONCAT(@QUERY,'D.DESIGN_ID,D.NAME AS DESIGN_NAME,');
	  SET @QUERY=CONCAT(@QUERY,'PO.DATE_BEGIN,O.ACCOUNT_ID,A.USER_NAME,A.PHONE,O.STATUS,O.PRIORITY');
	  SET PARAM_IDS='';
	  SET OLD_COLUMN_ID='';
	  SET FIELD_NAME='';
	  SET REAL_COUNT=0;
    SET COUNTER=0;
		
	  OPEN C1;
    FETCH C1 INTO COLUMN_ID,PARAM_ID,PARAM_TYPE,MAX_LENGTH,
		              CP_STRING_BEFORE,CP_STRING_AFTER,CP_USE_STRING_BEFORE,CP_USE_STRING_AFTER,
		              PUBLISHING_ID,VIEW_ID,TYPE_ID,OPERATION_ID,CONDITIONS,SORTING,PRESENTATION_TYPE,PARAM_COUNT;
    WHILE NOT DONE DO
	
		  IF (OLD_COLUMN_ID<>COLUMN_ID) THEN
        SET COUNTER=COUNTER+1;
  		  SET REAL_COUNT=0;
	  	END IF;
		
		  SET REAL_COUNT=REAL_COUNT+1;
		
		  IF (PARAM_TYPE IN (0,3,9)) AND (MAX_LENGTH IS NOT NULL) THEN
			  SET SELECT_NAME='CONVERT(OP.VALUE_STRING USING CP1251)'; 
			  SET PARAM_SELECT_NAME=CONCAT('CAST(OP.VALUE_STRING AS CHAR(',CAST(MAX_LENGTH AS CHAR),'))'); 
			END IF;
    
		  IF (PARAM_TYPE IN (1,2)) THEN
			  SET SELECT_NAME='CAST(OP.VALUE_NUMBER AS CHAR(250))'; 
			  SET PARAM_SELECT_NAME='OP.VALUE_NUMBER'; 
			END IF;
		  
		  IF (PARAM_TYPE IN (4,5)) THEN
			  SET SELECT_NAME='CAST(OP.VALUE_DATE AS CHAR(250))'; 
			  SET PARAM_SELECT_NAME='OP.VALUE_DATE'; 
			END IF;
      
		  IF (PARAM_TYPE IN (6,7,8)) THEN
			  SET SELECT_NAME='CONVERT(OP.VALUE_BLOB USING CP1251)'; 
			  SET PARAM_SELECT_NAME=SELECT_NAME; 
			END IF;
      
      SET COLUMN_NAME=CONCAT('C_',CAST(COUNTER AS CHAR));
      
      SET PARAM_COLUMN_NAME=CONCAT('P_',CAST(COUNTER AS CHAR),'_',CAST(REAL_COUNT AS CHAR));
      
		  SET FIELD_NAME=CONCAT('IFNULL(MIN(IF(OP.PARAM_ID=''',
		                        PARAM_ID,
				  									''',CONCAT(''',
					  								IFNULL(CP_STRING_BEFORE,''),
						  							''',',
														SELECT_NAME,
														',''',
							  						IFNULL(CP_STRING_AFTER,''),
								  					'''),NULL)),CONCAT(''',
														IF(CP_USE_STRING_BEFORE=1,IFNULL(CP_STRING_BEFORE,''),''),
														''',''',
														IF(CP_USE_STRING_AFTER=1,IFNULL(CP_STRING_AFTER,''),''),
														'''))');
                            
      SET PARAM_FIELD_NAME=CONCAT('MIN(IF(OP.PARAM_ID=''',
		                              PARAM_ID,
				  									      ''',',
														      PARAM_SELECT_NAME,
														      ',NULL))');
		
		  IF (REAL_COUNT=PARAM_COUNT) THEN
    		IF (PARAM_COUNT=1) THEN
	    	  SET NEW_QUERY=FIELD_NAME;
          SET PARAM_NEW_QUERY=CONCAT(PARAM_FIELD_NAME,' AS ''',PARAM_COLUMN_NAME,'''');
 		    ELSE	
  	      SET NEW_QUERY=CONCAT(NEW_QUERY,',',FIELD_NAME,')');
          SET PARAM_NEW_QUERY=CONCAT(PARAM_NEW_QUERY,',',PARAM_FIELD_NAME,' AS ''',PARAM_COLUMN_NAME,'''');
	  	  END IF;
        
        SET @QUERY=CONCAT(@QUERY,',',PARAM_NEW_QUERY);
        SET @QUERY=CONCAT(@QUERY,',CAST(',NEW_QUERY,' AS CHAR(250)) AS ''',COLUMN_NAME,''''); 
          
        SET NEW_QUERY='';
        SET PARAM_NEW_QUERY='';
		  ELSE
		    IF (REAL_COUNT=1) THEN
			    SET NEW_QUERY=CONCAT('CONCAT(',FIELD_NAME);
          SET PARAM_NEW_QUERY=CONCAT(PARAM_FIELD_NAME,' AS ''',PARAM_COLUMN_NAME,'''');
			  ELSE	
  			  SET NEW_QUERY=CONCAT(NEW_QUERY,',',FIELD_NAME);
          SET PARAM_NEW_QUERY=CONCAT(PARAM_NEW_QUERY,',',PARAM_FIELD_NAME,' AS ''',PARAM_COLUMN_NAME,'''');
			  END IF;
		  END IF;
      
		  IF TRIM(PARAM_IDS)='' THEN
  		  SET PARAM_IDS=CONCAT('''',PARAM_ID,''''); 
		  ELSE
  		  SET PARAM_IDS=CONCAT(PARAM_IDS,',',CONCAT('''',PARAM_ID,'''')); 
		  END IF;
		
  		SET OLD_COLUMN_ID=COLUMN_ID;
		
      FETCH C1 INTO COLUMN_ID,PARAM_ID,PARAM_TYPE,MAX_LENGTH,
			              CP_STRING_BEFORE,CP_STRING_AFTER,CP_USE_STRING_BEFORE,CP_USE_STRING_AFTER,
			              PUBLISHING_ID,VIEW_ID,TYPE_ID,OPERATION_ID,CONDITIONS,SORTING,PRESENTATION_TYPE,PARAM_COUNT;
    END WHILE;
    CLOSE C1;		 
	  SET @QUERY=CONCAT(@QUERY,' FROM OBJECT_PARAMS OP ');
	  SET @QUERY=CONCAT(@QUERY,'JOIN OBJECTS O ON O.OBJECT_ID=OP.OBJECT_ID ');
		SET @QUERY=CONCAT(@QUERY,'JOIN ACCOUNTS A ON A.ACCOUNT_ID=O.ACCOUNT_ID ');
		SET @QUERY=CONCAT(@QUERY,'JOIN PUBLISHING_OBJECTS PO ON PO.OBJECT_ID=OP.OBJECT_ID ');
		SET @QUERY=CONCAT(@QUERY,'JOIN PUBLISHING P ON P.PUBLISHING_ID=PO.PUBLISHING_ID ');
		SET @QUERY=CONCAT(@QUERY,'JOIN VIEWS V ON V.VIEW_ID=O.VIEW_ID ');
		SET @QUERY=CONCAT(@QUERY,'JOIN TYPES T ON T.TYPE_ID=O.TYPE_ID ');
		SET @QUERY=CONCAT(@QUERY,'JOIN OPERATIONS OT ON OT.OPERATION_ID=O.OPERATION_ID ');
    SET @QUERY=CONCAT(@QUERY,'LEFT JOIN DESIGNS D ON D.DESIGN_ID=O.DESIGN_ID ');
		
	  IF TRIM(PARAM_IDS)<>'' THEN
  	  SET @QUERY=CONCAT(@QUERY,'WHERE OP.PARAM_ID IN (',PARAM_IDS,') ');
		  SET @QUERY=CONCAT(@QUERY,'AND OP.DATE_CREATE=(SELECT MAX(DATE_CREATE) FROM OBJECT_PARAMS WHERE PARAM_ID=OP.PARAM_ID AND OBJECT_ID=O.OBJECT_ID) ');
			IF PUBLISHING_ID IS NOT NULL THEN
  	    SET @QUERY=CONCAT(@QUERY,'AND PO.PUBLISHING_ID=''',PUBLISHING_ID,''' ');
			END IF;
			IF VIEW_ID IS NOT NULL THEN
    	  SET @QUERY=CONCAT(@QUERY,'AND O.VIEW_ID=''',VIEW_ID,''' ');
			END IF;
			IF TYPE_ID IS NOT NULL THEN
    	  SET @QUERY=CONCAT(@QUERY,'AND O.TYPE_ID=''',TYPE_ID,''' ');
			END IF;
			IF OPERATION_ID IS NOT NULL THEN
     	  SET @QUERY=CONCAT(@QUERY,'AND O.OPERATION_ID=''',OPERATION_ID,''' ');
			END IF;
  	  SET @QUERY=CONCAT(@QUERY,'AND PO.DATE_BEGIN>=DATE_ADD(CURRENT_TIMESTAMP,INTERVAL -1 MONTH) ');
  	  SET @QUERY=CONCAT(@QUERY,'AND (PO.DATE_END IS NULL OR PO.DATE_END>=CURRENT_TIMESTAMP) ');
  	  SET @QUERY=CONCAT(@QUERY,'AND O.STATUS IN (0,1) ');
		  SET @QUERY=CONCAT(@QUERY,'GROUP BY OP.OBJECT_ID, PO.PUBLISHING_ID ');
      SET @QUERY=CONCAT(@QUERY,'ORDER BY PO.DATE_BEGIN DESC) T ');
			IF (TRIM(CONVERT(CONDITIONS USING cp1251))<>'') THEN
    	  SET @QUERY=CONCAT(@QUERY,'WHERE ',CONVERT(CONDITIONS USING cp1251),' ');
			END IF;
			IF TRIM(SORTING)<>'' THEN 
        SET @QUERY=CONCAT(@QUERY,'ORDER BY ',SORTING);
			END IF;
			
      
  	  PREPARE STMT FROM @QUERY;
      EXECUTE STMT;
      DEALLOCATE PREPARE STMT; 
      SET @QUERY=CONCAT('ALTER TABLE ',ATABLE,' ADD PRIMARY KEY (OBJECT_ID,PUBLISHING_ID)');
  		PREPARE STMT FROM @QUERY;
      EXECUTE STMT;
      DEALLOCATE PREPARE STMT; 
      SET @QUERY=CONCAT('ALTER TABLE ',ATABLE,' ENGINE = MEMORY');
  		PREPARE STMT FROM @QUERY;
      EXECUTE STMT;
      DEALLOCATE PREPARE STMT;       
		
	  END IF;	
  END IF;		
END;

--

DROP PROCEDURE GET_OBJECT_PARAM_VALUE

--

CREATE PROCEDURE GET_OBJECT_PARAM_VALUE
(
  IN OBJECT_ID VARCHAR(32),
	IN PARAM_ID VARCHAR(32),
	OUT VALUE_BLOB LONGBLOB,
  OUT VALUE_DATE DATETIME,
  OUT VALUE_NUMBER FLOAT,
  OUT VALUE_STRING VARCHAR(1000)
)
BEGIN
  SELECT OP.VALUE_BLOB, OP.VALUE_DATE, OP.VALUE_NUMBER, OP.VALUE_STRING
	  INTO VALUE_BLOB, VALUE_DATE, VALUE_NUMBER, VALUE_STRING
		FROM OBJECT_PARAMS OP 
	 WHERE OP.OBJECT_ID=OBJECT_ID
	   AND OP.PARAM_ID=PARAM_ID
           AND OP.DATE_CREATE=(SELECT MAX(OP2.DATE_CREATE) 
		                 FROM OBJECT_PARAMS OP2
             			WHERE OP2.OBJECT_ID=OBJECT_ID
		                  AND OP2.PARAM_ID=PARAM_ID);
END;

--

DROP PROCEDURE R_OBJECT_PRESENTATION

--

CREATE PROCEDURE R_OBJECT_PRESENTATION
(
  IN PRESENTATION_ID VARCHAR(32),
  IN OBJECT_ID VARCHAR(32),
  IN PUBLISHING_ID VARCHAR(32),
  IN PUBLISHING_NAME VARCHAR(100),
  IN VIEW_ID VARCHAR(32),
  IN VIEW_NAME VARCHAR(100),
  IN TYPE_ID VARCHAR(32),
  IN TYPE_NAME VARCHAR(100),
  IN OPERATION_ID VARCHAR(32),
  IN OPERATION_NAME VARCHAR(100),
  IN DESIGN_ID VARCHAR(32),
  IN DESIGN_NAME VARCHAR(100),
  IN DATE_BEGIN DATETIME,
  IN ACCOUNT_ID VARCHAR(32),
  IN USER_NAME VARCHAR(100),
  IN PHONE VARCHAR(100),
  IN STATUS INTEGER,
  IN PRIORITY INTEGER
)
BEGIN
  DECLARE ATABLE VARCHAR(100);
	DECLARE APHONE VARCHAR(100);
  DECLARE COLUMN_ID VARCHAR(32);
	DECLARE COLUMN_NAME VARCHAR(100);
  DECLARE PARAM_COLUMN_NAME VARCHAR(100);
  DECLARE OLD_COLUMN_ID VARCHAR(32);
  DECLARE PARAM_ID VARCHAR(32);
  DECLARE PARAM_TYPE INTEGER;
  DECLARE MAX_LENGTH INTEGER;
  DECLARE PARAM_COUNT INTEGER;
  DECLARE REAL_COUNT INTEGER;
  DECLARE CP_STRING_BEFORE VARCHAR(100);
  DECLARE CP_STRING_AFTER VARCHAR(100);
  DECLARE CP_USE_STRING_BEFORE INTEGER;
  DECLARE CP_USE_STRING_AFTER INTEGER;
  DECLARE PARAM_VALUE VARCHAR(250);
  DECLARE FIELD_VALUE VARCHAR(1000);
  DECLARE FIELD_NAMES VARCHAR(2000);
  DECLARE FIELD_VALUES VARCHAR(2000);
	DECLARE VALUE_BLOB LONGBLOB;
  DECLARE VALUE_DATE DATETIME;
  DECLARE VALUE_NUMBER FLOAT;
  DECLARE VALUE_STRING VARCHAR(1000);
  DECLARE COUNTER INTEGER;
  DECLARE ALL_COUNT INTEGER;
  DECLARE DONE INTEGER DEFAULT 0;
  DECLARE C1 CURSOR FOR SELECT C.COLUMN_ID, CP.PARAM_ID, P.PARAM_TYPE, P.MAX_LENGTH,
                               CP.STRING_BEFORE AS CP_STRING_BEFORE, CP.STRING_AFTER AS CP_STRING_AFTER,
                               CP.USE_STRING_BEFORE AS CP_USE_STRING_BEFORE, CP.USE_STRING_AFTER AS CP_USE_STRING_AFTER,
                               (SELECT COUNT(*) FROM  COLUMN_PARAMS CP1 WHERE CP1.COLUMN_ID=CP.COLUMN_ID) AS PARAM_COUNT
                          FROM COLUMNS C 
                          JOIN COLUMN_PARAMS CP ON CP.COLUMN_ID=C.COLUMN_ID
                          JOIN PARAMS P ON P.PARAM_ID=CP.PARAM_ID
	                        JOIN PRESENTATIONS PR ON PR.PRESENTATION_ID=C.PRESENTATION_ID
                         WHERE C.PRESENTATION_ID=PRESENTATION_ID
                         ORDER BY C.PRIORITY, CP.PRIORITY;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET DONE=1;												
	
  SELECT P.TABLE_NAME INTO ATABLE
    FROM PRESENTATIONS P
   WHERE P.PRESENTATION_ID=PRESENTATION_ID;
	   
  IF (ATABLE<>'') THEN
  
    SET @QUERY=CONCAT('DELETE FROM /*PREFIX*/',ATABLE,' WHERE OBJECT_ID=''',OBJECT_ID,''' ',
	                    'AND PUBLISHING_ID=''',PUBLISHING_ID,'''');
    PREPARE STMT FROM @QUERY;
    EXECUTE STMT;
    DEALLOCATE PREPARE STMT; 
	
	  IF (STATUS IN (0,1))  THEN
		
      SET OLD_COLUMN_ID='';
		
		  IF (PHONE IS NULL) THEN
  		  SET APHONE='';
	  	ELSE
		    SET APHONE=PHONE;
		  END IF;
		
      SET FIELD_NAMES=CONCAT('OBJECT_ID, PUBLISHING_ID, PUBLISHING_NAME, VIEW_ID, VIEW_NAME, ',
	                           'TYPE_ID, TYPE_NAME, OPERATION_ID, OPERATION_NAME, DESIGN_ID, DESIGN_NAME, ',
                             'DATE_BEGIN, ACCOUNT_ID, USER_NAME, PHONE, STATUS, PRIORITY ');
                             
      SET FIELD_VALUES=CONCAT('''',OBJECT_ID,''',''',PUBLISHING_ID,''',''',PUBLISHING_NAME,''',''',VIEW_ID,''',''',VIEW_NAME,
		                          ''',''',TYPE_ID,''',''',TYPE_NAME,''',''',OPERATION_ID,''',''',OPERATION_NAME,''',''',DESIGN_ID,''',''',DESIGN_NAME,
                              ''',''',DATE_BEGIN,''',''',ACCOUNT_ID,''',''',USER_NAME,''',''',APHONE,''',''',STATUS,''',''',PRIORITY,'''');
  	  SET REAL_COUNT=0;
      SET COUNTER=0;
      SET ALL_COUNT=0;
		
      OPEN C1;
      FETCH C1 INTO COLUMN_ID,PARAM_ID,PARAM_TYPE,MAX_LENGTH,
	                  CP_STRING_BEFORE,CP_STRING_AFTER,CP_USE_STRING_BEFORE,CP_USE_STRING_AFTER,
	                  PARAM_COUNT;
      WHILE NOT DONE DO
      
      
        IF (OLD_COLUMN_ID<>COLUMN_ID) THEN
          SET COUNTER=COUNTER+1;
    		  SET REAL_COUNT=0;
        END IF;
		
        SET REAL_COUNT=REAL_COUNT+1;
		
        IF (CP_STRING_BEFORE IS NULL) THEN
	        SET CP_STRING_BEFORE='';
        END IF;
			
        IF (CP_STRING_AFTER IS NULL) THEN
	        SET CP_STRING_AFTER='';
        END IF;
        
        IF (CP_USE_STRING_BEFORE IS NULL) THEN
          SET CP_USE_STRING_BEFORE=0;
        END IF;
			
        IF (CP_USE_STRING_AFTER IS NULL) THEN
          SET CP_USE_STRING_AFTER=0;
        END IF;
        
        SET PARAM_VALUE='';
      
        CALL GET_OBJECT_PARAM_VALUE(OBJECT_ID,PARAM_ID,VALUE_BLOB,VALUE_DATE,VALUE_NUMBER,VALUE_STRING);
			
  		  IF (PARAM_TYPE IN (0,3,9)) THEN
          IF (MAX_LENGTH IS NOT NULL) THEN
	  		    SET PARAM_VALUE=SUBSTR(CONVERT(VALUE_STRING USING CP1251),1,MAX_LENGTH);
          ELSE
            SET PARAM_VALUE=CONVERT(VALUE_STRING USING CP1251);
          END IF;
  			END IF;
        
		    IF (PARAM_TYPE IN (1,2)) THEN
			    SET PARAM_VALUE=CAST(VALUE_NUMBER AS CHAR(250)); 
	   		END IF;
		  
		    IF (PARAM_TYPE IN (4,5)) THEN
			    SET PARAM_VALUE=CAST(VALUE_DATE AS CHAR(250)); 
			  END IF;
      
		    IF (PARAM_TYPE IN (6,7,8)) THEN 
  			  SET PARAM_VALUE=CONVERT(VALUE_BLOB USING CP1251); 
		   	END IF;
        
        SET PARAM_COLUMN_NAME=CONCAT('P_',CAST(COUNTER AS CHAR),'_',CAST(REAL_COUNT AS CHAR));
        SET FIELD_NAMES=CONCAT(FIELD_NAMES,', `',PARAM_COLUMN_NAME,'`');
        SET FIELD_VALUES=CONCAT(FIELD_VALUES,', ''',PARAM_VALUE,'''');

        SET PARAM_VALUE=CONCAT(CP_STRING_BEFORE,PARAM_VALUE);
			
        SET PARAM_VALUE=CONCAT(PARAM_VALUE,CP_STRING_AFTER);
     
        IF (REAL_COUNT=1) THEN
	        SET FIELD_VALUE=PARAM_VALUE;
        ELSE
	        SET FIELD_VALUE=CONCAT(FIELD_VALUE,PARAM_VALUE);
        END IF;
						
        
        IF (REAL_COUNT=PARAM_COUNT) THEN
          SET COLUMN_NAME=CONCAT('C_',CAST(COUNTER AS CHAR));
	        SET FIELD_NAMES=CONCAT(FIELD_NAMES,', `',COLUMN_NAME,'`');
          SET FIELD_VALUES=CONCAT(FIELD_VALUES,', ''',FIELD_VALUE,'''');
        END IF;	
        
						
        SET OLD_COLUMN_ID=COLUMN_ID;
			
        SET ALL_COUNT=ALL_COUNT+1;
			
        FETCH C1 INTO COLUMN_ID,PARAM_ID,PARAM_TYPE,MAX_LENGTH,
	                    CP_STRING_BEFORE,CP_STRING_AFTER,CP_USE_STRING_BEFORE,CP_USE_STRING_AFTER,
	                    PARAM_COUNT;
      END WHILE;
      CLOSE C1;
		
      SET @QUERY=CONCAT('INSERT /*PREFIX*/',ATABLE,' (',FIELD_NAMES,') VALUES (',FIELD_VALUES,')');
      
  	  PREPARE STMT FROM @QUERY;
      EXECUTE STMT;
      DEALLOCATE PREPARE STMT; 		
		
    END IF;
  END IF;
END;

--

DROP PROCEDURE R_OBJECT

--

CREATE PROCEDURE R_OBJECT
(
  IN OBJECT_ID VARCHAR(32)
)
BEGIN
	DECLARE PRESENTATION_ID VARCHAR(32);
	DECLARE PUBLISHING_ID VARCHAR(32);
	DECLARE PUBLISHING_NAME VARCHAR(100);
	DECLARE VIEW_ID VARCHAR(32);
	DECLARE VIEW_NAME VARCHAR(100);
	DECLARE TYPE_ID VARCHAR(32);
  DECLARE TYPE_NAME VARCHAR(100);
	DECLARE OPERATION_ID VARCHAR(32);
  DECLARE OPERATION_NAME VARCHAR(100);
	DECLARE DESIGN_ID VARCHAR(32);
  DECLARE DESIGN_NAME VARCHAR(100);
  DECLARE DATE_BEGIN DATETIME;
	DECLARE ACCOUNT_ID VARCHAR(32);
  DECLARE USER_NAME VARCHAR(100);
	DECLARE PHONE VARCHAR(100);
	DECLARE STATUS INTEGER;
	DECLARE PRIORITY INTEGER;
	
	DECLARE D1 INTEGER DEFAULT 0;
	DECLARE C1 CURSOR FOR SELECT P.PRESENTATION_ID, T.*
	                        FROM  PRESENTATIONS P
													JOIN (SELECT PO.PUBLISHING_ID, P.NAME AS PUBLISHING_NAME,
	                                     O.VIEW_ID, V.NAME AS VIEW_NAME, O.TYPE_ID, T.NAME AS TYPE_NAME, 
																			 O.OPERATION_ID, OT.NAME AS OPERATION_NAME, O.DESIGN_ID, D.NAME AS DESIGN_NAME,
															         PO.DATE_BEGIN, O.ACCOUNT_ID, A.USER_NAME, A.PHONE, 
                                       O.STATUS, O.PRIORITY
                                  FROM  PUBLISHING_OBJECTS PO 
													        JOIN  PUBLISHING P ON P.PUBLISHING_ID=PO.PUBLISHING_ID
	                                JOIN  OBJECTS O ON O.OBJECT_ID=PO.OBJECT_ID
													        JOIN  VIEWS V ON V.VIEW_ID=O.VIEW_ID
													        JOIN  TYPES T ON T.TYPE_ID=O.TYPE_ID
													        JOIN  OPERATIONS OT ON OT.OPERATION_ID=O.OPERATION_ID
													        JOIN  ACCOUNTS A ON A.ACCOUNT_ID=O.ACCOUNT_ID
                                  LEFT JOIN DESIGNS D ON D.DESIGN_ID=O.DESIGN_ID
                                 WHERE PO.OBJECT_ID=OBJECT_ID
                                   AND PO.DATE_BEGIN>=DATE_ADD(CURRENT_TIMESTAMP,INTERVAL -1 MONTH) 
	                                 AND (PO.DATE_END IS NULL OR PO.DATE_END>=CURRENT_TIMESTAMP)
	                                 AND O.STATUS IN (0,1,2)
																) T ON (P.PUBLISHING_ID IS NULL OR P.PUBLISHING_ID=T.PUBLISHING_ID)	 
                                   AND (P.VIEW_ID IS NULL OR P.VIEW_ID=T.VIEW_ID)
	                                 AND (P.TYPE_ID IS NULL OR P.TYPE_ID=T.TYPE_ID)
	                                 AND (P.OPERATION_ID IS NULL OR P.OPERATION_ID=T.OPERATION_ID)
                         WHERE P.PRESENTATION_TYPE IN (0,2,3)
												 ORDER BY P.PRESENTATION_ID;																	 
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET D1=1;			
	
  OPEN C1;
  FETCH C1 INTO PRESENTATION_ID, PUBLISHING_ID, PUBLISHING_NAME,
	              VIEW_ID, VIEW_NAME, TYPE_ID, TYPE_NAME, OPERATION_ID, OPERATION_NAME, 
                DESIGN_ID, DESIGN_NAME,
						    DATE_BEGIN, ACCOUNT_ID, USER_NAME, PHONE, STATUS, PRIORITY;
  WHILE NOT D1 DO	
	
	  CALL R_OBJECT_PRESENTATION(PRESENTATION_ID, OBJECT_ID, PUBLISHING_ID, PUBLISHING_NAME,
                               VIEW_ID, VIEW_NAME, TYPE_ID, TYPE_NAME, OPERATION_ID, OPERATION_NAME,
                               DESIGN_ID, DESIGN_NAME,
					                     DATE_BEGIN, ACCOUNT_ID, USER_NAME, PHONE, STATUS, PRIORITY); 
		
    FETCH C1 INTO PRESENTATION_ID,PUBLISHING_ID, PUBLISHING_NAME,
	                VIEW_ID, VIEW_NAME, TYPE_ID, TYPE_NAME, OPERATION_ID, OPERATION_NAME,
                  DESIGN_ID, DESIGN_NAME,
		  				    DATE_BEGIN, ACCOUNT_ID, USER_NAME, PHONE, STATUS, PRIORITY;
  END WHILE;
  CLOSE C1;	
	
END;


--

DROP VIEW S_OBJECT_PARAMS_EX

--

CREATE VIEW S_OBJECT_PARAMS_EX
AS
SELECT OP.*,
       P.NAME AS PARAM_NAME,
       P.PARAM_TYPE,
       P.MAX_LENGTH,
       O.ACCOUNT_ID AS OBJECT_ACCOUNT_ID,
       O.DESIGN_ID,
       O.VIEW_ID,
       O.TYPE_ID,
       O.OPERATION_ID,
       O.STATUS,
       O.PRIORITY,
       PO.PUBLISHING_ID,
       PO.DATE_BEGIN,
       PO.DATE_END,
       D.NAME AS DESIGN_NAME
  FROM OBJECT_PARAMS OP
  JOIN PARAMS P ON P.PARAM_ID=OP.PARAM_ID
  JOIN OBJECTS O ON O.OBJECT_ID=OP.OBJECT_ID
  JOIN PUBLISHING_OBJECTS PO ON PO.OBJECT_ID=O.OBJECT_ID
  LEFT JOIN DESIGNS D ON D.DESIGN_ID=O.DESIGN_ID

--





