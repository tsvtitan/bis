unit PRERROR;
{**************************************************************************}
{                                                                          }
{    This C DLL header file first (automatic) conversion generated by:     }
{    HeadConv 4.0 (c) 2000 by Bob Swart (aka Dr.Bob - www.drbob42.com)     }
{      Final Delphi-Jedi (Darth) command-line units edition                }
{                                                                          }
{    Generated Date: 02.05.2008                                            }
{    Generated Time: 15:08:00                                              }
{                                                                          }
{**************************************************************************}

interface
uses
{$IFDEF WIN32}
  Windows;
{$ELSE}
  Wintypes, WinProcs;
{$ENDIF}


{=> u:\source\imfotom.bpl\ps-rec+sdk+v1.1.0c\psrecsdk\inc\PRERROR.H <=}

{$IFNDEF _PR_ERROR_H_}
{$DEFINE _PR_ERROR_H_}


{+//*************************************************************************** }
{-**************************************************************************** }
{-* PowerShot RemoteCapture SDK : ResponseCode Summary* }
{-**************************************************************************** }
{=*************************************************************************** }

{+//----------------------------------------------------------------------- }
{-PRSDK Error Code Masks }
{=------------------------------------------------------------------------ }
const
  prERROR_COMPONENTID_MASK = $00F00000;
const
  prERROR_ERRORID_MASK = $0000FFFF;


{+//----------------------------------------------------------------------- }
{-PRSDK Base Component IDs }
{=------------------------------------------------------------------------ }
const
  prERROR_PTP_COMPONENTID = $00100000; {/* PTP operation errors*/}
const
  prERROR_PRSDK_COMPONENTID = $00200000; {/* PRSDK Internal Error*/}
const
  prERROR_WIA_STI_COMPONENTID = $00300000; {/* Errors generated by the Windows WIA/STI*/}
const
  prERROR_WINDOWS_COMPONENTID = $00400000; {/* Errors generated by the GetLastError() function in WIN32 API*/}
const
  prERROR_COMIF_COMPONENTID = $00500000; {/* Windows COM I/F errors*/}

{+//----------------------------------------------------------------------- }
{-PRSDK Functin Success Code }
{=------------------------------------------------------------------------ }
const
  prOK = $00000000;


{+//----------------------------------------------------------------------- }
{-PTP Operation Error IDs }
{=------------------------------------------------------------------------ }
const
  prRESPONSE_Undefined = $00002000;
const
  prRESPONSE_GeneralError = $00002002;
const
  prRESPONSE_SessionNotOpen = $00002003;
const
  prRESPONSE_InvalidTransactionID = $00002004;
const
  prRESPONSE_OperationNotSupported = $00002005;
const
  prRESPONSE_ParameterNotSupported = $00002006;
const
  prRESPONSE_IncompleteTransfer = $00002007;
const
  prRESPONSE_InvalidStorageID = $00002008;
const
  prRESPONSE_InvalidObjectHandle = $00002009;
const
  prRESPONSE_DevicePropNotSupported = $0000200A;
const
  prRESPONSE_InvalidObjectFormatCode = $0000200B;
const
  prRESPONSE_StoreFull = $0000200C;
const
  prRESPONSE_ObjectWriteProtected = $0000200D;
const
  prRESPONSE_StoreRead_Only = $0000200E;
const
  prRESPONSE_AccessDenied = $0000200;
const
  prRESPONSE_NoThumbnailPresent = $00002010;
const
  prRESPONSE_SelfTestFailed = $00002011;
const
  prRESPONSE_PartialDeletion = $00002012;
const
  prRESPONSE_StoreNotAvailable = $00002013;
const
  prRESPONSE_SpecificationByFormatUnsupported = $00002014;
const
  prRESPONSE_NoValidObjectInfo = $00002015;
const
  prRESPONSE_InvalidCodeFormat = $00002016;
const
  prRESPONSE_UnknownVendorCode = $00002017;
const
  prRESPONSE_CaptureAlreadyTerminated = $00002018;
const
  prRESPONSE_DeviceBusy = $00002019;
const
  prRESPONSE_InvalidParentObject = $0000201A;
const
  prRESPONSE_InvalidDevicePropFormat = $0000201B;
const
  prRESPONSE_InvalidDevicePropValue = $0000201C;
const
  prRESPONSE_InvalidParameter = $0000201D;
const
  prRESPONSE_SessionAlreadyOpen = $0000201E;
const
  prRESPONSE_TransactionCancelled = $0000201;
const
  prRESPONSE_SpecificationOfDestinationUnsupported = $00002020;

{+// Vendor Extension Error IDs*/ }
const
  prRESPONSE_Ex_Undefined = $0000A000;
const
  prRESPONSE_Ex_UnknownCommandReceived = $0000A001;
const
  prRESPONSE_Ex_MemAllocFailed = $0000A002;
const
  prRESPONSE_Ex_InternalError = $0000A003;
const
  prRESPONSE_Ex_DirIOError = $0000A004;
const
  prRESPONSE_Ex_RefusedByOtherProcess = $0000A005;
const
  prRESPONSE_Ex_CoverClosed = $0000A006;
const
  prRESPONSE_Ex_NoRelease = $0000A007;
const
  prRESPONSE_Ex_DeviceIsHot = $0000A008;
const
  prRESPONSE_Ex_LowBattery = $0000A009;
const
  prRESPONSE_Ex_AlreadyExit = $0000A00A;

{+//----------------------------------------------------------------------- }
{-PRSDK Internal Error IDs }
{=------------------------------------------------------------------------ }
{+// Miscellaneous errors*/ }
const
  prUNIMPLEMENTED = $00000001;
const
  prINTERNAL_ERROR = $00000002;
const
  prMEM_ALLOC_FAILED = $00000003;
const
  prMEM_FREE_FAILED = $00000004;
const
  prOPERATION_CANCELLED = $00000005;
const
  prINCOMPATIBLE_VERSION = $00000006;
const
  prNOT_SUPPORTED = $00000007;
const
  prUNEXPECTED_EXCEPTION = $00000008;
const
  prPROTECTION_VIOLATION = $00000009;
const
  prMISSING_SUBCOMPONENT = $0000000A;
const
  prSELECTION_UNAVAILABLE = $0000000B;

{+// Function Parameter errors*/ }
const
  prINVALID_PARAMETER = $00000021;
const
  prINVALID_HANDLE = $00000022;

{+// ...*/ }
const
  prINVALID_FN_CALL = $00000061;
const
  prWAIT_TIMEOUT_ERROR = $00000062;
const
  prINSUFFICIENT_BUFFER = $00000063;
const
  prEVENT_CALLBACK_EXIST = $00000064;

{$ENDIF}



var
  DLLLoaded: Boolean { is DLL (dynamically) loaded already? }
    {$IFDEF WIN32} = False; {$ENDIF}

implementation

var
  SaveExit: pointer;
  DLLHandle: THandle;
{$IFNDEF MSDOS}
  ErrorMode: Integer;
{$ENDIF}

  procedure NewExit; far;
  begin
    ExitProc := SaveExit;
    FreeLibrary(DLLHandle)
  end {NewExit};

procedure LoadDLL;
begin
  if DLLLoaded then Exit;
{$IFNDEF MSDOS}
  ErrorMode := SetErrorMode($8000{SEM_NoOpenFileErrorBox});
{$ENDIF}
  DLLHandle := LoadLibrary('PRERROR.DLL');
  if DLLHandle >= 32 then
  begin
    DLLLoaded := True;
    SaveExit := ExitProc;
    ExitProc := @NewExit;
  end
  else
  begin
    DLLLoaded := False;
    { Error: PRERROR.DLL could not be loaded !! }
  end;
{$IFNDEF MSDOS}
  SetErrorMode(ErrorMode)
{$ENDIF}
end {LoadDLL};

begin
  LoadDLL;
end.
