unit BisCallcHbookSessionsFm;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, ExtCtrls, ComCtrls, BisFm, ActnList,
  BisDataGridFm, BisDataEditFm;

type
  TBisCallcHbookSessionsForm = class(TBisDataGridForm)
  private
    { Private declarations }
  public
    constructor Create(AOwner: TComponent); override;
  end;

  TBisCallcHbookSessionsFormIface=class(TBisDataGridFormIface)
  public
    constructor Create(AOwner: TComponent); override;
  end;

  TBisCallcHbookSessionViewingFormIface=class(TBisDataEditFormIface)
  public
    procedure Execute; override;
  end;

  TBisCallcHbookSessionDeleteFormIface=class(TBisDataEditFormIface)
  public
    procedure Execute; override;
  end;

var
  BiCallcHbookSessionsForm: TBisCallcHbookSessionsForm;

implementation

{$R *.dfm}

uses BisProvider, BisDialogs, BisParam, BisMemoFm, BisFilterGroups, BisOrders;

{ TBisCallcHbookSessionDeleteFormIface }

procedure TBisCallcHbookSessionDeleteFormIface.Execute;
var
  Provider: TBisProvider;
begin
  if Assigned(ParentProvider) and ParentProvider.Active and not ParentProvider.IsEmpty then begin
    if ShowQuestion('Удалить текущую сессию?',mbNo)=mrYes then begin
      Provider:=TBisProvider.Create(Self);
      try
        Provider.ProviderName:='D_SESSION';
        Provider.ParentProvider:=ParentProvider;
        Provider.Params.AddKeyValue('SESSION_ID',ParentProvider.FieldByName('SESSION_ID').Value).Older('OLD_SESSION_ID');
        Provider.Execute;
        Provider.DeleteFromParent;
      finally
        Provider.Free;
      end;
    end;
  end;
end;

{ TBisCallcHbookSessionViewingFormIface }

procedure TBisCallcHbookSessionViewingFormIface.Execute;
var
  Form: TBisMemoForm;
  Provider: TBisProvider;
begin
  if Assigned(ParentProvider) and ParentProvider.Active and not ParentProvider.IsEmpty then begin
    Form:=TBisMemoForm.Create(Self);
    Provider:=TBisProvider.Create(Self);
    try
      Provider.ProviderName:='S_SESSIONS';
      Provider.FieldNames.AddInvisible('PARAMS');
      Provider.FilterGroups.Add.Filters.Add('SESSION_ID',fcEqual,ParentProvider.FieldByName('SESSION_ID').Value);
      Provider.Open;
      if Provider.Active and not Provider.IsEmpty then
        Form.Memo.Lines.Text:=Provider.FieldByName('PARAMS').AsString;
      Form.ButtonOk.Visible:=false;
      Form.Caption:='Параметры';
      Form.ShowModal;
    finally
      Provider.Free;
      Form.Free;
    end;
  end;
end;

{ TBisCallcHbookSessionsFormIface }

constructor TBisCallcHbookSessionsFormIface.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  FormClass:=TBisCallcHbookSessionsForm;
  ViewingClass:=TBisCallcHbookSessionViewingFormIface;
  DeleteClass:=TBisCallcHbookSessionDeleteFormIface;
  ProviderName:='S_SESSIONS';
  with FieldNames do begin
    AddKey('SESSION_ID');
    AddInvisible('APPLICATION_ID');
    AddInvisible('ACCOUNT_ID');
    Add('APPLICATION_NAME','Приложение',100);
    Add('USER_NAME','Учетная запись',100);
    Add('DATE_CREATE','Дата создания',120);
    Add('DATE_CHANGE','Дата изменения',120);
  end;
  Orders.Add('APPLICATION_NAME');
  Orders.Add('USER_NAME');
  Orders.Add('DATE_CHANGE',otDesc);
end;

{ TBisCallcHbookSessionsForm }

constructor TBisCallcHbookSessionsForm.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  if Assigned(DataFrame) then begin
    with DataFrame do begin
      ActionInsert.Visible:=false;
      ActionDuplicate.Visible:=false;
      ActionUpdate.Visible:=false;
    end;
  end;
end;

end.
