/* Добавление колонки периода действия */

ALTER TABLE /*PREFIX*/OUT_MESSAGES
ADD PERIOD INTEGER

--

/* Удаление просмотра исходящих сообщений */

DROP VIEW /*PREFIX*/S_OUT_MESSAGES

--

/* Создание просмотра исходящих сообщений */

CREATE VIEW /*PREFIX*/S_OUT_MESSAGES
(
  OUT_MESSAGE_ID,
  CREATOR_ID,
  RECIPIENT_ID,
  DATE_CREATE,
  TEXT_OUT,
  DATE_OUT,
  TYPE_MESSAGE,
  CONTACT,
  DESCRIPTION,
  PRIORITY,
  LOCKED,
  PERIOD,
  CREATOR_NAME,
  RECIPIENT_NAME,
  RECIPIENT_PHONE,
  RECIPIENT_EMAIL
)
AS
SELECT OM.*,
       A1.USER_NAME AS CREATOR_NAME,
       A2.USER_NAME AS RECIPIENT_NAME,
       A2.PHONE AS RECIPIENT_PHONE,
       A2.EMAIL AS RECIPIENT_EMAIL
  FROM /*PREFIX*/OUT_MESSAGES OM
  JOIN /*PREFIX*/ACCOUNTS A1 ON A1.ACCOUNT_ID=OM.CREATOR_ID
  LEFT JOIN /*PREFIX*/ACCOUNTS A2 ON A2.ACCOUNT_ID=OM.RECIPIENT_ID

--

/* Создание процедуры добавления исходящего сообщения */

CREATE OR ALTER PROCEDURE /*PREFIX*/I_OUT_MESSAGE
(
  OUT_MESSAGE_ID VARCHAR(32),
  CREATOR_ID VARCHAR(32),
  RECIPIENT_ID VARCHAR(32),
  DATE_CREATE TIMESTAMP,
  TEXT_OUT VARCHAR(4000),
  DATE_OUT TIMESTAMP,
  TYPE_MESSAGE INTEGER,
  CONTACT VARCHAR(100),
  DESCRIPTION VARCHAR(250),
  PRIORITY INTEGER,
  LOCKED VARCHAR(32),
  PERIOD INTEGER
)
AS
BEGIN
  INSERT INTO /*PREFIX*/OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                      TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,
                                      PRIORITY,PERIOD)
       VALUES (:OUT_MESSAGE_ID,:CREATOR_ID,:RECIPIENT_ID,:DATE_CREATE,
               :TEXT_OUT,:DATE_OUT,:TYPE_MESSAGE,:CONTACT,:DESCRIPTION,
               :PRIORITY,:PERIOD);
END;

--

/* Создание процедуры изменения исходящего сообщения */

CREATE OR ALTER PROCEDURE /*PREFIX*/U_OUT_MESSAGE
(
  OUT_MESSAGE_ID VARCHAR(32),
  CREATOR_ID VARCHAR(32),
  RECIPIENT_ID VARCHAR(32),
  DATE_CREATE TIMESTAMP,
  TEXT_OUT VARCHAR(4000),
  DATE_OUT TIMESTAMP,
  TYPE_MESSAGE INTEGER,
  CONTACT VARCHAR(100),
  DESCRIPTION VARCHAR(250),
  PRIORITY INTEGER,
  LOCKED VARCHAR(32),
  PERIOD INTEGER,
  OLD_OUT_MESSAGE_ID VARCHAR(32)
)
AS
BEGIN
  UPDATE /*PREFIX*/OUT_MESSAGES
     SET OUT_MESSAGE_ID=:OUT_MESSAGE_ID,
         CREATOR_ID=:CREATOR_ID,
         RECIPIENT_ID=:RECIPIENT_ID,
         DATE_CREATE=:DATE_CREATE,
         TEXT_OUT=:TEXT_OUT,
         DATE_OUT=:DATE_OUT,
         TYPE_MESSAGE=:TYPE_MESSAGE,
         CONTACT=:CONTACT,
         DESCRIPTION=:DESCRIPTION,
         PRIORITY=:PRIORITY,
         LOCKED=:LOCKED,
         PERIOD=:PERIOD
   WHERE OUT_MESSAGE_ID=:OLD_OUT_MESSAGE_ID;
END;

--

/* Создание процедуры блокировки исходящих сообщений */

create or alter procedure LOCK_OUT_MESSAGES (
    MAX_COUNT integer,
    LOCKED varchar(32),
    TYPE_MESSAGE integer,
    PERIOD integer) 
returns (
    LOCK_COUNT integer) 
as
declare variable FLAG integer;
declare variable OUT_MESSAGE_ID varchar(32);
declare variable DATE_CREATE TIMESTAMP;
declare variable COMMON_PERIOD INTEGER;
declare variable MESSAGE_PERIOD INTEGER;
BEGIN
  LOCK_COUNT=0;

  FLAG=GEN_ID(GEN_LOCK_OUT_MESSAGES,0);

  IF (FLAG=0) THEN BEGIN

    FLAG=GEN_ID(GEN_LOCK_OUT_MESSAGES,-1);

    FOR SELECT OUT_MESSAGE_ID, DATE_CREATE, PERIOD
          FROM /*PREFIX*/OUT_MESSAGES
         WHERE DATE_OUT IS NULL
           AND LOCKED IS NULL
           AND TYPE_MESSAGE=:TYPE_MESSAGE
         ORDER BY PRIORITY, DATE_CREATE
          INTO :OUT_MESSAGE_ID, :DATE_CREATE, :MESSAGE_PERIOD DO BEGIN

      IF (MESSAGE_PERIOD IS NOT NULL) THEN
        COMMON_PERIOD=MESSAGE_PERIOD;
      ELSE
        COMMON_PERIOD=PERIOD;

      IF ((DATE_CREATE+(COMMON_PERIOD*(1e0/24/60/60)))>=CURRENT_TIMESTAMP) THEN BEGIN

        IF (LOCK_COUNT<=MAX_COUNT) THEN BEGIN

          UPDATE /*PREFIX*/OUT_MESSAGES
             SET LOCKED=:LOCKED
           WHERE OUT_MESSAGE_ID=:OUT_MESSAGE_ID;

          LOCK_COUNT=LOCK_COUNT+1;

        END ELSE BEGIN
          BREAK;
        END

      END

    END

    FLAG=GEN_ID(GEN_LOCK_OUT_MESSAGES,1);

  END

END

--

