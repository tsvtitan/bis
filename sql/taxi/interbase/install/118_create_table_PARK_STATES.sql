/* Создание таблицы состояния стоянок */

CREATE TABLE /*PREFIX*/PARK_STATES
(
  PARK_STATE_ID VARCHAR(32) NOT NULL,
  DRIVER_ID VARCHAR(32) NOT NULL,
  PARK_ID VARCHAR(32) NOT NULL,
  DATE_IN TIMESTAMP NOT NULL,
  DATE_OUT TIMESTAMP,
  PRIMARY KEY (PARK_STATE_ID),
  FOREIGN KEY (DRIVER_ID) REFERENCES /*PREFIX*/DRIVERS (DRIVER_ID),
  FOREIGN KEY (PARK_ID) REFERENCES /*PREFIX*/PARKS (PARK_ID)
)

--

/* Создание просмотра состояния стоянок */

CREATE VIEW /*PREFIX*/S_PARK_STATES
(
  PARK_STATE_ID,
  DRIVER_ID,
  PARK_ID,
  DATE_IN,
  DATE_OUT,
  PARK_NAME,
  PARK_DESCRIPTION,
  DRIVER_NAME,
  CAR_ID,
  MIN_BALANCE,
  CAR_COLOR,
  CAR_BRAND,
  CAR_STATE_NUM,
  CAR_TYPE_ID,
  CAR_CALLSIGN,
  SUM_CHARGE,
  SUM_RECEIPT,
  ACTUAL_BALANCE
)
AS
SELECT PS.*,
       P.NAME AS PARK_NAME,
       P.DESCRIPTION AS PARK_DESCRIPTION,
       A.USER_NAME AS DRIVER_NAME,
       D.CAR_ID,
       D.MIN_BALANCE,
       C.COLOR AS CAR_COLOR,
       C.BRAND AS CAR_BRAND,
       C.STATE_NUM AS CAR_STATE_NUM,
       C.CAR_TYPE_ID,
       C.CALLSIGN AS CAR_CALLSIGN,
       (CASE WHEN SAC.SUM_CHARGE IS NULL THEN 0.0 ELSE SAC.SUM_CHARGE END) SUM_CHARGE,
       (CASE WHEN SAR.SUM_RECEIPT IS NULL THEN 0.0 ELSE SAR.SUM_RECEIPT END) SUM_RECEIPT,
       ((CASE WHEN SAR.SUM_RECEIPT IS NULL THEN 0.0 ELSE SAR.SUM_RECEIPT END)-
        (CASE WHEN SAC.SUM_CHARGE IS NULL THEN 0.0 ELSE SAC.SUM_CHARGE END)) AS ACTUAL_BALANCE
  FROM /*PREFIX*/PARK_STATES PS
  JOIN /*PREFIX*/ACCOUNTS A ON A.ACCOUNT_ID=PS.DRIVER_ID
  JOIN /*PREFIX*/PARKS P ON P.PARK_ID=PS.PARK_ID
  JOIN /*PRFEIX*/DRIVERS D ON D.DRIVER_ID=PS.DRIVER_ID
  JOIN /*PREFIX*/CARS C ON C.CAR_ID=D.CAR_ID
  LEFT JOIN /*PREFIX*/S_ACCOUNT_CHARGES SAC ON SAC.ACCOUNT_ID=PS.DRIVER_ID
  LEFT JOIN /*PREFIX*/S_ACCOUNT_RECEIPTS SAR ON SAR.ACCOUNT_ID=PS.DRIVER_ID

--

/* Создание процедуры добавления состояния стоянке */

CREATE PROCEDURE /*PREFIX*/I_PARK_STATE
(
  PARK_STATE_ID VARCHAR(32),
  DRIVER_ID VARCHAR(32),
  PARK_ID VARCHAR(32),
  DATE_IN TIMESTAMP,
  DATE_OUT TIMESTAMP
)
AS
BEGIN
  INSERT INTO /*PREFIX*/PARK_STATES (PARK_STATE_ID,DRIVER_ID,PARK_ID,DATE_IN,DATE_OUT)
       VALUES (:PARK_STATE_ID,:DRIVER_ID,:PARK_ID,:DATE_IN,:DATE_OUT);
END;

--

/* Создание процедуры изменения состояния стоянки */

CREATE PROCEDURE /*PREFIX*/U_PARK_STATE
(
  PARK_STATE_ID VARCHAR(32),
  DRIVER_ID VARCHAR(32),
  PARK_ID VARCHAR(32),
  DATE_IN TIMESTAMP,
  DATE_OUT TIMESTAMP,
  OLD_PARK_STATE_ID VARCHAR(32)
)
AS
BEGIN
  UPDATE /*PREFIX*/PARK_STATES
     SET PARK_STATE_ID=:PARK_STATE_ID,
         DRIVER_ID=:DRIVER_ID,
         PARK_ID=:PARK_ID,
         DATE_IN=:DATE_IN,
         DATE_OUT=:DATE_OUT
   WHERE PARK_STATE_ID=:OLD_PARK_STATE_ID;
END;

--

/* Создание процедуры удаления состояния у стоянки */

CREATE PROCEDURE /*PREFIX*/D_PARK_STATE
(
  OLD_PARK_STATE_ID VARCHAR(32)
)
AS
BEGIN
  DELETE FROM /*PREFIX*/PARK_STATES 
        WHERE PARK_STATE_ID=:OLD_PARK_STATE_ID;
END;

--

/* Фиксация изменений */

COMMIT