ALTER TABLE SESSIONS
ADD QUERY_TEXT LONGBLOB

--

ALTER TABLE SESSIONS
ADD DURATION INTEGER

--

DROP VIEW S_SESSIONS

--

CREATE VIEW S_SESSIONS
(
    SESSION_ID,
    ACCOUNT_ID,
    APPLICATION_ID,
    DATE_CREATE,
    DATE_CHANGE,
    PARAMS,
    QUERY_TEXT,
    DURATION,
    USER_NAME,
    APPLICATION_NAME
)
AS
SELECT S.*, 
       AC.USER_NAME AS USER_NAME,
       AP.NAME AS APPLICATION_NAME
  FROM SESSIONS S
  JOIN ACCOUNTS AC ON AC.ACCOUNT_ID=S.ACCOUNT_ID
  JOIN APPLICATIONS AP ON AP.APPLICATION_ID=S.APPLICATION_ID

--

DROP PROCEDURE I_SESSION

--

CREATE PROCEDURE I_SESSION
(
  IN SESSION_ID VARCHAR(32),
  IN ACCOUNT_ID VARCHAR(32),
  IN APPLICATION_ID VARCHAR(32),
  IN DATE_CREATE DATETIME,
  IN DATE_CHANGE DATETIME,
  IN PARAMS LONGBLOB,
  IN QUERY_TEXT LONGBLOB,
  IN DURATION INTEGER
)
BEGIN
  INSERT INTO SESSIONS (SESSION_ID,ACCOUNT_ID,APPLICATION_ID,DATE_CREATE,DATE_CHANGE,
                        PARAMS,QUERY_TEXT,DURATION)
       VALUES (SESSION_ID,ACCOUNT_ID,APPLICATION_ID,DATE_CREATE,DATE_CHANGE,
               PARAMS,QUERY_TEXT,DURATION);
END;

--

DROP PROCEDURE U_SESSION

--

CREATE PROCEDURE U_SESSION
(
  IN SESSION_ID VARCHAR(32),
  IN ACCOUNT_ID VARCHAR(32),
  IN APPLICATION_ID VARCHAR(32),
  IN DATE_CREATE DATETIME,
  IN DATE_CHANGE DATETIME,
  IN PARAMS LONGBLOB,
  IN QUERY_TEXT LONGBLOB,
  IN DURATION INTEGER,
  IN OLD_SESSION_ID VARCHAR(32)
)
BEGIN
  UPDATE SESSIONS S
     SET S.SESSION_ID=SESSION_ID,
         S.ACCOUNT_ID=ACCOUNT_ID,
         S.APPLICATION_ID=APPLICATION_ID,
         S.DATE_CREATE=DATE_CREATE,
         S.DATE_CHANGE=DATE_CHANGE,
         S.PARAMS=PARAMS,
         S.QUERY_TEXT=QUERY_TEXT,
         S.DURATION=DURATION
   WHERE S.SESSION_ID=OLD_SESSION_ID;
END;

--

CREATE TABLE CONSULTANTS
(
  CONSULTANT_ID VARCHAR(32) NOT NULL,
  PRIMARY KEY (CONSULTANT_ID),
  FOREIGN KEY (CONSULTANT_ID) REFERENCES ACCOUNTS (ACCOUNT_ID)
)

--

CREATE VIEW S_CONSULTANTS
AS
SELECT C.*,
       A.USER_NAME,
       A.PASSWORD,
       A.DATE_CREATE,
       A.LOCKED,
       A.DESCRIPTION,
       A.SURNAME,
       A.NAME,
       A.PATRONYMIC,
       A.EMAIL,
       A.PHOTO,
       A.PHONE,
       A.JOB_TITLE,
       A.FIRM_ID,
       F.SMALL_NAME AS FIRM_SMALL_NAME
  FROM CONSULTANTS C
  JOIN ACCOUNTS A ON A.ACCOUNT_ID=C.CONSULTANT_ID
  LEFT JOIN FIRMS F ON F.FIRM_ID=A.FIRM_ID

--

CREATE PROCEDURE I_CONSULTANT
(
  IN CONSULTANT_ID VARCHAR(32),
  IN FIRM_ID VARCHAR(32),
  IN DATE_CREATE DATETIME,
  IN USER_NAME VARCHAR(100),
  IN PASSWORD VARCHAR(100),
  IN LOCKED INTEGER,
  IN DESCRIPTION VARCHAR(250),
  IN SURNAME VARCHAR(100),
  IN NAME VARCHAR(100),
  IN PATRONYMIC VARCHAR(100),
  IN PHONE VARCHAR(100),
  IN EMAIL VARCHAR(100),
  IN PHOTO LONGBLOB,
  IN JOB_TITLE VARCHAR(250)
)
BEGIN
  INSERT INTO ACCOUNTS (ACCOUNT_ID,FIRM_ID,DATE_CREATE,USER_NAME,PASSWORD,DB_USER_NAME,DB_PASSWORD,
	                      LOCKED,DESCRIPTION,IS_ROLE,AUTO_CREATED,SURNAME,NAME,PATRONYMIC,PHONE,EMAIL,PHOTO,JOB_TITLE)
                VALUES (CONSULTANT_ID,FIRM_ID,DATE_CREATE,USER_NAME,PASSWORD,NULL,NULL,
	                      LOCKED,DESCRIPTION,0,0,SURNAME,NAME,PATRONYMIC,PHONE,EMAIL,PHOTO,JOB_TITLE);
                        
  INSERT INTO CONSULTANTS (CONSULTANT_ID)
                   VALUES (CONSULTANT_ID);
END;

--

CREATE PROCEDURE U_CONSULTANT
(
  IN CONSULTANT_ID VARCHAR(32),
  IN FIRM_ID VARCHAR(32),
  IN DATE_CREATE DATETIME,
  IN USER_NAME VARCHAR(100),
  IN PASSWORD VARCHAR(100),
  IN LOCKED INTEGER,
  IN DESCRIPTION VARCHAR(250),
  IN SURNAME VARCHAR(100),
  IN NAME VARCHAR(100),
  IN PATRONYMIC VARCHAR(100),
  IN PHONE VARCHAR(100),
  IN EMAIL VARCHAR(100),
  IN PHOTO LONGBLOB,
  IN JOB_TITLE VARCHAR(250),
  IN OLD_CONSULTANT_ID VARCHAR(32)
)
BEGIN
  UPDATE ACCOUNTS A
     SET A.ACCOUNT_ID=CONSULTANT_ID,
         A.FIRM_ID=FIRM_ID,
         A.DATE_CREATE=DATE_CREATE,
         A.USER_NAME=USER_NAME,
         A.PASSWORD=PASSWORD,
         A.LOCKED=LOCKED,
         A.DESCRIPTION=DESCRIPTION,
         A.SURNAME=SURNAME,
         A.NAME=NAME,
         A.PATRONYMIC=PATRONYMIC,
         A.PHONE=PHONE,
         A.EMAIL=EMAIL,
         A.PHOTO=PHOTO,
         A.JOB_TITLE=JOB_TITLE
   WHERE A.ACCOUNT_ID=OLD_CONSULTANT_ID;
   
  UPDATE CONSULTANTS C
     SET C.CONSULTANT_ID=CONSULTANT_ID
   WHERE C.CONSULTANT_ID=OLD_CONSULTANT_ID;
END;

--

CREATE PROCEDURE D_CONSULTANT
(
  IN OLD_CONSULTANT_ID VARCHAR(32)
)
BEGIN
  DELETE FROM CONSULTANTS
        WHERE CONSULTANT_ID=OLD_CONSULTANT_ID;
        
  DELETE FROM ACCOUNTS
        WHERE ACCOUNT_ID=OLD_CONSULTANT_ID;
END;

--

CREATE TABLE SUBJECTS
(
  SUBJECT_ID VARCHAR(32) NOT NULL,
  PARENT_ID VARCHAR(32),
  NAME VARCHAR(100) NOT NULL,
  DESCRIPTION VARCHAR(250),
  PRIORITY INTEGER NOT NULL,
  LEVEL INTEGER NOT NULL,
  PRIMARY KEY (SUBJECT_ID),
  FOREIGN KEY (PARENT_ID) REFERENCES SUBJECTS (SUBJECT_ID)
)

--

CREATE VIEW S_SUBJECTS
AS
   SELECT S.*, 
          S1.NAME AS PARENT_NAME					
     FROM SUBJECTS S
     LEFT JOIN	SUBJECTS S1 ON S1.SUBJECT_ID=S.PARENT_ID

--

CREATE PROCEDURE I_SUBJECT
(
  IN SUBJECT_ID VARCHAR(32),
  IN PARENT_ID VARCHAR(32),
  IN NAME VARCHAR(100),
  IN DESCRIPTION VARCHAR(250),
  IN PRIORITY INTEGER
)
BEGIN
  DECLARE LEVEL INTEGER;
  IF (PARENT_ID IS NULL) THEN
    SET LEVEL=1;
  ELSE
    SELECT S.LEVEL+1 INTO LEVEL 
      FROM SUBJECTS S
     WHERE S.SUBJECT_ID=PARENT_ID;
  END IF;
  INSERT INTO SUBJECTS (SUBJECT_ID,PARENT_ID,NAME,DESCRIPTION,PRIORITY,LEVEL)
       VALUES (SUBJECT_ID,PARENT_ID,NAME,DESCRIPTION,PRIORITY,LEVEL);
END;

--

CREATE PROCEDURE R_SUBJECT_LEVELS
(
  IN PARENT_ID VARCHAR(32),
	IN LEVEL INTEGER
)
BEGIN
  DECLARE SUBJECT_ID VARCHAR(32);
  DECLARE DONE INTEGER DEFAULT 0;
  DECLARE C1 CURSOR FOR SELECT S.SUBJECT_ID
                          FROM SUBJECTS S WHERE S.PARENT_ID=PARENT_ID;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET DONE=1;
  OPEN C1;
  FETCH C1 INTO SUBJECT_ID;
  WHILE NOT DONE DO
    UPDATE SUBJECTS S
       SET S.LEVEL=LEVEL+1
     WHERE S.SUBJECT_ID=SUBJECT_ID;
     
    CALL R_SUBJECT_LEVELS(SUBJECT_ID,LEVEL+1);
    
    FETCH C1 INTO SUBJECT_ID;
  END WHILE;
  CLOSE C1;	
END;

--

CREATE PROCEDURE U_SUBJECT
(
  IN SUBJECT_ID VARCHAR(32),
  IN PARENT_ID VARCHAR(32),
  IN NAME VARCHAR(100),
  IN DESCRIPTION VARCHAR(250),
  IN PRIORITY INTEGER,
  IN OLD_SUBJECT_ID VARCHAR(32)
)
BEGIN
 DECLARE LEVEL INTEGER;
 IF (PARENT_ID IS NULL) THEN
   SET LEVEL=1;
 ELSE
   SELECT S.LEVEL+1 INTO LEVEL 
     FROM SUBJECTS S
    WHERE S.SUBJECT_ID=PARENT_ID;
 END IF;

 UPDATE SUBJECTS S
    SET S.SUBJECT_ID=SUBJECT_ID,
        S.PARENT_ID=PARENT_ID,
	S.NAME=NAME,
	S.DESCRIPTION=DESCRIPTION,
	S.PRIORITY=PRIORITY,
	S.LEVEL=LEVEL
   WHERE S.SUBJECT_ID=OLD_SUBJECT_ID;
	
  CALL R_SUBJECT_LEVELS(SUBJECT_ID,LEVEL);
END;

--

CREATE PROCEDURE D_SUBJECT
(
  IN OLD_SUBJECT_ID VARCHAR(32)
)
BEGIN
  DELETE FROM SUBJECTS
        WHERE SUBJECT_ID=OLD_SUBJECT_ID;
END;

--

CREATE TABLE QUESTIONS
(
  QUESTION_ID VARCHAR(32) NOT NULL,
  SUBJECT_ID VARCHAR(32) NOT NULL,
  CONSULTANT_ID VARCHAR(32),
  NUM VARCHAR(10) NOT NULL,
  DATE_CREATE DATETIME NOT NULL,
  NAME VARCHAR(100) NOT NULL,
  CONTACT VARCHAR(100) NOT NULL,
  QUESTION_TEXT LONGBLOB NOT NULL,
  PRIMARY KEY (QUESTION_ID),
  FOREIGN KEY (SUBJECT_ID) REFERENCES SUBJECTS (SUBJECT_ID),
  FOREIGN KEY (CONSULTANT_ID) REFERENCES CONSULTANTS (CONSULTANT_ID)
)

--

CREATE VIEW S_QUESTIONS
AS
   SELECT Q.*, 
          S.NAME AS SUBJECT_NAME,
          A.SURNAME AS CONSULTANT_SURNAME,
          A.NAME AS CONSULTANT_NAME,
          A.PATRONYMIC AS CONSULTANT_PATRONYMIC
     FROM QUESTIONS Q
     JOIN SUBJECTS S ON S.SUBJECT_ID=Q.SUBJECT_ID
     LEFT JOIN CONSULTANTS C ON C.CONSULTANT_ID=Q.CONSULTANT_ID
     LEFT JOIN ACCOUNTS A ON A.ACCOUNT_ID=C.CONSULTANT_ID

--

CREATE PROCEDURE I_QUESTION
(
  IN QUESTION_ID VARCHAR(32),
  IN SUBJECT_ID VARCHAR(32),
  IN CONSULTANT_ID VARCHAR(32),
  IN NUM VARCHAR(10),
  IN DATE_CREATE DATETIME,
  IN NAME VARCHAR(100),
  IN CONTACT VARCHAR(100),
  IN QUESTION_TEXT LONGBLOB
)
BEGIN
  INSERT INTO QUESTIONS (QUESTION_ID,SUBJECT_ID,CONSULTANT_ID,NUM,DATE_CREATE,NAME,CONTACT,QUESTION_TEXT)
       VALUES (QUESTION_ID,SUBJECT_ID,CONSULTANT_ID,NUM,DATE_CREATE,NAME,CONTACT,QUESTION_TEXT);
END;

--

CREATE PROCEDURE U_QUESTION
(
  IN QUESTION_ID VARCHAR(32),
  IN SUBJECT_ID VARCHAR(32),
  IN CONSULTANT_ID VARCHAR(32),
  IN NUM VARCHAR(10),
  IN DATE_CREATE DATETIME,
  IN NAME VARCHAR(100),
  IN CONTACT VARCHAR(100),
  IN QUESTION_TEXT LONGBLOB,
  IN OLD_QUESTION_ID VARCHAR(32)
)
BEGIN
 UPDATE QUESTIONS Q
    SET Q.QUESTION_ID=QUESTION_ID,
        Q.SUBJECT_ID=SUBJECT_ID,
        Q.CONSULTANT_ID=CONSULTANT_ID,
        Q.NUM=NUM,
        Q.DATE_CREATE=DATE_CREATE,
        Q.NAME=NAME,
        Q.CONTACT=CONTACT,
        Q.QUESTION_TEXT=QUESTION_TEXT
  WHERE Q.QUESTION_ID=OLD_QUESTION_ID;
END;

--

CREATE PROCEDURE D_QUESTION
(
  IN OLD_QUESTION_ID VARCHAR(32)
)
BEGIN
  DELETE FROM QUESTIONS
        WHERE QUESTION_ID=OLD_QUESTION_ID;
END;

--

CREATE TABLE ANSWERS
(
  ANSWER_ID VARCHAR(32) NOT NULL,
  CONSULTANT_ID VARCHAR(32) NOT NULL,
  QUESTION_ID VARCHAR(32) NOT NULL,
  DATE_CREATE DATETIME NOT NULL,
  ANSWER_TEXT LONGBLOB NOT NULL,
  PRIMARY KEY (ANSWER_ID),
  FOREIGN KEY (CONSULTANT_ID) REFERENCES CONSULTANTS (CONSULTANT_ID),
  FOREIGN KEY (QUESTION_ID) REFERENCES QUESTIONS (QUESTION_ID)
)

--

CREATE VIEW S_ANSWERS
AS
   SELECT A.*, 
          A1.SURNAME AS CONSULTANT_SURNAME,
          A1.NAME AS CONSULTANT_NAME,
          A1.PATRONYMIC AS CONSULTANT_PATRONYMIC,
          Q.NUM AS QUESTION_NUM,
          Q.DATE_CREATE AS QUESTION_DATE_CREATE
     FROM ANSWERS A
     JOIN CONSULTANTS C ON C.CONSULTANT_ID=A.CONSULTANT_ID
     JOIN ACCOUNTS A1 ON A1.ACCOUNT_ID=C.CONSULTANT_ID
     JOIN QUESTIONS Q ON Q.QUESTION_ID=A.QUESTION_ID

--

CREATE PROCEDURE I_ANSWER
(
  IN ANSWER_ID VARCHAR(32),
  IN CONSULTANT_ID VARCHAR(32),
  IN QUESTION_ID VARCHAR(32),
  IN DATE_CREATE DATETIME,
  IN ANSWER_TEXT LONGBLOB
)
BEGIN
  INSERT INTO ANSWERS (ANSWER_ID,CONSULTANT_ID,QUESTION_ID,DATE_CREATE,ANSWER_TEXT)
       VALUES (ANSWER_ID,CONSULTANT_ID,QUESTION_ID,DATE_CREATE,ANSWER_TEXT);
END;

--

CREATE PROCEDURE U_ANSWER
(
  IN ANSWER_ID VARCHAR(32),
  IN CONSULTANT_ID VARCHAR(32),
  IN QUESTION_ID VARCHAR(32),
  IN DATE_CREATE DATETIME,
  IN ANSWER_TEXT LONGBLOB,
  IN OLD_ANSWER_ID VARCHAR(32)
)
BEGIN
 UPDATE ANSWERS A
    SET A.ANSWER_ID=ANSWER_ID,
        A.CONSULTANT_ID=CONSULTANT_ID,
        A.QUESTION_ID=QUESTION_ID,
        A.DATE_CREATE=DATE_CREATE,
        A.ANSWER_TEXT=ANSWER_TEXT
  WHERE A.ANSWER_ID=OLD_ANSWER_ID;
END;

--

CREATE PROCEDURE D_ANSWER
(
  IN OLD_ANSWER_ID VARCHAR(32)
)
BEGIN
  DELETE FROM ANSWERS
        WHERE ANSWER_ID=OLD_ANSWER_ID;
END;

--

DROP PROCEDURE D_QUESTION

--

CREATE PROCEDURE D_QUESTION
(
  IN OLD_QUESTION_ID VARCHAR(32)
)
BEGIN
  DELETE FROM ANSWERS
        WHERE QUESTION_ID=OLD_QUESTION_ID;
        
  DELETE FROM QUESTIONS
        WHERE QUESTION_ID=OLD_QUESTION_ID;
END;

--

