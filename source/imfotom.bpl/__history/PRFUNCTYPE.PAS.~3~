unit PRFUNCTYPE;
{**************************************************************************}
{                                                                          }
{    This C DLL header file first (automatic) conversion generated by:     }
{    HeadConv 4.0 (c) 2000 by Bob Swart (aka Dr.Bob - www.drbob42.com)     }
{      Final Delphi-Jedi (Darth) command-line units edition                }
{                                                                          }
{    Generated Date: 02.05.2008                                            }
{    Generated Time: 15:08:18                                              }
{                                                                          }
{**************************************************************************}

interface
uses
{$IFDEF WIN32}
  Windows, PRTYPE;
{$ELSE}
  Wintypes, WinProcs;
{$ENDIF}


{=> u:\source\imfotom.bpl\ps-rec+sdk+v1.1.0c\psrecsdk\inc\PRFUNCTYPE.H <=}

{$IFNDEF _PR_FNC_TYPE_H_}
{$DEFINE _PR_FNC_TYPE_H_}

{$IFDEF macintosh}
{$IFDEF PRAGMA_STRUCT_ALIGN}
{ #pragma options align=mac68k }
{$ENDIF}
{$ENDIF}


{+//*************************************************************************** }
{-**************************************************************************** }
{-* PowerShot RemoteCapture SDK : Function Pointers* }
{-**************************************************************************** }
{=*************************************************************************** }

{+//----------------------------------------------------------------------- }
{-Basic Functions }
{=------------------------------------------------------------------------ }

(*type
  = PRRESPONSE PRSTDCALL PRSTARTSDK( PRVOID );

type
  = PRRESPONSE PRSTDCALL PRFINISHSDK( PRVOID );

type
  = PRRESPONSE PRSTDCALL PRGETDLLSVERSION( PRUINT32* PBUFFERSIZE, PRDLLSVERINFO* PDLLVERSION );

{+//----------------------------------------------------------------------- }
{-Basic Camera Device Functios }
{=------------------------------------------------------------------------ }

{+// Enumeration of Camera Devices*/ }
type
  = PRRESPONSE PRSTDCALL PRGETDEVICELIST( PRUINT32* PBUFFERSIZE, PRDEVICELIST* PDEVICELIST );

{+// Creation/Deletion of Camera Handles*/ }
type
  = PRRESPONSE PRSTDCALL PRCREATECAMERAOBJECT( PRDEVICEINFOTABLE* PDEVICEINFO, PRHANDLE* PCAMERAHANDLE );

type
  = PRRESPONSE PRSTDCALL PRDESTROYCAMERAOBJECT( PRHANDLE CAMERAHANDLE );

{+// Connecting/Disconnecting Camera Devices*/ }
type
  = PRRESPONSE PRSTDCALL PRCONNECTCAMERA( PRHANDLE CAMERAHANDLE );

type
  = PRRESPONSE PRSTDCALL PRDISCONNECTCAMERA( PRHANDLE CAMERAHANDLE );

{+// Retrieving Camera Events*/ }
type
  = PRRESPONSE PRSTDCALL PRSETEVENTCB( PRHANDLE CAMERAHANDLE, PRCONTEXT CONTEXT, PRVOID* PEVENTDATA );

type
  = PRRESPONSE PRSTDCALL PRSETEVENTCALLBACK( PRHANDLE CAMERAHANDLE, PRCONTEXT CONTEXT, PRSETEVENTCB* PSETEVENTCB );

type
  = PRRESPONSE PRSTDCALL PRCLEAREVENTCALLBACK( PRHANDLE CAMERAHANDLE );

{+// Retrieving Camera Device Performance Information*/ }
type
  = PRRESPONSE PRSTDCALL PRGETDEVICEINFO( PRHANDLE CAMERAHANDLE, PRUINT32* PBUFFERSIZE, PRVOID* PDEVICEINFO );


{+//----------------------------------------------------------------------- }
{-Remote Release Control Functions }
{=------------------------------------------------------------------------ }

{+// Basic Functions*/ }
type
  = PRRESPONSE PRSTDCALL PRINITIATERELEASECONTROL( PRHANDLE CAMERAHANDLE );

type
  = PRRESPONSE PRSTDCALL PRTERMINATERELEASECONTROL( PRHANDLE CAMERAHANDLE );

type
  = PRRESPONSE PRSTDCALL PRRC_RELEASE( PRHANDLE CAMERAHANDLE );

type
  = PRRESPONSE PRSTDCALL PRGETFILEDATACB( PRHANDLE CAMERAHANDLE, PROBJECTHANDLE OBJECTHANDLE, PRCONTEXT CONTEXT, PRPROGRESS* PPROGRESS );

type
  = PRRESPONSE PRSTDCALL PRRC_GETRELEASEDDATA( PRHANDLE CAMERAHANDLE, PROBJECTHANDLE OBJECTHANDLE, PRPTPEVENTCODE EVENTCODE, PRUINT32 TRANSSIZE, PRCONTEXT CONTEXT, PRGETFILEDATACB* PGETFILEDATACB );

type
  = PRRESPONSE PRSTDCALL PRRC_GETNUMAVAILABLESHOT( PRHANDLE CAMERAHANDLE, PRUINT32* PNUM );

{+// Viewfinder Function*/ }
type
  = PRRESPONSE PRSTDCALL PRVIEWFINDERCB ( PRHANDLE CAMERAHANDLE, PRCONTEXT CONTEXT, PRUINT32 SIZE, PRVOID* PVFDATA );

type
  = PRRESPONSE PRSTDCALL PRRC_STARTVIEWFINDER( PRHANDLE CAMERAHANDLE, PRCONTEXT CONTEXT, PRVIEWFINDERCB* PVIEWFINDERCB );

type
  = PRRESPONSE PRSTDCALL PRRC_TERMVIEWFINDER( PRHANDLE CAMERAHANDLE );

type
  = PRRESPONSE PRSTDCALL PRRC_DOAEAFAWB( PRHANDLE CAMERAHANDLE, PRPTPAEAFAWBRESETFLAG RESETFLAG );

{+// AF Lock Settings*/ }
type
  = PRRESPONSE PRSTDCALL PRRC_FOCUSLOCK( PRHANDLE CAMERAHANDLE );

type
  = PRRESPONSE PRSTDCALL PRRC_FOCUSUNLOCK( PRHANDLE CAMERAHANDLE );

{+//----------------------------------------------------------------------- }
{-Device Property Functions }
{=------------------------------------------------------------------------ }

type
  = PRRESPONSE PRSTDCALL PRGETDEVICEPROPDESC( PRHANDLE CAMERAHANDLE, PRPTPDEVICEPROPCODE DEVICEPROPCODE, PRUINT32* PBUFFERSIZE, PRVOID* PDEVICEPROPDESC );

type
  = PRRESPONSE PRSTDCALL PRGETDEVICEPROPVALUE( PRHANDLE CAMERAHANDLE, PRPTPDEVICEPROPCODE DEVICEPROPCODE, PRUINT32* PBUFFERSIZE, PRVOID* PDEVICEPROPERTY );

type
  = PRRESPONSE PRSTDCALL PRSETDEVICEPROPVALUE( PRHANDLE CAMERAHANDLE, PRPTPDEVICEPROPCODE DEVICEPROPCODE, PRUINT32 DATASIZE, PRVOID* PDEVICEPROPERTY );

type
  = PRRESPONSE PRSTDCALL PRRC_GETCHANGEDRELEASEPARAMESLIST( PRHANDLE CAMERAHANDLE, PRUINT32* PBUFFERSIZE, PRVOID* PPARAMSLIST );

  *)
{+//----------------------------------------------------------------------- }
{-prFunctions }
{-Structure of function pointers }
{=------------------------------------------------------------------------ }

const
  prCURRENT_FUNCTABLE_VERSION = $00000001;

type
  prFunctions = record
    Version: PRUINT32;
{= Version of this structure }

{+// Basic Functions*/ }
    pStartSDK: PPRSTARTSDK;
    pFinishSDK: PPRFINISHSDK;
    pGetDllsVersion: PPRGETDLLSVERSION;
{+// Basic Camera Device Functios*/ }
    pGetDeviceList: PPRGETDEVICELIST;
    pCreateCameraObject: PPRCREATECAMERAOBJECT;
    prDestroyCameraObject* pDestroyCameraObject: Integer;
    pConnectCamera: PPRCONNECTCAMERA;
    pDisconnectCamera: PPRDISCONNECTCAMERA;
    pSetEventCallBack: PPRSETEVENTCALLBACK;
    pClearEventCallBack: PPRCLEAREVENTCALLBACK;
    pGetDeviceInfo: PPRGETDEVICEINFO;
{+// Remote Release Control Functions*/ }
    pInitiateReleaseControl: PPRINITIATERELEASECONTROL;
    pTerminateReleaseControl: PPRTERMINATERELEASECONTROL;
    pRC_Release: PPRRC_RELEASE;
    pRC_GetReleasedData: PPRRC_GETRELEASEDDATA;
    pRC_GetNumAvailableShot: PPRRC_GETNUMAVAILABLESHOT;
    pRC_StartViewFinder: PPRRC_STARTVIEWFINDER;
    pRC_TermViewFinder: PPRRC_TERMVIEWFINDER;
    pRC_DoAeAfAwb: PPRRC_DOAEAFAWB;
    pRC_FocusLock: PPRRC_FOCUSLOCK;
    pRC_FocusUnlock: PPRRC_FOCUSUNLOCK;
{+// Device Property Functions*/ }
    pGetDevicePropDesc: PPRGETDEVICEPROPDESC;
    pGetDevicePropValue: PPRGETDEVICEPROPVALUE;
    pSetDevicePropValue: PPRSETDEVICEPROPVALUE;
    pRC_GetChangedReleaseParamesList: PPRRC_GETCHANGEDRELEASEPARAMESLIST;
  end {prFunctions};

{+//------------------------------------------------------------------------ }
{-Function Pointer to get the structure of function pointers }
{=------------------------------------------------------------------------ }
type
  = PRRESPONSE PRSTDCALL PRGETFUNCTIONS( PRFUNCTIONS* PFUNCTIONS );


{$IFDEF macintosh}
{$IFDEF PRAGMA_STRUCT_ALIGN}
{ #pragma options align=reset }
{$ENDIF}
{$ENDIF}

{$ENDIF}



var
  DLLLoaded: Boolean { is DLL (dynamically) loaded already? }
    {$IFDEF WIN32} = False; {$ENDIF}

implementation

var
  SaveExit: pointer;
  DLLHandle: THandle;
{$IFNDEF MSDOS}
  ErrorMode: Integer;
{$ENDIF}

  procedure NewExit; far;
  begin
    ExitProc := SaveExit;
    FreeLibrary(DLLHandle)
  end {NewExit};

procedure LoadDLL;
begin
  if DLLLoaded then Exit;
{$IFNDEF MSDOS}
  ErrorMode := SetErrorMode($8000{SEM_NoOpenFileErrorBox});
{$ENDIF}
  DLLHandle := LoadLibrary('PRFUNCTYPE.DLL');
  if DLLHandle >= 32 then
  begin
    DLLLoaded := True;
    SaveExit := ExitProc;
    ExitProc := @NewExit;
  end
  else
  begin
    DLLLoaded := False;
    { Error: PRFUNCTYPE.DLL could not be loaded !! }
  end;
{$IFNDEF MSDOS}
  SetErrorMode(ErrorMode)
{$ENDIF}
end {LoadDLL};

begin
  LoadDLL;
end.
