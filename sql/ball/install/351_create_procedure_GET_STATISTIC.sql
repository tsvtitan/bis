CREATE OR ALTER PROCEDURE GET_STATISTIC
(
  TIRAGE_ID VARCHAR(32)
)
RETURNS
(
  DEALER_ID VARCHAR(32),
  DEALER_NAME VARCHAR(250),
  LOCALITY_NAME VARCHAR(250),
  STREET_NAME VARCHAR(100),
  DEALER_INDEX VARCHAR(10),
  HOUSE VARCHAR(10),
  FLAT VARCHAR(10),
  PAYMENT_TYPE INTEGER,
  PAYMENT_TYPE_NAME VARCHAR(100),
  PAYMENT_PERCENT NUMERIC(15,2),
  NUM_FROM INTEGER,
  NUM_TO INTEGER,
  TICKET_COUNT INTEGER,
  TICKET_SUM NUMERIC(15,2)
)
AS
DECLARE TICKET_COST NUMERIC(15,2);
DECLARE FLAG INTEGER;
DECLARE FIRST_NUM INTEGER;
DECLARE NUM_F INTEGER;
DECLARE NUM_T INTEGER;
DECLARE NUM_O INTEGER;
BEGIN
  SELECT TICKET_COST
    FROM TIRAGES
   WHERE TIRAGE_ID=:TIRAGE_ID
    INTO :TICKET_COST;

  FOR SELECT DISTINCT(T.DEALER_ID)
        FROM TICKETS T
       WHERE T.DEALER_ID IS NOT NULL
         AND T.TIRAGE_ID=:TIRAGE_ID
        INTO :DEALER_ID DO BEGIN

    FLAG=0;
    FIRST_NUM=1;
    TICKET_COUNT=0;
    NUM_O=0;

    FOR SELECT F.SMALL_NAME,
               L.NAME,
               S.NAME,
               F.INDEX_POST,
               F.HOUSE_POST,
               F.FLAT_POST,
               D.PAYMENT_TYPE,
               CASE WHEN D.PAYMENT_TYPE IS NOT NULL THEN DECODE(D.PAYMENT_TYPE,0,'Выкуп',1,'Постоплата') END,
               D.PAYMENT_PERCENT,
               CAST(T.NUM AS INTEGER)
          FROM TICKETS T
          LEFT JOIN DEALERS D ON D.DEALER_ID=T.DEALER_ID
          LEFT JOIN FIRMS F ON F.FIRM_ID=D.DEALER_ID
          LEFT JOIN STREETS S ON S.STREET_ID=F.STREET_POST_ID
          LEFT JOIN LOCALITIES L ON L.LOCALITY_ID=S.STREET_ID
         WHERE T.TIRAGE_ID=:TIRAGE_ID
           AND T.DEALER_ID=:DEALER_ID
         ORDER BY F.SMALL_NAME, T.NUM
          INTO :DEALER_NAME, :LOCALITY_NAME, :STREET_NAME,
               :DEALER_INDEX, :HOUSE, :FLAT,
               :PAYMENT_TYPE, :PAYMENT_TYPE_NAME, :PAYMENT_PERCENT, :NUM_T DO BEGIN

      IF (FIRST_NUM=1) THEN BEGIN
        NUM_F=NUM_T;
        NUM_O=NUM_T;
        FIRST_NUM=0;
      END ELSE BEGIN
        IF ((NUM_T-NUM_O)>1) THEN BEGIN
          FLAG=1;
        END ELSE BEGIN
          NUM_O=NUM_T;
        END
      END

      IF (FLAG=1) THEN BEGIN

        NUM_FROM=NUM_F;
        NUM_TO=NUM_O;
        TICKET_COUNT=NUM_O-NUM_F+1;

        IF (PAYMENT_TYPE=0) THEN BEGIN
          TICKET_SUM=NULL;
          IF (PAYMENT_PERCENT IS NOT NULL) THEN
            TICKET_SUM=(PAYMENT_PERCENT*TICKET_COST/100)*TICKET_COUNT;
        END ELSE BEGIN
          TICKET_SUM=TICKET_COST*TICKET_COUNT;
          PAYMENT_PERCENT=100.0;
        END

        SUSPEND;

        FLAG=0;
        NUM_F=NUM_T;
        NUM_O=NUM_T;

      END

    END

    IF ((FIRST_NUM=0) AND (FLAG=0)) THEN BEGIN

      NUM_FROM=NUM_F;
      NUM_TO=NUM_O;
      TICKET_COUNT=NUM_O-NUM_F+1;

      IF (PAYMENT_TYPE=0) THEN BEGIN
        TICKET_SUM=NULL;
        IF (PAYMENT_PERCENT IS NOT NULL) THEN
          TICKET_SUM=(PAYMENT_PERCENT*TICKET_COST/100)*TICKET_COUNT;
      END ELSE BEGIN
        TICKET_SUM=TICKET_COST*TICKET_COUNT;
        PAYMENT_PERCENT=100.0;
      END

      SUSPEND;

    END

  END

END
