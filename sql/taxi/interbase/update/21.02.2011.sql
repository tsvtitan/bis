DECLARE EXTERNAL FUNCTION SAVE_BLOB
    BLOB,
    CSTRING(32767)
RETURNS INTEGER BY VALUE
ENTRY_POINT 'SAVE_BLOB' MODULE_NAME 'udfibase.dll';

--

DECLARE EXTERNAL FUNCTION LOAD_BLOB
    BLOB,
    CSTRING(32767)
RETURNS PARAMETER 1
ENTRY_POINT 'LOAD_BLOB' MODULE_NAME 'udfibase.dll';

--

DECLARE EXTERNAL FUNCTION BLOB_LENGTH
    BLOB
RETURNS INTEGER BY VALUE
ENTRY_POINT 'BLOB_LENGTH' MODULE_NAME 'udfibase.dll';

--

DECLARE EXTERNAL FUNCTION DELETE_FILE
    CSTRING(32767)
RETURNS INTEGER BY VALUE
ENTRY_POINT 'DELETE_FILE' MODULE_NAME 'udfibase.dll';

--

CREATE OR ALTER PROCEDURE SEND_EVENT
(
  SORTING INTEGER,
  FIRST_RECORD INTEGER,
  APPLICATION_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32),
  INCLUDE_SESSION_ID VARCHAR(32),
  EXCLUDE_SESSION_ID VARCHAR(32),
  PROTOCOL INTEGER,
  NAME VARCHAR(100),
  IN_PARAMS BLOB
)
RETURNS (
  SUCCESS INTEGER,
  OUT_PARAMS BLOB)
AS
DECLARE TEMP BLOB;
DECLARE SESSION_ID VARCHAR(32);
DECLARE IP VARCHAR(20);
DECLARE PORT VARCHAR(10);
DECLARE HOST VARCHAR(100);
DECLARE PATH VARCHAR(100);
DECLARE USE_CRYPTER INTEGER;
DECLARE CRYPTER_ALGORITHM INTEGER;
DECLARE CRYPTER_MODE INTEGER;
DECLARE CRYPTER_KEY VARCHAR(100);
DECLARE USE_COMPRESSOR INTEGER;
DECLARE COMPRESSOR_LEVEL INTEGER;
DECLARE RND VARCHAR(4000);
BEGIN

  IF (PROTOCOL=0) THEN
    RND=RANDOM_STRING(32);
  ELSE
    RND=RANDOM_STRING(1024*3); /* for fast reaction */

  FOR SELECT SESSION_ID, IP, PORT, HOST, PATH,
             USE_CRYPTER, CRYPTER_ALGORITHM, CRYPTER_MODE, CRYPTER_KEY,
             USE_COMPRESSOR, COMPRESSOR_LEVEL
        FROM GET_EVENT_SESSIONS(:SORTING,:APPLICATION_ID,:ACCOUNT_ID,:PROTOCOL)
       WHERE ((:EXCLUDE_SESSION_ID IS NULL) OR (SESSION_ID<>:EXCLUDE_SESSION_ID))
         AND ((:INCLUDE_SESSION_ID IS NULL) OR (SESSION_ID=:INCLUDE_SESSION_ID))
        INTO :SESSION_ID, :IP, :PORT, :HOST, :PATH,
             :USE_CRYPTER, :CRYPTER_ALGORITHM, :CRYPTER_MODE, :CRYPTER_KEY,
             :USE_COMPRESSOR, :COMPRESSOR_LEVEL DO BEGIN

    SUCCESS=0;

    TEMP=CONFIG_WRITE(IN_PARAMS,NAME,'rnd',RND);
    TEMP=CONFIG_WRITE(TEMP,NAME,'SessionId',SESSION_ID);

    IF (USE_COMPRESSOR=1) THEN
      TEMP=COMPRESS_BLOB(TEMP,COMPRESSOR_LEVEL);

    IF (USE_CRYPTER=1) THEN
      TEMP=ENCODE_BLOB(TEMP,CRYPTER_KEY,CRYPTER_ALGORITHM,CRYPTER_MODE);

    IF (PROTOCOL=0) THEN BEGIN

      OUT_PARAMS=UDP(IP,PORT,TEMP);

      IF ((OUT_PARAMS IS NULL) OR (TRIM(OUT_PARAMS)='')) THEN
        SUCCESS=1;

    END ELSE BEGIN
      OUT_PARAMS=HTTP_POST(IP,PORT,PATH,TEMP);

      IF (USE_CRYPTER=1) THEN
        OUT_PARAMS=DECODE_BLOB(OUT_PARAMS,CRYPTER_KEY,CRYPTER_ALGORITHM,CRYPTER_MODE);

      IF (USE_COMPRESSOR=1) THEN
        OUT_PARAMS=DECOMPRESS_BLOB(OUT_PARAMS);

      IF (OUT_PARAMS IS NOT NULL) THEN
        SUCCESS=CAST(CONFIG_READ(OUT_PARAMS,NAME,'Success','0') AS INTEGER);

    END

    SUSPEND;

    IF (FIRST_RECORD=1) THEN
      BREAK;

  END

END

--

CREATE OR ALTER PROCEDURE GET_EVENT_SESSIONS
(
  SORTING INTEGER,
  IN_APPLICATION_ID VARCHAR(32),
  IN_ACCOUNT_ID VARCHAR(32),
  PROTOCOL INTEGER
)
RETURNS (
  SESSION_ID VARCHAR(32),
  APPLICATION_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32),
  DATE_CHANGE TIMESTAMP,
  IP VARCHAR(20),
  PORT VARCHAR(10),
  HOST VARCHAR(100),
  PATH VARCHAR(100),
  USE_CRYPTER INTEGER,
  CRYPTER_ALGORITHM INTEGER,
  CRYPTER_MODE INTEGER,
  CRYPTER_KEY VARCHAR(100),
  USE_COMPRESSOR INTEGER,
  COMPRESSOR_LEVEL INTEGER)
AS
declare variable SQL varchar(2000);
BEGIN

  SQL='SELECT SESSION_ID, APPLICATION_ID, ACCOUNT_ID, DATE_CHANGE FROM SESSIONS WHERE ';

  IF (IN_APPLICATION_ID IS NULL) THEN
    SQL=SQL||'APPLICATION_ID IS NOT NULL ';
  ELSE
    SQL=SQL||'APPLICATION_ID='''||IN_APPLICATION_ID||''' ';

  IF (IN_ACCOUNT_ID IS NULL) THEN
    SQL=SQL||'AND ACCOUNT_ID IS NOT NULL ';
  ELSE BEGIN
    SQL=SQL||'AND (ACCOUNT_ID='''||IN_ACCOUNT_ID||''' OR ';
    SQL=SQL||'ACCOUNT_ID IN (SELECT ACCOUNT_ID FROM ACCOUNT_ROLES WHERE ROLE_ID='''||IN_ACCOUNT_ID||''')) ';
  END

  IF (SORTING=0) THEN
    SQL=SQL||'ORDER BY DATE_CHANGE DESC';

  IF (SORTING=1) THEN
    SQL=SQL||'ORDER BY DATE_CHANGE ASC';

  FOR EXECUTE STATEMENT SQL
                   INTO :SESSION_ID, :APPLICATION_ID, :ACCOUNT_ID, :DATE_CHANGE DO BEGIN

    EXECUTE PROCEDURE GET_EVENT_PARAMS (SESSION_ID,PROTOCOL)
     RETURNING_VALUES IP, PORT, HOST, PATH,
                      USE_CRYPTER, CRYPTER_ALGORITHM, CRYPTER_MODE, CRYPTER_KEY,
                      USE_COMPRESSOR, COMPRESSOR_LEVEL;

    IF (IP IS NOT NULL) THEN
      SUSPEND;

  END

END

--

CREATE OR ALTER PROCEDURE GET_EVENT_PARAMS
(
  SESSION_ID VARCHAR(32),
  PROTOCOL INTEGER
)
RETURNS
(
  IP VARCHAR(20),
  PORT VARCHAR(10),
  HOST VARCHAR(100),
  PATH VARCHAR(100),
  USE_CRYPTER INTEGER,
  CRYPTER_ALGORITHM INTEGER,
  CRYPTER_MODE INTEGER,
  CRYPTER_KEY VARCHAR(100),
  USE_COMPRESSOR INTEGER,
  COMPRESSOR_LEVEL INTEGER
)
AS
DECLARE PARAMS BLOB;
DECLARE SECTION VARCHAR(100);
DECLARE S VARCHAR(1000);
BEGIN
  SELECT PARAMS
    FROM SESSIONS
   WHERE SESSION_ID=:SESSION_ID
    INTO :PARAMS;

  IF ((PROTOCOL=0) OR (PROTOCOL IS NULL)) THEN
    SECTION='ExternalUdpEventServer';
  ELSE
    SECTION='FirstHttpServerHandlerEvent';

  IF (CONFIG_EXISTS(PARAMS,SECTION)=1) THEN BEGIN

    S=CONFIG_READ(PARAMS,SECTION,'IP','');
    IP=SUB_STRING(CASE WHEN POSITION(';',S)>0 THEN SUBSTRING(S FROM 1 FOR POSITION(';',S)-1) ELSE S END,1,20);
    S=CONFIG_READ(PARAMS,SECTION,'Port','');
    PORT=SUB_STRING(CASE WHEN POSITION(';',S)>0 THEN SUBSTRING(S FROM 1 FOR POSITION(';',S)-1) ELSE S END,1,10);
    HOST=SUB_STRING(CONFIG_READ(PARAMS,SECTION,'Host',''),1,100);
    PATH=SUB_STRING(CONFIG_READ(PARAMS,SECTION,'Path',''),1,100);
    USE_CRYPTER=CAST(CONFIG_READ(PARAMS,SECTION,'UseCrypter','0') AS INTEGER);
    CRYPTER_ALGORITHM=CAST(CONFIG_READ(PARAMS,SECTION,'CrypterAlgorithm','0') AS INTEGER);
    CRYPTER_MODE=CAST(CONFIG_READ(PARAMS,SECTION,'CrypterMode','0') AS INTEGER);
    CRYPTER_KEY=CONFIG_READ(PARAMS,SECTION,'CrypterKey','');
    USE_COMPRESSOR=CAST(CONFIG_READ(PARAMS,SECTION,'UseCompressor','0') AS INTEGER);
    COMPRESSOR_LEVEL=CAST(CONFIG_READ(PARAMS,SECTION,'CompressorLevel','0') AS INTEGER);

  END

END

--

CREATE OR ALTER PROCEDURE GET_CLIENT_GROUP_PATH
(
  CLIENT_GROUP_ID VARCHAR(32),
  DELIM VARCHAR(10)
)
RETURNS
(
  PATH VARCHAR(4000)
)
AS
DECLARE NAME VARCHAR(100);
DECLARE PRIOR_PATH VARCHAR(1000);
DECLARE PARENT_ID VARCHAR(32);
BEGIN
  PARENT_ID=NULL;

  SELECT NAME, PARENT_ID
    FROM CLIENT_GROUPS
   WHERE CLIENT_GROUP_ID=:CLIENT_GROUP_ID
    INTO :NAME, :PARENT_ID;

  IF (PARENT_ID IS NOT NULL) THEN BEGIN

    EXECUTE PROCEDURE GET_CLIENT_GROUP_PATH(PARENT_ID,DELIM)
     RETURNING_VALUES PRIOR_PATH;

    PATH=PRIOR_PATH||DELIM||NAME;

  END ELSE BEGIN

    PATH=NAME;

  END

END

--

CREATE OR ALTER PROCEDURE GET_CALL_INFO
(
  ACCOUNT_ID VARCHAR(32),
  ACCOUNT_PHONE VARCHAR(32)
)
RETURNS
(
  CALL_ACCOUNT_ID VARCHAR(32),
  CALL_NAME VARCHAR(100),
  CALL_GROUP VARCHAR(4000),
  CALL_DESCRIPTION VARCHAR(250),
  CALL_KIND INTEGER
)
AS
DECLARE CALL_PHONE VARCHAR(100);
DECLARE PHONE VARCHAR(100);
DECLARE CNT INTEGER;
DECLARE USER_NAME VARCHAR(100);
DECLARE SURNAME VARCHAR(100);
DECLARE NAME VARCHAR(100);
DECLARE PATRONYMIC VARCHAR(100);
DECLARE DESCRIPTION VARCHAR(250);
DECLARE IS_ROLE INTEGER;
DECLARE FIRM_SMALL_NAME VARCHAR(250);
DECLARE CLIENT_GROUP_ID VARCHAR(32);
BEGIN
  CALL_KIND=0; /* Unknown */
  CALL_GROUP='Неизвестно';
  CALL_PHONE=ACCOUNT_PHONE;

  FOR SELECT A.ACCOUNT_ID, A.USER_NAME, A.SURNAME, A.NAME,
             A.PATRONYMIC, A.DESCRIPTION, A.IS_ROLE, F.SMALL_NAME
        FROM CLIENTS C
        JOIN ACCOUNTS A ON A.ACCOUNT_ID=C.CLIENT_ID
        LEFT JOIN FIRMS F ON F.FIRM_ID=A.FIRM_ID
        LEFT JOIN CLIENT_PHONES CP ON CP.CLIENT_ID=C.CLIENT_ID
       WHERE CP.PHONE=:CALL_PHONE
          OR A.PHONE=:CALL_PHONE
          OR A.ACCOUNT_ID=:ACCOUNT_ID
        INTO :ACCOUNT_ID, :USER_NAME, :SURNAME, :NAME,
             :PATRONYMIC, :DESCRIPTION, :IS_ROLE, :FIRM_SMALL_NAME DO BEGIN
    BREAK;
  END

  IF (ACCOUNT_ID IS NULL) THEN BEGIN

    FOR SELECT A.ACCOUNT_ID, A.USER_NAME, A.SURNAME, A.NAME,
               A.PATRONYMIC, A.DESCRIPTION, A.IS_ROLE, F.SMALL_NAME
          FROM ACCOUNTS A
          LEFT JOIN FIRMS F ON F.FIRM_ID=A.FIRM_ID
         WHERE A.PHONE=:CALL_PHONE
          INTO :ACCOUNT_ID, :USER_NAME, :SURNAME, :NAME,
               :PATRONYMIC, :DESCRIPTION, :IS_ROLE, :FIRM_SMALL_NAME DO BEGIN
      BREAK;
    END

  END ELSE BEGIN
  
    FOR SELECT A.ACCOUNT_ID, A.USER_NAME, A.SURNAME, A.NAME,
               A.PATRONYMIC, A.DESCRIPTION, A.IS_ROLE, F.SMALL_NAME
          FROM ACCOUNTS A
          LEFT JOIN FIRMS F ON F.FIRM_ID=A.FIRM_ID
         WHERE A.ACCOUNT_ID=:ACCOUNT_ID
          INTO :ACCOUNT_ID, :USER_NAME, :SURNAME, :NAME,
               :PATRONYMIC, :DESCRIPTION, :IS_ROLE, :FIRM_SMALL_NAME DO BEGIN
      BREAK;
    END
  
  END

  CALL_ACCOUNT_ID=ACCOUNT_ID;
    
  IF (ACCOUNT_ID IS NOT NULL) THEN BEGIN

    CALL_NAME=TRIM(CALL_PHONE);

    CALL_DESCRIPTION=NULL;
    IF (SURNAME IS NOT NULL) THEN
      CALL_DESCRIPTION=TRIM(SURNAME);
    IF (NAME IS NOT NULL) THEN
      CALL_DESCRIPTION=CALL_DESCRIPTION||' '||TRIM(NAME);
    IF (PATRONYMIC IS NOT NULL) THEN
      CALL_DESCRIPTION=CALL_DESCRIPTION||' '||TRIM(PATRONYMIC);
    IF (USER_NAME IS NOT NULL) THEN
      CALL_DESCRIPTION=TRIM(USER_NAME)||' - '||CALL_DESCRIPTION;

    IF (FIRM_SMALL_NAME IS NOT NULL) THEN BEGIN
      CALL_DESCRIPTION=CALL_DESCRIPTION||' ['||TRIM(FIRM_SMALL_NAME)||']';
    END

    SELECT COUNT(*)
      FROM CLIENTS
     WHERE CLIENT_ID=:ACCOUNT_ID
      INTO :CNT;

    IF (CNT>0) THEN BEGIN

      CLIENT_GROUP_ID=NULL;

      SELECT CLIENT_GROUP_ID
        FROM CLIENTS
       WHERE CLIENT_ID=:ACCOUNT_ID
        INTO :CLIENT_GROUP_ID;

      IF (CLIENT_GROUP_ID IS NOT NULL) THEN BEGIN

        CALL_GROUP=NULL;

        EXECUTE PROCEDURE GET_CLIENT_GROUP_PATH(CLIENT_GROUP_ID,'/')
         RETURNING_VALUES CALL_GROUP;

      END

      CALL_KIND=1; /* Client */
      IF (CALL_GROUP IS NOT NULL) THEN
        CALL_GROUP='Клиенты/'||CALL_GROUP;
      ELSE
        CALL_GROUP='Клиенты';


    END ElSE BEGIN

      SELECT COUNT(*)
        FROM DRIVERS
       WHERE DRIVER_ID=:ACCOUNT_ID
         INTO :CNT;

      IF (CNT>0) THEN BEGIN

        CALL_KIND=2; /* Driver */
        CALL_GROUP='Водители';

      END ELSE BEGIN

        SELECT COUNT(*)
          FROM DISPATCHERS
         WHERE DISPATCHER_ID=:ACCOUNT_ID
           INTO :CNT;

        IF (CNT>0) THEN BEGIN
          CALL_KIND=3; /* Dispatcher */
          CALL_GROUP='Диспетчеры';
        END ElSE BEGIN
          CALL_KIND=4; /* Account */
          CALL_GROUP='Учетные записи';
        END

      END

    END

  END ELSE BEGIN

    CALL_NAME=CALL_PHONE;

  END

END

--

CREATE TABLE CALL_RESULTS
(
  CALL_RESULT_ID VARCHAR(32) NOT NULL,
  NAME VARCHAR(100) NOT NULL,
  DESCRIPTION VARCHAR(250),
  VISIBLE INTEGER NOT NULL,
  PRIORITY INTEGER,
  PRIMARY KEY (CALL_RESULT_ID)
)

--

CREATE VIEW S_CALL_RESULTS
AS
SELECT *
  FROM CALL_RESULTS

--


CREATE OR ALTER PROCEDURE I_CALL_RESULT
(
  CALL_RESULT_ID VARCHAR(32),
  NAME VARCHAR(100),
  DESCRIPTION VARCHAR(250),
  VISIBLE INTEGER,
  PRIORITY INTEGER
)
AS
BEGIN
  INSERT INTO CALL_RESULTS (CALL_RESULT_ID,NAME,DESCRIPTION,VISIBLE,PRIORITY)
       VALUES (:CALL_RESULT_ID,:NAME,:DESCRIPTION,:VISIBLE,:PRIORITY);
END

--

CREATE OR ALTER PROCEDURE U_CALL_RESULT
(
  CALL_RESULT_ID VARCHAR(32),
  NAME VARCHAR(100),
  DESCRIPTION VARCHAR(250),
  VISIBLE INTEGER,
  PRIORITY INTEGER,
  OLD_CALL_RESULT_ID VARCHAR(32)
)
AS
BEGIN
  UPDATE CALL_RESULTS
     SET CALL_RESULT_ID=:CALL_RESULT_ID,
         NAME=:NAME,
         DESCRIPTION=:DESCRIPTION,
         VISIBLE=:VISIBLE,
         PRIORITY=:PRIORITY
   WHERE CALL_RESULT_ID=:OLD_CALL_RESULT_ID;
END

--

CREATE OR ALTER PROCEDURE D_CALL_RESULT
(
  OLD_CALL_RESULT_ID VARCHAR(32)
)
AS
BEGIN
  DELETE FROM CALL_RESULTS
        WHERE CALL_RESULT_ID=:OLD_CALL_RESULT_ID;
END;

--

/* Создание таблицы вызовов */

CREATE TABLE CALLS
(
  CALL_ID VARCHAR(32) NOT NULL,
  CALL_RESULT_ID VARCHAR(32) NOT NULL,
  LINE_ID VARCHAR(32) NOT NULL,
  DIRECTION INTEGER NOT NULL,
  OPERATOR_ID VARCHAR(32),
  ORDER_ID VARCHAR(32),
  FIRM_ID VARCHAR(32),
  CREATOR_ID VARCHAR(32) NOT NULL,
  DATE_CREATE TIMESTAMP NOT NULL,
  CALLER_ID VARCHAR(32),
  CALLER_PHONE VARCHAR(100),
  ACCEPTOR_ID VARCHAR(32),
  ACCEPTOR_PHONE VARCHAR(100),
  DATE_FOUND TIMESTAMP,
  DATE_BEGIN TIMESTAMP,
  DATE_END TIMESTAMP,
  TYPE_END INTEGER,
  CALLER_AUDIO BLOB,
  ACCEPTOR_AUDIO BLOB,
  IN_CHANNEL VARCHAR(100),
  OUT_CHANNEL VARCHAR(100),
  PRIMARY KEY (CALL_ID),
  FOREIGN KEY (CALL_RESULT_ID) REFERENCES CALL_RESULTS (CALL_RESULT_ID),
  FOREIGN KEY (OPERATOR_ID) REFERENCES OPERATORS (OPERATOR_ID),
  FOREIGN KEY (ORDER_ID) REFERENCES ORDERS (ORDER_ID),
  FOREIGN KEY (FIRM_ID) REFERENCES FIRMS (FIRM_ID),
  FOREIGN KEY (CREATOR_ID) REFERENCES ACCOUNTS (ACCOUNT_ID),
  FOREIGN KEY (CALLER_ID) REFERENCES ACCOUNTS (ACCOUNT_ID),
  FOREIGN KEY (ACCEPTOR_ID) REFERENCES ACCOUNTS (ACCOUNT_ID)
)

--

/* Создание просмотра вызовов */

CREATE OR ALTER VIEW S_CALLS
AS
SELECT C.CALL_ID,
       C.CALL_RESULT_ID,
       C.LINE_ID,
       C.DIRECTION,
       C.OPERATOR_ID,
       C.ORDER_ID,
       C.FIRM_ID,
       C.CREATOR_ID,
       C.DATE_CREATE,
       C.CALLER_ID,
       C.CALLER_PHONE,
       C.ACCEPTOR_ID,
       C.ACCEPTOR_PHONE,
       C.DATE_FOUND,
       C.DATE_BEGIN,
       C.DATE_END,
       C.TYPE_END,
       LOAD_BLOB('E:\Taxi\audio\'||BLOB_TO_STRING(C.CALLER_AUDIO,1,32)) AS CALLER_AUDIO,
       LOAD_BLOB('E:\Taxi\audio\'||BLOB_TO_STRING(C.ACCEPTOR_AUDIO,1,32)) AS ACCEPTOR_AUDIO,
       C.IN_CHANNEL,
       C.OUT_CHANNEL,
       CR.NAME AS CALL_RESULT_NAME,
       A1.USER_NAME AS CREATOR_USER_NAME,
       OP.NAME AS OPERATOR_NAME,
       A2.USER_NAME AS CALLER_USER_NAME,
       A2.SURNAME AS CALLER_SURNAME,
       A2.NAME AS CALLER_NAME,
       A2.PATRONYMIC AS CALLER_PATRONYMIC,
       A3.USER_NAME AS ACCEPTOR_USER_NAME,
       A3.SURNAME AS ACCEPTOR_SURNAME,
       A3.NAME AS ACCEPTOR_NAME,
       A3.PATRONYMIC AS ACCEPTOR_PATRONYMIC,
       F.SMALL_NAME AS FIRM_SMALL_NAME
  FROM CALLS C
  JOIN ACCOUNTS A1 ON A1.ACCOUNT_ID=C.CREATOR_ID
  LEFT JOIN CALL_RESULTS CR ON CR.CALL_RESULT_ID=C.CALL_RESULT_ID
  LEFT JOIN OPERATORS OP ON OP.OPERATOR_ID=C.OPERATOR_ID
  LEFT JOIN ACCOUNTS A2 ON A2.ACCOUNT_ID=C.CALLER_ID
  LEFT JOIN ACCOUNTS A3 ON A3.ACCOUNT_ID=C.ACCEPTOR_ID
  LEFT JOIN FIRMS F ON F.FIRM_ID=C.FIRM_ID

--

/* Создание процедуры добавления вызова */

CREATE OR ALTER PROCEDURE I_CALL
(
  CALL_ID VARCHAR(32),
  CALL_RESULT_ID VARCHAR(32),
  LINE_ID VARCHAR(32),
  DIRECTION INTEGER,
  OPERATOR_ID VARCHAR(32),
  ORDER_ID VARCHAR(32),
  FIRM_ID VARCHAR(32),
  CREATOR_ID VARCHAR(32),
  DATE_CREATE TIMESTAMP,
  CALLER_ID VARCHAR(32),
  CALLER_PHONE VARCHAR(100),
  ACCEPTOR_ID VARCHAR(32),
  ACCEPTOR_PHONE VARCHAR(100),
  DATE_FOUND TIMESTAMP,
  DATE_BEGIN TIMESTAMP,
  DATE_END TIMESTAMP,
  TYPE_END INTEGER,
  CALLER_AUDIO BLOB,
  ACCEPTOR_AUDIO BLOB,
  IN_CHANNEL VARCHAR(100),
  OUT_CHANNEL VARCHAR(100)
)
AS
DECLARE PATH VARCHAR(50)='E:\Taxi\audio\';
DECLARE S VARCHAR(32);
DECLARE TEMP_CALLER_AUDIO BLOB;
DECLARE TEMP_ACCEPTOR_AUDIO BLOB;
BEGIN

  S=GET_UNIQUE_ID();
  TEMP_CALLER_AUDIO=NULL;
  IF (BLOB_LENGTH(CALLER_AUDIO)>0) THEN BEGIN
    IF (SAVE_BLOB(CALLER_AUDIO,PATH||S)=0) THEN
      TEMP_CALLER_AUDIO=STRING_TO_BLOB(S);
  END

  S=GET_UNIQUE_ID();
  TEMP_ACCEPTOR_AUDIO=NULL;
  IF (BLOB_LENGTH(ACCEPTOR_AUDIO)>0) THEN BEGIN
    IF (SAVE_BLOB(ACCEPTOR_AUDIO,PATH||S)=0) THEN
      TEMP_ACCEPTOR_AUDIO=STRING_TO_BLOB(S);
  END

  INSERT INTO CALLS (CALL_ID,CALL_RESULT_ID,LINE_ID,DIRECTION,OPERATOR_ID,
                     ORDER_ID,FIRM_ID,CREATOR_ID,DATE_CREATE,CALLER_ID,CALLER_PHONE,
                     ACCEPTOR_ID,ACCEPTOR_PHONE,DATE_FOUND,DATE_BEGIN,DATE_END,TYPE_END,
                     CALLER_AUDIO,ACCEPTOR_AUDIO,IN_CHANNEL,OUT_CHANNEL)
             VALUES (:CALL_ID,:CALL_RESULT_ID,:LINE_ID,:DIRECTION,:OPERATOR_ID,
                     :ORDER_ID,:FIRM_ID,:CREATOR_ID,:DATE_CREATE,:CALLER_ID,:CALLER_PHONE,
                     :ACCEPTOR_ID,:ACCEPTOR_PHONE,:DATE_FOUND,:DATE_BEGIN,:DATE_END,:TYPE_END,
                     :TEMP_CALLER_AUDIO,:TEMP_ACCEPTOR_AUDIO,:IN_CHANNEL,:OUT_CHANNEL);
END;

--

/* Создание процедуры изменения вызова */

CREATE OR ALTER PROCEDURE U_CALL
(
  CALL_ID VARCHAR(32),
  CALL_RESULT_ID VARCHAR(32),
  LINE_ID VARCHAR(32),
  DIRECTION INTEGER,
  OPERATOR_ID VARCHAR(32),
  ORDER_ID VARCHAR(32),
  FIRM_ID VARCHAR(32),
  CREATOR_ID VARCHAR(32),
  DATE_CREATE TIMESTAMP,
  CALLER_ID VARCHAR(32),
  CALLER_PHONE VARCHAR(100),
  ACCEPTOR_ID VARCHAR(32),
  ACCEPTOR_PHONE VARCHAR(100),
  DATE_FOUND TIMESTAMP,
  DATE_BEGIN TIMESTAMP,
  DATE_END TIMESTAMP,
  TYPE_END INTEGER,
  CALLER_AUDIO BLOB,
  ACCEPTOR_AUDIO BLOB,
  IN_CHANNEL VARCHAR(100),
  OUT_CHANNEL VARCHAR(100),
  OLD_CALL_ID VARCHAR(32)
)
AS
DECLARE PATH VARCHAR(50)='E:\Taxi\audio\';
DECLARE S1 VARCHAR(32);
DECLARE S2 VARCHAR(32);
DECLARE TEMP_CALLER_AUDIO BLOB;
DECLARE TEMP_ACCEPTOR_AUDIO BLOB;
BEGIN

  SELECT FIRST 1
         BLOB_TO_STRING(C.CALLER_AUDIO,1,32),
         BLOB_TO_STRING(C.ACCEPTOR_AUDIO,1,32)
    FROM CALLS C
   WHERE CALL_ID=:OLD_CALL_ID
    INTO :S1, S2;

  IF ((S1 IS NULL) OR (S1='')) THEN
    S1=GET_UNIQUE_ID();

  TEMP_CALLER_AUDIO=NULL;
  IF (BLOB_LENGTH(CALLER_AUDIO)>0) THEN BEGIN
    IF (SAVE_BLOB(CALLER_AUDIO,PATH||S1)=0) THEN
      TEMP_CALLER_AUDIO=STRING_TO_BLOB(S1);
  END ELSE
    DELETE_FILE(PATH||S1);

  IF ((S2 IS NULL) OR (S2='')) THEN
    S2=GET_UNIQUE_ID();

  TEMP_ACCEPTOR_AUDIO=NULL;
  IF (BLOB_LENGTH(ACCEPTOR_AUDIO)>0) THEN BEGIN
    IF (SAVE_BLOB(ACCEPTOR_AUDIO,PATH||S2)=0) THEN
      TEMP_ACCEPTOR_AUDIO=STRING_TO_BLOB(S2);
  END ELSE
    DELETE_FILE(PATH||S2);

  UPDATE CALLS
     SET CALL_ID=:CALL_ID,
         CALL_RESULT_ID=:CALL_RESULT_ID,
         LINE_ID=:LINE_ID,
         DIRECTION=:DIRECTION,
         OPERATOR_ID=:OPERATOR_ID,
         ORDER_ID=:ORDER_ID,
         FIRM_ID=:FIRM_ID,
         CREATOR_ID=:CREATOR_ID,
         DATE_CREATE=:DATE_CREATE,
         CALLER_ID=:CALLER_ID,
         CALLER_PHONE=:CALLER_PHONE,
         ACCEPTOR_ID=:ACCEPTOR_ID,
         ACCEPTOR_PHONE=:ACCEPTOR_PHONE,
         DATE_FOUND=:DATE_FOUND,
         DATE_BEGIN=:DATE_BEGIN,
         DATE_END=:DATE_END,
         TYPE_END=:TYPE_END,
         CALLER_AUDIO=:TEMP_CALLER_AUDIO,
         ACCEPTOR_AUDIO=:TEMP_ACCEPTOR_AUDIO,
         IN_CHANNEL=:IN_CHANNEL,
         OUT_CHANNEL=:OUT_CHANNEL
   WHERE CALL_ID=:OLD_CALL_ID;
END;


--

/* Создание процедуры удаления вызова */

CREATE OR ALTER PROCEDURE D_CALL
(
  OLD_CALL_ID VARCHAR(32)
)
AS
DECLARE PATH VARCHAR(50)='E:\Taxi\audio\';
DECLARE S1 VARCHAR(32);
DECLARE S2 VARCHAR(32);
BEGIN

  SELECT FIRST 1
         BLOB_TO_STRING(CALLER_AUDIO,1,32),
         BLOB_TO_STRING(ACCEPTOR_AUDIO,1,32)
    FROM CALLS
   WHERE CALL_ID=:OLD_CALL_ID
    INTO :S1, :S2;


  DELETE_FILE(PATH||S1);

  DELETE_FILE(PATH||S2);

  DELETE FROM CALLS
        WHERE CALL_ID=:OLD_CALL_ID;
END;

--

CREATE OR ALTER PROCEDURE GET_CALL_PARAMS
(
  SESSION_ID VARCHAR(32),
  PROTOCOL INTEGER
)
RETURNS
(
  CLIENT_IP VARCHAR(20),
  CLIENT_PORT VARCHAR(10),
  CLIENT_LISTEN_IP VARCHAR(20),
  CLIENT_HOST VARCHAR(100),
  CLIENT_PATH VARCHAR(100),
  CLIENT_USE_CRYPTER INTEGER,
  CLIENT_CRYPTER_ALGORITHM INTEGER,
  CLIENT_CRYPTER_MODE INTEGER,
  CLIENT_CRYPTER_KEY VARCHAR(100),
  CLIENT_USE_COMPRESSOR INTEGER,
  CLIENT_COMPRESSOR_LEVEL INTEGER,
  SERVER_SESSION_ID VARCHAR(32),
  SERVER_IP VARCHAR(20),
  SERVER_PORT VARCHAR(10),
  SERVER_LISTEN_IP VARCHAR(20),
  SERVER_HOST VARCHAR(100),
  SERVER_PATH VARCHAR(100),
  SERVER_USE_CRYPTER INTEGER,
  SERVER_CRYPTER_ALGORITHM INTEGER,
  SERVER_CRYPTER_MODE INTEGER,
  SERVER_CRYPTER_KEY VARCHAR(100),
  SERVER_USE_COMPRESSOR INTEGER,
  SERVER_COMPRESSOR_LEVEL INTEGER
)
AS
BEGIN

  EXECUTE PROCEDURE GET_EVENT_PARAMS (SESSION_ID,PROTOCOL)
   RETURNING_VALUES CLIENT_IP, CLIENT_PORT, CLIENT_LISTEN_IP, CLIENT_HOST, CLIENT_PATH,
                    CLIENT_USE_CRYPTER, CLIENT_CRYPTER_ALGORITHM, CLIENT_CRYPTER_MODE,
                    CLIENT_CRYPTER_KEY, CLIENT_USE_COMPRESSOR, CLIENT_COMPRESSOR_LEVEL;

  FOR SELECT SESSION_ID, IP, PORT, LISTEN_IP, HOST, PATH,
             USE_CRYPTER, CRYPTER_ALGORITHM, CRYPTER_MODE,
             CRYPTER_KEY, USE_COMPRESSOR, COMPRESSOR_LEVEL
        FROM GET_EVENT_SESSIONS (0,'A35F5701A7AA920E40812A71A690910D',NULL,:PROTOCOL)
        INTO SERVER_SESSION_ID, SERVER_IP, SERVER_PORT, SERVER_LISTEN_IP, SERVER_HOST, SERVER_PATH,
             SERVER_USE_CRYPTER, SERVER_CRYPTER_ALGORITHM, SERVER_CRYPTER_MODE,
             SERVER_CRYPTER_KEY, SERVER_USE_COMPRESSOR, SERVER_COMPRESSOR_LEVEL DO BEGIN
             
    BREAK;
  END

END

--

CREATE OR ALTER PROCEDURE TRANSFORM_PHONE
(
  IN_PHONE VARCHAR(100)
)
RETURNS
(
  OUT_PHONE VARCHAR(100)
)
AS
DECLARE PREFIX VARCHAR(100);
DECLARE L INTEGER;
BEGIN
  OUT_PHONE=NULL;

  IF (IN_PHONE IS NOT NULL) THEN BEGIN

    L=STRING_LENGTH(IN_PHONE);

    IF (L>7) THEN BEGIN

      IF (L<=12) THEN BEGIN

        IF (L=12) THEN BEGIN

          PREFIX=SUB_STRING(IN_PHONE,1,2);

          IF (PREFIX='+7') THEN
            OUT_PHONE=IN_PHONE;

        END ELSE BEGIN

          IF (L>=10) THEN BEGIN

            IF (L=10) THEN BEGIN

              PREFIX=SUB_STRING(IN_PHONE,1,3);

              IF (PREFIX='391') THEN
                OUT_PHONE=SUB_STRING(IN_PHONE,4,L);
              ELSE
               OUT_PHONE='+7'||IN_PHONE;

            END ELSE BEGIN

              PREFIX=SUB_STRING(IN_PHONE,1,4);

              IF (PREFIX='8391') THEN
                OUT_PHONE=SUB_STRING(IN_PHONE,5,L);
              ELSE BEGIN

               PREFIX=SUB_STRING(IN_PHONE,1,2);
               IF (PREFIX='89') THEN
                 OUT_PHONE='+7'||SUB_STRING(IN_PHONE,2,L);
               ELSE BEGIN

                 PREFIX=SUB_STRING(IN_PHONE,1,1);
                 IF (PREFIX='7') THEN
                   OUT_PHONE='+'||IN_PHONE;
                 ELSE
                   OUT_PHONE=IN_PHONE;

               END

              END

            END

          END

        END

      END

    END ELSE BEGIN

      IF (L=7) THEN
        OUT_PHONE=IN_PHONE;
      ELSE BEGIN
        IF (L=6) THEN
          OUT_PHONE='2'||IN_PHONE;
      END


    END

  END

END

--

CREATE OR ALTER PROCEDURE GET_OPERATOR
(
  PHONE VARCHAR(100)
)
RETURNS
(
  OPERATOR_ID VARCHAR(32),
  RANGE_MIN BIGINT,
  RANGE_MAX BIGINT,
  PHONE_NUM BIGINT
)
AS
DECLARE RANGES VARCHAR(32000);
DECLARE RANGE VARCHAR(1000);
DECLARE POS INTEGER;
DECLARE FLAG INTEGER;
DECLARE AOPERATOR_ID VARCHAR(32);
DECLARE ARANGE_MIN BIGINT;
DECLARE ARANGE_MAX BIGINT;
DECLARE APHONE_NUM BIGINT;
BEGIN
  OPERATOR_ID=NULL;
  FLAG=0;
  IF (PHONE IS NOT NULL) THEN BEGIN

    PHONE=TRIM(REPLACE_STRING(PHONE,'+',''));
    APHONE_NUM=CAST(PHONE AS BIGINT);

    FOR SELECT OPERATOR_ID, CAST(BLOB_TO_STRING(RANGES,1,32000) AS VARCHAR(32000))
          FROM OPERATORS
         WHERE ENABLED=1
         ORDER BY PRIORITY
          INTO :AOPERATOR_ID, :RANGES DO BEGIN

      IF (RANGES IS NOT NULL) THEN BEGIN

        POS=-1;
        WHILE (POS<>0) DO BEGIN

          POS=POSITION(CHR(13)||CHR(10),RANGES);
          IF (POS>0) THEN BEGIN
            RANGE=SUB_STRING(RANGES,1,POS-1);
            RANGES=SUB_STRING(RANGES,POS+2,32000);
          END ELSE
            RANGE=SUB_STRING(RANGES,1,1000);

          EXECUTE PROCEDURE GET_RANGE(RANGE)
           RETURNING_VALUES ARANGE_MIN, ARANGE_MAX;

          IF ((APHONE_NUM>=ARANGE_MIN) AND (APHONE_NUM<=ARANGE_MAX)) THEN BEGIN
            FLAG=1;
            BREAK;
          END

        END
        
      END

      IF (FLAG=1) THEN BEGIN
        OPERATOR_ID=:AOPERATOR_ID;
        RANGE_MIN=ARANGE_MIN;
        RANGE_MAX=ARANGE_MAX;
        PHONE_NUM=APHONE_NUM;
        BREAK;
      END

    END

  END

END

--

CREATE OR ALTER PROCEDURE INCOMING_CALL_CHECK
(
  CALLER_PHONE VARCHAR(100),
  CHANNEL VARCHAR(100)
)
RETURNS
(
  ACCOUNT_ID VARCHAR(32),
  PHONE VARCHAR(100),
  OPERATOR_ID VARCHAR(32),
  FIRM_ID VARCHAR(32),
  CHECKED INTEGER
)
AS
DECLARE CNT INTEGER;
DECLARE RANGE_MIN BIGINT;
DECLARE RANGE_MAX BIGINT;
DECLARE PHONE_NUM BIGINT;
BEGIN
  CHECKED=0;

  IF (CHANNEL IS NOT NULL) THEN BEGIN

    FIRM_ID=NULL;

    IF (CHANNEL='CallServerSipChannel2026672') THEN

      FIRM_ID='C49DF004D660BBAF434839044848F5B8';

    IF (CHANNEL='CallServerSipChannel2904021') THEN

      FIRM_ID='81DCAB751C23A5C942A41C19FE3FC78E';

  END

  IF ((CALLER_PHONE IS NOT NULL) AND (CALLER_PHONE<>'Anonymous')) THEN BEGIN

    EXECUTE PROCEDURE TRANSFORM_PHONE (CALLER_PHONE)
     RETURNING_VALUES PHONE;

    EXECUTE PROCEDURE GET_OPERATOR (PHONE)
     RETURNING_VALUES OPERATOR_ID, RANGE_MIN, RANGE_MAX, PHONE_NUM;

    SELECT FIRST 1
           ACCOUNT_ID
      FROM ACCOUNTS
     WHERE PHONE=:PHONE
      INTO :ACCOUNT_ID;

    IF (ACCOUNT_ID IS NULL) THEN BEGIN

      SELECT FIRST 1
             CLIENT_ID
        FROM CLIENT_PHONES
       WHERE PHONE=:PHONE
        INTO :ACCOUNT_ID;

    END

    SELECT COUNT(*)
      FROM BLACKS
     WHERE PHONE=:PHONE
      INTO :CNT;

    IF (CNT=0) THEN BEGIN

      CHECKED=1;

    END

  END

END

--

CREATE OR ALTER PROCEDURE OUTGOING_CALL_CHECK
(
  CALLER_ID VARCHAR(32),
  ACCEPTOR_PHONE VARCHAR(100)
)
RETURNS
(
  ACCOUNT_ID VARCHAR(32),
  PHONE VARCHAR(100),
  OPERATOR_ID VARCHAR(32),
  FIRM_ID VARCHAR(32),
  CHECKED INTEGER
)
AS
DECLARE CNT INTEGER;
DECLARE RANGE_MIN BIGINT;
DECLARE RANGE_MAX BIGINT;
DECLARE PHONE_NUM BIGINT;
BEGIN
  CHECKED=0;

  SELECT FIRST 1
         FIRM_ID
    FROM ACCOUNTS
   WHERE ACCOUNT_ID=:CALLER_ID
    INTO :FIRM_ID;

  IF (ACCEPTOR_PHONE IS NOT NULL) THEN BEGIN

    EXECUTE PROCEDURE TRANSFORM_PHONE (ACCEPTOR_PHONE)
     RETURNING_VALUES PHONE;

    EXECUTE PROCEDURE GET_OPERATOR (PHONE)
     RETURNING_VALUES OPERATOR_ID, RANGE_MIN, RANGE_MAX, PHONE_NUM;

    SELECT FIRST 1
           ACCOUNT_ID
      FROM ACCOUNTS
     WHERE PHONE=:PHONE
      INTO :ACCOUNT_ID;

    IF (ACCOUNT_ID IS NULL) THEN BEGIN

      SELECT FIRST 1
             CLIENT_ID
        FROM CLIENT_PHONES
       WHERE PHONE=:PHONE
        INTO :ACCOUNT_ID;

    END

    CHECKED=1;

  END

END

--

CREATE OR ALTER PROCEDURE GET_CALL_SESSIONS
(
  CALL_ID VARCHAR(32)
)
RETURNS (
  SESSION_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32)
)
AS
DECLARE DIRECTION INTEGER;
DECLARE APPLICATION_ID VARCHAR(32);
DECLARE FIRM_ID VARCHAR(32);
DECLARE PARAMS BLOB;
DECLARE ENABLED INTEGER;
BEGIN

  SELECT DIRECTION, FIRM_ID
    FROM CALLS
   WHERE CALL_ID=:CALL_ID
    INTO :DIRECTION, :FIRM_ID;

  IF (DIRECTION IS NOT NULL) THEN BEGIN

    IF (DIRECTION=0) THEN BEGIN

      SESSION_ID=NULL;
      APPLICATION_ID='A35F5701A7AA920E40812A71A690910D';

      FOR SELECT GS.SESSION_ID, GS.ACCOUNT_ID, S.PARAMS
            FROM GET_EVENT_SESSIONS(0,:APPLICATION_ID,NULL,NULL) GS
            JOIN DISPATCHERS D ON D.DISPATCHER_ID=GS.ACCOUNT_ID
            JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DISPATCHER_ID
            JOIN SESSIONS S ON S.SESSION_ID=GS.SESSION_ID
           WHERE A.FIRM_ID=:FIRM_ID
           UNION ALL
          SELECT GS.SESSION_ID, GS.ACCOUNT_ID, S.PARAMS
            FROM GET_EVENT_SESSIONS(0,:APPLICATION_ID,NULL,NULL) GS
            JOIN DISPATCHERS D ON D.DISPATCHER_ID=GS.ACCOUNT_ID
            JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DISPATCHER_ID
            JOIN SESSIONS S ON S.SESSION_ID=GS.SESSION_ID
           WHERE A.FIRM_ID<>:FIRM_ID
           UNION ALL
          SELECT GS.SESSION_ID, GS.ACCOUNT_ID, S.PARAMS
            FROM GET_EVENT_SESSIONS(0,:APPLICATION_ID,NULL,NULL) GS
            JOIN DISPATCHERS D ON D.DISPATCHER_ID=GS.ACCOUNT_ID
            JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DISPATCHER_ID
            JOIN SESSIONS S ON S.SESSION_ID=GS.SESSION_ID
           WHERE A.FIRM_ID IS NULL
            INTO :SESSION_ID, :ACCOUNT_ID, :PARAMS DO BEGIN

        ENABLED=CAST(CONFIG_READ(PARAMS,'TaxiPhoneForm','Enabled','0') AS INTEGER);

        IF (ENABLED=1) THEN
          SUSPEND;
      END

    END

  END

END

--

CREATE OR ALTER PROCEDURE CODE_MAKE_ORDER
(
  SESSION_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32),
  IN_MESSAGE_ID VARCHAR(32)
)
AS
DECLARE CONTACT VARCHAR(100);
DECLARE SENDER_ID VARCHAR(32);
DECLARE S VARCHAR(70);
DECLARE CNT INTEGER;
DECLARE CONST_VALUE VARCHAR(4000);
DECLARE ORDER_NUM VARCHAR(10);
DECLARE ACTION_ID VARCHAR(32);
DECLARE RATE_ID VARCHAR(32);
DECLARE CAR_TYPE_ID VARCHAR(32);
DECLARE CLIENT_ID VARCHAR(32);
DECLARE STREET_ID VARCHAR(32);
DECLARE HOUSE VARCHAR(10);
DECLARE FLAT VARCHAR(10);
DECLARE PORCH VARCHAR(10);
DECLARE ADDRESS_DESC VARCHAR(250);
DECLARE LOCKED INTEGER;
DECLARE ORDER_ID VARCHAR(32);
DECLARE TYPE_MESSAGE INTEGER;
DECLARE DEST_PORT INTEGER;
DECLARE FIRM_ID VARCHAR(32);
DECLARE RND INTEGER;
DECLARE TYPE_ACCEPT INTEGER;
BEGIN
  SELECT CONTACT, SENDER_ID, TYPE_MESSAGE
    FROM IN_MESSAGES
   WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID
    INTO :CONTACT, :SENDER_ID, TYPE_MESSAGE;

  SELECT COUNT(*)
    FROM BLACKS
   WHERE UPPER(PHONE)=UPPER(:CONTACT)
    INTO :CNT;

  IF ((CONTACT IS NOT NULL) AND (CNT=0)) THEN BEGIN

    SELECT LOCKED, CLIENT_ID, STREET_ID, HOUSE, FLAT, PORCH, ADDRESS_DESC
      FROM CLIENTS C
      JOIN ACCOUNTS A ON A.ACCOUNT_ID=C.CLIENT_ID
     WHERE C.CLIENT_ID=:SENDER_ID
      INTO :LOCKED, :CLIENT_ID, :STREET_ID, :HOUSE, :FLAT, :PORCH, :ADDRESS_DESC;

    IF ((CLIENT_ID IS NULL) OR ((CLIENT_ID IS NOT NULL) AND (LOCKED<>1))) THEN BEGIN

      SELECT CONST_VALUE FROM GET_CONST_VALUE('CB66FC06A78BB69D430EB7BD1AFA13FA') INTO :S;

      EXECUTE PROCEDURE GET_TYPE_MESSAGE(SENDER_ID,TYPE_MESSAGE)
       RETURNING_VALUES TYPE_MESSAGE, DEST_PORT;

      IF ((S IS NOT NULL) AND (TYPE_MESSAGE IS NOT NULL)) THEN BEGIN

        STREET_ID='FA27330C653381FA4EDE11ECF0959DD6';  /* Красноярск - .*/
        HOUSE=NULL;
        FLAT=NULL;
        PORCH=NULL;
        ADDRESS_DESC=NULL;

        EXECUTE PROCEDURE GET_ORDER_NUM
         RETURNING_VALUES :ORDER_NUM;

        ACTION_ID='E019DBDE7D55BEC34D12A709EE3FEB0B'; /* Создание */

        RATE_ID=NULL;
        FOR SELECT RATE_ID
             FROM RATES
            ORDER BY PRIORITY
             INTO :RATE_ID DO BEGIN
          BREAK;
        END

        CAR_TYPE_ID=NULL;
        FOR SELECT CAR_TYPE_ID
              FROM CAR_TYPES
             ORDER BY PRIORITY
              INTO :CAR_TYPE_ID DO BEGIN
          BREAK;
        END

        IF ((RATE_ID IS NOT NULL) AND (CAR_TYPE_ID IS NOT NULL)) THEN BEGIN

          ORDER_ID=GET_UNIQUE_ID();

          FIRM_ID='C49DF004D660BBAF434839044848F5B8'; /* АТакси */

          RND=RANDOM(10);

          IF (RND=8) THEN
            FIRM_ID='81DCAB751C23A5C942A41C19FE3FC78E'; /* Прорыв */
            
          TYPE_ACCEPT=0;
          IF (TYPE_MESSAGE IN (0,1)) THEN
            TYPE_ACCEPT=1;

          INSERT INTO ORDERS (ORDER_ID,ACTION_ID,RATE_ID,CAR_TYPE_ID,WHO_ACCEPT_ID,
                              CLIENT_ID,STREET_ID,HOUSE,FLAT,PORCH,DESCRIPTION,
                              ORDER_NUM,PHONE,DATE_ACCEPT,DATE_ARRIVAL,TYPE_ACCEPT,
                              TYPE_PROCESS,BEFORE_PERIOD,DATE_BEGIN,FINISHED,FIRM_ID)
                      VALUES (:ORDER_ID,:ACTION_ID,:RATE_ID,:CAR_TYPE_ID,:ACCOUNT_ID,
                              :CLIENT_ID,:STREET_ID,:HOUSE,:FLAT,:PORCH,:ADDRESS_DESC,
                              :ORDER_NUM,:CONTACT,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,:TYPE_ACCEPT,
                              1,30,CURRENT_TIMESTAMP,0,:FIRM_ID);

          UPDATE IN_MESSAGES
             SET ORDER_ID=:ORDER_ID
           WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID;

          S=REPLACE_STRING(S,'%ORDER_NUM',ORDER_NUM);

          INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                    TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,
                                    PRIORITY,LOCKED,DATE_BEGIN,ORDER_ID,DEST_PORT,FIRM_ID)
                            VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                    :S,NULL,:TYPE_MESSAGE,:CONTACT,NULL,
                                    1,NULL,CURRENT_TIMESTAMP,:ORDER_ID,:DEST_PORT,:FIRM_ID);

        END

      END

    END

  END

END

--

CREATE OR ALTER PROCEDURE GET_CALL_SERVER_SESSION_ID
(
  PROTOCOL INTEGER
)
RETURNS
(
  SERVER_SESSION_ID VARCHAR(32)
)
AS
BEGIN

  FOR SELECT SESSION_ID
        FROM GET_EVENT_SESSIONS (0,'E1CA5F4E6E49A2324F78E8D3A7B7659B',NULL,:PROTOCOL)
        INTO :SERVER_SESSION_ID DO BEGIN
             
    BREAK;
  END

END

--

CREATE OR ALTER PROCEDURE OUTGOING_PHONE_PREPARE
(
  IN_PHONE VARCHAR(100),
  CHANNEL VARCHAR(100)
)
RETURNS
(
  OUT_PHONE VARCHAR(100)
)
AS
DECLARE PREFIX VARCHAR(100);
DECLARE L INTEGER;
BEGIN
  OUT_PHONE=IN_PHONE;

  IF (CHANNEL IS NOT NULL) THEN BEGIN

    L=STRING_LENGTH(IN_PHONE);

    IF (L>2) THEN BEGIN

      PREFIX=SUB_STRING(IN_PHONE,1,2);

      IF (PREFIX='+7') THEN
        OUT_PHONE='8'||SUB_STRING(IN_PHONE,3,L);
    END

  END

END

--

ALTER TABLE ACCOUNTS
ADD PHONE_INTERNAL VARCHAR(100)

--

CREATE OR ALTER VIEW S_ACCOUNTS
AS
SELECT A.*, 
       F.SMALL_NAME AS FIRM_SMALL_NAME
  FROM ACCOUNTS A
  LEFT JOIN FIRMS F ON F.FIRM_ID=A.FIRM_ID

--

CREATE OR ALTER PROCEDURE I_ACCOUNT
(
  ACCOUNT_ID VARCHAR(32),
  FIRM_ID VARCHAR(32),
  DATE_CREATE TIMESTAMP,
  USER_NAME VARCHAR(100),
  "PASSWORD" VARCHAR(100),
  DESCRIPTION VARCHAR(250),
  DB_USER_NAME VARCHAR(100),
  DB_PASSWORD VARCHAR(100),
  IS_ROLE INTEGER,
  LOCKED INTEGER,
  AUTO_CREATED INTEGER,
  SURNAME VARCHAR(100),
  NAME VARCHAR(100),
  PATRONYMIC VARCHAR(100),
  PHONE VARCHAR(100),
  EMAIL VARCHAR(100),
  PHOTO BLOB,
  JOB_TITLE VARCHAR(250),
  PHONE_INTERNAL VARCHAR(100)
)
AS
BEGIN
  INSERT INTO ACCOUNTS (ACCOUNT_ID,FIRM_ID,DATE_CREATE,USER_NAME,"PASSWORD",DESCRIPTION,DB_USER_NAME,DB_PASSWORD,
                        IS_ROLE,LOCKED,AUTO_CREATED,SURNAME,NAME,PATRONYMIC,PHONE,EMAIL,PHOTO,JOB_TITLE,PHONE_INTERNAL)
       VALUES (:ACCOUNT_ID,:FIRM_ID,:DATE_CREATE,:USER_NAME,:"PASSWORD",:DESCRIPTION,:DB_USER_NAME,:DB_PASSWORD,
               :IS_ROLE,:LOCKED,:AUTO_CREATED,:SURNAME,:NAME,:PATRONYMIC,:PHONE,:EMAIL,:PHOTO,:JOB_TITLE,:PHONE_INTERNAL);
END

--

CREATE OR ALTER PROCEDURE U_ACCOUNT
(
  ACCOUNT_ID VARCHAR(32),
  FIRM_ID VARCHAR(32),
  DATE_CREATE TIMESTAMP,
  USER_NAME VARCHAR(100),
  "PASSWORD" VARCHAR(100),
  DESCRIPTION VARCHAR(250),
  DB_USER_NAME VARCHAR(100),
  DB_PASSWORD VARCHAR(100),
  IS_ROLE INTEGER,
  LOCKED INTEGER,
  AUTO_CREATED INTEGER,
  SURNAME VARCHAR(100),
  NAME VARCHAR(100),
  PATRONYMIC VARCHAR(100),
  PHONE VARCHAR(100),
  EMAIL VARCHAR(100),
  PHOTO BLOB,
  JOB_TITLE VARCHAR(250),
  PHONE_INTERNAL VARCHAR(100),
  OLD_ACCOUNT_ID VARCHAR(32)
)
AS
BEGIN
  UPDATE ACCOUNTS
     SET ACCOUNT_ID=:ACCOUNT_ID,
         FIRM_ID=:FIRM_ID,
         DATE_CREATE=:DATE_CREATE,
         USER_NAME=:USER_NAME,
         "PASSWORD"=:"PASSWORD",
         DESCRIPTION=:DESCRIPTION,
         DB_USER_NAME=:DB_USER_NAME,
         DB_PASSWORD=:DB_PASSWORD,
         IS_ROLE=:IS_ROLE,
         LOCKED=:LOCKED,
         AUTO_CREATED=:AUTO_CREATED,
         SURNAME=:SURNAME,
         NAME=:NAME,
         PATRONYMIC=:PATRONYMIC,
         PHONE=:PHONE,
         EMAIL=:EMAIL,
         PHOTO=:PHOTO,
         JOB_TITLE=:JOB_TITLE,
         PHONE_INTERNAL=:PHONE_INTERNAL
   WHERE ACCOUNT_ID=:OLD_ACCOUNT_ID;
END

--

CREATE OR ALTER VIEW S_DISPATCHERS
AS
SELECT D.*,
       A.PHONE,
       A.DESCRIPTION,
       A.USER_NAME,
       A."PASSWORD",
       A.DATE_CREATE,
       A.LOCKED,
       A.SURNAME,
       A.NAME,
       A.PATRONYMIC,
       A.FIRM_ID,
       A.PHONE_INTERNAL,
       CL.NAME AS CALC_NAME,
       F.SMALL_NAME AS FIRM_SMALL_NAME
  FROM DISPATCHERS D
  JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DISPATCHER_ID
  LEFT JOIN CALCS CL ON CL.CALC_ID=D.CALC_ID
  LEFT JOIN FIRMS F ON F.FIRM_ID=A.FIRM_ID

--

CREATE OR ALTER PROCEDURE I_DISPATCHER 
(
  DISPATCHER_ID VARCHAR(32),
  CALC_ID VARCHAR(32),
  PHONE VARCHAR(100),
  PHONE_HOME VARCHAR(100),
  PHONE_INTERNAL VARCHAR(100),
  DESCRIPTION VARCHAR(250),
  PASSPORT VARCHAR(250),
  PLACE_BIRTH VARCHAR(250),
  DATE_BIRTH DATE,
  ADDRESS_RESIDENCE VARCHAR(250),
  ADDRESS_ACTUAL VARCHAR(250),
  USER_NAME VARCHAR(100),
  LOCKED INTEGER,
  SURNAME VARCHAR(100),
  NAME VARCHAR(100),
  PATRONYMIC VARCHAR(100),
  "PASSWORD" VARCHAR(100),
  FIRM_ID VARCHAR(32)
)
AS
  DECLARE ROLE_ID VARCHAR(32);
BEGIN

  INSERT INTO ACCOUNTS(ACCOUNT_ID,FIRM_ID,DATE_CREATE,USER_NAME,LOCKED,SURNAME,NAME,PATRONYMIC,
                       IS_ROLE,PHONE,DESCRIPTION,"PASSWORD",PHONE_INTERNAL)
               VALUES (:DISPATCHER_ID,:FIRM_ID,CURRENT_TIMESTAMP,:USER_NAME,:LOCKED,:SURNAME,:NAME,:PATRONYMIC,
                       0,:PHONE,:DESCRIPTION,:"PASSWORD",:PHONE_INTERNAL);

  INSERT INTO DISPATCHERS (DISPATCHER_ID,CALC_ID,PHONE_HOME,
                           PASSPORT,PLACE_BIRTH,DATE_BIRTH,
                           ADDRESS_RESIDENCE,ADDRESS_ACTUAL)
       VALUES (:DISPATCHER_ID,:CALC_ID,:PHONE_HOME,
               :PASSPORT,:PLACE_BIRTH,:DATE_BIRTH,
               :ADDRESS_RESIDENCE,:ADDRESS_ACTUAL);

  ROLE_ID='FF7F332564F795C8411BF28652B22BEA'; /* Диспетчеры */
  INSERT INTO ACCOUNT_ROLES (ROLE_ID,ACCOUNT_ID)
       VALUES (:ROLE_ID,:DISPATCHER_ID);

END

--

CREATE OR ALTER PROCEDURE U_DISPATCHER
(
  DISPATCHER_ID VARCHAR(32),
  CALC_ID VARCHAR(32),
  PHONE VARCHAR(100),
  PHONE_HOME VARCHAR(100),
  PHONE_INTERNAL VARCHAR(100),
  DESCRIPTION VARCHAR(250),
  PASSPORT VARCHAR(250),
  PLACE_BIRTH VARCHAR(250),
  DATE_BIRTH DATE,
  ADDRESS_RESIDENCE VARCHAR(250),
  ADDRESS_ACTUAL VARCHAR(250),
  USER_NAME VARCHAR(100),
  LOCKED INTEGER,
  SURNAME VARCHAR(100),
  NAME VARCHAR(100),
  PATRONYMIC VARCHAR(100),
  "PASSWORD" VARCHAR(100),
  FIRM_ID VARCHAR(32),
  OLD_DISPATCHER_ID VARCHAR(32)
)
AS
BEGIN

  UPDATE ACCOUNTS
     SET ACCOUNT_ID=:DISPATCHER_ID,
         FIRM_ID=:FIRM_ID,
         USER_NAME=:USER_NAME,
         "PASSWORD"=:"PASSWORD",
         LOCKED=:LOCKED,
         SURNAME=:SURNAME,
         NAME=:NAME,
         PATRONYMIC=:PATRONYMIC,
         IS_ROLE=0,
         PHONE=:PHONE,
         DESCRIPTION=:DESCRIPTION,
         PHONE_INTERNAL=:PHONE_INTERNAL
   WHERE ACCOUNT_ID=:OLD_DISPATCHER_ID;

  UPDATE DISPATCHERS
     SET DISPATCHER_ID=:DISPATCHER_ID,
         CALC_ID=:CALC_ID,
         PHONE_HOME=:PHONE_HOME,
         PASSPORT=:PASSPORT,
         PLACE_BIRTH=:PLACE_BIRTH,
         DATE_BIRTH=:DATE_BIRTH,
         ADDRESS_RESIDENCE=:ADDRESS_RESIDENCE,
         ADDRESS_ACTUAL=:ADDRESS_ACTUAL
   WHERE DISPATCHER_ID=:OLD_DISPATCHER_ID;

END

--

CREATE OR ALTER PROCEDURE APPLY_CALL_RESULT
(
  CALL_ID VARCHAR(32),
  CALL_RESULT_ID VARCHAR(32),
  ORDER_ID VARCHAR(32)
)
AS
BEGIN

  UPDATE CALLS
     SET CALL_RESULT_ID=:CALL_RESULT_ID,
         ORDER_ID=:ORDER_ID
   WHERE CALL_ID=:CALL_ID;

END

--

CREATE OR ALTER PROCEDURE I_BLACK
(
  BLACK_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32),
  STREET_ID VARCHAR(32),
  HOUSE VARCHAR(10),
  FLAT VARCHAR(10),
  DATE_CREATE TIMESTAMP,
  PHONE VARCHAR(100),
  DESCRIPTION VARCHAR(250)
)
AS
DECLARE CNT INTEGER;
BEGIN

  SELECT COUNT(*)
    FROM BLACKS
   WHERE PHONE=:PHONE
    INTO :CNT;

  IF (CNT>0) THEN
     EXCEPTION E 'Телефон уже существует';

  INSERT INTO BLACKS (BLACK_ID,ACCOUNT_ID,STREET_ID,HOUSE,FLAT,
                      DATE_CREATE,PHONE,DESCRIPTION)
              VALUES (:BLACK_ID,:ACCOUNT_ID,:STREET_ID,:HOUSE,:FLAT,
                      :DATE_CREATE,:PHONE,:DESCRIPTION);
END

--

CREATE OR ALTER PROCEDURE CREATE_ORDER_HISTORY
(
  SESSION_ID VARCHAR(32),
  OLD_ORDER_ID VARCHAR(32),
  NEW_ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32),
  ACTION_ID VARCHAR(32),
  RESULT_ID VARCHAR(32),
  TYPE_PROCESS INTEGER,
  DATE_BEGIN TIMESTAMP,
  WITH_DEPENDS INTEGER,
  WITH_EVENT INTEGER
)
AS
BEGIN

  INSERT INTO ORDERS (ORDER_ID,PARENT_ID,ACTION_ID,RATE_ID,CAR_TYPE_ID,
                      WHO_ACCEPT_ID,STREET_ID,ZONE_ID,CAR_ID,
                      WHO_PROCESS_ID,RESULT_ID,PARK_ID,SOURCE_ID,DISCOUNT_ID,
                      DRIVER_ID,ORDER_NUM,PHONE,HOUSE,FLAT,PORCH,
                      DATE_ACCEPT,DATE_ARRIVAL,DATE_BEGIN,DATE_END,CUSTOMER,
                      DESCRIPTION,COST_RATE,COST_FACT,TYPE_ACCEPT,
                      TYPE_PROCESS,DATE_HISTORY,WHO_HISTORY_ID,BEFORE_PERIOD,
                      FINISHED,LOCKED,CLIENT_ID,COST_GROSS,FIRM_ID)
  SELECT :NEW_ORDER_ID,NULL,:ACTION_ID,RATE_ID,CAR_TYPE_ID,
         WHO_ACCEPT_ID,STREET_ID,ZONE_ID,CAR_ID,
         NULL,:RESULT_ID,PARK_ID,SOURCE_ID,DISCOUNT_ID,
         DRIVER_ID,ORDER_NUM,PHONE,HOUSE,FLAT,PORCH,
         DATE_ACCEPT,DATE_ARRIVAL,:DATE_BEGIN,NULL,CUSTOMER,
         DESCRIPTION,COST_RATE,COST_FACT,TYPE_ACCEPT,
         :TYPE_PROCESS,NULL,NULL,BEFORE_PERIOD,FINISHED,LOCKED,CLIENT_ID,COST_GROSS,FIRM_ID
    FROM ORDERS
   WHERE ORDER_ID=:OLD_ORDER_ID;

  IF (WITH_DEPENDS IS NOT NULL) THEN BEGIN

    INSERT INTO ROUTES (ROUTE_ID,ORDER_ID,ZONE_ID,STREET_ID,HOUSE,
                        FLAT,PORCH,DISTANCE,COST,PERIOD,AMOUNT,PRIORITY)
    SELECT GET_UNIQUE_ID(),:NEW_ORDER_ID,ZONE_ID,STREET_ID,HOUSE,
           FLAT,PORCH,DISTANCE,COST,PERIOD,AMOUNT,PRIORITY
      FROM ROUTES
     WHERE ORDER_ID=:OLD_ORDER_ID;


    INSERT INTO ORDER_SERVICES (ORDER_ID,SERVICE_ID,COST,
                                DESCRIPTION,AMOUNT,PRIORITY)
    SELECT :NEW_ORDER_ID,SERVICE_ID,COST,
           DESCRIPTION,AMOUNT,PRIORITY
      FROM ORDER_SERVICES
     WHERE ORDER_ID=:OLD_ORDER_ID;

  END

  UPDATE ORDERS
     SET PARENT_ID=:NEW_ORDER_ID,
         DATE_HISTORY=CURRENT_TIMESTAMP,
         WHO_HISTORY_ID=:ACCOUNT_ID
   WHERE ORDER_ID=:OLD_ORDER_ID;

  UPDATE ORDERS
     SET PARENT_ID=:NEW_ORDER_ID
   WHERE PARENT_ID=:OLD_ORDER_ID;

  UPDATE IN_MESSAGES
     SET ORDER_ID=:NEW_ORDER_ID
   WHERE ORDER_ID=:OLD_ORDER_ID;

  UPDATE OUT_MESSAGES
     SET ORDER_ID=:NEW_ORDER_ID
   WHERE ORDER_ID=:OLD_ORDER_ID;

  UPDATE CALLS
     SET ORDER_ID=:NEW_ORDER_ID
   WHERE ORDER_ID=:OLD_ORDER_ID;

  IF (WITH_EVENT IS NOT NULL) THEN
    EXECUTE PROCEDURE EVENT_REFRESH_ORDER('A35F5701A7AA920E40812A71A690910D',NULL,SESSION_ID,0,
                                          OLD_ORDER_ID,NEW_ORDER_ID,TYPE_PROCESS,NULL);

END

--

CREATE OR ALTER PROCEDURE I_ORDER
(
  SESSION_ID VARCHAR(32),
  ORDER_ID VARCHAR(32),
  ACTION_ID VARCHAR(32),
  RATE_ID VARCHAR(32),
  CAR_TYPE_ID VARCHAR(32),
  WHO_ACCEPT_ID VARCHAR(32),
  STREET_ID VARCHAR(32),
  ZONE_ID VARCHAR(32),
  PARENT_ID VARCHAR(32),
  CAR_ID VARCHAR(32),
  WHO_PROCESS_ID VARCHAR(32),
  RESULT_ID VARCHAR(32),
  PARK_ID VARCHAR(32),
  SOURCE_ID VARCHAR(32),
  DISCOUNT_ID VARCHAR(32),
  DRIVER_ID VARCHAR(32),
  ORDER_NUM VARCHAR(10),
  PHONE VARCHAR(100),
  HOUSE VARCHAR(10),
  FLAT VARCHAR(10),
  PORCH VARCHAR(10),
  DATE_ACCEPT TIMESTAMP,
  DATE_ARRIVAL TIMESTAMP,
  DATE_BEGIN TIMESTAMP,
  DATE_END TIMESTAMP,
  CUSTOMER VARCHAR(250),
  DESCRIPTION VARCHAR(250),
  COST_RATE NUMERIC(15,2),
  COST_FACT NUMERIC(15,2),
  TYPE_ACCEPT INTEGER,
  TYPE_PROCESS INTEGER,
  DATE_HISTORY TIMESTAMP,
  WHO_HISTORY_ID VARCHAR(32),
  BEFORE_PERIOD INTEGER,
  FINISHED INTEGER,
  LOCKED VARCHAR(32),
  CLIENT_ID VARCHAR(32),
  COST_GROSS NUMERIC(15,2),
  FIRM_ID VARCHAR(32),
  CALL_ID VARCHAR(32)
)
AS
BEGIN

  INSERT INTO ORDERS (ORDER_ID,ACTION_ID,RATE_ID,CAR_TYPE_ID,WHO_ACCEPT_ID,
                      STREET_ID,ZONE_ID,PARENT_ID,
                      CAR_ID,WHO_PROCESS_ID,RESULT_ID,PARK_ID,
                      SOURCE_ID,DISCOUNT_ID,DRIVER_ID,ORDER_NUM,PHONE,
                      HOUSE,FLAT,PORCH,
                      DATE_ACCEPT,DATE_ARRIVAL,DATE_BEGIN,DATE_END,CUSTOMER,
                      DESCRIPTION,COST_RATE,COST_FACT,TYPE_ACCEPT,
                      TYPE_PROCESS,DATE_HISTORY,WHO_HISTORY_ID,BEFORE_PERIOD,
                      FINISHED,LOCKED,CLIENT_ID,COST_GROSS,FIRM_ID)
              VALUES (:ORDER_ID,:ACTION_ID,:RATE_ID,:CAR_TYPE_ID,:WHO_ACCEPT_ID,
                      :STREET_ID,:ZONE_ID,:PARENT_ID,
                      :CAR_ID,:WHO_PROCESS_ID,:RESULT_ID,:PARK_ID,
                      :SOURCE_ID,:DISCOUNT_ID,:DRIVER_ID,:ORDER_NUM,:PHONE,
                      :HOUSE,:FLAT,:PORCH,
                      :DATE_ACCEPT,:DATE_ARRIVAL,:DATE_BEGIN,:DATE_END,:CUSTOMER,
                      :DESCRIPTION,:COST_RATE,:COST_FACT,:TYPE_ACCEPT,
                      :TYPE_PROCESS,:DATE_HISTORY,:WHO_HISTORY_ID,:BEFORE_PERIOD,
                      :FINISHED,:LOCKED,:CLIENT_ID,:COST_GROSS,:FIRM_ID);

   UPDATE CALLS
      SET ORDER_ID=:ORDER_ID
    WHERE CALL_ID=:CALL_ID;

END

--

CREATE OR ALTER PROCEDURE GET_INCOMING_GRANTED
(
  ACCOUNT_ID VARCHAR(32),
  TYPE_MESSAGE INTEGER
)
RETURNS
(
  GRANTED INTEGER
)
AS
DECLARE CNT INTEGER;
DECLARE IN_MESSAGE INTEGER;
DECLARE IN_QUERY INTEGER;
DECLARE IN_CALL INTEGER;
BEGIN
  GRANTED=1;

  SELECT COUNT(*)
    FROM DRIVERS
   WHERE DRIVER_ID=:ACCOUNT_ID
    INTO :CNT;

  IF (CNT>0) THEN BEGIN

    SELECT M.IN_MESSAGE, M.IN_QUERY, M.IN_CALL
      FROM DRIVERS D
      LEFT JOIN METHODS M ON M.METHOD_ID=D.METHOD_ID
     WHERE D.DRIVER_ID=:ACCOUNT_ID
      INTO :IN_MESSAGE, :IN_QUERY, :IN_CALL;

    IF ((TYPE_MESSAGE=0) AND (IN_MESSAGE IS NOT NULL)) THEN
      GRANTED=IN_MESSAGE;

    IF ((TYPE_MESSAGE=1) AND (IN_QUERY IS NOT NULL)) THEN
      GRANTED=IN_QUERY;

    IF ((TYPE_MESSAGE=2) AND (IN_CALL IS NOT NULL)) THEN
      GRANTED=IN_CALL;

  END ELSE BEGIN

    SELECT COUNT(*)
      FROM CLIENTS
     WHERE CLIENT_ID=:ACCOUNT_ID
      INTO :CNT;

    IF (CNT>0) THEN BEGIN

      SELECT M.IN_MESSAGE, M.IN_QUERY, M.IN_CALL
        FROM CLIENTS C
        LEFT JOIN METHODS M ON M.METHOD_ID=C.METHOD_ID
       WHERE C.CLIENT_ID=:ACCOUNT_ID
        INTO :IN_MESSAGE, :IN_QUERY, :IN_CALL;

      IF ((TYPE_MESSAGE=0) AND (IN_MESSAGE IS NOT NULL)) THEN
        GRANTED=IN_MESSAGE;

      IF ((TYPE_MESSAGE=1) AND (IN_QUERY IS NOT NULL)) THEN
        GRANTED=IN_QUERY;

      IF ((TYPE_MESSAGE=2) AND (IN_CALL IS NOT NULL)) THEN
        GRANTED=IN_CALL;

    END

  END

END

--

