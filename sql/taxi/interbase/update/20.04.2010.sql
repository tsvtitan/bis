charges

CF012E53C5C9A03E4A7F03194B84DA49 

--

receipts

6806D8C9796984F14167CEDF6981BA36

--

consts

118C2CC432E5B9B44A9BF94757EC2EDE
21EF7AF84E37B7D64BAA8AE4CA871855
51ADDF55CC10AEAA4880A4C93663AD05

--

CREATE OR ALTER PROCEDURE PR_FULL_CALC
(
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE COST_RATE NUMERIC(15,2);
DECLARE COST_FACT NUMERIC(15,2);
DECLARE NON_CASH NUMERIC(15,2);
DECLARE PARENT_SUM NUMERIC(15,2);
DECLARE PHONE VARCHAR(100);
DECLARE DRIVER_ID VARCHAR(32);
DECLARE SUM_CHARGE NUMERIC(15,2);
DECLARE SUM_RECEIPT NUMERIC(15,2);
DECLARE BALANCE NUMERIC(15,2);
DECLARE MIN_BALANCE NUMERIC(15,2);
DECLARE CHARGE_TYPE_ID VARCHAR(32);
DECLARE RECEIPT_TYPE_ID VARCHAR(32);
DECLARE CLIENT_ID VARCHAR(32);
DECLARE PARENT_ID VARCHAR(32);
DECLARE CALC_ID VARCHAR(32);
DECLARE S VARCHAR(1000);
DECLARE CODE VARCHAR(100);
DECLARE CNT INTEGER;
DECLARE DESCRIPTION VARCHAR(250);
DECLARE USER_NAME VARCHAR(100);
BEGIN

  SELECT PHONE, DRIVER_ID, COST_RATE, COST_FACT, CLIENT_ID
    FROM ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :PHONE, :DRIVER_ID, :COST_RATE, :COST_FACT, :CLIENT_ID;

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    UPDATE IN_MESSAGES
       SET DESCRIPTION=:ORDER_ID
     WHERE ORDER_ID=:ORDER_ID
       AND CODE_MESSAGE_ID='0388BCC17DE1A1754B566F18AEEED771' /* Клиент рассчитался полностью */
       AND SENDER_ID=:DRIVER_ID
       AND DESCRIPTION IS NULL;

  END

  IF ((COST_FACT IS NULL) OR (COST_FACT<=0.0))  THEN
    COST_FACT=:COST_RATE;

  IF (COST_FACT<=0.0) THEN BEGIN

    SELECT CONST_VALUE FROM GET_CONST_VALUE('4BB5C780923E872D436DA3DA31C9E0B0') INTO :S;

    IF (S IS NOT NULL) THEN BEGIN

      SELECT PHONE
        FROM ACCOUNTS
       WHERE ACCOUNT_ID=:DRIVER_ID
        INTO :PHONE;

      INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,
                                PRIORITY,LOCKED,DATE_BEGIN,ORDER_ID)
                        VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                :S,NULL,0,:PHONE,NULL,
                                2,NULL,CURRENT_TIMESTAMP,:ORDER_ID);
    END

    EXECUTE PROCEDURE PR_MANUAL(ORDER_ID,ACCOUNT_ID);

  END ELSE BEGIN

    UPDATE ORDERS
       SET FINISHED=1,
           DATE_END=CURRENT_TIMESTAMP,
           WHO_PROCESS_ID=:ACCOUNT_ID,
           COST_FACT=:COST_FACT
     WHERE ORDER_ID=:ORDER_ID;

    EXECUTE PROCEDURE CREATE_ROUTE_HISTORY(ORDER_ID);

    IF (DRIVER_ID IS NOT NULL) THEN BEGIN

      CALC_ID=NULL;

      IF (CLIENT_ID IS NOT NULL) THEN BEGIN

        SELECT C.CALC_ID, A.USER_NAME
          FROM CLIENTS C
          JOIN ACCOUNTS A ON A.ACCOUNT_ID=C.CLIENT_ID
         WHERE CLIENT_ID=:CLIENT_ID
          INTO :CALC_ID, :USER_NAME;

        SELECT COUNT(*)
          FROM CLIENT_CHILDS
         WHERE CHILD_ID=:CLIENT_ID
          INTO :CNT;

        IF (CNT>0) THEN BEGIN

          PARENT_SUM=2.0;

          IF ((COST_FACT>150.0) AND (COST_FACT<=250.0)) THEN
            PARENT_SUM=5.0;

          IF ((COST_FACT>250.0) AND (COST_FACT<=350.0)) THEN
            PARENT_SUM=10.0;

          IF (COST_FACT>350.0) THEN
            PARENT_SUM=20.0;

          SUM_RECEIPT=PARENT_SUM/CNT;

          FOR SELECT CLIENT_ID
                FROM CLIENT_CHILDS

               WHERE CHILD_ID=:CLIENT_ID
                INTO :PARENT_ID DO BEGIN

           RECEIPT_TYPE_ID='9958D6ED64ADAAB94AEF470DA7B5F4F7'; /* Поездка дочернего клиента */

           DESCRIPTION=USER_NAME;

           INSERT INTO RECEIPTS (RECEIPT_ID,RECEIPT_TYPE_ID,ACCOUNT_ID,WHO_CREATE_ID,
                                 SUM_RECEIPT,DATE_RECEIPT,DATE_CREATE,DESCRIPTION)
                         VALUES (GET_UNIQUE_ID(),:RECEIPT_TYPE_ID,:PARENT_ID,:ACCOUNT_ID,
                                :SUM_RECEIPT,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,:DESCRIPTION);

          END
        END

      END

      BALANCE=NULL;

      IF (CALC_ID IS NOT NULL) THEN BEGIN

        EXECUTE PROCEDURE GET_ACCOUNT_BALANCE(:CLIENT_ID)
         RETURNING_VALUES :SUM_CHARGE, :SUM_RECEIPT, :BALANCE;

      END

      NON_CASH=NULL;

      IF ((BALANCE IS NOT NULL) AND (BALANCE<>0.0)) THEN BEGIN

        IF (BALANCE>=COST_FACT) THEN BEGIN
          NON_CASH=COST_FACT;
          BALANCE=BALANCE-NON_CASH;
        END ELSE BEGIN
          NON_CASH=BALANCE;
          BALANCE=0.0;
        END

      END

      IF (NON_CASH IS NOT NULL) THEN BEGIN

        CHARGE_TYPE_ID='757B9CAF2D3CA5144A7E2A23472990E5'; /* Поездка */

        SUM_CHARGE=NON_CASH;

        INSERT INTO CHARGES (CHARGE_ID,WHO_CREATE_ID,CHARGE_TYPE_ID,ACCOUNT_ID,
                             SUM_CHARGE,DATE_CHARGE,DATE_CREATE,DESCRIPTION)
                     VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:CHARGE_TYPE_ID,:CLIENT_ID,
                             :SUM_CHARGE,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,NULL);


      END

      IF (SUBSTR(PHONE,1,3)='+79')  THEN BEGIN

        IF (NON_CASH IS NOT NULL) THEN BEGIN

          SELECT CONST_VALUE FROM GET_CONST_VALUE('56140344A440BE774C9007D49CD574E9') INTO :S;

        END ELSE BEGIN

          SELECT CONST_VALUE FROM GET_CONST_VALUE('05B75340B170BF5141FC63F5CDF7FCD6') INTO :S;

        END

        IF (S IS NOT NULL) THEN BEGIN

          S=REPLACE_STRING(S,'%BALANCE',CAST(CAST(BALANCE AS NUMERIC(15,0)) AS VARCHAR(30)));

          INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                    TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,
                                    PRIORITY,LOCKED,DATE_BEGIN,ORDER_ID)
                            VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:CLIENT_ID,CURRENT_TIMESTAMP,
                                    :S,NULL,0,:PHONE,NULL,
                                    2,NULL,CURRENT_TIMESTAMP,:ORDER_ID);
        END

        SELECT CONST_VALUE FROM GET_CONST_VALUE('E9FFA9589ABD8C174474572B72017BCC') INTO :S;

        IF (S IS NOT NULL) THEN BEGIN

          INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                    TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,
                                    PRIORITY,LOCKED,DATE_BEGIN,ORDER_ID)
                            VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:CLIENT_ID,CURRENT_TIMESTAMP,
                                    :S,NULL,0,:PHONE,NULL,
                                    2,NULL,CURRENT_TIMESTAMP,:ORDER_ID);
        END

      END

      CHARGE_TYPE_ID='E1BC9789DA9DB2B041C0784EBE92BFC9'; /* Выполнение заказа */

      SELECT RET_SUM
        FROM GET_DRIVER_SUM(:DRIVER_ID,:COST_FACT)
        INTO :SUM_CHARGE;

      INSERT INTO CHARGES (CHARGE_ID,WHO_CREATE_ID,CHARGE_TYPE_ID,ACCOUNT_ID,
                           SUM_CHARGE,DATE_CHARGE,DATE_CREATE,DESCRIPTION)
                   VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:CHARGE_TYPE_ID,:DRIVER_ID,
                           :SUM_CHARGE,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,NULL);

      IF (NON_CASH IS NOT NULL) THEN BEGIN

        RECEIPT_TYPE_ID='3F91C48D888F81974941D256C0815B03'; /* Компенсация за поездку */

        SUM_RECEIPT=NON_CASH;

        INSERT INTO RECEIPTS (RECEIPT_ID,RECEIPT_TYPE_ID,ACCOUNT_ID,WHO_CREATE_ID,
                              SUM_RECEIPT,DATE_RECEIPT,DATE_CREATE,DESCRIPTION)
                      VALUES (GET_UNIQUE_ID(),:RECEIPT_TYPE_ID,:DRIVER_ID,:ACCOUNT_ID,
                              :SUM_RECEIPT,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,NULL);

      END

      EXECUTE PROCEDURE GET_ACCOUNT_BALANCE(:DRIVER_ID)
       RETURNING_VALUES :SUM_CHARGE, :SUM_RECEIPT, :BALANCE;

      SELECT MIN_BALANCE
        FROM DRIVERS
       WHERE DRIVER_ID=:DRIVER_ID
        INTO :MIN_BALANCE;

      IF ((MIN_BALANCE IS NULL) OR ((MIN_BALANCE IS NOT NULL) AND (BALANCE>MIN_BALANCE))) THEN BEGIN

        SELECT CONST_VALUE FROM GET_CONST_VALUE('16835607B30CA79F4CE883B53AFE972D') INTO :S;

      END ELSE BEGIN

        UPDATE SHIFTS
           SET DATE_END=CURRENT_TIMESTAMP
         WHERE ACCOUNT_ID=:DRIVER_ID
           AND DATE_END IS NULL;

        SELECT CONST_VALUE FROM GET_CONST_VALUE('634880F305E9AA434245E3E596697001') INTO :S;

      END

      SELECT PHONE
        FROM ACCOUNTS
       WHERE ACCOUNT_ID=:DRIVER_ID
        INTO :PHONE;

      IF (S IS NOT NULL) THEN BEGIN

        S=REPLACE_STRING(S,'%BALANCE',CAST(BALANCE AS VARCHAR(30)));

        IF (NON_CASH IS NULL) THEN
          NON_CASH=0.0;

        S=REPLACE_STRING(S,'%NON_CASH',CAST(CAST(NON_CASH AS NUMERIC(15,0)) AS VARCHAR(30)));

        INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                  TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,
                                  PRIORITY,LOCKED,DATE_BEGIN,ORDER_ID)
                          VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                  :S,NULL,0,:PHONE,NULL,
                                  2,NULL,CURRENT_TIMESTAMP,:ORDER_ID);
      END

      FOR SELECT TRIM(SUB_STRING(IM.TEXT_IN,2,100))
            FROM IN_MESSAGES IM
            JOIN CODE_MESSAGES CM ON CM.CODE_MESSAGE_ID=IM.CODE_MESSAGE_ID
           WHERE IM.SENDER_ID=:DRIVER_ID
             AND IM.ORDER_ID=:ORDER_ID
             AND IM.CODE_MESSAGE_ID='0388BCC17DE1A1754B566F18AEEED771' /* Клиент рассчитался полностью */
             AND IM.TYPE_MESSAGE=0
             AND CM.ENABLED=1
           ORDER BY IM.DATE_IN DESC
            INTO :CODE DO BEGIN

        SELECT COUNT(*)
          FROM CODE_MESSAGES
         WHERE CODE=:CODE
          INTO :CNT;

        IF (CNT=1) THEN BEGIN

          EXECUTE PROCEDURE TRY_PARK_IN(ORDER_ID,ACCOUNT_ID,DRIVER_ID,CODE);

        END ELSE BEGIN

          EXECUTE PROCEDURE QUERY_PARK_STATES (ORDER_ID,ACCOUNT_ID,DRIVER_ID,PHONE);

        END

        BREAK;
      END

    END

  END
END

--

ALTER TABLE DRIVERS
ADD DATE_SCHEDULE DATE

--

CREATE OR ALTER PROCEDURE I_DRIVER
(
  DRIVER_ID VARCHAR(32),
  CALC_ID VARCHAR(32),
  CAR_ID VARCHAR(32),
  METHOD_ID VARCHAR(32),
  PHONE VARCHAR(100),
  PHONE_HOME VARCHAR(100),
  LICENSE VARCHAR(250),
  CATEGORIES VARCHAR(100),
  INSURANCE VARCHAR(250),
  HEALTH_CERT VARCHAR(250),
  DESCRIPTION VARCHAR(250),
  ADDICT_CERT VARCHAR(250),
  PASSPORT VARCHAR(250),
  PLACE_BIRTH VARCHAR(250),
  DATE_BIRTH DATE,
  ADDRESS_RESIDENCE VARCHAR(250),
  ADDRESS_ACTUAL VARCHAR(250),
  MIN_BALANCE NUMERIC(15,2),
  PRIORITY INTEGER,
  DATE_PRIORITY DATE,
  MIN_HOURS INTEGER,
  DATE_SCHEDULE DATE,
  DATE_CREATE TIMESTAMP,
  USER_NAME VARCHAR(100),
  LOCKED INTEGER,
  SURNAME VARCHAR(100),
  NAME VARCHAR(100),
  PATRONYMIC VARCHAR(100))
AS
  DECLARE ROLE_ID VARCHAR(32);
BEGIN

  INSERT INTO ACCOUNTS (ACCOUNT_ID,DATE_CREATE,USER_NAME,LOCKED,SURNAME,NAME,PATRONYMIC,IS_ROLE,PHONE,DESCRIPTION)
       VALUES (:DRIVER_ID,:DATE_CREATE,:USER_NAME,:LOCKED,:SURNAME,:NAME,:PATRONYMIC,0,:PHONE,:DESCRIPTION);

  INSERT INTO DRIVERS (DRIVER_ID,CALC_ID,CAR_ID,METHOD_ID,PHONE_HOME,LICENSE,
                       CATEGORIES,INSURANCE,HEALTH_CERT,ADDICT_CERT,
                       PASSPORT,PLACE_BIRTH,DATE_BIRTH,ADDRESS_RESIDENCE,ADDRESS_ACTUAL,
                       MIN_BALANCE,PRIORITY,DATE_PRIORITY,MIN_HOURS,DATE_SCHEDULE)
       VALUES (:DRIVER_ID,:CALC_ID,:CAR_ID,:METHOD_ID,:PHONE_HOME,:LICENSE,
               :CATEGORIES,:INSURANCE,:HEALTH_CERT,:ADDICT_CERT,
               :PASSPORT,:PLACE_BIRTH,:DATE_BIRTH,:ADDRESS_RESIDENCE,:ADDRESS_ACTUAL,
               :MIN_BALANCE,:PRIORITY,:DATE_PRIORITY,:MIN_HOURS,:DATE_SCHEDULE);

  ROLE_ID='3EBE04F48C07BAB246324FBA8551FEF1'; /* Водители */
  INSERT INTO ACCOUNT_ROLES (ROLE_ID,ACCOUNT_ID)
       VALUES (:ROLE_ID,:DRIVER_ID);
END

--

CREATE OR ALTER PROCEDURE U_DRIVER
(
  DRIVER_ID VARCHAR(32),
  CALC_ID VARCHAR(32),
  CAR_ID VARCHAR(32),
  METHOD_ID VARCHAR(32),
  PHONE VARCHAR(100),
  PHONE_HOME VARCHAR(100),
  LICENSE VARCHAR(250),
  CATEGORIES VARCHAR(100),
  INSURANCE VARCHAR(250),
  HEALTH_CERT VARCHAR(250),
  DESCRIPTION VARCHAR(250),
  ADDICT_CERT VARCHAR(250),
  PASSPORT VARCHAR(250),
  PLACE_BIRTH VARCHAR(250),
  DATE_BIRTH DATE,
  ADDRESS_RESIDENCE VARCHAR(250),
  ADDRESS_ACTUAL VARCHAR(250),
  MIN_BALANCE NUMERIC(15,2),
  PRIORITY INTEGER,
  DATE_PRIORITY DATE,
  MIN_HOURS INTEGER,
  DATE_SCHEDULE DATE,
  USER_NAME VARCHAR(100),
  LOCKED INTEGER,
  SURNAME VARCHAR(100),
  NAME VARCHAR(100),
  PATRONYMIC VARCHAR(100),
  OLD_DRIVER_ID VARCHAR(32))
AS
BEGIN

  UPDATE ACCOUNTS
     SET ACCOUNT_ID=:DRIVER_ID,
         USER_NAME=:USER_NAME,
         LOCKED=:LOCKED,
         SURNAME=:SURNAME,
         NAME=:NAME,
         PATRONYMIC=:PATRONYMIC,
         IS_ROLE=0,
         PHONE=:PHONE,
         DESCRIPTION=:DESCRIPTION
   WHERE ACCOUNT_ID=:OLD_DRIVER_ID;

  UPDATE DRIVERS
     SET DRIVER_ID=:DRIVER_ID,
         CALC_ID=:CALC_ID,
         CAR_ID=:CAR_ID,
         METHOD_ID=:METHOD_ID,
         PHONE_HOME=:PHONE_HOME,
         LICENSE=:LICENSE,
         CATEGORIES=:CATEGORIES,
         INSURANCE=:INSURANCE,
         HEALTH_CERT=:HEALTH_CERT,
         ADDICT_CERT=:ADDICT_CERT,
         PASSPORT=:PASSPORT,
         PLACE_BIRTH=:PLACE_BIRTH,
         DATE_BIRTH=:DATE_BIRTH,
         ADDRESS_RESIDENCE=:ADDRESS_RESIDENCE,
         ADDRESS_ACTUAL=:ADDRESS_ACTUAL,
         MIN_BALANCE=:MIN_BALANCE,
         PRIORITY=:PRIORITY,
         DATE_PRIORITY=:DATE_PRIORITY,
         MIN_HOURS=:MIN_HOURS,
         DATE_SCHEDULE=:DATE_SCHEDULE
   WHERE DRIVER_ID=:OLD_DRIVER_ID;

END

--

CREATE OR ALTER PROCEDURE D_DRIVER
(
  OLD_DRIVER_ID VARCHAR(32))
AS
BEGIN
  DELETE FROM DRIVER_WEEK_SCHEDULES
        WHERE DRIVER_ID=:OLD_DRIVER_ID;

  DELETE FROM DRIVERS
        WHERE DRIVER_ID=:OLD_DRIVER_ID;

  DELETE FROM ACCOUNT_ROLES
        WHERE ACCOUNT_ID=:OLD_DRIVER_ID;

  DELETE FROM ACCOUNTS
        WHERE ACCOUNT_ID=:OLD_DRIVER_ID;
END

--

DROP VIEW S_DRIVERS

--

CREATE VIEW S_DRIVERS
(
    DRIVER_ID,
    CALC_ID,
    CAR_ID,
    PHONE_HOME,
    LICENSE,
    CATEGORIES,
    INSURANCE,
    HEALTH_CERT,
    ADDICT_CERT,
    PASSPORT,
    PLACE_BIRTH,
    DATE_BIRTH,
    ADDRESS_RESIDENCE,
    ADDRESS_ACTUAL,
    MIN_BALANCE,
    PRIORITY,
    METHOD_ID,
    DATE_PRIORITY,
    MIN_HOURS,
    DATE_SCHEDULE,
    PHONE,
    DESCRIPTION,
    USER_NAME,
    DATE_CREATE,
    LOCKED,
    SURNAME,
    NAME,
    PATRONYMIC,
    CAR_STATE_NUM,
    CAR_BRAND,
    CAR_COLOR,
    CAR_CALLSIGN,
    CAR_TYPE_ID,
    CAR_TYPE_NAME,
    CAR_TYPE_FONT_COLOR,
    CAR_TYPE_BRUSH_COLOR,
    CALC_NAME,
    METHOD_NAME)
AS
SELECT D.*,
       A.PHONE,
       A.DESCRIPTION,
       A.USER_NAME,
       A.DATE_CREATE,
       A.LOCKED,
       A.SURNAME,
       A.NAME,
       A.PATRONYMIC,
       CR.STATE_NUM AS CAR_STATE_NUM,
       CR.BRAND AS CAR_BRAND,
       CR.COLOR AS CAR_COLOR,
       CR.CALLSIGN AS CAR_CALLSIGN,
       CR.CAR_TYPE_ID,
       CT.NAME AS CAR_TYPE_NAME,
       CT.FONT_COLOR AS CAR_TYPE_FONT_COLOR,
       CT.BRUSH_COLOR AS CAR_TYPE_BRUSH_COLOR,
       CL.NAME AS CALC_NAME,
       M.NAME AS METHOD_NAME
  FROM DRIVERS D
  JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
  JOIN CARS CR ON CR.CAR_ID=D.CAR_ID
  JOIN CAR_TYPES CT ON CT.CAR_TYPE_ID=CR.CAR_TYPE_ID
  LEFT JOIN CALCS CL ON CL.CALC_ID=D.CALC_ID
  LEFT JOIN METHODS M ON M.METHOD_ID=D.METHOD_ID

--

DROP VIEW S_DRIVER_PARK_FREE

--

DROP VIEW S_DRIVER_FREE

--

DROP VIEW S_DRIVER_POSITIVES

--

DROP VIEW S_DRIVERS_EX

--

CREATE VIEW S_DRIVERS_EX
(
    DRIVER_ID,
    CALC_ID,
    CAR_ID,
    PHONE_HOME,
    LICENSE,
    CATEGORIES,
    INSURANCE,
    HEALTH_CERT,
    ADDICT_CERT,
    PASSPORT,
    PLACE_BIRTH,
    DATE_BIRTH,
    ADDRESS_RESIDENCE,
    ADDRESS_ACTUAL,
    MIN_BALANCE,
    PRIORITY,
    METHOD_ID,
    DATE_PRIORITY,
    MIN_HOURS,
    DATE_SCHEDULE,
    PHONE,
    DESCRIPTION,
    USER_NAME,
    DATE_CREATE,
    LOCKED,
    SURNAME,
    NAME,
    PATRONYMIC,
    CAR_STATE_NUM,
    CAR_BRAND,
    CAR_COLOR,
    CAR_CALLSIGN,
    CAR_TYPE_ID,
    CAR_TYPE_NAME,
    CAR_TYPE_FONT_COLOR,
    CAR_TYPE_BRUSH_COLOR,
    CALC_NAME,
    METHOD_NAME,
    SUM_CHARGE,
    SUM_RECEIPT,
    ACTUAL_BALANCE)
AS
SELECT D.*,
       A.PHONE,
       A.DESCRIPTION,
       A.USER_NAME,
       A.DATE_CREATE,
       A.LOCKED,
       A.SURNAME,
       A.NAME,
       A.PATRONYMIC,
       CR.STATE_NUM AS CAR_STATE_NUM,
       CR.BRAND AS CAR_BRAND,
       CR.COLOR AS CAR_COLOR,
       CR.CALLSIGN AS CAR_CALLSIGN,
       CR.CAR_TYPE_ID,
       CT.NAME AS CAR_TYPE_NAME,
       CT.FONT_COLOR AS CAR_TYPE_FONT_COLOR,
       CT.BRUSH_COLOR AS CAR_TYPE_BRUSH_COLOR,
       CL.NAME AS CALC_NAME,
       M.NAME AS METHOD_NAME,
       (CASE WHEN SAC.SUM_CHARGE IS NULL THEN 0.0 ELSE SAC.SUM_CHARGE END) SUM_CHARGE,
       (CASE WHEN SAR.SUM_RECEIPT IS NULL THEN 0.0 ELSE SAR.SUM_RECEIPT END) SUM_RECEIPT,
       ((CASE WHEN SAR.SUM_RECEIPT IS NULL THEN 0.0 ELSE SAR.SUM_RECEIPT END)-
        (CASE WHEN SAC.SUM_CHARGE IS NULL THEN 0.0 ELSE SAC.SUM_CHARGE END)) AS ACTUAL_BALANCE
  FROM DRIVERS D
  JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
  JOIN CARS CR ON CR.CAR_ID=D.CAR_ID
  JOIN CAR_TYPES CT ON CT.CAR_TYPE_ID=CR.CAR_TYPE_ID
  LEFT JOIN CALCS CL ON CL.CALC_ID=D.CALC_ID
  LEFT JOIN METHODS M ON M.METHOD_ID=D.METHOD_ID
  LEFT JOIN S_ACCOUNT_CHARGES SAC ON SAC.ACCOUNT_ID=D.DRIVER_ID
  LEFT JOIN S_ACCOUNT_RECEIPTS SAR ON SAR.ACCOUNT_ID=D.DRIVER_ID

--

CREATE VIEW S_DRIVER_POSITIVES
(
    DRIVER_ID,
    CALC_ID,
    CAR_ID,
    PHONE_HOME,
    LICENSE,
    CATEGORIES,
    INSURANCE,
    HEALTH_CERT,
    ADDICT_CERT,
    PASSPORT,
    PLACE_BIRTH,
    DATE_BIRTH,
    ADDRESS_RESIDENCE,
    ADDRESS_ACTUAL,
    MIN_BALANCE,
    PRIORITY,
    METHOD_ID,
    DATE_PRIORITY,
    MIN_HOURS,
    DATE_SCHEDULE,
    PHONE,
    DESCRIPTION,
    USER_NAME,
    DATE_CREATE,
    LOCKED,
    SURNAME,
    NAME,
    PATRONYMIC,
    CAR_STATE_NUM,
    CAR_BRAND,
    CAR_COLOR,
    CAR_CALLSIGN,
    CAR_TYPE_ID,
    CAR_TYPE_NAME,
    CAR_TYPE_FONT_COLOR,
    CAR_TYPE_BRUSH_COLOR,
    CALC_NAME,
    METHOD_NAME,
    SUM_CHARGE,
    SUM_RECEIPT,
    ACTUAL_BALANCE)
AS
SELECT *
  FROM S_DRIVERS_EX
 WHERE (MIN_BALANCE IS NULL)
    OR (ACTUAL_BALANCE>MIN_BALANCE)

--

CREATE VIEW S_DRIVER_FREE
(
    DRIVER_ID,
    CALC_ID,
    CAR_ID,
    PHONE_HOME,
    LICENSE,
    CATEGORIES,
    INSURANCE,
    HEALTH_CERT,
    ADDICT_CERT,
    PASSPORT,
    PLACE_BIRTH,
    DATE_BIRTH,
    ADDRESS_RESIDENCE,
    ADDRESS_ACTUAL,
    MIN_BALANCE,
    PRIORITY,
    METHOD_ID,
    DATE_PRIORITY,
    MIN_HOURS,
    DATE_SCHEDULE,
    PHONE,
    DESCRIPTION,
    USER_NAME,
    DATE_CREATE,
    LOCKED,
    SURNAME,
    NAME,
    PATRONYMIC,
    CAR_STATE_NUM,
    CAR_BRAND,
    CAR_COLOR,
    CAR_CALLSIGN,
    CAR_TYPE_ID,
    CAR_TYPE_NAME,
    CAR_TYPE_FONT_COLOR,
    CAR_TYPE_BRUSH_COLOR,
    CALC_NAME,
    METHOD_NAME,
    SUM_CHARGE,
    SUM_RECEIPT,
    ACTUAL_BALANCE)
AS
SELECT *
  FROM S_DRIVERS_EX
 WHERE DRIVER_ID NOT IN (SELECT ACCOUNT_ID FROM SHIFTS
                          WHERE DATE_END IS NULL)
   AND LOCKED=0
   AND ((MIN_BALANCE IS NULL) OR (ACTUAL_BALANCE>MIN_BALANCE))

--

CREATE VIEW S_DRIVER_PARK_FREE
(
    DRIVER_ID,
    CALC_ID,
    CAR_ID,
    PHONE_HOME,
    LICENSE,
    CATEGORIES,
    INSURANCE,
    HEALTH_CERT,
    ADDICT_CERT,
    PASSPORT,
    PLACE_BIRTH,
    DATE_BIRTH,
    ADDRESS_RESIDENCE,
    ADDRESS_ACTUAL,
    MIN_BALANCE,
    PRIORITY,
    METHOD_ID,
    DATE_PRIORITY,
    MIN_HOURS,
    DATE_SCHEDULE,
    PHONE,
    DESCRIPTION,
    USER_NAME,
    DATE_CREATE,
    LOCKED,
    SURNAME,
    NAME,
    PATRONYMIC,
    CAR_STATE_NUM,
    CAR_BRAND,
    CAR_COLOR,
    CAR_CALLSIGN,
    CAR_TYPE_ID,
    CAR_TYPE_NAME,
    CAR_TYPE_FONT_COLOR,
    CAR_TYPE_BRUSH_COLOR,
    CALC_NAME,
    METHOD_NAME,
    SUM_CHARGE,
    SUM_RECEIPT,
    ACTUAL_BALANCE)
AS
SELECT *
  FROM S_DRIVERS_EX
 WHERE DRIVER_ID IN (SELECT ACCOUNT_ID FROM SHIFTS
                      WHERE DATE_END IS NULL)
   AND DRIVER_ID NOT IN (SELECT DRIVER_ID FROM PARK_STATES
                          WHERE DATE_OUT IS NULL)
   AND LOCKED=0
   AND ((MIN_BALANCE IS NULL) OR (ACTUAL_BALANCE>MIN_BALANCE))

--

UPDATE DRIVERS
   SET DATE_SCHEDULE=CURRENT_DATE
 WHERE DRIVER_ID IN (SELECT DRIVER_ID FROM DRIVER_WEEK_SCHEDULES)

--

CREATE OR ALTER PROCEDURE TASK_SHIFT_REMINDER 
(
  TASK_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE DRIVER_ID VARCHAR(32);
DECLARE PHONE VARCHAR(100);
DECLARE NAME VARCHAR(100);
DECLARE PATRONYMIC VARCHAR(100);
DECLARE S VARCHAR(1000);
DECLARE S1 VARCHAR(1000);
DECLARE D TIMESTAMP;
DECLARE DTIME TIMESTAMP;
DECLARE DAY_HOUR INTEGER;
DECLARE WEEK_DAY INTEGER;
DECLARE CNT INTEGER;
BEGIN

  SELECT CONST_VALUE FROM GET_CONST_VALUE('FDBF450952CB8E8A40A38BD5122034B3') INTO :S;

  IF (S IS NOT NULL) THEN BEGIN

    D=CURRENT_TIMESTAMP;

    FOR SELECT D.DRIVER_ID, A.PHONE, A.NAME, A.PATRONYMIC
          FROM DRIVERS D
          JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
         WHERE A.LOCKED<>1
           AND D.DATE_SCHEDULE IS NOT NULL
           AND D.DATE_SCHEDULE<=CURRENT_DATE
          INTO :DRIVER_ID, :PHONE, :NAME, :PATRONYMIC DO BEGIN

      WEEK_DAY=EXTRACT(WEEKDAY FROM CURRENT_TIMESTAMP)-1;
      IF (WEEK_DAY<0) THEN
        WEEK_DAY=6;

      DAY_HOUR=EXTRACT(HOUR FROM CURRENT_TIMESTAMP)+1;
      IF (DAY_HOUR>23) THEN BEGIN
        DAY_HOUR=0;
        WEEK_DAY=WEEK_DAY+1;
        IF (WEEK_DAY>6) THEN
          WEEK_DAY=0;
      END

      SELECT COUNT(*)
        FROM DRIVER_WEEK_SCHEDULES
       WHERE WEEK_DAY=:WEEK_DAY
         AND DAY_HOUR=:DAY_HOUR
         AND DRIVER_ID=:DRIVER_ID
        INTO :CNT;

      IF (CNT>0) THEN BEGIN

        SELECT COUNT(*)
          FROM SHIFTS
         WHERE DATE_END IS NULL
           AND ACCOUNT_ID=:DRIVER_ID
           AND DATE_BEGIN<=CURRENT_TIMESTAMP
          INTO :CNT;

        IF (CNT=0) THEN BEGIN

          DTIME=CAST((CAST(DAY_HOUR AS VARCHAR(2))||':00') AS TIME);

          S1=S;
          S1=REPLACE_STRING(S1,'%NAME',NAME);
          S1=REPLACE_STRING(S1,'%PATRONYMIC',PATRONYMIC);
          S1=REPLACE_STRING(S1,'%TIME',FORMAT_DATETIME('hh:nn',DTIME));

          INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                    TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                            VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                    :S1,NULL,0,:PHONE,NULL,1,NULL,:D);

          D=D+5*(1e0/24/60/60);
        END

      END

    END

  END

END

--

CREATE OR ALTER PROCEDURE TASK_SHIFT_CHARGE
(
  TASK_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE DRIVER_ID VARCHAR(32);
DECLARE PHONE VARCHAR(100);
DECLARE NAME VARCHAR(100);
DECLARE PATRONYMIC VARCHAR(100);
DECLARE S VARCHAR(1000);
DECLARE S1 VARCHAR(1000);
DECLARE D TIMESTAMP;
DECLARE DAY_HOUR INTEGER;
DECLARE WEEK_DAY INTEGER;
DECLARE CNT INTEGER;
DECLARE SUM_CHARGE NUMERIC(15,2);
DECLARE CHARGE_TYPE_ID VARCHAR(32);
BEGIN

  SELECT CONST_VALUE FROM GET_CONST_VALUE('118C2CC432E5B9B44A9BF94757EC2EDE') INTO :S;

  IF (S IS NOT NULL) THEN BEGIN

    D=CURRENT_TIMESTAMP;

    FOR SELECT D.DRIVER_ID, A.PHONE, A.NAME, A.PATRONYMIC
          FROM DRIVERS D
          JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
         WHERE A.LOCKED<>1
           AND D.DATE_SCHEDULE IS NOT NULL
           AND D.DATE_SCHEDULE<=CURRENT_DATE
          INTO :DRIVER_ID, :PHONE, :NAME, :PATRONYMIC DO BEGIN

      WEEK_DAY=EXTRACT(WEEKDAY FROM CURRENT_TIMESTAMP)-1;
      IF (WEEK_DAY<0) THEN
        WEEK_DAY=6;

      DAY_HOUR=EXTRACT(HOUR FROM CURRENT_TIMESTAMP);

      SELECT COUNT(*)
        FROM DRIVER_WEEK_SCHEDULES
       WHERE WEEK_DAY=:WEEK_DAY
         AND DAY_HOUR=:DAY_HOUR
         AND DRIVER_ID=:DRIVER_ID
        INTO :CNT;

      IF (CNT>0) THEN BEGIN

        SELECT COUNT(*)
          FROM SHIFTS
         WHERE DATE_END IS NULL
           AND ACCOUNT_ID=:DRIVER_ID
           AND DATE_BEGIN<=CURRENT_TIMESTAMP
          INTO :CNT;

        IF (CNT=0) THEN BEGIN

          SUM_CHARGE=NULL;
          CHARGE_TYPE_ID='CF012E53C5C9A03E4A7F03194B84DA49'; /* Не выполнение графика */

          SELECT SUM_CHARGE
            FROM CHARGE_TYPES
           WHERE CHARGE_TYPE_ID=:CHARGE_TYPE_ID
            INTO :SUM_CHARGE;

          IF (SUM_CHARGE IS NOT NULL) THEN BEGIN

            INSERT INTO CHARGES (CHARGE_ID,WHO_CREATE_ID,CHARGE_TYPE_ID,ACCOUNT_ID,
                                 SUM_CHARGE,DATE_CHARGE,DATE_CREATE,DESCRIPTION)
                         VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:CHARGE_TYPE_ID,:DRIVER_ID,
                                 :SUM_CHARGE,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,NULL);

            S1=S;
            S1=REPLACE_STRING(S1,'%SUM_CHARGE',CAST(SUM_CHARGE AS VARCHAR(30)));

            INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                      TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,
                                      PRIORITY,LOCKED,DATE_BEGIN)
                              VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                      :S1,NULL,0,:PHONE,NULL,
                                      1,NULL,:D);

            D=D+5*(1e0/24/60/60);

          END

        END

      END

    END

  END

END

--

CREATE OR ALTER PROCEDURE TASK_SHIFT_LOCK
(
  TASK_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE DRIVER_ID VARCHAR(32);
DECLARE PHONE VARCHAR(100);
DECLARE NAME VARCHAR(100);
DECLARE PATRONYMIC VARCHAR(100);
DECLARE S VARCHAR(1000);
DECLARE S1 VARCHAR(1000);
DECLARE D TIMESTAMP;
DECLARE DAY_HOUR INTEGER;
DECLARE WEEK_DAY INTEGER;
DECLARE CNT INTEGER;
BEGIN

  SELECT CONST_VALUE FROM GET_CONST_VALUE('21EF7AF84E37B7D64BAA8AE4CA871855') INTO :S;

  IF (S IS NOT NULL) THEN BEGIN

    D=CURRENT_TIMESTAMP;

    FOR SELECT D.DRIVER_ID, A.PHONE, A.NAME, A.PATRONYMIC
          FROM DRIVERS D
          JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
         WHERE A.LOCKED<>1
           AND D.DATE_SCHEDULE IS NOT NULL
           AND D.DATE_SCHEDULE<=CURRENT_DATE
          INTO :DRIVER_ID, :PHONE, :NAME, :PATRONYMIC DO BEGIN

      WEEK_DAY=EXTRACT(WEEKDAY FROM CURRENT_TIMESTAMP)-1;
      IF (WEEK_DAY<0) THEN
        WEEK_DAY=6;

      DAY_HOUR=EXTRACT(HOUR FROM CURRENT_TIMESTAMP);

      SELECT COUNT(*)
        FROM DRIVER_WEEK_SCHEDULES
       WHERE WEEK_DAY=:WEEK_DAY
         AND DAY_HOUR=:DAY_HOUR
         AND DRIVER_ID=:DRIVER_ID
        INTO :CNT;

      IF (CNT>0) THEN BEGIN

        SELECT COUNT(*)
          FROM SHIFTS
         WHERE DATE_END IS NULL
           AND ACCOUNT_ID=:DRIVER_ID
           AND DATE_BEGIN<=CURRENT_TIMESTAMP
          INTO :CNT;

        IF (CNT=0) THEN BEGIN

          UPDATE ACCOUNTS
             SET LOCKED=1
           WHERE ACCOUNT_ID=:DRIVER_ID;

          S1=S;

          INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                    TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,
                                    PRIORITY,LOCKED,DATE_BEGIN)
                            VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                    :S1,NULL,0,:PHONE,NULL,
                                    1,NULL,:D);

          D=D+5*(1e0/24/60/60);

        END

      END

    END

  END

END

--

CREATE OR ALTER PROCEDURE TASK_SHIFT_RECEIPT
(
  TASK_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32))
AS
DECLARE DRIVER_ID VARCHAR(32);
DECLARE PHONE VARCHAR(100);
DECLARE NAME VARCHAR(100);
DECLARE PATRONYMIC VARCHAR(100);
DECLARE S VARCHAR(1000);
DECLARE S1 VARCHAR(1000);
DECLARE D TIMESTAMP;
DECLARE DAY_HOUR INTEGER;
DECLARE WEEK_DAY INTEGER;
DECLARE CNT INTEGER;
DECLARE SUM_RECEIPT NUMERIC(15,2);
DECLARE RECEIPT_TYPE_ID VARCHAR(32);
BEGIN

  SELECT CONST_VALUE FROM GET_CONST_VALUE('51ADDF55CC10AEAA4880A4C93663AD05') INTO :S;

  IF (S IS NOT NULL) THEN BEGIN

    D=CURRENT_TIMESTAMP;

    FOR SELECT D.DRIVER_ID, A.PHONE, A.NAME, A.PATRONYMIC
          FROM DRIVERS D
          JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
         WHERE A.LOCKED<>1
           AND D.DATE_SCHEDULE IS NOT NULL
           AND D.DATE_SCHEDULE<=(CURRENT_DATE-7*24*60*60*(1e0/24/60/60))
          INTO :DRIVER_ID, :PHONE, :NAME, :PATRONYMIC DO BEGIN

      WEEK_DAY=EXTRACT(WEEKDAY FROM CURRENT_TIMESTAMP)-1;
      IF (WEEK_DAY<0) THEN
        WEEK_DAY=6;

      DAY_HOUR=EXTRACT(HOUR FROM CURRENT_TIMESTAMP);

      SELECT COUNT(*)
        FROM DRIVER_WEEK_SCHEDULES
       WHERE WEEK_DAY=:WEEK_DAY
         AND DAY_HOUR=:DAY_HOUR
         AND DRIVER_ID=:DRIVER_ID
        INTO :CNT;

      IF (CNT>0) THEN BEGIN

        SELECT COUNT(*)
          FROM SHIFTS
         WHERE DATE_END IS NULL
           AND ACCOUNT_ID=:DRIVER_ID
           AND DATE_BEGIN<=CURRENT_TIMESTAMP
          INTO :CNT;

        IF (CNT=0) THEN BEGIN

          SUM_RECEIPT=NULL;
          RECEIPT_TYPE_ID='6806D8C9796984F14167CEDF6981BA36'; /* Выполнение графика */

      /*    SELECT SUM_RECEIPT
            FROM RECEIPT_TYPES
           WHERE RECEIPT_TYPE_ID=:RECEIPT_TYPE_ID
            INTO :SUM_RECEIPT;

          IF (SUM_RECEIPT IS NOT NULL) THEN BEGIN

            INSERT INTO RECEIPTS (RECEIPT_ID,RECEIPT_TYPE_ID,ACCOUNT_ID,WHO_CREATE_ID,
                                  SUM_RECEIPT,DATE_RECEIPT,DATE_CREATE,DESCRIPTION)
                          VALUES (GET_UNIQUE_ID(),:RECEIPT_TYPE_ID,:DRIVER_ID,:ACCOUNT_ID,
                                  :SUM_RECEIPT,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,NULL);

            S1=S;
            S1=REPLACE_STRING(S1,'%SUM_RECEIPT',CAST(SUM_RECEIPT AS VARCHAR(30)));

            INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                      TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,
                                      PRIORITY,LOCKED,DATE_BEGIN)
                              VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                      :S1,NULL,0,:PHONE,NULL,
                                      1,NULL,:D);

            D=D+5*(1e0/24/60/60);

          END
        */
        END

      END

    END

  END

END

--

