/* Удаление процедуры добавления отчета */

DROP PROCEDURE /*PREFIX*/I_REPORT

--

/* Создание процедуры добавления отчета */

CREATE PROCEDURE /*PREFIX*/I_REPORT
(
  REPORT_ID VARCHAR(32),
  NAME VARCHAR(100),
  DESCRIPTION VARCHAR(250),
  INTERFACE_TYPE INTEGER,
  ENGINE VARCHAR(100),
  REPORT BLOB,
  PLACE INTEGER
)
AS
BEGIN
  INSERT INTO /*PREFIX*/INTERFACES (INTERFACE_ID,NAME,DESCRIPTION,INTERFACE_TYPE,"MODULE_NAME",MODULE_INTERFACE)
       VALUES (:REPORT_ID,:NAME,:DESCRIPTION,:INTERFACE_TYPE,NULL,NULL);
  
    INSERT INTO /*PREFIX*/REPORTS (REPORT_ID,ENGINE,REPORT,PLACE)
       VALUES (:REPORT_ID,:ENGINE,:REPORT,:PLACE);
                 
END;

--

/* Удаление процедуры изменения отчета */

DROP PROCEDURE /*PREFIX*/U_REPORT

--

/* Создание процедуры изменения отчета */

CREATE PROCEDURE /*PREFIX*/U_REPORT
(
  REPORT_ID VARCHAR(32),
  NAME VARCHAR(100),
  DESCRIPTION VARCHAR(250),
  INTERFACE_TYPE INTEGER,
  ENGINE VARCHAR(100),
  REPORT BLOB,
  PLACE INTEGER,
  OLD_REPORT_ID VARCHAR(32)
)
AS
BEGIN
  UPDATE /*PREFIX*/INTERFACES
       SET INTERFACE_ID=:REPORT_ID,
           NAME=:NAME,
           DESCRIPTION=:DESCRIPTION
     WHERE INTERFACE_ID=:OLD_REPORT_ID;
  
  UPDATE /*PREFIX*/REPORTS
     SET REPORT_ID=:REPORT_ID,
         ENGINE=:ENGINE,
         REPORT=:REPORT,
         PLACE=:PLACE
   WHERE REPORT_ID=:OLD_REPORT_ID;
     
END;

--

/* Удаление процедуры удаления отчета */

DROP PROCEDURE /*PREFIX*/D_REPORT

--

/* Создание процедуры удаления отчета */

CREATE PROCEDURE /*PREFIX*/D_REPORT
(
  OLD_REPORT_ID VARCHAR(32)
)
AS
BEGIN
  DELETE FROM /*PREFIX*/REPORTS
        WHERE REPORT_ID=:OLD_REPORT_ID;
  
    DELETE FROM /*PREFIX*/INTERFACES
          WHERE INTERFACE_ID=:OLD_REPORT_ID;
END;

--

/* Удаление процедуры добавления интерфейсного скриптов */

DROP PROCEDURE /*PREFIX*/I_SCRIPT

--

/* Создание процедуры добавления интерфейсного скриптов */

CREATE PROCEDURE /*PREFIX*/I_SCRIPT
(
  SCRIPT_ID VARCHAR(32),
  NAME VARCHAR(100),
  DESCRIPTION VARCHAR(250),
  INTERFACE_TYPE INTEGER,
  ENGINE VARCHAR(100),
  SCRIPT BLOB,
  PLACE INTEGER
)
AS
BEGIN
  INSERT INTO /*PREFIX*/INTERFACES (INTERFACE_ID,NAME,DESCRIPTION,INTERFACE_TYPE,"MODULE_NAME",MODULE_INTERFACE)
       VALUES (:SCRIPT_ID,:NAME,:DESCRIPTION,:INTERFACE_TYPE,NULL,NULL);
             
  INSERT INTO /*PREFIX*/SCRIPTS (SCRIPT_ID,ENGINE,SCRIPT,PLACE)
       VALUES (:SCRIPT_ID,:ENGINE,:SCRIPT,:PLACE);
END;

--

/* Удаление процедуры изменения интерфейсного скрипта */

DROP PROCEDURE /*PREFIX*/U_SCRIPT

--

/* Создание процедуры изменения интерфейсного скрипта */

CREATE PROCEDURE /*PREFIX*/U_SCRIPT
(
  SCRIPT_ID VARCHAR(32),
  NAME VARCHAR(100),
  DESCRIPTION VARCHAR(250),
  INTERFACE_TYPE INTEGER,
  ENGINE VARCHAR(100),
  SCRIPT BLOB,
  PLACE INTEGER,
  OLD_SCRIPT_ID VARCHAR(32)
)
AS
BEGIN
  UPDATE /*PREFIX*/INTERFACES
       SET INTERFACE_ID=:SCRIPT_ID,
           NAME=:NAME,
           DESCRIPTION=:DESCRIPTION
     WHERE INTERFACE_ID=:OLD_SCRIPT_ID;

    UPDATE /*PREFIX*/SCRIPTS
     SET SCRIPT_ID=:SCRIPT_ID,
         ENGINE=:ENGINE,
         SCRIPT=:SCRIPT,
         PLACE=:PLACE
   WHERE SCRIPT_ID=:OLD_SCRIPT_ID;
END;

--

/* Удаление процедуры удаления интерфейсного скрипта */

DROP PROCEDURE /*PREFIX*/D_SCRIPT

--

/* Создание процедуры удаления интерфейсного скрипта */

CREATE PROCEDURE /*PREFIX*/D_SCRIPT
(
  OLD_SCRIPT_ID VARCHAR(32)
)
AS
BEGIN
  DELETE FROM /*PREFIX*/SCRIPTS
        WHERE SCRIPT_ID=:OLD_SCRIPT_ID;
                
  DELETE FROM /*PREFIX*/INTERFACES
          WHERE INTERFACE_ID=:OLD_SCRIPT_ID;
END;

--

/* Удаление процедуры добавления документа */

DROP PROCEDURE /*PREFIX*/I_DOCUMENT

--

/* Создание процедуры добавления документа */

CREATE PROCEDURE /*PREFIX*/I_DOCUMENT
(
  DOCUMENT_ID VARCHAR(32),
  NAME VARCHAR(100),
  DESCRIPTION VARCHAR(250),
  INTERFACE_TYPE INTEGER,
  OLE_CLASS VARCHAR(100),
  DOCUMENT BLOB,
  PLACE INTEGER
)
AS
BEGIN
  INSERT INTO /*PREFIX*/INTERFACES (INTERFACE_ID,NAME,DESCRIPTION,INTERFACE_TYPE,"MODULE_NAME",MODULE_INTERFACE)
       VALUES (:DOCUMENT_ID,:NAME,:DESCRIPTION,:INTERFACE_TYPE,NULL,NULL);

    INSERT INTO /*PREFIX*/DOCUMENTS (DOCUMENT_ID,OLE_CLASS,DOCUMENT,PLACE)
       VALUES (:DOCUMENT_ID,:OLE_CLASS,:DOCUMENT,:PLACE);
END;

--

/* Создание процедуры изменения документа */

DROP PROCEDURE /*PREFIX*/U_DOCUMENT

--

/* Создание процедуры изменения документа */

CREATE PROCEDURE /*PREFIX*/U_DOCUMENT
(
  DOCUMENT_ID VARCHAR(32),
  NAME VARCHAR(100),
  DESCRIPTION VARCHAR(250),
  INTERFACE_TYPE INTEGER,
  OLE_CLASS VARCHAR(100),
  DOCUMENT BLOB,
  PLACE INTEGER,
  OLD_DOCUMENT_ID VARCHAR(32)
)
AS
BEGIN
  UPDATE /*PREFIX*/INTERFACES
       SET INTERFACE_ID=:DOCUMENT_ID,
           NAME=:NAME,
           DESCRIPTION=:DESCRIPTION
     WHERE INTERFACE_ID=:OLD_DOCUMENT_ID;

  UPDATE /*PREFIX*/DOCUMENTS D
     SET DOCUMENT_ID=:DOCUMENT_ID,
         OLE_CLASS=:OLE_CLASS,
         DOCUMENT=:DOCUMENT,
         PLACE=:PLACE
   WHERE DOCUMENT_ID=:OLD_DOCUMENT_ID;
END;

--

/* Создание процедуры удаления документа */

DROP PROCEDURE /*PREFIX*/D_DOCUMENT

--

/* Создание процедуры удаления документа */

CREATE PROCEDURE /*PREFIX*/D_DOCUMENT
(
  OLD_DOCUMENT_ID VARCHAR(32)
)
AS
BEGIN
  DELETE FROM /*PREFIX*/DOCUMENTS
        WHERE DOCUMENT_ID=:OLD_DOCUMENT_ID;
                
  DELETE FROM /*PREFIX*/INTERFACES
          WHERE INTERFACE_ID=:OLD_DOCUMENT_ID;
END;

--

/* Удаление просмотра заказов */

DROP VIEW /*PREFIX*/S_ORDERS

--

/* Создание просмотра заказов */

CREATE VIEW S_ORDERS(
    ORDER_ID,
    ACTION_ID,
    RATE_ID,
    CAR_TYPE_ID,
    WHO_ACCEPT_ID,
    STREET_ID,
    ZONE_ID,
    PARENT_ID,
    FIRM_ID,
    CAR_ID,
    WHO_PROCESS_ID,
    WHO_HISTORY_ID,
    RESULT_ID,
    PARK_ID,
    SOURCE_ID,
    DISCOUNT_ID,
    DRIVER_ID,
    ORDER_NUM,
    PHONE,
    HOUSE,
    FLAT,
    PORCH,
    DATE_ACCEPT,
    DATE_ARRIVAL,
    DATE_BEGIN,
    DATE_END,
    CUSTOMER,
    DESCRIPTION,
    COST_RATE,
    COST_FACT,
    TYPE_ACCEPT,
    TYPE_PROCESS,
    DATE_HISTORY,
    BEFORE_PERIOD,
    FINISHED,
    ACTION_NAME,
    ACTION_BRUSH_COLOR,
    ACTION_FONT_COLOR,
    ACTION_PERIOD,
    RATE_NAME,
    CAR_TYPE_NAME,
    WHO_ACCEPT,
    STREET_NAME,
    STREET_PREFIX,
    LOCALITY_ID,
    LOCALITY_NAME,
    LOCALITY_PREFIX,
    ZONE_NAME,
    PARENT_ORDER_NUM,
    FIRM_SMALL_NAME,
    CAR_BRAND,
    CAR_STATE_NUM,
    CAR_COLOR,
    CAR_CALLSIGN,
    WHO_PROCESS,
    WHO_HISTORY,
    RESULT_NAME,
    RESULT_BRUSH_COLOR,
    RESULT_FONT_COLOR,
    PARK_NAME,
    PARK_DESCRIPTION,
    SOURCE_NAME,
    DISCOUNT_NAME,
    DRIVER_NAME,
    STATUS,
    ROUTE_STREET_ID,
    ROUTE_STREET_NAME,
    ROUTE_STREET_PREFIX,
    ROUTE_LOCALITY_ID,
    ROUTE_LOCALITY_NAME,
    ROUTE_LOCALITY_PREFIX,
    ROUTE_HOUSE,
    ROUTE_FLAT,
    ROUTE_PORCH,
    ROUTE_ZONE_ID,
    ROUTE_ZONE_NAME
    )
AS
SELECT O.*,
       A.NAME AS ACTION_NAME,
       A.BRUSH_COLOR AS ACTION_BRUSH_COLOR,
       A.FONT_COLOR AS ACTION_FONT_COLOR,
       A.PERIOD AS ACTION_PERIOD,
       R.NAME AS RATE_NAME,
       CT.NAME AS CAR_TYPE_NAME,
       A1.USER_NAME AS WHO_ACCEPT,
       S1.NAME AS STREET_NAME,
       S1.PREFIX AS STREET_PREFIX,
       L1.LOCALITY_ID,
       L1.NAME AS LOCALITY_NAME,
       L1.PREFIX AS LOCALITY_PREFIX,
       Z1.NAME AS ZONE_NAME,
       OP.ORDER_NUM AS PARENT_ORDER_NUM,
       F.SMALL_NAME AS FIRM_SMALL_NAME,
       C.BRAND AS CAR_BRAND,
       C.STATE_NUM AS CAR_STATE_NUM,
       C.COLOR AS CAR_COLOR,
       C.CALLSIGN AS CAR_CALLSIGN,
       A2.USER_NAME AS WHO_PROCESS,
       A4.USER_NAME AS WHO_HISTORY,
       RT.NAME AS RESULT_NAME,
       RT.BRUSH_COLOR AS RESULT_BRUSH_COLOR,
       RT.FONT_COLOR AS RESULT_FONT_COLOR,
       P.NAME AS PARK_NAME,
       P.DESCRIPTION AS PARK_DESCRIPTION,
       S.NAME AS SOURCE_NAME,
       D.NAME AS DISCOUNT_NAME,
       A3.USER_NAME AS DRIVER_NAME,
       (CASE WHEN (O.FINISHED=0) AND (CURRENT_TIMESTAMP>=(O.DATE_ARRIVAL-(O.BEFORE_PERIOD*(1e0/24/60)))) THEN 0
             WHEN (O.FINISHED=0) AND (CURRENT_TIMESTAMP<(O.DATE_ARRIVAL-(O.BEFORE_PERIOD*(1e0/24/60)))) THEN 1
             WHEN O.FINISHED=1 THEN 2
        ELSE 0 END) AS STATUS,
       S2.STREET_ID AS ROUTE_STREET_ID,
       S2.NAME AS ROUTE_STREET_NAME,
       S2.PREFIX AS ROUTE_STREET_PREFIX,
       L2.LOCALITY_ID AS ROUTE_LOCALITY_ID,
       L2.NAME AS ROUTE_LOCALITY_NAME,
       L2.PREFIX AS ROUTE_LOCALITY_PREFIX,
       RO.HOUSE AS ROUTE_HOUSE,
       RO.FLAT AS ROUTE_FLAT,
       RO.PORCH AS ROUTE_PORCH,
       RO.ZONE_ID AS ROUTE_ZONE_ID,
       Z2.NAME AS ROUTE_ZONE_NAME

  FROM /*PREFIX*/ORDERS O
  JOIN /*PREFIX*/ACTIONS A ON A.ACTION_ID=O.ACTION_ID
  JOIN /*PREFIX*/RATES R ON R.RATE_ID=O.RATE_ID
  JOIN /*PREFIX*/CAR_TYPES CT ON CT.CAR_TYPE_ID=O.CAR_TYPE_ID
  JOIN /*PERFIX*/ACCOUNTS A1 ON A1.ACCOUNT_ID=O.WHO_ACCEPT_ID
  JOIN /*PREFIX*/STREETS S1 ON S1.STREET_ID=O.STREET_ID
  JOIN /*PREFIX*/LOCALITIES L1 ON L1.LOCALITY_ID=S1.LOCALITY_ID
  LEFT JOIN /*PREFIX*/ZONES Z1 ON Z1.ZONE_ID=O.ZONE_ID
  LEFT JOIN /*PERFIX*/ORDERS OP ON OP.ORDER_ID=O.PARENT_ID
  LEFT JOIN /*PERFIX*/FIRMS F ON F.FIRM_ID=O.FIRM_ID
  LEFT JOIN /*PERFIX*/CARS C ON C.CAR_ID=O.CAR_ID
  LEFT JOIN /*PERFIX*/ACCOUNTS A2 ON A2.ACCOUNT_ID=O.WHO_PROCESS_ID
  LEFT JOIN /*PERFIX*/ACCOUNTS A4 ON A4.ACCOUNT_ID=O.WHO_HISTORY_ID
  LEFT JOIN /*PERFIX*/RESULTS RT ON RT.RESULT_ID=O.RESULT_ID
  LEFT JOIN /*PERFIX*/PARKS P ON P.PARK_ID=O.PARK_ID
  LEFT JOIN /*PERFIX*/SOURCES S ON S.SOURCE_ID=O.SOURCE_ID
  LEFT JOIN /*PERFIX*/DISCOUNTS D ON D.DISCOUNT_ID=O.DISCOUNT_ID
  LEFT JOIN /*PERFIX*/DRIVERS DR ON DR.DRIVER_ID=O.DRIVER_ID
  LEFT JOIN /*PERFIX*/ACCOUNTS A3 ON A3.ACCOUNT_ID=DR.DRIVER_ID
  LEFT JOIN /*PREFIX*/ROUTES RO ON RO.ORDER_ID=O.ORDER_ID
                                AND RO.PRIORITY=(SELECT MAX(PRIORITY)
                                                   FROM /*PREFIX*/ROUTES
                                                  WHERE ORDER_ID=O.ORDER_ID)
  LEFT JOIN /*PREFIX*/STREETS S2 ON S2.STREET_ID=RO.STREET_ID
  LEFT JOIN /*PREFIX*/LOCALITIES L2 ON L2.LOCALITY_ID=S2.LOCALITY_ID
  LEFT JOIN /*PREFIX*/ZONES Z2 ON Z2.ZONE_ID=RO.ZONE_ID

--

/* Создание процедуры определения результата время истекло */

create or alter procedure DR_TIME_OUT (
    ORDER_ID varchar(32),
    ACTION_ID varchar(32),
    RESULT_ID varchar(32)) 
returns (
    DETECTED integer) 
as
declare variable CNT integer;
declare variable PERIOD integer;
declare variable DATE_BEGIN timestamp;
declare variable DATE_ARRIVAL timestamp;
declare variable BEFORE_PERIOD integer;
declare variable STATUS INTEGER;
BEGIN
  DETECTED=0;

   SELECT PERIOD
     FROM /*PREFIX*/ACTIONS
    WHERE ACTION_ID=:ACTION_ID
     INTO :PERIOD;

  IF (PERIOD IS NOT NULL) THEN BEGIN

    SELECT DATE_BEGIN, DATE_ARRIVAL, BEFORE_PERIOD,
           (CASE WHEN (FINISHED=0) AND (CURRENT_TIMESTAMP>=(DATE_ARRIVAL-(BEFORE_PERIOD*(1e0/24/60)))) THEN 0
                 WHEN (FINISHED=0) AND (CURRENT_TIMESTAMP<(DATE_ARRIVAL-(BEFORE_PERIOD*(1e0/24/60)))) THEN 1
                 WHEN FINISHED=1 THEN 2
            ELSE 0 END) AS STATUS
      FROM /*PREFIX*/ORDERS
     WHERE ORDER_ID=:ORDER_ID
      INTO :DATE_BEGIN, :DATE_ARRIVAL, :BEFORE_PERIOD, :STATUS;

    IF (DATE_BEGIN IS NOT NULL) THEN BEGIN

      IF (STATUS=0) THEN BEGIN
        IF ((DATE_BEGIN+(BEFORE_PERIOD*(1e0/24/60)))<=CURRENT_TIMESTAMP) THEN
          DETECTED=1;
      END

    END

  END

  SUSPEND;
END

--


