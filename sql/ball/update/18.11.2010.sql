ALTER TABLE SESSIONS
ADD QUERY_TEXT BLOB

--

ALTER TABLE SESSIONS
ADD DURATION INTEGER

--

CREATE OR ALTER VIEW S_SESSIONS
(
    SESSION_ID,
    ACCOUNT_ID,
    APPLICATION_ID,
    DATE_CREATE,
    DATE_CHANGE,
    PARAMS,
    QUERY_TEXT,
    DURATION,
    USER_NAME,
    APPLICATION_NAME
)
AS
SELECT S.*, 
       AC.USER_NAME AS USER_NAME,
       AP.NAME AS APPLICATION_NAME
  FROM SESSIONS S
  JOIN ACCOUNTS AC ON AC.ACCOUNT_ID=S.ACCOUNT_ID
  JOIN APPLICATIONS AP ON AP.APPLICATION_ID=S.APPLICATION_ID

--

CREATE OR ALTER PROCEDURE I_SESSION
(
  SESSION_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32),
  APPLICATION_ID VARCHAR(32),
  DATE_CREATE TIMESTAMP,
  DATE_CHANGE TIMESTAMP,
  PARAMS BLOB,
  QUERY_TEXT BLOB,
  DURATION INTEGER
)
AS
BEGIN
  INSERT INTO SESSIONS (SESSION_ID,ACCOUNT_ID,APPLICATION_ID,DATE_CREATE,DATE_CHANGE,
                        PARAMS,QUERY_TEXT,DURATION)
       VALUES (:SESSION_ID,:ACCOUNT_ID,:APPLICATION_ID,:DATE_CREATE,:DATE_CHANGE,
               :PARAMS,:QUERY_TEXT,:DURATION);
END

--

CREATE OR ALTER PROCEDURE U_SESSION
(
  SESSION_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32),
  APPLICATION_ID VARCHAR(32),
  DATE_CREATE TIMESTAMP,
  DATE_CHANGE TIMESTAMP,
  PARAMS BLOB,
  QUERY_TEXT BLOB,
  DURATION INTEGER,
  OLD_SESSION_ID VARCHAR(32)
)
AS
BEGIN
  UPDATE SESSIONS
     SET SESSION_ID=:SESSION_ID,
         ACCOUNT_ID=:ACCOUNT_ID,
         APPLICATION_ID=:APPLICATION_ID,
         DATE_CREATE=:DATE_CREATE,
         DATE_CHANGE=:DATE_CHANGE,
         PARAMS=:PARAMS,
         QUERY_TEXT=:QUERY_TEXT,
         DURATION=:DURATION
   WHERE SESSION_ID=:OLD_SESSION_ID;
END

--

CREATE OR ALTER PROCEDURE TASK_DELETE_QUERIES
(
  SESSION_ID VARCHAR(32),
  TASK_ID VARCHAR(32)
)
AS
BEGIN
  DELETE FROM MON$STATEMENTS
   WHERE DATEADD(10 SECOND TO MON$TIMESTAMP)<CURRENT_TIMESTAMP
     AND MON$STATE<>0;
END

--

CREATE OR ALTER PROCEDURE GET_EVENT_PARAMS
(
  SESSION_ID VARCHAR(32),
  PROTOCOL INTEGER
)
RETURNS (
  IP VARCHAR(20),
  PORT VARCHAR(10),
  LISTEN_IP VARCHAR(20),
  HOST VARCHAR(100),
  PATH VARCHAR(100),
  USE_CRYPTER INTEGER,
  CRYPTER_ALGORITHM INTEGER,
  CRYPTER_MODE INTEGER,
  CRYPTER_KEY VARCHAR(100),
  USE_COMPRESSOR INTEGER,
  COMPRESSOR_LEVEL INTEGER)
AS
DECLARE PARAMS BLOB;
DECLARE SECTION VARCHAR(100);
DECLARE S VARCHAR(1000);
BEGIN
  SELECT PARAMS
    FROM SESSIONS
   WHERE SESSION_ID=:SESSION_ID
    INTO :PARAMS;

  IF ((PROTOCOL=0) OR (PROTOCOL IS NULL)) THEN
    SECTION='ExternalUdpEventServer';
  ELSE
    SECTION='FirstHttpServerHandlerEvent';

  IF (CONFIG_EXISTS(PARAMS,SECTION)=1) THEN BEGIN

    S=CONFIG_READ(PARAMS,SECTION,'IP','');
    IP=SUB_STRING(CASE WHEN POSITION(';',S)>0 THEN SUBSTRING(S FROM 1 FOR POSITION(';',S)-1) ELSE S END,1,20);
    S=CONFIG_READ(PARAMS,SECTION,'Port','');
    PORT=SUB_STRING(CASE WHEN POSITION(';',S)>0 THEN SUBSTRING(S FROM 1 FOR POSITION(';',S)-1) ELSE S END,1,10);
    S=CONFIG_READ(PARAMS,SECTION,'ListenIP','');
    LISTEN_IP=SUB_STRING(CASE WHEN POSITION(';',S)>0 THEN SUBSTRING(S FROM 1 FOR POSITION(';',S)-1) ELSE S END,1,20);
    HOST=SUB_STRING(CONFIG_READ(PARAMS,SECTION,'Host',''),1,100);
    PATH=SUB_STRING(CONFIG_READ(PARAMS,SECTION,'Path',''),1,100);
    USE_CRYPTER=CAST(CONFIG_READ(PARAMS,SECTION,'UseCrypter','0') AS INTEGER);
    CRYPTER_ALGORITHM=CAST(CONFIG_READ(PARAMS,SECTION,'CrypterAlgorithm','0') AS INTEGER);
    CRYPTER_MODE=CAST(CONFIG_READ(PARAMS,SECTION,'CrypterMode','0') AS INTEGER);
    CRYPTER_KEY=CONFIG_READ(PARAMS,SECTION,'CrypterKey','');
    USE_COMPRESSOR=CAST(CONFIG_READ(PARAMS,SECTION,'UseCompressor','0') AS INTEGER);
    COMPRESSOR_LEVEL=CAST(CONFIG_READ(PARAMS,SECTION,'CompressorLevel','0') AS INTEGER);

  END

END

--

