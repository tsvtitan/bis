unit BisKrieltReportsDeliverLand;

interface

uses Controls, BisProvider, BisKrieltReportsUtils, BisFilterGroups, SysUtils,
  BisKrieltReportsFm;

procedure ExportDeliverLandKrs(BisKrieltReportsForm: TBisKrieltReportsForm; DateBegin, DateEnd: TDate);
procedure ExportDeliverLandOthers(BisKrieltReportsForm: TBisKrieltReportsForm; DateBegin, DateEnd: TDate);
procedure ExportDeliverLandOutPoint(BisKrieltReportsForm: TBisKrieltReportsForm; DateBegin, DateEnd: TDate);

implementation

procedure ExportDeliverLandKrs(BisKrieltReportsForm: TBisKrieltReportsForm; DateBegin, DateEnd: TDate);
var Provider: TBisProvider;
  LastRow: Integer;
  Excel, Sheet: Variant;
  Region, XLSNew, SDateBegin, SDateEnd: String;
begin

  SDateBegin:=ConvertDateTime(DateBegin,'Begin');
  SDateEnd:=ConvertDateTime(DateEnd,'End');

  Provider:=TBisProvider.Create(nil);
  Provider.ProviderName:='S_DELIVER_LAND_KRS_EXPORT';      //

  with Provider, FieldNames do begin
    AddInvisible('OBJECT_ID');          //
    AddInvisible('VIEW_ID');            //
    AddInvisible('TYPE_ID');            //
    AddInvisible('OPERATION_ID');       //
    AddInvisible('DATE_BEGIN');         //
    AddInvisible('ACCOUNT_ID');         //
    AddInvisible('USER_NAME');          //
    AddInvisible('PHONE');              //
    AddInvisible('Улица');              //
    AddInvisible('Ориентир');              //
    AddInvisible('Участок');              //
    AddInvisible('Назначение');              //
    AddInvisible('Примечание');              //
    AddInvisible('Цена');              //
    AddInvisible('Район');              //
    AddInvisible('Населенный пункт');              //
  end;

  with Provider, FilterGroups do begin
    Add(foAnd);
    Items[0].Filters.Add('DATE_BEGIN',fcEqualGreater,SDateBegin);
    Items[0].Filters.Add('DATE_BEGIN',fcEqualLess,SDateEnd);
    Items[0].Filters.Add('Населенный пункт',fcEqual,'Красноярск г.');   //
  end;

  with Provider, Orders do begin
    Add('Район');              //
    Add('DATE_BEGIN');         //
  end;

  Provider.Open;
  Provider.First;
  BisKrieltReportsForm.Height:=343;
  SetProgressBarToNull(BisKrieltReportsForm, Provider);

  {_____________________________________________________________________________}

  XLSNew:=CopyExcelDocToNew('deliver_land_krs.xls','Сдам_землю_в_г.Красноярск');
  Excel:=OpenExcelDoc(XLSNew);
  Sheet:=Excel.ActiveSheet;

  Sheet.Range['A1']:='сдам в аренду землю';

  Region:=Provider.FieldByName('Район').AsString;
  Sheet.Range['A4']:=Region;
  LastRow:=6;

  Repeat
    Sheet.Range['A'+IntToStr(LastRow-1)]:=Provider.FieldByName('Улица').AsString;
    Sheet.Range['B'+IntToStr(LastRow-1)]:=Provider.FieldByName('Ориентир').AsString;
    Sheet.Range['C'+IntToStr(LastRow-1)]:=Provider.FieldByName('Участок').AsString;
    Sheet.Range['D'+IntToStr(LastRow-1)]:=Provider.FieldByName('Назначение').AsString;
    Sheet.Range['E'+IntToStr(LastRow-1)]:=Provider.FieldByName('Примечание').AsString;
    Sheet.Range['F'+IntToStr(LastRow-1)]:=Provider.FieldByName('Цена').AsString;
    Sheet.Range['G'+IntToStr(LastRow-1)]:=Provider.FieldByName('PHONE').AsString;
    ExtendPosProgressBar(BisKrieltReportsForm);
    Provider.Next;
    if Provider.Eof=True then Break;

    if (Provider.FieldByName('Район').AsString<>Region) then Begin
      Region:=Provider.FieldByName('Район').AsString;
      InsertExcelRows(Sheet,4,4,'L',LastRow);
      Sheet.Range['A'+IntToStr(LastRow)]:=Region;
      LastRow:=LastRow+1;
    End;
    InsertExcelRows(Sheet,5,5,'L',LastRow);
    Sheet.Rows[LastRow]:='';
    LastRow:=LastRow+1;
  Until False;

  Excel.Visible:=True;
  Provider.Close;

  {_____________________________________________________________________________}

  Provider.Free;

end;

procedure ExportDeliverLandOthers(BisKrieltReportsForm: TBisKrieltReportsForm; DateBegin, DateEnd: TDate);
var Provider: TBisProvider;
  LastRow: Integer;
  Excel, Sheet: Variant;
  XLSNew, SDateBegin, SDateEnd: String;
begin

  SDateBegin:=ConvertDateTime(DateBegin,'Begin');
  SDateEnd:=ConvertDateTime(DateEnd,'End');

  Provider:=TBisProvider.Create(nil);
  Provider.ProviderName:='S_DELIVER_LAND_OTHERS_EXPORT';      //

  with Provider, FieldNames do begin
    AddInvisible('OBJECT_ID');          //
    AddInvisible('VIEW_ID');            //
    AddInvisible('TYPE_ID');            //
    AddInvisible('OPERATION_ID');       //
    AddInvisible('DATE_BEGIN');         //
    AddInvisible('ACCOUNT_ID');         //
    AddInvisible('USER_NAME');          //
    AddInvisible('PHONE');              //
    AddInvisible('Населенный пункт');   //
    AddInvisible('Улица');   //
    AddInvisible('Участок');   //
    AddInvisible('Назначение');   //
    AddInvisible('Примечание');   //
    AddInvisible('Цена');   //
  end;

  with Provider, FilterGroups do begin
    Add(foAnd);
    Items[0].Filters.Add('DATE_BEGIN',fcEqualGreater,SDateBegin);
    Items[0].Filters.Add('DATE_BEGIN',fcEqualLess,SDateEnd);
    Items[0].Filters.Add('Населенный пункт',fcNotEqual,'Красноярск г.');   //
  end;

  with Provider, Orders do begin
    Add('DATE_BEGIN');              //
  end;

  Provider.Open;
  Provider.First;
  BisKrieltReportsForm.Height:=343;
  SetProgressBarToNull(BisKrieltReportsForm, Provider);

  {_____________________________________________________________________________}

  XLSNew:=CopyExcelDocToNew('deliver_offices_others.xls','Сдам_офисы_в_других_населенных_пунктах');
  Excel:=OpenExcelDoc(XLSNew);
  Sheet:=Excel.ActiveSheet;

  Sheet.Range['A1']:='сдам в аренду нежилое';
  Sheet.Range['E1']:='офисы';

  LastRow:=5;

  Repeat
    Sheet.Range['A'+IntToStr(LastRow-1)]:=Provider.FieldByName('Населенный пункт').AsString;
    Sheet.Range['B'+IntToStr(LastRow-1)]:=Provider.FieldByName('Улица').AsString;
    Sheet.Range['C'+IntToStr(LastRow-1)]:=Provider.FieldByName('Пл, м2').AsString;
    Sheet.Range['D'+IntToStr(LastRow-1)]:=Provider.FieldByName('Состояние объекта').AsString;
    Sheet.Range['E'+IntToStr(LastRow-1)]:=Provider.FieldByName('Примечание').AsString;
    Sheet.Range['F'+IntToStr(LastRow-1)]:=Provider.FieldByName('Цена').AsString;
    Sheet.Range['G'+IntToStr(LastRow-1)]:=Provider.FieldByName('PHONE').AsString;
    ExtendPosProgressBar(BisKrieltReportsForm);
    Provider.Next;
    if Provider.Eof=True then Break;

    InsertExcelRows(Sheet,4,4,'L',LastRow);
    Sheet.Rows[LastRow]:='';
    LastRow:=LastRow+1;
  Until False;

  Excel.Visible:=True;
  Provider.Close;

  {_____________________________________________________________________________}

  Provider.Free;

end;

procedure ExportDeliverLandOutPoint(BisKrieltReportsForm: TBisKrieltReportsForm; DateBegin, DateEnd: TDate);
var Provider: TBisProvider;
  LastRow: Integer;
  Excel, Sheet: Variant;
  XLSNew, SDateBegin, SDateEnd: String;
begin

end;

end.
