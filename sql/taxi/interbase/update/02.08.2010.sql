CREATE TABLE /*PREFIX*/CAR_IN_TYPES
(
  CAR_ID VARCHAR(32) NOT NULL,
  CAR_TYPE_ID VARCHAR(32) NOT NULL,
  PRIMARY KEY (CAR_ID,CAR_TYPE_ID),
  FOREIGN KEY (CAR_ID) REFERENCES CARS (CAR_ID),
  FOREIGN KEY (CAR_TYPE_ID) REFERENCES CAR_TYPES (CAR_TYPE_ID)
)

--

CREATE VIEW /*PREFIX*/S_CAR_IN_TYPES
(
  CAR_ID,
  CAR_TYPE_ID,
  CAR_STATE_NUM,
  CAR_BRAND,
  CAR_COLOR,
  CAR_TYPE_NAME,
  CAR_TYPE_FONT_COLOR,
  CAR_TYPE_BRUSH_COLOR
)
AS
  SELECT CIT.*,
         C.STATE_NUM AS CAR_STATE_NUM,
         C.BRAND AS CAR_BRAND,
         C.COLOR AS CAR_COLOR,
         CT.NAME AS CAR_TYPE_NAME,
         CT.FONT_COLOR AS CAR_TYPE_FONT_COLOR,
         CT.BRUSH_COLOR AS CAR_TYPE_BRUSH_COLOR
    FROM /*PREFIX*/CAR_IN_TYPES CIT
    JOIN /*PREFIX*/CARS C ON C.CAR_ID=CIT.CAR_ID
    JOIN /*PREFIX*/CAR_TYPES CT ON CT.CAR_TYPE_ID=CIT.CAR_TYPE_ID

--

CREATE PROCEDURE /*PREFIX*/I_CAR_IN_TYPE
(
  CAR_ID VARCHAR(32),
  CAR_TYPE_ID VARCHAR(32)
)
AS
BEGIN
  INSERT INTO /*PREFIX*/CAR_IN_TYPES (CAR_ID,CAR_TYPE_ID)
       VALUES (:CAR_ID,:CAR_TYPE_ID);
END;

--

CREATE OR ALTER PROCEDURE U_CAR_IN_TYPE
(
  CAR_ID VARCHAR(32),
  CAR_TYPE_ID VARCHAR(32),
  OLD_CAR_ID VARCHAR(32),
  OLD_CAR_TYPE_ID VARCHAR(32)
)
AS
BEGIN
  UPDATE /*PREFIX*/CAR_IN_TYPES
     SET CAR_ID=:CAR_ID,
         CAR_TYPE_ID=:CAR_TYPE_ID
   WHERE CAR_ID=:OLD_CAR_ID
     AND CAR_TYPE_ID=:OLD_CAR_TYPE_ID;
END

--

CREATE OR ALTER PROCEDURE D_CAR_IN_TYPE
(
  OLD_CAR_ID VARCHAR(32),
  OLD_CAR_TYPE_ID VARCHAR(32)
)
AS
BEGIN
  DELETE FROM /*PREFIX*/CAR_IN_TYPES
        WHERE CAR_ID=:OLD_CAR_ID
          AND CAR_TYPE_ID=:OLD_CAR_TYPE_ID;
END

--

INSERT INTO CAR_IN_TYPES (CAR_ID,CAR_TYPE_ID)
SELECT CAR_ID, CAR_TYPE_ID FROM CARS

--

DROP PROCEDURE CODE_INCIDENT;

--

DROP PROCEDURE CODE_LOSE;

--

DROP PROCEDURE I_CAR;

--

DROP PROCEDURE PR_ARRIVAL_DRIVER;

--

DROP PROCEDURE U_CAR;

--

DROP VIEW S_CARS;

--

DROP VIEW S_DRIVER_POSITIVES;

--

DROP VIEW S_DRIVERS;

--

DROP VIEW S_DRIVER_FREE;

--

DROP VIEW S_DRIVER_PARK_FREE;

--

DROP VIEW S_DRIVERS_EX;

--

DROP VIEW S_DRIVER_PARKS;

--

DROP VIEW S_DRIVER_SHIFTS;

--

DROP VIEW S_PARK_STATES;

--

ALTER TABLE CARS
DROP CAR_TYPE_ID

--

CREATE VIEW S_CARS
(
    CAR_ID,
    STATE_NUM,
    CALLSIGN,
    DESCRIPTION,
    BRAND,
    COLOR,
    YEAR_CREATED,
    PTS,
    PAYLOAD,
    AMOUNT
)
AS
SELECT C.*
  FROM /*PREFIX*/CARS C

--

CREATE OR ALTER PROCEDURE I_CAR (
  CAR_ID VARCHAR(32),
  STATE_NUM VARCHAR(50),
  CALLSIGN VARCHAR(10),
  DESCRIPTION VARCHAR(250),
  BRAND VARCHAR(100),
  COLOR VARCHAR(100),
  YEAR_CREATED INTEGER,
  PTS VARCHAR(250),
  PAYLOAD INTEGER,
  AMOUNT INTEGER)
AS
BEGIN
  INSERT INTO /*PREFIX*/CARS (CAR_ID,STATE_NUM,CALLSIGN,DESCRIPTION,
                              BRAND,COLOR,YEAR_CREATED,PTS,PAYLOAD,AMOUNT)
       VALUES (:CAR_ID,:STATE_NUM,:CALLSIGN,:DESCRIPTION,
               :BRAND,:COLOR,:YEAR_CREATED,:PTS,:PAYLOAD,:AMOUNT);
END

--

CREATE OR ALTER PROCEDURE U_CAR
(
  CAR_ID VARCHAR(32),
  STATE_NUM VARCHAR(50),
  CALLSIGN VARCHAR(10),
  DESCRIPTION VARCHAR(250),
  BRAND VARCHAR(100),
  COLOR VARCHAR(100),
  YEAR_CREATED INTEGER,
  PTS VARCHAR(250),
  PAYLOAD INTEGER,
  AMOUNT INTEGER,
  OLD_CAR_ID VARCHAR(32)
)
AS
BEGIN
  UPDATE /*PREFIX*/CARS
     SET CAR_ID=:CAR_ID,
         STATE_NUM=:STATE_NUM,
         CALLSIGN=:CALLSIGN,
         DESCRIPTION=:DESCRIPTION,
         BRAND=:BRAND,
         COLOR=:COLOR,
         YEAR_CREATED=:YEAR_CREATED,
         PTS=:PTS,
         PAYLOAD=:PAYLOAD,
         AMOUNT=:AMOUNT
   WHERE CAR_ID=:OLD_CAR_ID;
END

--

CREATE VIEW S_DRIVERS
(
    DRIVER_ID,
    CALC_ID,
    CAR_ID,
    PHONE_HOME,
    LICENSE,
    CATEGORIES,
    INSURANCE,
    HEALTH_CERT,
    ADDICT_CERT,
    PASSPORT,
    PLACE_BIRTH,
    DATE_BIRTH,
    ADDRESS_RESIDENCE,
    ADDRESS_ACTUAL,
    MIN_BALANCE,
    PRIORITY,
    METHOD_ID,
    DATE_PRIORITY,
    MIN_HOURS,
    DATE_SCHEDULE,
    PHONE,
    DESCRIPTION,
    USER_NAME,
    DATE_CREATE,
    LOCKED,
    SURNAME,
    NAME,
    PATRONYMIC,
    CAR_STATE_NUM,
    CAR_BRAND,
    CAR_COLOR,
    CAR_CALLSIGN,
    CALC_NAME,
    METHOD_NAME)
AS
SELECT D.*,
       A.PHONE,
       A.DESCRIPTION,
       A.USER_NAME,
       A.DATE_CREATE,
       A.LOCKED,
       A.SURNAME,
       A.NAME,
       A.PATRONYMIC,
       CR.STATE_NUM AS CAR_STATE_NUM,
       CR.BRAND AS CAR_BRAND,
       CR.COLOR AS CAR_COLOR,
       CR.CALLSIGN AS CAR_CALLSIGN,
       CL.NAME AS CALC_NAME,
       M.NAME AS METHOD_NAME
  FROM DRIVERS D
  JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
  JOIN CARS CR ON CR.CAR_ID=D.CAR_ID
  LEFT JOIN CALCS CL ON CL.CALC_ID=D.CALC_ID
  LEFT JOIN METHODS M ON M.METHOD_ID=D.METHOD_ID

--

CREATE VIEW S_DRIVER_SHIFTS
(
    SHIFT_ID,
    DRIVER_ID,
    DATE_BEGIN,
    DATE_END,
    DRIVER_USER_NAME,
    DRIVER_SURNAME,
    DRIVER_NAME,
    DRIVER_PATRONYMIC,
    DRIVER_PHONE,
    CAR_ID,
    MIN_BALANCE,
    PRIORITY,
    CAR_COLOR,
    CAR_BRAND,
    CAR_STATE_NUM,
    CAR_CALLSIGN,
    PARK_ID,
    PARK_NAME,
    PARK_DESCRIPTION
)
AS
SELECT S.*,
       A.USER_NAME AS DRIVER_USER_NAME,
       A.SURNAME AS DRIVER_SURNAME,
       A.NAME AS DRIVER_NAME,
       A.PATRONYMIC AS DRIVER_PATRONYMIC,
       A.PHONE AS DRIVER_PHONE,
       D.CAR_ID,
       D.MIN_BALANCE,
       D.PRIORITY,
       C.COLOR AS CAR_COLOR,
       C.BRAND AS CAR_BRAND,
       C.STATE_NUM AS CAR_STATE_NUM,
       C.CALLSIGN AS CAR_CALLSIGN,
       P.PARK_ID,
       P.NAME AS PARK_NAME,
       P.DESCRIPTION AS PARK_DESCRIPTION
  FROM SHIFTS S
  JOIN ACCOUNTS A ON A.ACCOUNT_ID=S.ACCOUNT_ID
  JOIN DRIVERS D ON D.DRIVER_ID=S.ACCOUNT_ID
  JOIN CARS C ON C.CAR_ID=D.CAR_ID
  LEFT JOIN PARK_STATES PS ON PS.DRIVER_ID=D.DRIVER_ID AND PS.DATE_OUT IS NULL
  LEFT JOIN PARKS P ON P.PARK_ID=PS.PARK_ID

--

CREATE VIEW S_PARK_STATES
(
    PARK_STATE_ID,
    DRIVER_ID,
    PARK_ID,
    DATE_IN,
    DATE_OUT,
    PARK_NAME,
    PARK_DESCRIPTION,
    DRIVER_USER_NAME,
    DRIVER_SURNAME,
    DRIVER_NAME,
    DRIVER_PATRONYMIC,
    DRIVER_PHONE,
    CAR_ID,
    MIN_BALANCE,
    PRIORITY,
    CAR_COLOR,
    CAR_BRAND,
    CAR_STATE_NUM,
    CAR_CALLSIGN
)
AS
SELECT PS.*,
       P.NAME AS PARK_NAME,
       P.DESCRIPTION AS PARK_DESCRIPTION,
       A.USER_NAME AS DRIVER_USER_NAME,
       A.SURNAME AS DRIVER_SURNAME,
       A.NAME AS DRIVER_NAME,
       A.PATRONYMIC AS DRIVER_PATRONYMIC,
       A.PHONE AS DRIVER_PHONE,
       D.CAR_ID,
       D.MIN_BALANCE,
       D.PRIORITY,
       C.COLOR AS CAR_COLOR,
       C.BRAND AS CAR_BRAND,
       C.STATE_NUM AS CAR_STATE_NUM,
       C.CALLSIGN AS CAR_CALLSIGN
  FROM PARK_STATES PS
  JOIN ACCOUNTS A ON A.ACCOUNT_ID=PS.DRIVER_ID
  JOIN PARKS P ON P.PARK_ID=PS.PARK_ID
  JOIN DRIVERS D ON D.DRIVER_ID=PS.DRIVER_ID
  JOIN CARS C ON C.CAR_ID=D.CAR_ID

--

CREATE OR ALTER PROCEDURE CODE_LOSE
(
  ACCOUNT_ID VARCHAR(32),
  IN_MESSAGE_ID VARCHAR(32)
)
AS
DECLARE CONTACT VARCHAR(100);
DECLARE SENDER_ID VARCHAR(32);
DECLARE TEXT_IN VARCHAR(4000);
DECLARE CNT INTEGER;
DECLARE SUM_CHARGE NUMERIC(15,2);
DECLARE SUM_RECEIPT NUMERIC(15,2);
DECLARE BALANCE NUMERIC(15,2);
DECLARE MIN_BALANCE NUMERIC(15,2);
DECLARE USER_NAME VARCHAR(100);
DECLARE S VARCHAR(250);
DECLARE TYPE_MESSAGE INTEGER;
DECLARE SURNAME VARCHAR(100);
DECLARE NAME VARCHAR(100);
DECLARE PATRONYMIC VARCHAR(100);
BEGIN
  SELECT IM.CONTACT, IM.SENDER_ID, IM.TEXT_IN, IM.TYPE_MESSAGE
    FROM IN_MESSAGES IM
    LEFT JOIN CODE_MESSAGES CM ON CM.CODE_MESSAGE_ID=IM.CODE_MESSAGE_ID
   WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID
    INTO :CONTACT, :SENDER_ID, :TEXT_IN, :TYPE_MESSAGE;

  IF ((CONTACT IS NOT NULL) AND (SENDER_ID IS NOT NULL) AND (TEXT_IN IS NOT NULL)) THEN BEGIN

    SELECT COUNT(*)
      FROM DRIVERS D
      JOIN  ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
     WHERE D.DRIVER_ID=:SENDER_ID
       AND A.LOCKED<>1
      INTO :CNT;

    IF (CNT>0) THEN BEGIN

      EXECUTE PROCEDURE GET_ACCOUNT_BALANCE(:SENDER_ID)
       RETURNING_VALUES :SUM_CHARGE, :SUM_RECEIPT, :BALANCE;

      SELECT D.MIN_BALANCE, A.USER_NAME, A.SURNAME, A.NAME, A.PATRONYMIC
        FROM DRIVERS D
        JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
        JOIN CARS C ON C.CAR_ID=D.CAR_ID
       WHERE D.DRIVER_ID=:SENDER_ID
        INTO :MIN_BALANCE, :USER_NAME, :SURNAME, :NAME, :PATRONYMIC;

      SELECT COUNT(*)
        FROM SHIFTS
       WHERE ACCOUNT_ID=:SENDER_ID
         AND DATE_END IS NULL
        INTO :CNT;

      IF ((CNT>0) AND ((MIN_BALANCE IS NULL) OR ((MIN_BALANCE IS NOT NULL) AND (BALANCE>MIN_BALANCE)))) THEN BEGIN

        S=USER_NAME||' - ';
        IF (SURNAME IS NOT NULL) THEN
          S=S||' '||SURNAME;
        IF (NAME IS NOT NULL) THEN
          S=S||' '||NAME;
        IF (PATRONYMIC IS NOT NULL) THEN
          S=S||' '||PATRONYMIC;


        INSERT INTO ALARMS (ALARM_ID,SENDER_ID,RECIPIENT_ID,TYPE_ALARM,
                            DATE_BEGIN,DATE_END,CAPTION,TEXT_ALARM)
                    VALUES (GET_UNIQUE_ID(),'CA25F4C3A6DA8C334D20D3C4F2A2EF62',NULL,0,
                            CURRENT_TIMESTAMP,CURRENT_TIMESTAMP+5*(1e0/24/60),'Водитель заблудился',:S);

        SELECT CONST_VALUE FROM GET_CONST_VALUE('AB84E2116D3485A847EEE59DB47CE27B') INTO :S;

        EXECUTE PROCEDURE GET_TYPE_MESSAGE(:SENDER_ID,:TYPE_MESSAGE)
         RETURNING_VALUES :TYPE_MESSAGE;

        IF ((S IS NOT NULL) AND (TYPE_MESSAGE IS NOT NULL)) THEN BEGIN

          S=REPLACE_STRING(S,'%CODE',TEXT_IN);

          INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                    TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                            VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                    :S,NULL,:TYPE_MESSAGE,:CONTACT,NULL,1,NULL,CURRENT_TIMESTAMP);
        END

      END

    END

  END
END

--

CREATE OR ALTER PROCEDURE CODE_INCIDENT
(
  ACCOUNT_ID VARCHAR(32),
  IN_MESSAGE_ID VARCHAR(32)
)
AS
DECLARE CONTACT VARCHAR(100);
DECLARE SENDER_ID VARCHAR(32);
DECLARE TEXT_IN VARCHAR(4000);
DECLARE CNT INTEGER;
DECLARE SUM_CHARGE NUMERIC(15,2);
DECLARE SUM_RECEIPT NUMERIC(15,2);
DECLARE BALANCE NUMERIC(15,2);
DECLARE MIN_BALANCE NUMERIC(15,2);
DECLARE USER_NAME VARCHAR(100);
DECLARE S VARCHAR(250);
DECLARE TYPE_MESSAGE INTEGER;
DECLARE SURNAME VARCHAR(100);
DECLARE NAME VARCHAR(100);
DECLARE PATRONYMIC VARCHAR(100);
BEGIN
  SELECT IM.CONTACT, IM.SENDER_ID, IM.TEXT_IN, IM.TYPE_MESSAGE
    FROM IN_MESSAGES IM
    LEFT JOIN CODE_MESSAGES CM ON CM.CODE_MESSAGE_ID=IM.CODE_MESSAGE_ID
   WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID
    INTO :CONTACT, :SENDER_ID, :TEXT_IN, :TYPE_MESSAGE;

  IF ((CONTACT IS NOT NULL) AND (SENDER_ID IS NOT NULL) AND (TEXT_IN IS NOT NULL)) THEN BEGIN

    SELECT COUNT(*)
      FROM DRIVERS D
      JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
     WHERE D.DRIVER_ID=:SENDER_ID
       AND A.LOCKED<>1
      INTO :CNT;

    IF (CNT>0) THEN BEGIN

      EXECUTE PROCEDURE GET_ACCOUNT_BALANCE(:SENDER_ID)
       RETURNING_VALUES :SUM_CHARGE, :SUM_RECEIPT, :BALANCE;

      SELECT D.MIN_BALANCE, A.USER_NAME, A.SURNAME, A.NAME, A.PATRONYMIC
        FROM DRIVERS D
        JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
        JOIN CARS C ON C.CAR_ID=D.CAR_ID
       WHERE D.DRIVER_ID=:SENDER_ID
        INTO :MIN_BALANCE, :USER_NAME, :SURNAME, :NAME, :PATRONYMIC;
        
      SELECT COUNT(*)
        FROM SHIFTS
       WHERE ACCOUNT_ID=:SENDER_ID
         AND DATE_END IS NULL
        INTO :CNT;

      IF ((CNT>0) AND ((MIN_BALANCE IS NULL) OR ((MIN_BALANCE IS NOT NULL) AND (BALANCE>MIN_BALANCE)))) THEN BEGIN

        S=USER_NAME||' - ';
        IF (SURNAME IS NOT NULL) THEN
          S=S||' '||SURNAME;
        IF (NAME IS NOT NULL) THEN
          S=S||' '||NAME;
        IF (PATRONYMIC IS NOT NULL) THEN
          S=S||' '||PATRONYMIC;

        INSERT INTO ALARMS (ALARM_ID,SENDER_ID,RECIPIENT_ID,TYPE_ALARM,
                            DATE_BEGIN,DATE_END,CAPTION,TEXT_ALARM)
                    VALUES (GET_UNIQUE_ID(),'CA25F4C3A6DA8C334D20D3C4F2A2EF62',NULL,1,
                            CURRENT_TIMESTAMP,CURRENT_TIMESTAMP+5*(1e0/24/60),'Черезвычайное проишествие',:S);

        SELECT CONST_VALUE FROM GET_CONST_VALUE('7B7B35D636E1B840426877D1EB07428F') INTO :S;

        EXECUTE PROCEDURE GET_TYPE_MESSAGE(:SENDER_ID,:TYPE_MESSAGE)
         RETURNING_VALUES :TYPE_MESSAGE;

        IF ((S IS NOT NULL) AND (TYPE_MESSAGE IS NOT NULL)) THEN BEGIN

          S=REPLACE_STRING(S,'%CODE',TEXT_IN);

          INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                    TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,PRIORITY,LOCKED,DATE_BEGIN)
                            VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:SENDER_ID,CURRENT_TIMESTAMP,
                                    :S,NULL,:TYPE_MESSAGE,:CONTACT,NULL,0,NULL,CURRENT_TIMESTAMP);
        END

      END

    END

  END
END

--

CREATE OR ALTER PROCEDURE PR_ARRIVAL_DRIVER
(
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32)
)
AS
DECLARE PHONE VARCHAR(100);
DECLARE DRIVER_ID VARCHAR(32);
DECLARE PARK_ID VARCHAR(32);
DECLARE PARK_STREET_ID VARCHAR(32);
DECLARE PARK_HOUSE VARCHAR(10);
DECLARE FROM_STREET_ID VARCHAR(32);
DECLARE FROM_HOUSE VARCHAR(10);
DECLARE RECEIPT_TYPE_ID VARCHAR(32);
DECLARE COST_RATE NUMERIC(15,2);
DECLARE COST_CASH NUMERIC(15,2);
DECLARE COLOR VARCHAR(100);
DECLARE BRAND VARCHAR(100);
DECLARE STATE_NUM VARCHAR(50);
DECLARE PREFIX VARCHAR(10);
DECLARE STREET VARCHAR(100);
DECLARE HOUSE VARCHAR(10);
DECLARE FLAT VARCHAR(10);
DECLARE PORCH VARCHAR(10);
DECLARE LOCALITY VARCHAR(100);
DECLARE CLIENT_ID VARCHAR(32);
DECLARE CALC_ID VARCHAR(32);
DECLARE SUM_CHARGE NUMERIC(15,2);
DECLARE SUM_RECEIPT NUMERIC(15,2);
DECLARE BALANCE NUMERIC(15,2);
DECLARE S VARCHAR(1000);
DECLARE S1 VARCHAR(1000);
DECLARE ADDRESS VARCHAR(1000);
DECLARE NUM INTEGER;
DECLARE CNT INTEGER;
DECLARE FLAG INTEGER;
DECLARE D TIMESTAMP;
DECLARE LAT1 DOUBLE PRECISION;
DECLARE LON1 DOUBLE PRECISION;
DECLARE LAT2 DOUBLE PRECISION;
DECLARE LON2 DOUBLE PRECISION;
DECLARE ROUTE_DISTANCE DOUBLE PRECISION;
DECLARE DISTANCE NUMERIC(15,2);
DECLARE CLIENT_TYPE_MESSAGE INTEGER;
DECLARE DRIVER_TYPE_MESSAGE INTEGER;
DECLARE IN_MESSAGE_ID VARCHAR(32);
BEGIN

  SELECT O.PHONE, O.DRIVER_ID, O.PARK_ID,
         O.STREET_ID, O.HOUSE,
         O.COST_RATE, O.CLIENT_ID,
         C.COLOR, C.BRAND, C.STATE_NUM
    FROM ORDERS O
    LEFT JOIN DRIVERS D ON D.DRIVER_ID=O.DRIVER_ID
    LEFT JOIN CARS C ON C.CAR_ID=D.CAR_ID
   WHERE ORDER_ID=:ORDER_ID
    INTO :PHONE, :DRIVER_ID, :PARK_ID,
         :FROM_STREET_ID, :FROM_HOUSE,
         :COST_RATE, :CLIENT_ID,
         :COLOR, :BRAND, :STATE_NUM;

  UPDATE ORDERS
     SET DATE_BEGIN=CURRENT_TIMESTAMP
   WHERE ORDER_ID=:ORDER_ID;

  CALC_ID=NULL;

  IF (CLIENT_ID IS NOT NULL) THEN BEGIN

    SELECT CALC_ID
      FROM CLIENTS
     WHERE CLIENT_ID=:CLIENT_ID
      INTO :CALC_ID;

  END

  BALANCE=NULL;

  IF (CALC_ID IS NOT NULL) THEN BEGIN

    EXECUTE PROCEDURE GET_ACCOUNT_BALANCE(:CLIENT_ID)
     RETURNING_VALUES :SUM_CHARGE, :SUM_RECEIPT, :BALANCE;

  END

  FLAG=0;

  FOR SELECT STREET_ID, HOUSE
        FROM ROUTES
       WHERE ORDER_ID=:ORDER_ID
       ORDER BY PRIORITY
        INTO :STREET, :HOUSE DO BEGIN

    IF ((STREET IS NOT NULL) AND (HOUSE IS NOT NULL)) THEN BEGIN

    END ELSE BEGIN

      FLAG=1;

    END
  END

  COST_CASH=NULL;

  IF ((COST_RATE>0.0) AND (FLAG=0)) THEN BEGIN

    IF (BALANCE IS NOT NULL) THEN BEGIN

      IF (BALANCE>=COST_RATE) THEN
        COST_CASH=0.0;
      ELSE
        COST_CASH=COST_RATE-BALANCE;

    END

  END

  IF (SUBSTR(PHONE,1,3)='+79')  THEN BEGIN

    IF ((COST_RATE>0.0) AND (FLAG=0)) THEN BEGIN

      IF (COST_CASH IS NULL) THEN

        SELECT CONST_VALUE FROM GET_CONST_VALUE('8D9E6C9F4852AD8142205F027B2A5288') INTO :S;

      ELSE

        SELECT CONST_VALUE FROM GET_CONST_VALUE('9CA9F2761D2BBE974791906824C3C31A') INTO :S;

    END ELSE BEGIN

      SELECT CONST_VALUE FROM GET_CONST_VALUE('93EBB0171E37A0884313759C0DA1EB3D') INTO :S;

    END

    EXECUTE PROCEDURE GET_TYPE_MESSAGE(CLIENT_ID,NULL)
     RETURNING_VALUES CLIENT_TYPE_MESSAGE;

    IF ((S IS NOT NULL) AND (CLIENT_TYPE_MESSAGE IS NOT NULL)) THEN BEGIN

      S=REPLACE_STRING(S,'%COLOR',COLOR);
      S=REPLACE_STRING(S,'%BRAND',BRAND);
      S=REPLACE_STRING(S,'%STATE_NUM',STATE_NUM);
      S=REPLACE_STRING(S,'%COST_RATE',CAST(CAST(COST_RATE AS NUMERIC(15,0)) AS VARCHAR(30)));
      S=REPLACE_STRING(S,'%COST_CASH',CAST(CAST(COST_CASH AS NUMERIC(15,0)) AS VARCHAR(30)));

      INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,
                                PRIORITY,LOCKED,DATE_BEGIN,ORDER_ID)
                        VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:CLIENT_ID,CURRENT_TIMESTAMP,
                                :S,NULL,:CLIENT_TYPE_MESSAGE,:PHONE,NULL,
                                0,NULL,CURRENT_TIMESTAMP,:ORDER_ID);

    END

    SELECT CONST_VALUE FROM GET_CONST_VALUE('F4384929079999BB47A895BFCA5BB382') INTO :S;

    IF ((S IS NOT NULL) AND (CLIENT_TYPE_MESSAGE IS NOT NULL)) THEN BEGIN

      INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,
                                PRIORITY,LOCKED,DATE_BEGIN,ORDER_ID)
                        VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:CLIENT_ID,CURRENT_TIMESTAMP,
                                :S,NULL,:CLIENT_TYPE_MESSAGE,:PHONE,NULL,
                                0,NULL,CURRENT_TIMESTAMP,:ORDER_ID);

    END

  END

  IF (DRIVER_ID IS NOT NULL) THEN BEGIN

    FOR SELECT IN_MESSAGE_ID, TYPE_MESSAGE
          FROM IN_MESSAGES
         WHERE ORDER_ID=:ORDER_ID
           AND CODE_MESSAGE_ID='618A0B399123BEEA474944099929C541' /* Водитель прибыл */
           AND SENDER_ID=:DRIVER_ID
           AND DESCRIPTION IS NULL
          INTO :IN_MESSAGE_ID, :DRIVER_TYPE_MESSAGE DO BEGIN

      UPDATE IN_MESSAGES
         SET DESCRIPTION=:ORDER_ID
       WHERE IN_MESSAGE_ID=:IN_MESSAGE_ID;

      BREAK;
    END

    EXECUTE PROCEDURE GET_TYPE_MESSAGE(DRIVER_ID,DRIVER_TYPE_MESSAGE)
     RETURNING_VALUES DRIVER_TYPE_MESSAGE;

    SELECT PHONE
      FROM ACCOUNTS
     WHERE ACCOUNT_ID=:DRIVER_ID
      INTO :PHONE;

    FLAG=0;
    NUM=0;

    SELECT COUNT(*)
      FROM ROUTES
     WHERE ORDER_ID=:ORDER_ID
      INTO :CNT;

    D=CURRENT_TIMESTAMP;

    FOR SELECT S.PREFIX, S.NAME, R.HOUSE, R.FLAT, R.PORCH, L.NAME
          FROM ROUTES R
          LEFT JOIN STREETS S ON S.STREET_ID=R.STREET_ID
          LEFT JOIN LOCALITIES L ON L.LOCALITY_ID=S.LOCALITY_ID
         WHERE R.ORDER_ID=:ORDER_ID
         ORDER BY R.PRIORITY
          INTO :PREFIX, :STREET, :HOUSE, :FLAT, :PORCH, :LOCALITY DO BEGIN

      ADDRESS='';
      S=NULL;

      IF ((STREET IS NOT NULL) AND (HOUSE IS NOT NULL)) THEN BEGIN

        IF (PREFIX IS NOT NULL) THEN
          ADDRESS=PREFIX||' ';

        IF (STREET IS NOT NULL) THEN
          ADDRESS=ADDRESS||STREET;

        IF (HOUSE IS NOT NULL) THEN
          ADDRESS=ADDRESS||' '||HOUSE;

        IF (FLAT IS NOT NULL) THEN
          ADDRESS=ADDRESS||'-'||FLAT;

        IF (PORCH IS NOT NULL) THEN
          ADDRESS=ADDRESS||' п.'||PORCH;

        IF ((LOCALITY IS NOT NULL) AND (LOCALITY<>'Красноярск')) THEN
          ADDRESS=ADDRESS||', '||LOCALITY;

        SELECT CONST_VALUE FROM GET_CONST_VALUE('92009DB6C3EAA9E74B80D333538FE40D') INTO :S;

      END ELSE BEGIN

        FLAG=1;

        SELECT CONST_VALUE FROM GET_CONST_VALUE('7ED5E8A8BBD9870A411517B54D9EB973') INTO :S;

      END

      IF (S IS NOT NULL) THEN BEGIN

        NUM=NUM+1;

        S=REPLACE_STRING(S,'%NUM',NUM);
        S=REPLACE_STRING(S,'%COUNT',CNT);
        S=REPLACE_STRING(S,'%ADDRESS',ADDRESS);

        IF (NUM=CNT) THEN BEGIN

          IF ((FLAG=0) AND (COST_RATE>0.0)) THEN BEGIN

            IF (COST_CASH IS NULL) THEN

              SELECT CONST_VALUE FROM GET_CONST_VALUE('9C8BC7D14DAEAE5C4DC8C1C91B20BCC2') INTO :S1;

            ELSE

              SELECT CONST_VALUE FROM GET_CONST_VALUE('A468782967A1A4D347F85F33D39E348A') INTO :S1;

          END ELSE

            SELECT CONST_VALUE FROM GET_CONST_VALUE('D3F68032AD999D004140A480A8AAF749') INTO :S1;

        END ELSE

          S1=S;


        IF ((S1 IS NOT NULL) AND (DRIVER_TYPE_MESSAGE IS NOT NULL)) THEN BEGIN

          S1=REPLACE_STRING(S1,'%ADDRESS',S);
          S1=REPLACE_STRING(S1,'%COST_RATE',CAST(CAST(COST_RATE AS NUMERIC(15,0)) AS VARCHAR(30)));
          S1=REPLACE_STRING(S1,'%COST_CASH',CAST(CAST(COST_CASH AS NUMERIC(15,0)) AS VARCHAR(30)));

          INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                    TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,
                                    PRIORITY,LOCKED,DATE_BEGIN,ORDER_ID)
                            VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                    :S1,NULL,:DRIVER_TYPE_MESSAGE,:PHONE,NULL,
                                    2,NULL,:D,:ORDER_ID);

          D=D+1*(1e0/24/60/60);

        END

      END

    END

    IF (PARK_ID IS NOT NULL) THEN BEGIN

      SELECT STREET_ID, HOUSE
        FROM PARKS
       WHERE PARK_ID=:PARK_ID
        INTO :PARK_STREET_ID, :PARK_HOUSE;

      IF ((PARK_STREET_ID IS NOT NULL) AND (PARK_HOUSE IS NOT NULL)) THEN BEGIN

        SELECT LAT, LON
          FROM MAP_OBJECTS
         WHERE STREET_ID=:PARK_STREET_ID
           AND HOUSE=:PARK_HOUSE
          INTO :LAT1, :LON1;

        IF ((LAT1 IS NOT NULL) AND (LON1 IS NOT NULL) AND
            (FROM_STREET_ID IS NOT NULL) AND (FROM_HOUSE IS NOT NULL)) THEN BEGIN

          SELECT LAT, LON
            FROM MAP_OBJECTS
           WHERE STREET_ID=:FROM_STREET_ID
             AND HOUSE=:FROM_HOUSE
            INTO :LAT2, :LON2;

          IF ((LAT2 IS NOT NULL) AND (LON2 IS NOT NULL)) THEN BEGIN

            EXECUTE PROCEDURE GET_ROUTE_DISTANCE(:LAT1,:LON1,:LAT2,:LON2)
             RETURNING_VALUES :ROUTE_DISTANCE;

            IF ((ROUTE_DISTANCE IS NOT NULL) AND (ROUTE_DISTANCE>0.0)) THEN BEGIN

              DISTANCE=CAST((ROUTE_DISTANCE/1000) AS NUMERIC(15,2));

              IF (DISTANCE>5.0) THEN BEGIN

                DISTANCE=DISTANCE-5.0;

                RECEIPT_TYPE_ID='2448E302595392064D9DF67BDD05C7DB'; /* Компенсация за прогон */

                SUM_RECEIPT=DISTANCE*2.5;

                INSERT INTO RECEIPTS (RECEIPT_ID,RECEIPT_TYPE_ID,ACCOUNT_ID,WHO_CREATE_ID,
                                      SUM_RECEIPT,DATE_RECEIPT,DATE_CREATE,DESCRIPTION)
                              VALUES (GET_UNIQUE_ID(),:RECEIPT_TYPE_ID,:DRIVER_ID,:ACCOUNT_ID,
                                      :SUM_RECEIPT,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,NULL);

                SELECT CONST_VALUE FROM GET_CONST_VALUE('6905163E6105BE12488DAF7AAFA32810') INTO :S;

                IF ((S IS NOT NULL) AND (DRIVER_TYPE_MESSAGE IS NOT NULL)) THEN BEGIN

                  S=REPLACE_STRING(S,'%DISTANCE',CAST(DISTANCE AS VARCHAR(30)));
                  S=REPLACE_STRING(S,'%SUM_RECEIPT',CAST(SUM_RECEIPT AS VARCHAR(30)));

                  INSERT INTO OUT_MESSAGES (OUT_MESSAGE_ID,CREATOR_ID,RECIPIENT_ID,DATE_CREATE,
                                            TEXT_OUT,DATE_OUT,TYPE_MESSAGE,CONTACT,DESCRIPTION,
                                            PRIORITY,LOCKED,DATE_BEGIN,ORDER_ID)
                                    VALUES (GET_UNIQUE_ID(),:ACCOUNT_ID,:DRIVER_ID,CURRENT_TIMESTAMP,
                                            :S,NULL,:DRIVER_TYPE_MESSAGE,:PHONE,NULL,
                                            2,NULL,:D,:ORDER_ID);


                END

              END

            END

          END

        END

      END

    END

  END

END

--

CREATE OR ALTER PROCEDURE PR_NO_DRIVER
(
  ORDER_ID VARCHAR(32),
  ACCOUNT_ID VARCHAR(32)
)
AS
DECLARE ZONE_ID VARCHAR(32);
DECLARE PARK_ID VARCHAR(32);
DECLARE DRIVER_ID VARCHAR(32);
DECLARE CAR_TYPE_ID VARCHAR(32);
DECLARE RESULT_DRIVER_ID VARCHAR(32);
DECLARE RESULT_PARK_ID VARCHAR(32);
DECLARE CAR_ID VARCHAR(32);
DECLARE CNT INTEGER;
BEGIN

  SELECT ZONE_ID, PARK_ID, DRIVER_ID, CAR_TYPE_ID
    FROM ORDERS
   WHERE ORDER_ID=:ORDER_ID
    INTO :ZONE_ID, :PARK_ID, :DRIVER_ID, :CAR_TYPE_ID;

  IF (DRIVER_ID IS NULL) THEN BEGIN

    IF (ZONE_ID IS NOT NULL) THEN BEGIN

      RESULT_PARK_ID=NULL;
      RESULT_DRIVER_ID=NULL;

      IF (PARK_ID IS NULL) THEN BEGIN

        FOR SELECT P.PARK_ID
              FROM ZONE_PARKS ZP
              JOIN PARKS P ON P.PARK_ID=ZP.PARK_ID
             WHERE ZP.ZONE_ID=:ZONE_ID
             ORDER BY ZP.DISTANCE, ZP.PERIOD
              INTO :PARK_ID DO BEGIN

          FOR SELECT PS.DRIVER_ID
                FROM PARK_STATES PS
                JOIN DRIVERS D ON D.DRIVER_ID=PS.DRIVER_ID
               WHERE PS.PARK_ID=:PARK_ID
                 AND PS.DATE_OUT IS NULL
                 AND D.CAR_ID IN (SELECT CAR_ID
                                    FROM CAR_IN_TYPES
                                   WHERE CAR_TYPE_ID=:CAR_TYPE_ID)
               ORDER BY D.PRIORITY, PS.DATE_IN
                INTO :DRIVER_ID DO BEGIN

            SELECT COUNT(*)
              FROM ORDERS
             WHERE DRIVER_ID=:DRIVER_ID
               AND PARENT_ID IS NULL
               AND DATE_HISTORY IS NULL
               AND FINISHED<>1
              INTO :CNT;

            IF (CNT=0) THEN BEGIN
              RESULT_DRIVER_ID=DRIVER_ID;
              BREAK;
            END

          END

          IF (RESULT_DRIVER_ID IS NOT NULL) THEN BEGIN
            RESULT_PARK_ID=PARK_ID;
            BREAK;
          END

        END

      END ELSE BEGIN

        FOR SELECT PS.DRIVER_ID
              FROM PARK_STATES PS
              JOIN DRIVERS D ON D.DRIVER_ID=PS.DRIVER_ID
             WHERE PS.PARK_ID=:PARK_ID
               AND PS.DATE_OUT IS NULL
               AND D.CAR_ID IN (SELECT CAR_ID
                                  FROM CAR_IN_TYPES
                                 WHERE CAR_TYPE_ID=:CAR_TYPE_ID)
             ORDER BY D.PRIORITY, PS.DATE_IN
              INTO :DRIVER_ID DO BEGIN

          SELECT COUNT(*)
            FROM ORDERS
           WHERE DRIVER_ID=:DRIVER_ID
             AND PARENT_ID IS NULL
             AND DATE_HISTORY IS NULL
             AND FINISHED<>1
            INTO :CNT;

          IF (CNT=0) THEN BEGIN
            RESULT_DRIVER_ID=DRIVER_ID;
            RESULT_PARK_ID=PARK_ID;
            BREAK;
          END

        END

      END

      IF (RESULT_DRIVER_ID IS NOT NULL) THEN BEGIN

        SELECT CAR_ID
          FROM DRIVERS
         WHERE DRIVER_ID=:RESULT_DRIVER_ID
          INTO :CAR_ID;

        UPDATE ORDERS
           SET PARK_ID=:RESULT_PARK_ID,
               DRIVER_ID=:RESULT_DRIVER_ID,
               CAR_ID=:CAR_ID,
               DATE_END=CURRENT_TIMESTAMP,
               WHO_PROCESS_ID=:ACCOUNT_ID
         WHERE ORDER_ID=:ORDER_ID;

      END ELSE BEGIN

        EXECUTE PROCEDURE PR_MANUAL(ORDER_ID,ACCOUNT_ID);

      END

    END ELSE BEGIN

      EXECUTE PROCEDURE PR_MANUAL(ORDER_ID,ACCOUNT_ID);

    END

  END

END

--

CREATE VIEW S_DRIVER_PARKS
(
    PARK_STATE_ID,
    DRIVER_ID,
    PARK_ID,
    DATE_IN,
    DATE_OUT,
    DRIVER_USER_NAME,
    DRIVER_SURNAME,
    DRIVER_NAME,
    DRIVER_PATRONYMIC,
    DRIVER_PHONE,
    CAR_ID,
    MIN_BALANCE,
    PRIORITY,
    CAR_COLOR,
    CAR_BRAND,
    CAR_STATE_NUM,
    CAR_CALLSIGN,
    PARK_NAME
)
AS
SELECT PS.*,
       A.USER_NAME AS DRIVER_USER_NAME,
       A.SURNAME AS DRIVER_SURNAME,
       A.NAME AS DRIVER_NAME,
       A.PATRONYMIC AS DRIVER_PATRONYMIC,
       A.PHONE AS DRIVER_PHONE,
       D.CAR_ID,
       D.MIN_BALANCE,
       D.PRIORITY,
       C.COLOR AS CAR_COLOR,
       C.BRAND AS CAR_BRAND,
       C.STATE_NUM AS CAR_STATE_NUM,
       C.CALLSIGN AS CAR_CALLSIGN,
       P.NAME AS PARK_NAME
  FROM PARK_STATES PS
  JOIN PARKS P ON P.PARK_ID=PS.PARK_ID
  JOIN ACCOUNTS A ON A.ACCOUNT_ID=PS.DRIVER_ID
  JOIN DRIVERS D ON D.DRIVER_ID=PS.DRIVER_ID
  JOIN CARS C ON C.CAR_ID=D.CAR_ID

--

CREATE VIEW S_DRIVERS_EX
(
    DRIVER_ID,
    CALC_ID,
    CAR_ID,
    PHONE_HOME,
    LICENSE,
    CATEGORIES,
    INSURANCE,
    HEALTH_CERT,
    ADDICT_CERT,
    PASSPORT,
    PLACE_BIRTH,
    DATE_BIRTH,
    ADDRESS_RESIDENCE,
    ADDRESS_ACTUAL,
    MIN_BALANCE,
    PRIORITY,
    METHOD_ID,
    DATE_PRIORITY,
    MIN_HOURS,
    DATE_SCHEDULE,
    PHONE,
    DESCRIPTION,
    USER_NAME,
    DATE_CREATE,
    LOCKED,
    SURNAME,
    NAME,
    PATRONYMIC,
    CAR_STATE_NUM,
    CAR_BRAND,
    CAR_COLOR,
    CAR_CALLSIGN,
    CALC_NAME,
    METHOD_NAME,
    SUM_CHARGE,
    SUM_RECEIPT,
    ACTUAL_BALANCE
)
AS
SELECT D.*,
       A.PHONE,
       A.DESCRIPTION,
       A.USER_NAME,
       A.DATE_CREATE,
       A.LOCKED,
       A.SURNAME,
       A.NAME,
       A.PATRONYMIC,
       CR.STATE_NUM AS CAR_STATE_NUM,
       CR.BRAND AS CAR_BRAND,
       CR.COLOR AS CAR_COLOR,
       CR.CALLSIGN AS CAR_CALLSIGN,
       CL.NAME AS CALC_NAME,
       M.NAME AS METHOD_NAME,
       (CASE WHEN SAC.SUM_CHARGE IS NULL THEN 0.0 ELSE SAC.SUM_CHARGE END) SUM_CHARGE,
       (CASE WHEN SAR.SUM_RECEIPT IS NULL THEN 0.0 ELSE SAR.SUM_RECEIPT END) SUM_RECEIPT,
       ((CASE WHEN SAR.SUM_RECEIPT IS NULL THEN 0.0 ELSE SAR.SUM_RECEIPT END)-
        (CASE WHEN SAC.SUM_CHARGE IS NULL THEN 0.0 ELSE SAC.SUM_CHARGE END)) AS ACTUAL_BALANCE
  FROM DRIVERS D
  JOIN ACCOUNTS A ON A.ACCOUNT_ID=D.DRIVER_ID
  JOIN CARS CR ON CR.CAR_ID=D.CAR_ID
  LEFT JOIN CALCS CL ON CL.CALC_ID=D.CALC_ID
  LEFT JOIN METHODS M ON M.METHOD_ID=D.METHOD_ID
  LEFT JOIN S_ACCOUNT_CHARGES SAC ON SAC.ACCOUNT_ID=D.DRIVER_ID
  LEFT JOIN S_ACCOUNT_RECEIPTS SAR ON SAR.ACCOUNT_ID=D.DRIVER_ID

--

CREATE VIEW S_DRIVER_PARK_FREE
(
    DRIVER_ID,
    CALC_ID,
    CAR_ID,
    PHONE_HOME,
    LICENSE,
    CATEGORIES,
    INSURANCE,
    HEALTH_CERT,
    ADDICT_CERT,
    PASSPORT,
    PLACE_BIRTH,
    DATE_BIRTH,
    ADDRESS_RESIDENCE,
    ADDRESS_ACTUAL,
    MIN_BALANCE,
    PRIORITY,
    METHOD_ID,
    DATE_PRIORITY,
    MIN_HOURS,
    DATE_SCHEDULE,
    PHONE,
    DESCRIPTION,
    USER_NAME,
    DATE_CREATE,
    LOCKED,
    SURNAME,
    NAME,
    PATRONYMIC,
    CAR_STATE_NUM,
    CAR_BRAND,
    CAR_COLOR,
    CAR_CALLSIGN,
    CALC_NAME,
    METHOD_NAME,
    SUM_CHARGE,
    SUM_RECEIPT,
    ACTUAL_BALANCE
)
AS
SELECT *
  FROM S_DRIVERS_EX
 WHERE DRIVER_ID IN (SELECT ACCOUNT_ID FROM SHIFTS
                      WHERE DATE_END IS NULL)
   AND DRIVER_ID NOT IN (SELECT DRIVER_ID FROM PARK_STATES
                          WHERE DATE_OUT IS NULL)
   AND LOCKED=0
   AND ((MIN_BALANCE IS NULL) OR (ACTUAL_BALANCE>MIN_BALANCE))

--

CREATE VIEW S_DRIVER_FREE
(
    DRIVER_ID,
    CALC_ID,
    CAR_ID,
    PHONE_HOME,
    LICENSE,
    CATEGORIES,
    INSURANCE,
    HEALTH_CERT,
    ADDICT_CERT,
    PASSPORT,
    PLACE_BIRTH,
    DATE_BIRTH,
    ADDRESS_RESIDENCE,
    ADDRESS_ACTUAL,
    MIN_BALANCE,
    PRIORITY,
    METHOD_ID,
    DATE_PRIORITY,
    MIN_HOURS,
    DATE_SCHEDULE,
    PHONE,
    DESCRIPTION,
    USER_NAME,
    DATE_CREATE,
    LOCKED,
    SURNAME,
    NAME,
    PATRONYMIC,
    CAR_STATE_NUM,
    CAR_BRAND,
    CAR_COLOR,
    CAR_CALLSIGN,
    CALC_NAME,
    METHOD_NAME,
    SUM_CHARGE,
    SUM_RECEIPT,
    ACTUAL_BALANCE
)
AS
SELECT *
  FROM S_DRIVERS_EX
 WHERE DRIVER_ID NOT IN (SELECT ACCOUNT_ID FROM SHIFTS
                          WHERE DATE_END IS NULL)
   AND LOCKED=0
   AND ((MIN_BALANCE IS NULL) OR (ACTUAL_BALANCE>MIN_BALANCE))

--




