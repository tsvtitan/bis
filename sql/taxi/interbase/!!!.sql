EXECUTE BLOCK
RETURNS
(
  NAME VARCHAR(250),
  DATE_BEGIN TIMESTAMP,
  DATE_END TIMESTAMP,
  MINUTES NUMERIC(15,2),
  TIME_TYPE INTEGER,
  USED INTEGER,
  VALID INTEGER,
  SUM_CHARGE NUMERIC(15,2)
)
AS
DECLARE SHIFT_SECONDS INTEGER;
DECLARE ITEMP NUMERIC(15,2);
DECLARE D1 TIMESTAMP;
DECLARE D2 TIMESTAMP;
DECLARE DTEMP1 TIMESTAMP;
DECLARE DTEMP2 TIMESTAMP;
DECLARE SHIFT_BEGIN TIMESTAMP='04.12.2011 10:00:00';
DECLARE SHIFT_END TIMESTAMP='05.12.2011 11:00:00';
DECLARE DRIVER_ID VARCHAR(32)='462EB7CD4A6FB35941BAE6FF112CE824';
DECLARE LUNCH_CODE_MESSAGE_ID VARCHAR(32)='C7FE57F03AFB9C234E5A06430014D0EF';
DECLARE CRASH_CODE_MESSAGE_ID VARCHAR(32)='8C16195AEC1787A24D10755872182FB0';
DECLARE INCIDENT_CODE_MESSAGE_ID VARCHAR(32)='F009084F05778ED547A4285A65D20FFB';
DECLARE FREE_CODE_MESSAGE_ID VARCHAR(32)='446D510C3E7889F44D52DE0EFCB06768';
DECLARE AIRPORT_STREET_ID VARCHAR(32)='CE097743BBC095D44A1B61E8B461481F';
DECLARE ORDER_ID VARCHAR(32);
DECLARE ORDER_NUM VARCHAR(10);
DECLARE RESULT_NAME VARCHAR(100);
DECLARE PARK_NAME VARCHAR(100);
DECLARE PARK_DESC VARCHAR(250);
DECLARE ID VARCHAR(32);
DECLARE PRIOR_ID VARCHAR(32);
DECLARE PRIOR_TIME_TYPE INTEGER;
DECLARE ABSENCE_COST NUMERIC(15,2)=3.0;
DECLARE MAX_LUNCH_TIME INTEGER=30;
DECLARE MAX_ABSENCE_TIME NUMERIC(4,2)=1.0;
DECLARE MAX_AIRPORT_TIME INTEGER=45;
DECLARE USE_INVALID INTEGER=1;
DECLARE MAX_LUNCH_COUNT INTEGER;
DECLARE AIRPORT_DIRECTION INTEGER;
DECLARE LUNCH_COUNT INTEGER;
BEGIN

  SHIFT_SECONDS=DATEDIFF(SECOND,SHIFT_BEGIN,SHIFT_END);

  IF ((SHIFT_SECONDS IS NOT NULL) AND (SHIFT_SECONDS>0.0)) THEN BEGIN

    DELETE FROM TMP_DRIVER_TIMES;

    MAX_LUNCH_COUNT=(SHIFT_SECONDS/60.0)/480; /* 480 - 8 hours */

    DTEMP2=SHIFT_BEGIN;
    NAME='Отсутствие на смене';

    /* shift absence time */

    FOR SELECT DATE_BEGIN, DATE_END
          FROM SHIFTS
         WHERE ((DATE_BEGIN<=:SHIFT_BEGIN AND (DATE_END IS NULL OR DATE_END>=:SHIFT_BEGIN)) OR DATE_BEGIN>:SHIFT_BEGIN)
           AND ((DATE_BEGIN<=DATE_END AND DATE_END IS NOT NULL) OR DATE_END IS NULL)
           AND ACCOUNT_ID=:DRIVER_ID
         ORDER BY DATE_BEGIN
          INTO :D1, :D2 DO BEGIN

      IF (D1<SHIFT_BEGIN) THEN
        D1=SHIFT_BEGIN;

      IF (D2>SHIFT_END) THEN
        D2=SHIFT_END;

      IF (D1>DTEMP2) THEN
        INSERT INTO TMP_DRIVER_TIMES (ID,NAME,DATE_BEGIN,DATE_END,USED,VALID,TIME_TYPE)
                              VALUES (GET_UNIQUE_ID(),:NAME,:DTEMP2,:D1,1,1,0);

      IF (D2=SHIFT_END) THEN
        BREAK;

      DTEMP2=D2;

    END

    /* Orders time */

    DTEMP2=NULL;
    
    FOR SELECT O.ORDER_ID, O.DATE_END, O.ORDER_NUM, R.NAME,
               CASE
                /* WHEN O.STREET_ID=:AIRPORT_STREET_ID THEN 1 */
                 WHEN RO.STREET_ID=:AIRPORT_STREET_ID THEN 2
                 ELSE 0
                END AS AIRPORT_DIRECTION
          FROM ORDERS O
          LEFT JOIN RESULTS R ON R.RESULT_ID=O.RESULT_ID
          LEFT JOIN ROUTES RO ON RO.ORDER_ID=O.ORDER_ID AND 
                                 RO.PRIORITY=(SELECT MAX(PRIORITY)
                                                FROM ROUTES
                                               WHERE ORDER_ID=O.ORDER_ID)
         WHERE O.DRIVER_ID=:DRIVER_ID
           AND O.FINISHED=1
           AND O.DATE_HISTORY IS NULL
           AND O.DATE_ARRIVAL>=:SHIFT_BEGIN
           AND O.DATE_ARRIVAL<=:SHIFT_END
           AND O.RESULT_ID NOT IN ('5F54734558C5857445839E8800947005',
                                   '25236D63D02FA50F4D39DF1A2F86B6F6',
                                   'D442C437F10AA16447252BE436C90807',
                                   'CCBAB9B83127B43F44F0B5C2708ECF46',
                                   '44A2C4905136BCFE4C99C718E7FB0052',
                                   '3C1737139C50A9A84FA5183FEAAEDE8E')
         ORDER BY O.DATE_ARRIVAL
          INTO :ORDER_ID, :D2, :ORDER_NUM, :RESULT_NAME,
               :AIRPORT_DIRECTION DO BEGIN

      SELECT MIN(DATE_BEGIN)
        FROM ORDERS
       WHERE PARENT_ID=:ORDER_ID
         AND DRIVER_ID=:DRIVER_ID
         AND DATE_HISTORY IS NOT NULL
        INTO :D1;

      IF (DTEMP2 IS NOT NULL) THEN
        IF (D1<DTEMP2) THEN
          D1=DTEMP2;

      SELECT CASE
               WHEN (COUNT(*)>0) OR (:D1>=:D2) THEN 0
               ELSE 1
              END
        FROM TMP_DRIVER_TIMES
       WHERE DATE_BEGIN<=:D1
         AND DATE_END>=:D2
        INTO :VALID;

      /*  IF (AIRPORT_DIRECTION=1) THEN BEGIN

          NAME='Подача в аэропорт';
          INSERT INTO TMP_DRIVER_TIMES (ID,NAME,DATE_BEGIN,DATE_END,USED,TIME_TYPE)
                                VALUES (GET_UNIQUE_ID(),:NAME,:D1,NULL,0,4);

        END */

      NAME='Заказ #'||CAST(ORDER_NUM AS VARCHAR(10));

      IF (RESULT_NAME IS NOT NULL) THEN
        NAME=NAME||' | '||RESULT_NAME;

      INSERT INTO TMP_DRIVER_TIMES (ID,NAME,DATE_BEGIN,DATE_END,USED,VALID,TIME_TYPE)
                            VALUES (GET_UNIQUE_ID(),:NAME,:D1,:D2,0,:VALID,2);

      /* from */
      IF (AIRPORT_DIRECTION=2) THEN BEGIN

        NAME='Возвращение из аэропорта';
        INSERT INTO TMP_DRIVER_TIMES (ID,NAME,DATE_BEGIN,DATE_END,USED,VALID,TIME_TYPE)
                              VALUES (GET_UNIQUE_ID(),:NAME,:D1,NULL,0,:VALID,1);

      END


      DTEMP2=D2;

    END

    /* Parks time */

    FOR SELECT PS.DATE_IN, PS.DATE_OUT, P.NAME, P.DESCRIPTION
          FROM PARK_STATES PS
          JOIN PARKS P ON P.PARK_ID=PS.PARK_ID
         WHERE PS.DRIVER_ID=:DRIVER_ID
           AND PS.DATE_IN>=:SHIFT_BEGIN
           AND PS.DATE_IN<=:SHIFT_END
          INTO :D1, :D2, :PARK_NAME, :PARK_DESC DO BEGIN

      IF (D2 IS NULL) THEN
        D2=SHIFT_END;

      SELECT CASE
               WHEN (COUNT(*)>0) OR (:D1>=:D2) THEN 0
               ELSE 1
              END
        FROM TMP_DRIVER_TIMES
       WHERE DATE_BEGIN<=:D1
         AND DATE_END>=:D2
        INTO :VALID;

      NAME='Стоянка '||PARK_NAME;

      IF (PARK_DESC IS NOT NULL) THEN
        NAME=NAME||' - '||PARK_DESC||'';

      INSERT INTO TMP_DRIVER_TIMES (ID,NAME,DATE_BEGIN,DATE_END,USED,VALID,TIME_TYPE)
                            VALUES (GET_UNIQUE_ID(),:NAME,:D1,:D2,0,:VALID,5);

    END

    /* Lunch time */

    NAME='Обед';

    FOR SELECT DATE_IN
          FROM IN_MESSAGES
         WHERE CODE_MESSAGE_ID=:LUNCH_CODE_MESSAGE_ID
           AND DATE_IN>=:SHIFT_BEGIN
           AND DATE_IN<=:SHIFT_END
           AND SENDER_ID=:DRIVER_ID
          INTO :D1 DO BEGIN

      INSERT INTO TMP_DRIVER_TIMES (ID,NAME,DATE_BEGIN,DATE_END,USED,VALID,TIME_TYPE)
                            VALUES (GET_UNIQUE_ID(),:NAME,:D1,NULL,0,1,6);

    END

    /* Crash, incident, free time */

    FOR SELECT DATE_IN,
               CASE
                 WHEN CODE_MESSAGE_ID=:CRASH_CODE_MESSAGE_ID THEN 'Поломка'
                 WHEN CODE_MESSAGE_ID=:INCIDENT_CODE_MESSAGE_ID THEN 'Черезвычайное проишествие'
                 WHEN CODE_MESSAGE_ID=:FREE_CODE_MESSAGE_ID THEN 'Свободная посадка'
                END AS NAME,
               CASE
                 WHEN CODE_MESSAGE_ID=:FREE_CODE_MESSAGE_ID THEN 1
                 ELSE 0
                END AS USED
          FROM IN_MESSAGES
         WHERE CODE_MESSAGE_ID IN (:CRASH_CODE_MESSAGE_ID,
                                   :INCIDENT_CODE_MESSAGE_ID,
                                   :FREE_CODE_MESSAGE_ID)
           AND DATE_IN>=:SHIFT_BEGIN
           AND DATE_IN<=:SHIFT_END
           AND SENDER_ID=:DRIVER_ID
         ORDER BY DATE_IN
          INTO :D1, :NAME, :USED DO BEGIN

      INSERT INTO TMP_DRIVER_TIMES (ID,NAME,DATE_BEGIN,DATE_END,USED,VALID,TIME_TYPE)
                            VALUES (GET_UNIQUE_ID(),:NAME,:D1,NULL,:USED,1,7);
    END
    
    /* Align times */

    PRIOR_ID=NULL;
    DTEMP1=NULL;
    DTEMP2=NULL;
    PRIOR_TIME_TYPE=NULL;
    NAME='Отсутствие на стоянке';
    LUNCH_COUNT=0;

    FOR SELECT ID, DATE_BEGIN, DATE_END, TIME_TYPE
          --  , NAME
          FROM TMP_DRIVER_TIMES
         WHERE VALID=(CASE
                        WHEN :USE_INVALID=1 THEN 0
                        ELSE 1
                       END)
            OR VALID=1
         ORDER BY DATE_BEGIN ASC, TIME_TYPE DESC
          INTO :ID, :D1, :D2, :TIME_TYPE DO BEGIN

      IF (D1<SHIFT_BEGIN) THEN BEGIN

        D1=SHIFT_BEGIN;

        UPDATE TMP_DRIVER_TIMES
           SET DATE_BEGIN=:D1
         WHERE ID=:ID;

      END

      IF (D2>SHIFT_END) THEN BEGIN

        D2=SHIFT_END;

        UPDATE TMP_DRIVER_TIMES
           SET DATE_END=:D2
         WHERE ID=:ID;

      END

      IF (DTEMP2 IS NOT NULL) THEN BEGIN

        IF (D1<=DTEMP2) THEN BEGIN

          D1=DTEMP2;

          UPDATE TMP_DRIVER_TIMES
             SET DATE_BEGIN=:D1
           WHERE ID=:ID;

        END ELSE BEGIN

          INSERT INTO TMP_DRIVER_TIMES (ID,NAME,DATE_BEGIN,DATE_END,USED,VALID,TIME_TYPE)
                                VALUES (GET_UNIQUE_ID(),:NAME,:DTEMP2,:D1,1,1,99);

        END

      END ELSE BEGIN

        IF (PRIOR_TIME_TYPE=1) THEN BEGIN

          ITEMP=DATEDIFF(MILLISECOND,DTEMP1,D1)/(1000*60.0);

          IF (ITEMP<=MAX_AIRPORT_TIME) THEN BEGIN

            UPDATE TMP_DRIVER_TIMES
               SET DATE_END=:D1
             WHERE ID=:PRIOR_ID;

          END ELSE BEGIN

            DTEMP1=DATEADD(MINUTE,MAX_AIRPORT_TIME,DTEMP1);
          
            UPDATE TMP_DRIVER_TIMES
               SET DATE_END=:DTEMP1
             WHERE ID=:PRIOR_ID;

            INSERT INTO TMP_DRIVER_TIMES (ID,NAME,DATE_BEGIN,DATE_END,USED,VALID,TIME_TYPE)
                                  VALUES (GET_UNIQUE_ID(),:NAME,:DTEMP1,:D1,1,1,99);
          END

        END

        IF (PRIOR_TIME_TYPE=6) THEN BEGIN

          IF (LUNCH_COUNT<MAX_LUNCH_COUNT) THEN BEGIN

            LUNCH_COUNT=LUNCH_COUNT+1;

            ITEMP=DATEDIFF(MILLISECOND,DTEMP1,D1)/(1000*60.0);

            IF (ITEMP<=MAX_LUNCH_TIME) THEN BEGIN

              UPDATE TMP_DRIVER_TIMES
                 SET DATE_END=:D1
               WHERE ID=:PRIOR_ID;

            END ELSE BEGIN

              DTEMP1=DATEADD(MINUTE,MAX_LUNCH_TIME,DTEMP1);

              UPDATE TMP_DRIVER_TIMES
                 SET DATE_END=:DTEMP1
               WHERE ID=:PRIOR_ID;

              INSERT INTO TMP_DRIVER_TIMES (ID,NAME,DATE_BEGIN,DATE_END,USED,VALID,TIME_TYPE)
                                    VALUES (GET_UNIQUE_ID(),:NAME,:DTEMP1,:D1,1,1,99);
            END

          END ELSE BEGIN

            UPDATE TMP_DRIVER_TIMES
               SET NAME=:NAME,
                   DATE_END=:D1,
                   USED=1,
                   VALID=1,
                   TIME_TYPE=99
             WHERE ID=:PRIOR_ID;

          END

        END

      END

      IF (PRIOR_TIME_TYPE=7) THEN BEGIN

        UPDATE TMP_DRIVER_TIMES
           SET DATE_END=:D1
        WHERE ID=:PRIOR_ID;

      END

      PRIOR_ID=ID;
      DTEMP1=D1;
      DTEMP2=D2;
      PRIOR_TIME_TYPE=TIME_TYPE;
    END

    /* Align last time */

    FOR SELECT ID, DATE_END
          FROM TMP_DRIVER_TIMES
         ORDER BY DATE_BEGIN DESC
          INTO :ID, :D2 DO BEGIN

      IF (D2 IS NOT NULL) THEN BEGIN

        IF (D2<SHIFT_END) THEN BEGIN

          INSERT INTO TMP_DRIVER_TIMES (ID,NAME,DATE_BEGIN,DATE_END,USED,VALID,TIME_TYPE)
                                VALUES (GET_UNIQUE_ID(),:NAME,:D2,:SHIFT_END,1,1,99);

        END

      END ELSE BEGIN

         UPDATE TMP_DRIVER_TIMES
            SET DATE_END=:SHIFT_END
          WHERE ID=:ID;

      END

      BREAK;
    END

    /* Output */
    
    FOR SELECT T.NAME,T.DATE_BEGIN,T.DATE_END,T.MINUTES,T.USED,T.TIME_TYPE,T.VALID,
               CASE
                 WHEN (T.USED=1) AND (T.VALID=1) AND (T.MINUTES>:MAX_ABSENCE_TIME) THEN T.MINUTES*:ABSENCE_COST
                 ELSE NULL
               END AS SUM_CHARGE
          FROM (SELECT NAME,DATE_BEGIN,DATE_END,USED,TIME_TYPE,VALID,
                       DATEDIFF(MILLISECOND,DATE_BEGIN,DATE_END)/(1000.0*60.0) AS MINUTES
                  FROM TMP_DRIVER_TIMES
                 ORDER BY DATE_BEGIN) T
         WHERE T.VALID=(CASE
                        WHEN :USE_INVALID=1 THEN 0
                        ELSE 1
                       END)
            OR T.VALID=1
          INTO :NAME,:DATE_BEGIN,:DATE_END,:MINUTES,:USED,:TIME_TYPE,:VALID,:SUM_CHARGE DO BEGIN
      SUSPEND;
    END

  END

END
