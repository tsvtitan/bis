unit BisKrieltReportsDeliverResidential;

interface

uses Controls, BisProvider, BisKrieltReportsUtils, BisFilterGroups, SysUtils,
  BisKrieltReportsFm;

procedure ExportDeliverApartmentsKrs(BisKrieltReportsForm: TBisKrieltReportsForm; DateBegin, DateEnd: TDate);
procedure ExportDeliverApartmentsOthers(BisKrieltReportsForm: TBisKrieltReportsForm; DateBegin, DateEnd: TDate);
procedure ExportDeliverHousesCottagesKrs(BisKrieltReportsForm: TBisKrieltReportsForm; DateBegin, DateEnd: TDate);
procedure ExportDeliverHousesCottagesOthers(BisKrieltReportsForm: TBisKrieltReportsForm; DateBegin, DateEnd: TDate);
procedure ExportDeliverTownHousesKrs(BisKrieltReportsForm: TBisKrieltReportsForm; DateBegin, DateEnd: TDate);
procedure ExportDeliverOutsideHousesCottages(BisKrieltReportsForm: TBisKrieltReportsForm; DateBegin, DateEnd: TDate);
procedure ExportDeliverDatchas(BisKrieltReportsForm: TBisKrieltReportsForm; DateBegin, DateEnd: TDate);

implementation

procedure ExportDeliverApartmentsKrs(BisKrieltReportsForm: TBisKrieltReportsForm; DateBegin, DateEnd: TDate);
var Provider: TBisProvider;
  LastRow, Code, RoomInt: Integer;
  Excel, Sheet: Variant;
  Region, Room, XLSNew, SDateBegin, SDateEnd: String;
begin

  SDateBegin:=ConvertDateTime(DateBegin,'Begin');
  SDateEnd:=ConvertDateTime(DateEnd,'End');

  Provider:=TBisProvider.Create(nil);
  Provider.ProviderName:='S_DELIVER_APARTMENTS_KRS_EXPORT';      //

  with Provider, FieldNames do begin
    AddInvisible('OBJECT_ID');          //
    AddInvisible('VIEW_ID');            //
    AddInvisible('TYPE_ID');            //
    AddInvisible('OPERATION_ID');       //
    AddInvisible('DATE_BEGIN');         //
    AddInvisible('ACCOUNT_ID');         //
    AddInvisible('USER_NAME');          //
    AddInvisible('PHONE');              //
    AddInvisible('Улица');               //
    AddInvisible('Ориентир');              //
    AddInvisible('Примечание');              //
    AddInvisible('Цена');           //
    AddInvisible('Район');              //
    AddInvisible('Населенный пункт');               //
    AddInvisible('Комн');                //
  end;

  with Provider, FilterGroups do begin
    Add(foAnd);
    Items[0].Filters.Add('DATE_BEGIN',fcEqualGreater,SDateBegin);
    Items[0].Filters.Add('DATE_BEGIN',fcEqualLess,SDateEnd);
    Items[0].Filters.Add('Населенный пункт',fcEqual,'Красноярск г.');   //
  end;

  with Provider, Orders do begin
    Add('Комн');               //
    Add('Район');              //
    Add('DATE_BEGIN');         //
  end;

  Provider.Open;
  Provider.First;
  BisKrieltReportsForm.Height:=463;
  SetProgressBarToNull(BisKrieltReportsForm, Provider);

  {_____________________________________________________________________________}

  XLSNew:=CopyExcelDocToNew('deliver_apartments_krs.xls','Сдам_квартиры_в_г.Красноярск');
  Excel:=OpenExcelDoc(XLSNew);
  Sheet:=Excel.ActiveSheet;

  Sheet.Range['A1']:='сдам в аренду жилье';
  Room:=Provider.FieldByName('Комн').AsString;
  Val(Room,RoomInt,Code);

  if Length(Room)=0 then begin
    Sheet.Range['C1']:='';
    Sheet.Range['A4']:='';
  end;
  if (Code=0) Or (Room='1,5') then begin
    Sheet.Range['C1']:='квартиры '+Room+'-комнатные';
    Sheet.Range['A4']:=Room+'-комнатные';
  end;
  if Room='г' then begin
    Sheet.Range['C1']:='гостинки';
    Sheet.Range['A4']:='гостинки';
  end;
  if Room='комната' then begin
    Sheet.Range['C1']:='комнаты';
    Sheet.Range['A4']:='комнаты';
  end;
  if Room='с' then begin
    Sheet.Range['C1']:='секционки';
    Sheet.Range['A4']:='секционки';
  end;

  Region:=Provider.FieldByName('Район').AsString;
  Sheet.Range['A5']:=Region;
  LastRow:=8;

  Repeat
    Sheet.Range['A'+IntToStr(LastRow-2)]:=Provider.FieldByName('Улица').AsString;
    Sheet.Range['B'+IntToStr(LastRow-2)]:=Provider.FieldByName('Ориентир').AsString;
    Sheet.Range['C'+IntToStr(LastRow-2)]:=Provider.FieldByName('Примечание').AsString;
    Sheet.Range['D'+IntToStr(LastRow-2)]:=Provider.FieldByName('Цена').AsString;
    Sheet.Range['E'+IntToStr(LastRow-2)]:=Provider.FieldByName('PHONE').AsString;

    ExtendPosProgressBar(BisKrieltReportsForm);
    Provider.Next;
    if Provider.Eof=True then Break;
    if (Provider.FieldByName('Комн').AsString<>Room) then Begin
      Room:=Provider.FieldByName('Комн').AsString;
      Region:=Provider.FieldByName('Район').AsString;

      InsertExcelRows(Sheet,LastRow-1,LastRow-1,'L',LastRow+3);
      InsertExcelRows(Sheet,1,1,'L',LastRow);
      InsertExcelRows(Sheet,4,4,'L',LastRow+1);
      InsertExcelRows(Sheet,5,5,'L',LastRow+2);

      Sheet.Range['A'+IntToStr(LastRow)]:='сдам в аренду жилье';
      Val(Room,RoomInt,Code);
      if Length(Room)=0 then begin
        Sheet.Range['C'+IntToStr(LastRow)]:='';
        Sheet.Range['A'+IntToStr(LastRow+1)]:='';
      end;
      if (Code=0) Or (Room='1,5') then begin
        Sheet.Range['C'+IntToStr(LastRow)]:='квартиры '+Room+'-комнатные';
        Sheet.Range['A'+IntToStr(LastRow+1)]:=Room+'-комнатные';
      end;
      if Room='г' then begin
        Sheet.Range['C'+IntToStr(LastRow)]:='гостинки';
        Sheet.Range['A'+IntToStr(LastRow+1)]:='гостинки';
      end;
      if Room='комната' then begin
        Sheet.Range['C'+IntToStr(LastRow)]:='комнаты';
        Sheet.Range['A'+IntToStr(LastRow+1)]:='комнаты';
      end;
      if Room='с' then begin
        Sheet.Range['C'+IntToStr(LastRow)]:='секционки';
        Sheet.Range['A'+IntToStr(LastRow+1)]:='секционки';
      end;

      Sheet.Range['A'+IntToStr(LastRow+2)]:=Region;
      LastRow:=LastRow+4;
    End;
    if (Provider.FieldByName('Район').AsString<>Region) then Begin
      Region:=Provider.FieldByName('Район').AsString;
      InsertExcelRows(Sheet,LastRow-1,LastRow-1,'L',LastRow);
      InsertExcelRows(Sheet,5,5,'L',LastRow-1);
      Sheet.Range['A'+IntToStr(LastRow-1)]:=Region;
      LastRow:=LastRow+1;
    End;
    InsertExcelRows(Sheet,LastRow-1,LastRow-1,'L',LastRow);
    InsertExcelRows(Sheet,6,6,'L',LastRow-1);
    Sheet.Rows[LastRow-1]:='';
    LastRow:=LastRow+1;
  Until False;

  Sheet.Rows[LastRow-1].Clear;

  Excel.Visible:=True;
  Provider.Close;

  {_____________________________________________________________________________}

  Provider.Free;

end;

procedure ExportDeliverApartmentsOthers(BisKrieltReportsForm: TBisKrieltReportsForm; DateBegin, DateEnd: TDate);
var Provider: TBisProvider;
  LastRow, Code, RoomInt: Integer;
  Excel, Sheet: Variant;
  Room, XLSNew, SDateBegin, SDateEnd: String;
begin

  SDateBegin:=ConvertDateTime(DateBegin,'Begin');
  SDateEnd:=ConvertDateTime(DateEnd,'End');

  Provider:=TBisProvider.Create(nil);
  Provider.ProviderName:='S_DELIVER_APARTMENTS_OTHERS_EXPORT';      //

  with Provider, FieldNames do begin
    AddInvisible('OBJECT_ID');          //
    AddInvisible('VIEW_ID');            //
    AddInvisible('TYPE_ID');            //
    AddInvisible('OPERATION_ID');       //
    AddInvisible('DATE_BEGIN');         //
    AddInvisible('ACCOUNT_ID');         //
    AddInvisible('USER_NAME');          //
    AddInvisible('PHONE');              //
    AddInvisible('Населенный пункт');               //
    AddInvisible('Улица');              //
    AddInvisible('Примечание');              //
    AddInvisible('Цена');               //
    AddInvisible('Комн');                //
  end;

  with Provider, FilterGroups do begin
    Add(foAnd);
    Items[0].Filters.Add('DATE_BEGIN',fcEqualGreater,SDateBegin);
    Items[0].Filters.Add('DATE_BEGIN',fcEqualLess,SDateEnd);
    Items[0].Filters.Add('Населенный пункт',fcNotEqual,'Красноярск г.');   //
  end;

  with Provider, Orders do begin
    Add('Комн');               //
    Add('DATE_BEGIN');         //
  end;

  Provider.Open;
  Provider.First;
  BisKrieltReportsForm.Height:=463;
  SetProgressBarToNull(BisKrieltReportsForm, Provider);

  {_____________________________________________________________________________}

  XLSNew:=CopyExcelDocToNew('deliver_arartments_others.xls','Сдам_квартиры_в_других_населенных_пунктах');
  Excel:=OpenExcelDoc(XLSNew);
  Sheet:=Excel.ActiveSheet;

  Sheet.Range['A1']:='сдам в аренду жилье';
  Room:=Provider.FieldByName('Комн').AsString;
  Val(Room,RoomInt,Code);

  if Length(Room)=0 then begin
    Sheet.Range['C1']:='';
    Sheet.Range['A4']:='';
  end;
  if (Code=0) Or (Room='1,5') then begin
    Sheet.Range['C1']:='квартиры '+Room+'-комнатные';
    Sheet.Range['A4']:=Room+'-комнатные';
  end;
  if Room='г' then begin
    Sheet.Range['C1']:='гостинки';
    Sheet.Range['A4']:='гостинки';
  end;
  if Room='комната' then begin
    Sheet.Range['C1']:='комнаты';
    Sheet.Range['A4']:='комнаты';
  end;
  if Room='с' then begin
    Sheet.Range['C1']:='секционки';
    Sheet.Range['A4']:='секционки';
  end;

  LastRow:=7;

  Repeat
    Sheet.Range['A'+IntToStr(LastRow-2)]:=Provider.FieldByName('Населенный пункт').AsString;
    Sheet.Range['B'+IntToStr(LastRow-2)]:=Provider.FieldByName('Улица').AsString;
    Sheet.Range['C'+IntToStr(LastRow-2)]:=Provider.FieldByName('Примечание').AsString;
    Sheet.Range['D'+IntToStr(LastRow-2)]:=Provider.FieldByName('Цена').AsString;
    Sheet.Range['E'+IntToStr(LastRow-2)]:=Provider.FieldByName('PHONE').AsString;
    ExtendPosProgressBar(BisKrieltReportsForm);
    Provider.Next;
    if Provider.Eof=True then Break;
    if (Provider.FieldByName('Комн').AsString<>Room) then Begin
      Room:=Provider.FieldByName('Комн').AsString;

      InsertExcelRows(Sheet,LastRow-1,LastRow-1,'L',LastRow+2);
      InsertExcelRows(Sheet,1,1,'L',LastRow);
      InsertExcelRows(Sheet,4,4,'L',LastRow+1);

      Sheet.Range['A'+IntToStr(LastRow)]:='сдам в аренду жилье';
      Val(Room,RoomInt,Code);
      if Length(Room)=0 then begin
        Sheet.Range['C'+IntToStr(LastRow)]:='';
        Sheet.Range['A'+IntToStr(LastRow+1)]:='';
      end;
      if (Code=0) Or (Room='1,5') then begin
        Sheet.Range['C'+IntToStr(LastRow)]:='квартиры '+Room+'-комнатные';
        Sheet.Range['A'+IntToStr(LastRow+1)]:=Room+'-комнатные';
      end;
      if Room='г' then begin
        Sheet.Range['C'+IntToStr(LastRow)]:='гостинки';
        Sheet.Range['A'+IntToStr(LastRow+1)]:='гостинки';
      end;
      if Room='комната' then begin
        Sheet.Range['C'+IntToStr(LastRow)]:='комнаты';
        Sheet.Range['A'+IntToStr(LastRow+1)]:='комнаты';
      end;
      if Room='с' then begin
        Sheet.Range['C'+IntToStr(LastRow)]:='секционки';
        Sheet.Range['A'+IntToStr(LastRow+1)]:='секционки';
      end;

      LastRow:=LastRow+3;
    End;
    InsertExcelRows(Sheet,LastRow-1,LastRow-1,'L',LastRow);
    InsertExcelRows(Sheet,5,5,'L',LastRow-1);
    Sheet.Rows[LastRow-1]:='';
    LastRow:=LastRow+1;
  Until False;

  Sheet.Rows[LastRow-1].Clear;

  Excel.Visible:=True;
  Provider.Close;

  {_____________________________________________________________________________}

  Provider.Free;

end;

procedure ExportDeliverHousesCottagesKrs(BisKrieltReportsForm: TBisKrieltReportsForm; DateBegin, DateEnd: TDate);
var Provider: TBisProvider;
  LastRow: Integer;
  Excel, Sheet: Variant;
  Region, XLSNew, SDateBegin, SDateEnd: String;
begin

  SDateBegin:=ConvertDateTime(DateBegin,'Begin');
  SDateEnd:=ConvertDateTime(DateEnd,'End');

  Provider:=TBisProvider.Create(nil);
  Provider.ProviderName:='S_DELIVER_HOUSES_COTTAGES_KRS_EXPORT';      //

  with Provider, FieldNames do begin
    AddInvisible('OBJECT_ID');          //
    AddInvisible('VIEW_ID');            //
    AddInvisible('TYPE_ID');            //
    AddInvisible('OPERATION_ID');       //
    AddInvisible('DATE_BEGIN');         //
    AddInvisible('ACCOUNT_ID');         //
    AddInvisible('USER_NAME');          //
    AddInvisible('PHONE');              //
    AddInvisible('Улица');              //
    AddInvisible('Ориентир');              //
    AddInvisible('Примечание');              //
    AddInvisible('Цена');              //
    AddInvisible('Район');              //
    AddInvisible('Населенный пункт');              //
  end;

  with Provider, FilterGroups do begin
    Add(foAnd);
    Items[0].Filters.Add('DATE_BEGIN',fcEqualGreater,SDateBegin);
    Items[0].Filters.Add('DATE_BEGIN',fcEqualLess,SDateEnd);
    Items[0].Filters.Add('Населенный пункт',fcEqual,'Красноярск г.');   //
  end;

  with Provider, Orders do begin
    Add('Район');              //
    Add('DATE_BEGIN');         //
  end;

  Provider.Open;
  Provider.First;
  BisKrieltReportsForm.Height:=463;
  SetProgressBarToNull(BisKrieltReportsForm, Provider);

  {_____________________________________________________________________________}

  XLSNew:=CopyExcelDocToNew('deliver_houses_cottages_krs.xls','Сдам_дома,_коттеджи_в_г.Красноярск');
  Excel:=OpenExcelDoc(XLSNew);
  Sheet:=Excel.ActiveSheet;

  Sheet.Range['A1']:='сдам а аренду жилье';
  Sheet.Range['C1']:='частные дома, коттеджи';

  Region:=Provider.FieldByName('Район').AsString;
  Sheet.Range['A4']:=Region;
  LastRow:=6;

  Repeat
    Sheet.Range['A'+IntToStr(LastRow-1)]:=Provider.FieldByName('Улица').AsString;
    Sheet.Range['B'+IntToStr(LastRow-1)]:=Provider.FieldByName('Ориентир').AsString;
    Sheet.Range['C'+IntToStr(LastRow-1)]:=Provider.FieldByName('Примечание').AsString;
    Sheet.Range['D'+IntToStr(LastRow-1)]:=Provider.FieldByName('Цена').AsString;
    Sheet.Range['E'+IntToStr(LastRow-1)]:=Provider.FieldByName('PHONE').AsString;
    ExtendPosProgressBar(BisKrieltReportsForm);
    Provider.Next;
    if Provider.Eof=True then Break;

    if (Provider.FieldByName('Район').AsString<>Region) then Begin
      Region:=Provider.FieldByName('Район').AsString;
      InsertExcelRows(Sheet,4,4,'L',LastRow);
      Sheet.Range['A'+IntToStr(LastRow)]:=Region;
      LastRow:=LastRow+1;
    End;
    InsertExcelRows(Sheet,5,5,'L',LastRow);
    Sheet.Rows[LastRow]:='';
    LastRow:=LastRow+1;
  Until False;

  Excel.Visible:=True;
  Provider.Close;

  {_____________________________________________________________________________}

  Provider.Free;

end;

procedure ExportDeliverHousesCottagesOthers(BisKrieltReportsForm: TBisKrieltReportsForm; DateBegin, DateEnd: TDate);
var Provider: TBisProvider;
  LastRow: Integer;
  Excel, Sheet: Variant;
  XLSNew, SDateBegin, SDateEnd: String;
begin

  SDateBegin:=ConvertDateTime(DateBegin,'Begin');
  SDateEnd:=ConvertDateTime(DateEnd,'End');

  Provider:=TBisProvider.Create(nil);
  Provider.ProviderName:='S_DELIVER_HOUSES_COTTAGES_OTHERS_EXPORT';      //

  with Provider, FieldNames do begin
    AddInvisible('OBJECT_ID');          //
    AddInvisible('VIEW_ID');            //
    AddInvisible('TYPE_ID');            //
    AddInvisible('OPERATION_ID');       //
    AddInvisible('DATE_BEGIN');         //
    AddInvisible('ACCOUNT_ID');         //
    AddInvisible('USER_NAME');          //
    AddInvisible('PHONE');              //
    AddInvisible('Населенный пункт');   //
    AddInvisible('Улица');   //
    AddInvisible('Примечание');   //
    AddInvisible('Цена');   //
  end;

  with Provider, FilterGroups do begin
    Add(foAnd);
    Items[0].Filters.Add('DATE_BEGIN',fcEqualGreater,SDateBegin);
    Items[0].Filters.Add('DATE_BEGIN',fcEqualLess,SDateEnd);
    Items[0].Filters.Add('Населенный пункт',fcNotEqual,'Красноярск г.');   //
  end;

  with Provider, Orders do begin
    Add('DATE_BEGIN');              //
  end;

  Provider.Open;
  Provider.First;
  BisKrieltReportsForm.Height:=463;
  SetProgressBarToNull(BisKrieltReportsForm, Provider);

  {_____________________________________________________________________________}

  XLSNew:=CopyExcelDocToNew('deliver_houses_cottages_others.xls','Сдам_дома,_коттеджи_в_других_населенных_пунктах');
  Excel:=OpenExcelDoc(XLSNew);
  Sheet:=Excel.ActiveSheet;

  Sheet.Range['A1']:='сдам в аренду жилье';
  Sheet.Range['C1']:='частные дома, коттеджи';

  LastRow:=5;

  Repeat
    Sheet.Range['A'+IntToStr(LastRow-1)]:=Provider.FieldByName('Населенный пункт').AsString;
    Sheet.Range['B'+IntToStr(LastRow-1)]:=Provider.FieldByName('Улица').AsString;
    Sheet.Range['C'+IntToStr(LastRow-1)]:=Provider.FieldByName('Примечание').AsString;
    Sheet.Range['D'+IntToStr(LastRow-1)]:=Provider.FieldByName('Цена').AsString;
    Sheet.Range['E'+IntToStr(LastRow-1)]:=Provider.FieldByName('PHONE').AsString;
    ExtendPosProgressBar(BisKrieltReportsForm);
    Provider.Next;
    if Provider.Eof=True then Break;

    InsertExcelRows(Sheet,4,4,'L',LastRow);
    Sheet.Rows[LastRow]:='';
    LastRow:=LastRow+1;
  Until False;

  Excel.Visible:=True;
  Provider.Close;

  {_____________________________________________________________________________}

  Provider.Free;

end;

procedure ExportDeliverTownHousesKrs(BisKrieltReportsForm: TBisKrieltReportsForm; DateBegin, DateEnd: TDate);
var Provider: TBisProvider;
  LastRow: Integer;
  Excel, Sheet: Variant;
  Region, XLSNew, SDateBegin, SDateEnd: String;
begin

  SDateBegin:=ConvertDateTime(DateBegin,'Begin');
  SDateEnd:=ConvertDateTime(DateEnd,'End');

  Provider:=TBisProvider.Create(nil);
  Provider.ProviderName:='S_DELIVER_TOWN_HOUSES_KRS_EXPORT';      //

  with Provider, FieldNames do begin
    AddInvisible('OBJECT_ID');          //
    AddInvisible('VIEW_ID');            //
    AddInvisible('TYPE_ID');            //
    AddInvisible('OPERATION_ID');       //
    AddInvisible('DATE_BEGIN');         //
    AddInvisible('ACCOUNT_ID');         //
    AddInvisible('USER_NAME');          //
    AddInvisible('PHONE');              //
    AddInvisible('Улица');              //
    AddInvisible('Ориентир');              //
    AddInvisible('Примечание');              //
    AddInvisible('Цена');              //
    AddInvisible('Район');              //
    AddInvisible('Населенный пункт');              //
  end;

  with Provider, FilterGroups do begin
    Add(foAnd);
    Items[0].Filters.Add('DATE_BEGIN',fcEqualGreater,SDateBegin);
    Items[0].Filters.Add('DATE_BEGIN',fcEqualLess,SDateEnd);
    Items[0].Filters.Add('Населенный пункт',fcEqual,'Красноярск г.');   //
  end;

  with Provider, Orders do begin
    Add('Район');              //
    Add('DATE_BEGIN');         //
  end;

  Provider.Open;
  Provider.First;
  BisKrieltReportsForm.Height:=463;
  SetProgressBarToNull(BisKrieltReportsForm, Provider);

  {_____________________________________________________________________________}

  XLSNew:=CopyExcelDocToNew('deliver_town_houses_krs.xls','Сдам_таунхаусы_в_г.Красноярск');
  Excel:=OpenExcelDoc(XLSNew);
  Sheet:=Excel.ActiveSheet;

  Sheet.Range['A1']:='сдам в аренду жилье';
  Sheet.Range['C1']:='таунхаусы';

  Region:=Provider.FieldByName('Район').AsString;
  Sheet.Range['A4']:=Region;
  LastRow:=6;

  Repeat
    Sheet.Range['A'+IntToStr(LastRow-1)]:=Provider.FieldByName('Улица').AsString;
    Sheet.Range['B'+IntToStr(LastRow-1)]:=Provider.FieldByName('Ориентир').AsString;
    Sheet.Range['C'+IntToStr(LastRow-1)]:=Provider.FieldByName('Примечание').AsString;
    Sheet.Range['D'+IntToStr(LastRow-1)]:=Provider.FieldByName('Цена').AsString;
    Sheet.Range['E'+IntToStr(LastRow-1)]:=Provider.FieldByName('PHONE').AsString;
    ExtendPosProgressBar(BisKrieltReportsForm);
    Provider.Next;
    if Provider.Eof=True then Break;

    if (Provider.FieldByName('Район').AsString<>Region) then Begin
      Region:=Provider.FieldByName('Район').AsString;
      InsertExcelRows(Sheet,4,4,'L',LastRow);
      Sheet.Range['A'+IntToStr(LastRow)]:=Region;
      LastRow:=LastRow+1;
    End;
    InsertExcelRows(Sheet,5,5,'L',LastRow);
    Sheet.Rows[LastRow]:='';
    LastRow:=LastRow+1;
  Until False;

  Excel.Visible:=True;
  Provider.Close;

  {_____________________________________________________________________________}

  Provider.Free;

end;

procedure ExportDeliverOutsideHousesCottages(BisKrieltReportsForm: TBisKrieltReportsForm; DateBegin, DateEnd: TDate);
var Provider: TBisProvider;
  LastRow: Integer;
  Excel, Sheet: Variant;
  XLSNew, SDateBegin, SDateEnd: String;
begin

  SDateBegin:=ConvertDateTime(DateBegin,'Begin');
  SDateEnd:=ConvertDateTime(DateEnd,'End');

  Provider:=TBisProvider.Create(nil);
  Provider.ProviderName:='S_DELIVER_OUTSIDE_HOUSES_EXPORT';      //

  with Provider, FieldNames do begin
    AddInvisible('OBJECT_ID');          //
    AddInvisible('VIEW_ID');            //
    AddInvisible('TYPE_ID');            //
    AddInvisible('OPERATION_ID');       //
    AddInvisible('DATE_BEGIN');         //
    AddInvisible('ACCOUNT_ID');         //
    AddInvisible('USER_NAME');          //
    AddInvisible('PHONE');              //
    AddInvisible('Населенный пункт');   //
    AddInvisible('Направление');   //
    AddInvisible('Примечание');   //
    AddInvisible('Цена');   //
  end;

  with Provider, FilterGroups do begin
    Add(foAnd);
    Items[0].Filters.Add('DATE_BEGIN',fcEqualGreater,SDateBegin);
    Items[0].Filters.Add('DATE_BEGIN',fcEqualLess,SDateEnd);
  end;

  with Provider, Orders do begin
    Add('DATE_BEGIN');              //
  end;

  Provider.Open;
  Provider.First;
  BisKrieltReportsForm.Height:=463;
  SetProgressBarToNull(BisKrieltReportsForm, Provider);

  {_____________________________________________________________________________}

  XLSNew:=CopyExcelDocToNew('deliver_outside_houses.xls','Сдам_загородные_дома,_коттеджи');
  Excel:=OpenExcelDoc(XLSNew);
  Sheet:=Excel.ActiveSheet;

  Sheet.Range['A1']:='сдам в аренду жилье';
  Sheet.Range['C1']:='загородные дома, коттеджи';

  LastRow:=5;

  Repeat
    Sheet.Range['A'+IntToStr(LastRow-1)]:=Provider.FieldByName('Населенный пункт').AsString;
    Sheet.Range['B'+IntToStr(LastRow-1)]:=Provider.FieldByName('Направление').AsString;
    Sheet.Range['C'+IntToStr(LastRow-1)]:=Provider.FieldByName('Примечание').AsString;
    Sheet.Range['D'+IntToStr(LastRow-1)]:=Provider.FieldByName('Цена').AsString;
    Sheet.Range['E'+IntToStr(LastRow-1)]:=Provider.FieldByName('PHONE').AsString;
    ExtendPosProgressBar(BisKrieltReportsForm);
    Provider.Next;
    if Provider.Eof=True then Break;

    InsertExcelRows(Sheet,4,4,'L',LastRow);
    Sheet.Rows[LastRow]:='';
    LastRow:=LastRow+1;
  Until False;

  Excel.Visible:=True;
  Provider.Close;

  {_____________________________________________________________________________}

  Provider.Free;

end;

procedure ExportDeliverDatchas(BisKrieltReportsForm: TBisKrieltReportsForm; DateBegin, DateEnd: TDate);
var Provider: TBisProvider;
  LastRow: Integer;
  Excel, Sheet: Variant;
  XLSNew, SDateBegin, SDateEnd: String;
begin

  SDateBegin:=ConvertDateTime(DateBegin,'Begin');
  SDateEnd:=ConvertDateTime(DateEnd,'End');

  Provider:=TBisProvider.Create(nil);
  Provider.ProviderName:='S_DELIVER_DATCHAS_EXPORT';      //

  with Provider, FieldNames do begin
    AddInvisible('OBJECT_ID');          //
    AddInvisible('VIEW_ID');            //
    AddInvisible('TYPE_ID');            //
    AddInvisible('OPERATION_ID');       //
    AddInvisible('DATE_BEGIN');         //
    AddInvisible('ACCOUNT_ID');         //
    AddInvisible('USER_NAME');          //
    AddInvisible('PHONE');              //
    AddInvisible('Населенный пункт');   //
    AddInvisible('Направление');   //
    AddInvisible('Примечание');   //
    AddInvisible('Цена');   //
  end;

  with Provider, FilterGroups do begin
    Add(foAnd);
    Items[0].Filters.Add('DATE_BEGIN',fcEqualGreater,SDateBegin);
    Items[0].Filters.Add('DATE_BEGIN',fcEqualLess,SDateEnd);
  end;

  with Provider, Orders do begin
    Add('DATE_BEGIN');              //
  end;

  Provider.Open;
  Provider.First;
  BisKrieltReportsForm.Height:=463;
  SetProgressBarToNull(BisKrieltReportsForm, Provider);

  {_____________________________________________________________________________}

  XLSNew:=CopyExcelDocToNew('deliver_datchas.xls','Сдам_дачи');
  Excel:=OpenExcelDoc(XLSNew);
  Sheet:=Excel.ActiveSheet;

  Sheet.Range['A1']:='сдам в аренду жилье';
  Sheet.Range['C1']:='дачи';

  LastRow:=5;

  Repeat
    Sheet.Range['A'+IntToStr(LastRow-1)]:=Provider.FieldByName('Населенный пункт').AsString;
    Sheet.Range['B'+IntToStr(LastRow-1)]:=Provider.FieldByName('Направление').AsString;
    Sheet.Range['C'+IntToStr(LastRow-1)]:=Provider.FieldByName('Примечание').AsString;
    Sheet.Range['D'+IntToStr(LastRow-1)]:=Provider.FieldByName('Цена').AsString;
    Sheet.Range['E'+IntToStr(LastRow-1)]:=Provider.FieldByName('PHONE').AsString;
    ExtendPosProgressBar(BisKrieltReportsForm);
    Provider.Next;
    if Provider.Eof=True then Break;

    InsertExcelRows(Sheet,4,4,'L',LastRow);
    Sheet.Rows[LastRow]:='';
    LastRow:=LastRow+1;
  Until False;

  Excel.Visible:=True;
  Provider.Close;

  {_____________________________________________________________________________}

  Provider.Free;

end;

end.
